From 96ab31cece78cbefbb1ceaed1775ae9a8c401113 Mon Sep 17 00:00:00 2001
From: Yongxin Liu <yongxin.liu@windriver.com>
Date: Sat, 5 Jan 2019 18:29:15 +0800
Subject: [PATCH 2/2] edac: fix memory leak issue when driver module is
 removing.

Issue description:
1) For unpopulated DIMM, structures have been acclocated by edac_mc_alloc()
and the memory resources are not freed when unloading driver.
2) For all DIMMS, mci->dimms, mci->csrows, mci->csrow->channels and
mci->csrow->channels[idx] are not freed.

Signed-off-by: Yongxin Liu <yongxin.liu@windriver.com>
---
 drivers/edac/edac_mc_sysfs.c | 26 +++++++++++++++++++++-----
 1 file changed, 21 insertions(+), 5 deletions(-)

diff --git a/drivers/edac/edac_mc_sysfs.c b/drivers/edac/edac_mc_sysfs.c
index 20374b8..907faed 100644
--- a/drivers/edac/edac_mc_sysfs.c
+++ b/drivers/edac/edac_mc_sysfs.c
@@ -452,14 +452,23 @@ static int edac_create_csrow_objects(struct mem_ctl_info *mci)
 
 static void edac_delete_csrow_objects(struct mem_ctl_info *mci)
 {
-	int i;
+	int i, chn;
 	struct csrow_info *csrow;
 
 	for (i = mci->nr_csrows - 1; i >= 0; i--) {
 		csrow = mci->csrows[i];
-		if (!nr_pages_per_csrow(csrow))
-			continue;
-		device_unregister(&mci->csrows[i]->dev);
+
+		/* free rank_info structures and channel pointers */
+		for (chn = 0; chn < mci->num_cschannel; chn++) {
+			kfree(csrow->channels[chn]);
+		}
+		kfree(csrow->channels);
+
+		if (!device_is_registered(&mci->csrows[i]->dev)) {
+			/* free unregistered csrows device*/
+			kfree(mci->csrows[i]);
+		} else
+			device_unregister(&mci->csrows[i]->dev);
 	}
 }
 #endif
@@ -1019,15 +1028,22 @@ void edac_remove_sysfs_mci_device(struct mem_ctl_info *mci)
 #endif
 #ifdef CONFIG_EDAC_LEGACY_SYSFS
 	edac_delete_csrow_objects(mci);
+	kfree(mci->csrows);
 #endif
 
 	for (i = 0; i < mci->tot_dimms; i++) {
 		struct dimm_info *dimm = mci->dimms[i];
-		if (dimm->nr_pages == 0)
+		if (dimm->nr_pages == 0) {
+			/* free unppopulated dimm_info structure */
+			kfree(mci->dimms[i]);
 			continue;
+		}
 		edac_dbg(0, "removing device %s\n", dev_name(&dimm->dev));
 		device_unregister(&dimm->dev);
 	}
+
+	/* free all dimm_info pointers */
+	kfree(mci->dimms);
 }
 
 void edac_unregister_sysfs(struct mem_ctl_info *mci)
-- 
2.7.4

