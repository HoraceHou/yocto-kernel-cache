From 4e6e043bf9d23954680b2ca39fe1fc512e5ecb9c Mon Sep 17 00:00:00 2001
From: Xiaolei Wang <xiaolei.wang@windriver.com>
Date: Tue, 14 Jan 2020 19:39:27 +0800
Subject: [PATCH] ASoC: fsl_sai: Fix an out of bounds access bug in
 fsl_sai_calc_dl_off()

Solve the occasional crash after system startup.
This is an out-of-bounds problem caused by imx8mm-sai driver loading.
fsl_sai_calc_dl_off will call the linux library function find_next_bit
for bit operations, but we need to pass in unsigned long pointers,
otherwise passing in u32 pointers under 64 bits will cause out-of-bounds
memory access, which will cause the system to access this memory trigger
Abnormal crash. By turning on kernel debug, you can find that
there are cross-boundary problems during system startup.

CPU: 3 PID: 1 Comm: swapper/0 Not tainted 4.18.45-yocto-standard #1
Hardware name: FSL i.MX8MM EVK board (DT)
Call trace:
 dump_backtrace+0x0/0x280
 show_stack+0x28/0x38
 dump_stack+0xa0/0xd0
 print_address_description+0x68/0x260
 kasan_report+0x174/0x350
 __asan_load8+0x80/0xa0
 find_next_bit+0x3c/0xd0
 fsl_sai_calc_dl_off+0x2c/0x68
 fsl_sai_read_dlcfg+0x1c4/0x3c0
 fsl_sai_probe+0x3bc/0xa40
 platform_drv_probe+0x8c/0x108
 driver_probe_device+0x324/0x4a0
 __driver_attach+0x1a4/0x1c8
 bus_for_each_dev+0x118/0x180
 driver_attach+0x3c/0x48
 bus_add_driver+0x2f0/0x328
 driver_register+0xe8/0x220
 __platform_driver_register+0x88/0x98
 fsl_sai_driver_init+0x24/0x2c
 do_one_initcall+0xc0/0x438
 kernel_init_freeable+0x550/0x6e4
 kernel_init+0x1c/0x160
 ret_from_fork+0x10/0x18

The buggy address belongs to the page:
page:ffff7e0001a927c0 count:0 mapcount:0 mapping:0000000000000000 index:0x0
flags: 0x0()
raw: 0000000000000000 ffff7e0001a927c8 ffff7e0001a927c8 0000000000000000
raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000
page dumped because: kasan: bad access detected

Memory state around the buggy address:
 ffff80006a49f580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 ffff80006a49f600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>ffff80006a49f680: 00 00 f1 f1 f1 f1 04 f2 f2 f2 f2 f2 f2 f2 04 f2
                                     ^
 ffff80006a49f700: f2 f2 f2 f2 f2 f2 04 f2 f2 f2 00 00 00 00 00 00
 ffff80006a49f780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
==================================================================
Disabling lock debugging due to kernel taint

Signed-off-by: Xiaolei Wang <xiaolei.wang@windriver.com>
---
 sound/soc/fsl/fsl_sai.c | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/sound/soc/fsl/fsl_sai.c b/sound/soc/fsl/fsl_sai.c
index 6baae1c6196f..c5752e131d49 100644
--- a/sound/soc/fsl/fsl_sai.c
+++ b/sound/soc/fsl/fsl_sai.c
@@ -1267,9 +1267,10 @@ MODULE_DEVICE_TABLE(of, fsl_sai_ids);
 static unsigned int fsl_sai_calc_dl_off(unsigned int* dl_mask)
 {
 	int fbidx, nbidx, offset;
-
-	fbidx = find_first_bit((const unsigned long *)dl_mask, 8);
-	nbidx = find_next_bit((const unsigned long *)dl_mask, 8, fbidx+1);
+	unsigned long ulTemp = 0;
+	ulTemp = *dl_mask;
+	fbidx = find_first_bit(&ulTemp, 8);
+	nbidx = find_next_bit(&ulTemp, 8, fbidx+1);
 	offset = nbidx - fbidx - 1;
 
 	return (offset < 0 || offset >= 7 ? 0 : offset);
-- 
2.17.1

