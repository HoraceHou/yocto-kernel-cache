From 947afc692d87afb3c11d41553e3e0f6f16dc0555 Mon Sep 17 00:00:00 2001
From: Xulin Sun <xulin.sun@windriver.com>
Date: Wed, 25 Apr 2018 09:45:55 +0800
Subject: [PATCH 2/5] ARM:ls1021a: remove gianfar snooping support in Rev1 soc

There is a HW defect about snooping in ls1021a IOT Rev1 soc, so remove
the snooping attribute.

Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 arch/arm/mach-imx/mach-ls1021a.c         | 85 ++++++++++++++++++++++++++++++++
 drivers/net/ethernet/freescale/gianfar.c | 13 +++++
 2 files changed, 98 insertions(+)

diff --git a/arch/arm/mach-imx/mach-ls1021a.c b/arch/arm/mach-imx/mach-ls1021a.c
index 3222694..76e5b86 100644
--- a/arch/arm/mach-imx/mach-ls1021a.c
+++ b/arch/arm/mach-imx/mach-ls1021a.c
@@ -11,6 +11,9 @@
 #include <linux/of_platform.h>
 #include <linux/phy.h>
 #include <linux/phy_fixed.h>
+#include <linux/of_address.h>
+#include <linux/of.h>
+#include <linux/sys_soc.h>
 #include "common.h"
 
 #ifdef CONFIG_FIXED_PHY
@@ -44,6 +47,87 @@ static int __init of_add_fixed_phys(void)
 arch_initcall(of_add_fixed_phys);
 #endif /* CONFIG_FIXED_PHY */
 
+#define	DCFG_CCSR_SVR 0x0A4
+
+/**
+ * ls1021a_get_revision - Get ls1021a silicon revision
+ *
+ * Return: Silicon version or -1 otherwise
+ */
+static int __init ls1021a_get_revision(void)
+{
+	struct device_node *np;
+	void __iomem *ls1021a_devcfg_base;
+	u32 revision;
+
+	np = of_find_compatible_node(NULL, NULL, "fsl,ls1021a-dcfg");
+	if (!np) {
+		pr_err("%s: no devcfg node found\n", __func__);
+		return -1;
+	}
+
+	ls1021a_devcfg_base = of_iomap(np, 0);
+	of_node_put(np);
+	if (!ls1021a_devcfg_base) {
+		pr_err("%s: Unable to map I/O memory\n", __func__);
+		return -1;
+	}
+
+	revision = ioread32be(ls1021a_devcfg_base + DCFG_CCSR_SVR) & 0x1f;
+
+	iounmap(ls1021a_devcfg_base);
+
+	return revision;
+}
+
+struct device * __init ls1021a_soc_device_init(void)
+{
+	struct soc_device_attribute *soc_dev_attr;
+	struct soc_device *soc_dev;
+	struct device_node *root;
+	int ret;
+	u32 revision;
+
+	soc_dev_attr = kzalloc(sizeof(*soc_dev_attr), GFP_KERNEL);
+	if (!soc_dev_attr)
+		return NULL;
+
+	soc_dev_attr->family = "Freescale LS 1021A";
+
+	root = of_find_node_by_path("/");
+	ret = of_property_read_string(root, "model", &soc_dev_attr->machine);
+	of_node_put(root);
+	if (ret)
+		goto free_soc;
+
+	revision = ls1021a_get_revision();
+	soc_dev_attr->revision = kasprintf(GFP_KERNEL, "%d.%d", (revision >> 4) & 0xf, revision & 0xf);
+
+	if (!soc_dev_attr->revision)
+		goto free_soc;
+
+	soc_dev = soc_device_register(soc_dev_attr);
+	if (IS_ERR(soc_dev))
+		goto free_rev;
+
+	return soc_device_to_device(soc_dev);
+
+free_rev:
+	kfree(soc_dev_attr->revision);
+free_soc:
+	kfree(soc_dev_attr);
+	return NULL;
+}
+
+static void __init ls1021a_init_machine(void)
+{
+	struct device *parent;
+
+	parent = ls1021a_soc_device_init();
+	if (parent == NULL)
+		pr_warn("failed to initialize soc device\n");
+}
+
 static const char * const ls1021a_dt_compat[] __initconst = {
 	"fsl,ls1021a",
 	NULL,
@@ -51,5 +135,6 @@ static int __init of_add_fixed_phys(void)
 
 DT_MACHINE_START(LS1021A, "Freescale LS1021A")
 	.smp		= smp_ops(ls1021a_smp_ops),
+	.init_machine   = ls1021a_init_machine,
 	.dt_compat	= ls1021a_dt_compat,
 MACHINE_END
diff --git a/drivers/net/ethernet/freescale/gianfar.c b/drivers/net/ethernet/freescale/gianfar.c
index 02d9501..fcc1239 100644
--- a/drivers/net/ethernet/freescale/gianfar.c
+++ b/drivers/net/ethernet/freescale/gianfar.c
@@ -104,6 +104,7 @@
 #include <linux/of_net.h>
 #include <linux/of_address.h>
 #include <linux/of_irq.h>
+#include <linux/sys_soc.h>
 
 #include "gianfar.h"
 
@@ -1121,6 +1122,11 @@ static void __gfar_detect_errata_85xx(struct gfar_private *priv)
 }
 #endif
 
+static struct soc_device_attribute soc_ls1021a_rev_matches[] = {
+	{ .machine = "LS1021A IOT Board", .family = "Freescale LS 1021A", .revision = "1.0", },
+	{ },
+};
+
 static void gfar_detect_errata(struct gfar_private *priv)
 {
 	struct device *dev = &priv->ofdev->dev;
@@ -1251,6 +1257,9 @@ static void gfar_hw_init(struct gfar_private *priv)
 	 */
 	attrs = ATTR_INIT_SETTINGS;
 
+	if (soc_device_match(soc_ls1021a_rev_matches))
+		attrs &= ~ATTR_SNOOPING;
+
 	if (priv->bd_stash_en)
 		attrs |= ATTR_BDSTASH;
 
@@ -1590,6 +1599,8 @@ static void gfar_start_wol_filer(struct gfar_private *priv)
 	/* Initialize DMACTRL to have WWR and WOP */
 	tempval = gfar_read(&regs->dmactrl);
 	tempval |= DMACTRL_INIT_SETTINGS;
+	if (soc_device_match(soc_ls1021a_rev_matches))
+		tempval &= ~ATTR_SNOOPING;
 	gfar_write(&regs->dmactrl, tempval);
 
 	/* Make sure we aren't stopped */
@@ -2059,6 +2070,8 @@ void gfar_start(struct gfar_private *priv)
 	/* Initialize DMACTRL to have WWR and WOP */
 	tempval = gfar_read(&regs->dmactrl);
 	tempval |= DMACTRL_INIT_SETTINGS;
+	if (soc_device_match(soc_ls1021a_rev_matches))
+		tempval &= ~ATTR_SNOOPING;
 	if (priv->dma_endian_le)
 		tempval |= DMACTRL_LE;
 	gfar_write(&regs->dmactrl, tempval);
-- 
1.8.5.2.233.g932f7e4

