From 349d2b3dc9ee89d2627ff0bd8a4cf14829a706e3 Mon Sep 17 00:00:00 2001
From: Xulin Sun <xulin.sun@windriver.com>
Date: Mon, 3 Jun 2019 09:44:40 +0800
Subject: [PATCH 1/2] qman: avoid qman frame queue NULL operation

In the situation, when kdump runs the dump-capture kernel with maxcpus=1 and booting
physical cpu !=0. there is no qman frame queue obtained. Here add the check and to fix
below call trace:

Unable to handle kernel NULL pointer dereference at virtual address 0000000000000008
Mem abort info:
ESR = 0x96000004
Exception class = DABT (current EL), IL = 32 bits
SET = 0, FnV = 0
EA = 0, S1PTW = 0
Data abort info:
ISV = 0, ISS = 0x00000004
CM = 0, WnR = 0
[0000000000000008] user address but active_mm is swapper
Internal error: Oops: 96000004 1 PREEMPT SMP
Modules linked in:
Process swapper/0 (pid: 1, stack limit = 0x(___ptrval___))
CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.18.37-yocto-standard #1
Hardware name: LS1043A RDB Board (DT)
pstate: 80000085 (Nzcv daIf -PAN -UAO)
pc : __poll_portal_slow+0x6ec/0x9e8
lr : portal_isr+0x1f0/0x2a8
sp : ffff000008003c80
x29: ffff000008003c80 x28: ffff800035d58000
x27: ffff000008eef018 x26: 0000000000000000
x25: ffff00000910f4e0 x24: 0000000000000006
x23: ffff000009014b88 x22: ffff80003bd75400
x21: ffff80003bd75440 x20: ffff000008d5d6a8
x19: 0000000000010000 x18: 0000000000000001
x17: 0000000000000000 x16: 0000000000000000
x15: ffffffffffffffff x14: ffff000008f086c8
x13: ffffff0000000000 x12: 0000000000000000
x11: 000000000000001a x10: 0000000000000007
x9 : 0000000000000040 x8 : 0000000000000000
x7 : 0000000000000000 x6 : 0000000000000000
x5 : 0000000000000000 x4 : ffff000008003eb0
x3 : 0000000000000000 x2 : ffff000008003d98
x1 : 0000000000000000 x0 : ffff80003bd75400
Call trace:
__poll_portal_slow+0x6ec/0x9e8
portal_isr+0x1f0/0x2a8
__handle_irq_event_percpu+0x78/0x298
handle_irq_event_percpu+0x40/0x98
handle_irq_event+0x50/0x80
handle_fasteoi_irq+0xc0/0x178
generic_handle_irq+0x34/0x50
__handle_domain_irq+0x6c/0xc0
gic_handle_irq+0x64/0xc0
el1_irq+0xb0/0x128
_raw_spin_unlock_irqrestore+0x34/0x60
qman_p_irqsource_add+0x9c/0xb8
init_pcfg+0x54/0xa8
qman_init+0xb10/0xcbc
qbman_init+0x48/0x178
do_one_initcall+0x68/0x248
kernel_init_freeable+0x2d4/0x3cc
kernel_init+0x18/0x104
ret_from_fork+0x10/0x1c
Code: 910463e2 aa1603e0 f8617863 aa0303e1 (f9400463)

Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index 7040d2751927..1b7a537cc23a 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -1118,7 +1118,8 @@ static u32 __poll_portal_slow(struct qman_portal *p, u32 is)
 #else
 			fq = (void *)(uintptr_t)be32_to_cpu(msg->ern.tag);
 #endif
-			fq->cb.ern(p, fq, &swapped_msg);
+			if (fq && fq->cb.ern)
+				fq->cb.ern(p, fq, &swapped_msg);
 		}
 		num++;
 		qm_mr_next(&p->p);
-- 
2.17.1

