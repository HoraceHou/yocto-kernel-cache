From 1974178cf6d7971de4882fd1a4bc5869f4bdd4cf Mon Sep 17 00:00:00 2001
From: Wang Quanyang <quanyang.wang@windriver.com>
Date: Tue, 15 May 2018 22:27:25 -0400
Subject: [PATCH 1/2] Revert "PCI: imx6: Remove LTSSM disable workaround"

This reverts commit a71280722eeb ("PCI: imx6: Remove LTSSM disable workaround").

The commit 3e3e406e3807 ("PCI: imx6: Put LTSSM in "Detect" state before disabling it")
fix a boot hang when bootloader enable pci linkup. And later the commit a71280722eeb
("PCI: imx6: Remove LTSSM disable workaround") delete this workaround as it says the bootloader
should take charge of cleaning machine state.

But the similar scene happens as kexec runs. The capture kernel will hang because
the boot kernel doesn't clean machine state. So we need to take back this workaround.

Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/pci/dwc/pci-imx6.c | 30 ++++++++++++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/drivers/pci/dwc/pci-imx6.c b/drivers/pci/dwc/pci-imx6.c
index 6ec6cf7..0b38da4 100644
--- a/drivers/pci/dwc/pci-imx6.c
+++ b/drivers/pci/dwc/pci-imx6.c
@@ -334,6 +334,9 @@ static int imx6q_pcie_abort_handler(unsigned long addr,
 
 static void imx6_pcie_assert_core_reset(struct imx6_pcie *imx6_pcie)
 {
+	struct dw_pcie *pci = imx6_pcie->pci;
+	u32 val, gpr1, gpr12;
+
 	switch (imx6_pcie->variant) {
 	case IMX7D:
 
@@ -363,6 +366,33 @@ static void imx6_pcie_assert_core_reset(struct imx6_pcie *imx6_pcie)
 				   IMX6Q_GPR1_PCIE_SW_RST);
 		break;
 	case IMX6Q:
+		/*
+		 * If the bootloader already enabled the link we need some
+		 * special handling to get the core back into a state where
+		 * it is safe to touch it for configuration.  As there is
+		 * no dedicated reset signal wired up for MX6QDL, we need
+		 * to manually force LTSSM into "detect" state before
+		 * completely disabling LTSSM, which is a prerequisite for
+		 * core configuration.
+		 *
+		 * If both LTSSM_ENABLE and REF_SSP_ENABLE are active we
+		 * have a strong indication that the bootloader activated
+		 * the link.
+		 */
+		regmap_read(imx6_pcie->iomuxc_gpr, IOMUXC_GPR1, &gpr1);
+		regmap_read(imx6_pcie->iomuxc_gpr, IOMUXC_GPR12, &gpr12);
+
+		if ((gpr1 & IMX6Q_GPR1_PCIE_REF_CLK_EN) &&
+		    (gpr12 & IMX6Q_GPR12_PCIE_CTL_2)) {
+			val = dw_pcie_readl_dbi(pci, PCIE_PL_PFLR);
+			val &= ~PCIE_PL_PFLR_LINK_STATE_MASK;
+			val |= PCIE_PL_PFLR_FORCE_LINK;
+			dw_pcie_writel_dbi(pci, PCIE_PL_PFLR, val);
+
+			regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR12,
+					   IMX6Q_GPR12_PCIE_CTL_2, 0 << 10);
+		}
+
 		regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR1,
 				   IMX6Q_GPR1_PCIE_TEST_PD, 1 << 18);
 		regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR1,
-- 
1.8.5.2.233.g932f7e4

