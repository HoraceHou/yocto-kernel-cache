From a6d6e756650283e15ed7a6bcc295bc53778f13e9 Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Mon, 17 Jun 2019 17:19:57 +0800
Subject: [PATCH 2/2] regmap:debugfs:prevent create multiple entry for one map

Device driver may invoke syscon_node_to_regmap() to create a regmap,
then invoke regmap_attach_dev() to attach a device to this regmap.

Above sequence would invoke regmap_debugfs_init() twice for one regmap
instance. It will create 2 entry in debugfs for this regmap, and
lead following memory leak:

unreferenced object 0xa8d8c600 (size 64):
comm "swapper/0", pid 1, jiffies 4294937670 (age 284.270s)
hex dump (first 32 bytes):
64 75 6d 6d 79 2d 73 72 63 40 33 30 33 39 30 30 dummy-src@303900
30 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00..............
backtrace:
[<311bbb2b>] kmemleak_alloc+0x40/0x74
[<6c1dfdcc>] __kmalloc_track_caller+0x240/0x304
[<7b8ebad4>] kvasprintf+0x5c/0xc0
[<2d8607c0>] kasprintf+0x30/0x50
[<ca54245f>] regmap_debugfs_init+0x2bc/0x31c
[<63ddc33a>] __regmap_init+0x98c/0xaa8
[<268e0f82>] __regmap_init_mmio_clk+0x50/0x5c
[<d1d7c5cc>] of_syscon_register+0x180/0x238
[<1a952404>] syscon_node_to_regmap+0x54/0x84
[<132f73e5>] imx7_reset_probe+0x68/0xf4
[<fbcba9bc>] platform_drv_probe+0x58/0xa4
[<7223258a>] driver_probe_device+0x240/0x308
[<2d40e611>] __driver_attach+0x9c/0xd8
[<c64352e3>] bus_for_each_dev+0x74/0xb0
[<606e3b43>] driver_attach+0x28/0x30
[<d3a80ac5>] bus_add_driver+0x184/0x1ec

To prevent this, add one checking in regmap_debugfs_init(). If debugfs
entry already created, just finish the job.

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/base/regmap/regmap-debugfs.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/drivers/base/regmap/regmap-debugfs.c b/drivers/base/regmap/regmap-debugfs.c
index 87b562e49a43..2ae73cb78aa8 100644
--- a/drivers/base/regmap/regmap-debugfs.c
+++ b/drivers/base/regmap/regmap-debugfs.c
@@ -546,6 +546,12 @@ void regmap_debugfs_init(struct regmap *map, const char *name)
 		return;
 	}
 
+	/* If debugfs entry already created, just return */
+	if (map->debugfs) {
+		dev_dbg(map->dev, "already created debugfs entry\n");
+		return;
+	}
+
 	/* If we don't have the debugfs root yet, postpone init */
 	if (!regmap_debugfs_root) {
 		struct regmap_debugfs_node *node;
-- 
2.17.1

