From 0354f91cec30fef9a184ee41f952e828f6fa5dc5 Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@nxp.com>
Date: Fri, 4 Oct 2019 13:48:54 +0300
Subject: [PATCH 226/245] ocelot: Warn if cpu side interfaces are not up

commit 8c6cd4ba983246888060e910ead92e9ecb9ccdb4 from
http://source.codeaurora.org/external/qoriq/qoriq-components/linux.git

For correct usage of external switch ports the cpu
side ethernet interfaces - the switch's NPI port and
the pair etsec nedevice connected to it - must be brought
up first before bringing up any external switch port.
However the switchdev model doesn't enforce this restriction
and implementing it in the driver would require considerable
rework (not practical at this point).

So best we can do is to warn the user that the CPU side
interfaces need to be brought up manually. If not, L2
fwd-ing among external switch ports may work, but the
host has no way to know that it cannot use the external
switch ports for transmission and so it will attempt
to do so and hog the cpu by calling port xmit functions
that cannot send packets.

Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/net/ethernet/mscc/felix_board.c |  1 +
 drivers/net/ethernet/mscc/ocelot.c      | 15 +++++++++++++++
 drivers/net/ethernet/mscc/ocelot.h      |  1 +
 3 files changed, 17 insertions(+)

diff --git a/drivers/net/ethernet/mscc/felix_board.c b/drivers/net/ethernet/mscc/felix_board.c
index 04e3025c437f..cdea8fe61622 100644
--- a/drivers/net/ethernet/mscc/felix_board.c
+++ b/drivers/net/ethernet/mscc/felix_board.c
@@ -417,6 +417,7 @@ static void felix_setup_port_inj(struct ocelot_port *port,
 		felix_register_rx_handler(port->ocelot, pair_ndev);
 		/* save for cleanup */
 		port->cpu_inj_handler_data = pair_ndev;
+		ocelot->cpu_port_ndev = port->dev;
 	} else {
 		/* set frame injection handler on non-NPI ports */
 		port->cpu_inj_handler = felix_cpu_inj_handler;
diff --git a/drivers/net/ethernet/mscc/ocelot.c b/drivers/net/ethernet/mscc/ocelot.c
index ec3acaaed07c..4c114997ca65 100644
--- a/drivers/net/ethernet/mscc/ocelot.c
+++ b/drivers/net/ethernet/mscc/ocelot.c
@@ -470,6 +470,21 @@ static int ocelot_port_open(struct net_device *dev)
 	struct ocelot *ocelot = port->ocelot;
 	int err;
 
+	if (ocelot->cpu_port_ndev) {
+		if (port->chip_port == ocelot->cpu_port_id) {
+			struct net_device *pair_ndev;
+
+			pair_ndev = port->cpu_inj_handler_data;
+			if (pair_ndev && !netif_running(pair_ndev))
+				netdev_warn(dev, "%s not up!\n",
+					    netdev_name(pair_ndev));
+		} else {
+			if (!netif_running(ocelot->cpu_port_ndev))
+				netdev_warn(dev, "%s not up!\n",
+					    netdev_name(ocelot->cpu_port_ndev));
+		}
+	}
+
 	if (!port->phy)	{
 		struct phy_device *phydev = NULL;
 		struct device_node *phy_node;
diff --git a/drivers/net/ethernet/mscc/ocelot.h b/drivers/net/ethernet/mscc/ocelot.h
index 40f26cf1dc34..a6e945ac277b 100644
--- a/drivers/net/ethernet/mscc/ocelot.h
+++ b/drivers/net/ethernet/mscc/ocelot.h
@@ -574,6 +574,7 @@ struct ocelot {
 	struct list_head skbs;
 
 	void (*port_pcs_init)(struct ocelot_port *port);
+	struct net_device *cpu_port_ndev;
 
 	struct ptp_clock_info ptp_caps;
 	struct ptp_clock *clock;
-- 
2.17.1

