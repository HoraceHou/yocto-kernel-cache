From 086532b0645df7b45efe87453ad6fcf1f5aa5190 Mon Sep 17 00:00:00 2001
From: Yangbo Lu <yangbo.lu@nxp.com>
Date: Fri, 26 Jul 2019 19:25:18 +0800
Subject: [PATCH 196/245] ocelot: add VCAP IS2 rule to trap PTP Ethernet frames

commit 8ad6470b705380d8593d33d5860dae69d3c7adf7 from
http://source.codeaurora.org/external/qoriq/qoriq-components/linux.git

All the PTP messages over Ethernet have etype 0x88f7 on them.
Use etype as the key to trap PTP messages.

Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/net/ethernet/mscc/ocelot.c      | 35 +++++++++++++++++++++++++
 drivers/net/ethernet/mscc/ocelot_vcap.h |  3 ++-
 2 files changed, 37 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/mscc/ocelot.c b/drivers/net/ethernet/mscc/ocelot.c
index c8b5bc67e55d..ffc35e02b807 100644
--- a/drivers/net/ethernet/mscc/ocelot.c
+++ b/drivers/net/ethernet/mscc/ocelot.c
@@ -1713,8 +1713,35 @@ int ocelot_probe_port(struct ocelot *ocelot, u8 port,
 }
 EXPORT_SYMBOL(ocelot_probe_port);
 
+static struct ocelot_ace_rule *ocelot_ace_ptp_rule(struct ocelot *ocelot)
+{
+	struct ocelot_ace_rule *rule;
+
+	rule = kzalloc(sizeof(*rule), GFP_KERNEL);
+	if (!rule)
+		return rule;
+
+	/* Entry for PTP over Ethernet (etype 0x88f7)
+	 * Action: trap to CPU port
+	 */
+	rule->ocelot = ocelot;
+	rule->prio = 1;
+	rule->type = OCELOT_ACE_TYPE_ETYPE;
+	/* Available on all ingress port except CPU port */
+	rule->ingress_port = ~BIT(ocelot->num_phys_ports);
+	rule->dmac_mc= OCELOT_VCAP_BIT_1;
+	rule->frame.etype.etype.value[0] = 0x88;
+	rule->frame.etype.etype.value[1] = 0xf7;
+	rule->frame.etype.etype.mask[0] = 0xff;
+	rule->frame.etype.etype.mask[1] = 0xff;
+	rule->action = OCELOT_ACL_ACTION_TRAP;
+
+	return rule;
+}
+
 int ocelot_init(struct ocelot *ocelot)
 {
+	struct ocelot_ace_rule *ptp_rule;
 	u32 port;
 	int i, cpu = ocelot->num_phys_ports;
 	char queue_name[32];
@@ -1747,6 +1774,11 @@ int ocelot_init(struct ocelot *ocelot)
 	ocelot_vlan_init(ocelot);
 	ocelot_ace_init(ocelot);
 
+	ptp_rule = ocelot_ace_ptp_rule(ocelot);
+	if (!ptp_rule)
+		return -ENOMEM;
+	ocelot_ace_rule_offload_add(ptp_rule);
+
 	for (port = 0; port < ocelot->num_phys_ports; port++) {
 		/* Clear all counters (5 groups) */
 		ocelot_write(ocelot, SYS_STAT_CFG_STAT_VIEW(port) |
@@ -1856,9 +1888,12 @@ EXPORT_SYMBOL(ocelot_init);
 
 void ocelot_deinit(struct ocelot *ocelot)
 {
+	struct ocelot_ace_rule *rule = container_of(&ocelot, struct ocelot_ace_rule, ocelot);
+
 	cancel_delayed_work(&ocelot->stats_work);
 	destroy_workqueue(ocelot->stats_queue);
 	mutex_destroy(&ocelot->stats_lock);
+	ocelot_ace_rule_offload_del(rule);
 	ocelot_ace_deinit();
 }
 EXPORT_SYMBOL(ocelot_deinit);
diff --git a/drivers/net/ethernet/mscc/ocelot_vcap.h b/drivers/net/ethernet/mscc/ocelot_vcap.h
index e22eac1da783..20379939f9cb 100644
--- a/drivers/net/ethernet/mscc/ocelot_vcap.h
+++ b/drivers/net/ethernet/mscc/ocelot_vcap.h
@@ -25,7 +25,8 @@
 #define VCAP_IS2_CNT 64
 #define VCAP_IS2_ENTRY_WIDTH 376
 #define VCAP_IS2_ACTION_WIDTH 99
-#define VCAP_PORT_CNT 11
+/* TODO: Support different VCAP_PORT_CNT values */
+#define VCAP_PORT_CNT 6
 
 /* IS2 half key types */
 #define IS2_TYPE_ETYPE 0
-- 
2.17.1

