From 2fc3892ddb389660e8f4d13b8354201131115040 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Tue, 19 Nov 2019 14:18:04 +0800
Subject: [PATCH 11/40] Revert "can: xilinx: fix warnings in the driver"

This reverts commit a0e68ba2cf1c661b15c2c08a48ac09a051cfb25f.
---
 drivers/net/can/xilinx_can.c | 29 +++++++++++++++--------------
 1 file changed, 15 insertions(+), 14 deletions(-)

diff --git a/drivers/net/can/xilinx_can.c b/drivers/net/can/xilinx_can.c
index 07f1fe5c9c8a..1dfa0a0a7504 100644
--- a/drivers/net/can/xilinx_can.c
+++ b/drivers/net/can/xilinx_can.c
@@ -249,7 +249,7 @@ struct xcan_priv {
 	struct napi_struct napi;
 	u32 (*read_reg)(const struct xcan_priv *priv, enum xcan_reg reg);
 	void (*write_reg)(const struct xcan_priv *priv, enum xcan_reg reg,
-			  u32 val);
+			u32 val);
 	struct device *dev;
 	void __iomem *reg_base;
 	unsigned long irq_flags;
@@ -302,7 +302,7 @@ struct xcan_devtype_data {
  * Write data to the paricular CAN register
  */
 static void xcan_write_reg_le(const struct xcan_priv *priv, enum xcan_reg reg,
-			      u32 val)
+			u32 val)
 {
 	iowrite32(val, priv->reg_base + reg);
 }
@@ -329,7 +329,7 @@ static u32 xcan_read_reg_le(const struct xcan_priv *priv, enum xcan_reg reg)
  * Write data to the paricular CAN register
  */
 static void xcan_write_reg_be(const struct xcan_priv *priv, enum xcan_reg reg,
-			      u32 val)
+			u32 val)
 {
 	iowrite32be(val, priv->reg_base + reg);
 }
@@ -401,7 +401,7 @@ static int xcan_set_bittiming(struct net_device *ndev)
 				XCAN_SR_CONFIG_MASK;
 	if (!is_config_mode) {
 		netdev_alert(ndev,
-			     "BUG! Cannot set bittiming - CAN is not in config mode\n");
+		     "BUG! Cannot set bittiming - CAN is not in config mode\n");
 		return -EPERM;
 	}
 
@@ -423,8 +423,8 @@ static int xcan_set_bittiming(struct net_device *ndev)
 	priv->write_reg(priv, XCAN_BTR_OFFSET, btr1);
 
 	netdev_dbg(ndev, "BRPR=0x%08x, BTR=0x%08x\n",
-		   priv->read_reg(priv, XCAN_BRPR_OFFSET),
-		   priv->read_reg(priv, XCAN_BTR_OFFSET));
+			priv->read_reg(priv, XCAN_BRPR_OFFSET),
+			priv->read_reg(priv, XCAN_BTR_OFFSET));
 
 	if (priv->quirks & CANFD_SUPPORT) {
 		/* Setting Baud Rate prescalar value in F_BRPR Register */
@@ -508,12 +508,12 @@ static int xcan_chip_start(struct net_device *ndev)
 	while (!(priv->read_reg(priv, XCAN_SR_OFFSET) & reg_sr_mask)) {
 		if (time_after(jiffies, timeout)) {
 			netdev_warn(ndev,
-				    "timed out for correct mode\n");
+				"timed out for correct mode\n");
 			return -ETIMEDOUT;
 		}
 	}
 	netdev_dbg(ndev, "status:#x%08x\n",
-		   priv->read_reg(priv, XCAN_SR_OFFSET));
+			priv->read_reg(priv, XCAN_SR_OFFSET));
 
 	priv->can.state = CAN_STATE_ERROR_ACTIVE;
 	return 0;
@@ -611,7 +611,7 @@ static int xcan_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 		id = ((cf->can_id & CAN_EFF_MASK) << XCAN_IDR_ID2_SHIFT) &
 			XCAN_IDR_ID2_MASK;
 		id |= (((cf->can_id & CAN_EFF_MASK) >>
-			(CAN_EFF_ID_BITS - CAN_SFF_ID_BITS)) <<
+			(CAN_EFF_ID_BITS-CAN_SFF_ID_BITS)) <<
 			XCAN_IDR_ID1_SHIFT) & XCAN_IDR_ID1_MASK;
 
 		/* The substibute remote TX request bit should be "1"
@@ -1133,7 +1133,7 @@ static void xcan_err_interrupt(struct net_device *ndev, u32 isr)
 	}
 
 	netdev_dbg(ndev, "%s: error status register:0x%x\n",
-		   __func__, priv->read_reg(priv, XCAN_ESR_OFFSET));
+			__func__, priv->read_reg(priv, XCAN_ESR_OFFSET));
 }
 
 /**
@@ -1384,12 +1384,12 @@ static int xcan_open(struct net_device *ndev)
 	ret = pm_runtime_get_sync(priv->dev);
 	if (ret < 0) {
 		netdev_err(ndev, "%s: pm_runtime_get failed(%d)\n",
-			   __func__, ret);
+				__func__, ret);
 		return ret;
 	}
 
 	ret = request_irq(ndev->irq, xcan_interrupt, priv->irq_flags,
-			  ndev->name, ndev);
+			ndev->name, ndev);
 	if (ret < 0) {
 		netdev_err(ndev, "irq allocation for CAN failed\n");
 		goto err;
@@ -1460,7 +1460,7 @@ static int xcan_close(struct net_device *ndev)
  * Return: 0 on success and failure value on error
  */
 static int xcan_get_berr_counter(const struct net_device *ndev,
-				 struct can_berr_counter *bec)
+					struct can_berr_counter *bec)
 {
 	struct xcan_priv *priv = netdev_priv(ndev);
 	int ret;
@@ -1468,7 +1468,7 @@ static int xcan_get_berr_counter(const struct net_device *ndev,
 	ret = pm_runtime_get_sync(priv->dev);
 	if (ret < 0) {
 		netdev_err(ndev, "%s: pm_runtime_get failed(%d)\n",
-			   __func__, ret);
+				__func__, ret);
 		return ret;
 	}
 
@@ -1481,6 +1481,7 @@ static int xcan_get_berr_counter(const struct net_device *ndev,
 	return 0;
 }
 
+
 static const struct net_device_ops xcan_netdev_ops = {
 	.ndo_open	= xcan_open,
 	.ndo_stop	= xcan_close,
-- 
2.17.1

