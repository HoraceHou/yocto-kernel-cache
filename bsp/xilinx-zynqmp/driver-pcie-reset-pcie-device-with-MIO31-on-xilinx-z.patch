From 649726fc3ffbf71329b16751f75e94650fb3f68c Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Tue, 8 Jan 2019 16:32:56 +0800
Subject: [PATCH 1/2] driver: pcie: reset pcie device with MIO31 on
 xilinx-zcu102 platform

On xilinx-zcu102 platform, when run kdump feature, an active pcie
device need to be reset with MIO31 so that the crash kernel is able
to boot up successfully.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm64/boot/dts/xilinx/zynqmp-zcu102-revA.dts |    1 +
 drivers/pci/controller/pcie-xilinx-nwl.c          |   33 +++++++++++++++++++++
 2 files changed, 34 insertions(+), 0 deletions(-)

diff --git a/arch/arm64/boot/dts/xilinx/zynqmp-zcu102-revA.dts b/arch/arm64/boot/dts/xilinx/zynqmp-zcu102-revA.dts
index cd35cda..e964cd8 100644
--- a/arch/arm64/boot/dts/xilinx/zynqmp-zcu102-revA.dts
+++ b/arch/arm64/boot/dts/xilinx/zynqmp-zcu102-revA.dts
@@ -802,6 +802,7 @@
 
 &pcie {
 	status = "okay";
+	reset-gpio = <&gpio 31 GPIO_ACTIVE_HIGH>;
 };
 
 &qspi {
diff --git a/drivers/pci/controller/pcie-xilinx-nwl.c b/drivers/pci/controller/pcie-xilinx-nwl.c
index 3113147..867ff69 100644
--- a/drivers/pci/controller/pcie-xilinx-nwl.c
+++ b/drivers/pci/controller/pcie-xilinx-nwl.c
@@ -21,6 +21,8 @@
 #include <linux/pci.h>
 #include <linux/platform_device.h>
 #include <linux/irqchip/chained_irq.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
 
 #include "../pci.h"
 
@@ -840,6 +842,31 @@ static int nwl_pcie_parse_dt(struct nwl_pcie *pcie,
 	{}
 };
 
+static int nwl_pcie_reset_ep_device(struct platform_device *pdev)
+{
+	struct device_node *node = pdev->dev.of_node;
+	int gpio;
+	int err;
+
+	gpio = of_get_named_gpio(node, "reset-gpio", 0);
+	if (!gpio_is_valid(gpio)) {
+		dev_err(&pdev->dev, "failed to parse reset gpio\n");
+		return gpio;
+	}
+
+	err = devm_gpio_request_one(&pdev->dev, gpio, GPIOF_OUT_INIT_HIGH,
+					"pcie reset gpio");
+	if (err)
+		return err;
+
+	udelay(2);
+	gpio_set_value(gpio, 0);
+	udelay(10);
+	gpio_set_value(gpio, 1);
+
+	return err;
+}
+
 static int nwl_pcie_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -851,6 +878,12 @@ static int nwl_pcie_probe(struct platform_device *pdev)
 	resource_size_t iobase = 0;
 	LIST_HEAD(res);
 
+	err = nwl_pcie_reset_ep_device(pdev);
+	if (err) {
+		dev_err(dev, "fail to reset pcie device\n");
+		return err;
+	}
+
 	bridge = devm_pci_alloc_host_bridge(dev, sizeof(*pcie));
 	if (!bridge)
 		return -ENODEV;
-- 
1.7.5.4

