From 8e4245b241ab5e02a87c41777f45e3a910286240 Mon Sep 17 00:00:00 2001
From: Amit Kumar Mahapatra <amit.kumar-mahapatra@xilinx.com>
Date: Wed, 27 Feb 2019 18:21:58 +0530
Subject: [PATCH 2/3] spi: Fix failures in Zynq and ZynqMP qspi drivers

There are failures in Zynq and ZynqMP qspi drivers due to
framework change in Linux version 4.19 for SPI-NOR and MTD.
This patch fixes the below mentioned issues in Zynq and ZynqMP
respectively

- Dummy was not getting set properly
- Stripe was not getting enabled properly

Upstream-Status: Backport

commit: 686cc90868d1ea3e915a66cface8f981069dacaf

Signed-off-by: Amit Kumar Mahapatra <amit.kumar-mahapatra@xilinx.com>
Acked-by: Naga Sureshkumar Relli <naga.sureshkumar.relli@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Jiping Ma <jiping.ma2@windriver.com>
---
 drivers/mtd/spi-nor/spi-nor.c  | 13 +++++++++++++
 drivers/spi/spi-mem.c          |  2 ++
 drivers/spi/spi-zynq-qspi.c    |  4 ++++
 drivers/spi/spi-zynqmp-gqspi.c |  8 ++++----
 include/linux/spi/spi.h        |  5 ++++-
 5 files changed, 27 insertions(+), 5 deletions(-)

diff --git a/drivers/mtd/spi-nor/spi-nor.c b/drivers/mtd/spi-nor/spi-nor.c
index c21f47ba2eef..f2536dd09ae0 100644
--- a/drivers/mtd/spi-nor/spi-nor.c
+++ b/drivers/mtd/spi-nor/spi-nor.c
@@ -101,6 +101,19 @@ struct flash_info {
 
 static const struct flash_info *spi_nor_match_id(const char *name);
 
+bool update_stripe(const u8 opcode)
+{
+	if (opcode ==  SPINOR_OP_BE_4K ||
+	    opcode ==  SPINOR_OP_BE_32K ||
+	    opcode ==  SPINOR_OP_CHIP_ERASE ||
+	    opcode ==  SPINOR_OP_SE ||
+	    opcode ==  SPINOR_OP_BE_32K_4B ||
+	    opcode ==  SPINOR_OP_SE_4B ||
+	    opcode == SPINOR_OP_BE_4K_4B)
+		return false;
+
+	return true;
+}
 /*
  * Read the status register, returning its value in the location
  * Return the status register value.
diff --git a/drivers/spi/spi-mem.c b/drivers/spi/spi-mem.c
index ec0c24e873cd..ac2f5f982a18 100644
--- a/drivers/spi/spi-mem.c
+++ b/drivers/spi/spi-mem.c
@@ -276,6 +276,7 @@ int spi_mem_exec_op(struct spi_mem *mem, const struct spi_mem_op *op)
 		xfers[xferpos].tx_buf = tmpbuf + op->addr.nbytes + 1;
 		xfers[xferpos].len = op->dummy.nbytes;
 		xfers[xferpos].tx_nbits = op->dummy.buswidth;
+		xfers[xferpos].dummy = op->dummy.nbytes * 8;
 		spi_message_add_tail(&xfers[xferpos], &msg);
 		xferpos++;
 		totalxferlen += op->dummy.nbytes;
@@ -290,6 +291,7 @@ int spi_mem_exec_op(struct spi_mem *mem, const struct spi_mem_op *op)
 			xfers[xferpos].tx_nbits = op->data.buswidth;
 		}
 
+		xfers[xferpos].stripe = update_stripe(op->cmd.opcode);
 		xfers[xferpos].len = op->data.nbytes;
 		spi_message_add_tail(&xfers[xferpos], &msg);
 		xferpos++;
diff --git a/drivers/spi/spi-zynq-qspi.c b/drivers/spi/spi-zynq-qspi.c
index ce631e61e150..31f825151a20 100644
--- a/drivers/spi/spi-zynq-qspi.c
+++ b/drivers/spi/spi-zynq-qspi.c
@@ -614,6 +614,10 @@ static int zynq_qspi_start_transfer(struct spi_master *master,
 	xqspi->bytes_to_transfer = transfer->len;
 	xqspi->bytes_to_receive = transfer->len;
 
+	if (!transfer->stripe)
+		xqspi->is_instr = true;
+	else
+		xqspi->is_instr = false;
 	zynq_qspi_setup_transfer(qspi, transfer);
 
 	zynq_qspi_fill_tx_fifo(xqspi, ZYNQ_QSPI_FIFO_DEPTH, true);
diff --git a/drivers/spi/spi-zynqmp-gqspi.c b/drivers/spi/spi-zynqmp-gqspi.c
index acc279d009b2..24ba194797cd 100644
--- a/drivers/spi/spi-zynqmp-gqspi.c
+++ b/drivers/spi/spi-zynqmp-gqspi.c
@@ -923,10 +923,10 @@ static int zynqmp_qspi_start_transfer(struct spi_master *master,
 	genfifoentry |= xqspi->genfifocs;
 	genfifoentry |= xqspi->genfifobus;
 
-	if ((!xqspi->isinstr) &&
-		(master->flags & SPI_MASTER_DATA_STRIPE))
-		genfifoentry |= GQSPI_GENFIFO_STRIPE;
-
+	if (!xqspi->isinstr && (master->flags & SPI_MASTER_DATA_STRIPE)) {
+		if (transfer->stripe)
+			genfifoentry |= GQSPI_GENFIFO_STRIPE;
+	}
 	zynqmp_qspi_txrxsetup(xqspi, transfer, &genfifoentry);
 
 	if (xqspi->mode == GQSPI_MODE_DMA)
diff --git a/include/linux/spi/spi.h b/include/linux/spi/spi.h
index c91d1786b9f7..6c525cb006bf 100644
--- a/include/linux/spi/spi.h
+++ b/include/linux/spi/spi.h
@@ -729,6 +729,7 @@ extern void spi_res_release(struct spi_controller *ctlr,
  * @transfer_list: transfers are sequenced through @spi_message.transfers
  * @tx_sg: Scatterlist for transmit, currently not for client use
  * @rx_sg: Scatterlist for receive, currently not for client use
+ * @stripe: true-> enable stripe, false-> disable stripe.
  *
  * SPI transfers always write the same number of bytes as they read.
  * Protocol drivers should always provide @rx_buf and/or @tx_buf.
@@ -809,7 +810,7 @@ struct spi_transfer {
 	u16		delay_usecs;
 	u32		speed_hz;
 	u32		dummy;
-
+	bool		stripe;
 	struct list_head transfer_list;
 };
 
@@ -1325,6 +1326,8 @@ spi_transfer_is_last(struct spi_controller *ctlr, struct spi_transfer *xfer)
 	return list_is_last(&xfer->transfer_list, &ctlr->cur_msg->transfers);
 }
 
+bool
+update_stripe(const u8 opcode);
 
 /* Compatibility layer */
 #define spi_master			spi_controller
-- 
2.17.1

