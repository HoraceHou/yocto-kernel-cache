From 74a0a522066b71765203e4187d95d302ceae75f4 Mon Sep 17 00:00:00 2001
From: Pavan Nikhilesh <pbhagavatula@marvell.com>
Date: Fri, 8 Mar 2019 15:25:16 +0530
Subject: [PATCH 053/386] octeontx2-af: use get blkaddr function instead of
 macro

Use rvu_get_blkaddr based on BLKTYPE instead of directly using the
BLKADDR for CPT block.

Change-Id: Ia611605e1607d86a7f6259e22a5a5d1e1a4581d4
Signed-off-by: Pavan Nikhilesh <pbhagavatula@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/5430
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Lukas Bartosik <Lukasz.Bartosik@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/af/rvu_cpt.c   | 77 +++++++++++++------
 1 file changed, 52 insertions(+), 25 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
index 99dd130e2895..882f25cd3cec 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
@@ -36,38 +36,53 @@ static irqreturn_t rvu_cpt_af_flr_intr_handler(int irq, void *ptr)
 {
 	struct rvu *rvu = (struct rvu *) ptr;
 	u64 reg0, reg1;
+	int blkaddr;
 
-	reg0 = rvu_read64(rvu, BLKADDR_CPT0, CPT_AF_FLTX_INT(0));
-	reg1 = rvu_read64(rvu, BLKADDR_CPT0, CPT_AF_FLTX_INT(1));
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, 0);
+	if (blkaddr < 0)
+		return IRQ_NONE;
+
+	reg0 = rvu_read64(rvu, blkaddr, CPT_AF_FLTX_INT(0));
+	reg1 = rvu_read64(rvu, blkaddr, CPT_AF_FLTX_INT(1));
 	dev_err(rvu->dev, "Received CPTAF FLT irq : 0x%llx, 0x%llx",
 		reg0, reg1);
 
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_FLTX_INT(0), reg0);
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_FLTX_INT(1), reg1);
+	rvu_write64(rvu, blkaddr, CPT_AF_FLTX_INT(0), reg0);
+	rvu_write64(rvu, blkaddr, CPT_AF_FLTX_INT(1), reg1);
 	return IRQ_HANDLED;
 }
 
 static irqreturn_t rvu_cpt_af_rvu_intr_handler(int irq, void *ptr)
 {
 	struct rvu *rvu = (struct rvu *) ptr;
+	int blkaddr;
 	u64 reg;
 
-	reg = rvu_read64(rvu, BLKADDR_CPT0, CPT_AF_RVU_INT);
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, 0);
+	if (blkaddr < 0)
+		return IRQ_NONE;
+
+	reg = rvu_read64(rvu, blkaddr, CPT_AF_RVU_INT);
 	dev_err(rvu->dev, "Received CPTAF RVU irq : 0x%llx", reg);
 
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_RVU_INT, reg);
+	rvu_write64(rvu, blkaddr, CPT_AF_RVU_INT, reg);
 	return IRQ_HANDLED;
 }
 
 static irqreturn_t rvu_cpt_af_ras_intr_handler(int irq, void *ptr)
 {
 	struct rvu *rvu = (struct rvu *) ptr;
+	int blkaddr;
 	u64 reg;
 
-	reg = rvu_read64(rvu, BLKADDR_CPT0, CPT_AF_RAS_INT);
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, 0);
+	if (blkaddr < 0)
+		return IRQ_NONE;
+
+	reg = rvu_read64(rvu, blkaddr, CPT_AF_RAS_INT);
 	dev_err(rvu->dev, "Received CPTAF RAS irq : 0x%llx", reg);
 
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_RAS_INT, reg);
+	rvu_write64(rvu, blkaddr, CPT_AF_RAS_INT, reg);
 	return IRQ_HANDLED;
 }
 
@@ -92,17 +107,21 @@ static int rvu_cpt_do_register_interrupt(struct rvu *rvu, int irq_offs,
 
 static void rvu_cpt_unregister_interrupts(struct rvu *rvu)
 {
-	int i, offs;
+	int blkaddr, i, offs;
 	u64 reg;
 
-	reg = rvu_read64(rvu, BLKADDR_CPT0, CPT_PRIV_AF_INT_CFG);
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, 0);
+	if (blkaddr < 0)
+		return;
+
+	reg = rvu_read64(rvu, blkaddr, CPT_PRIV_AF_INT_CFG);
 	offs = reg & 0x7FF;
 
 	/* Disable all CPT AF interrupts */
 	for (i = 0; i < 2; i++)
-		rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_FLTX_INT_ENA_W1C(i), 0x1);
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_RVU_INT_ENA_W1C, 0x1);
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_RAS_INT_ENA_W1C, 0x1);
+		rvu_write64(rvu, blkaddr, CPT_AF_FLTX_INT_ENA_W1C(i), 0x1);
+	rvu_write64(rvu, blkaddr, CPT_AF_RVU_INT_ENA_W1C, 0x1);
+	rvu_write64(rvu, blkaddr, CPT_AF_RAS_INT_ENA_W1C, 0x1);
 
 	for (i = 0; i < CPT_AF_INT_VEC_CNT; i++)
 		if (rvu->irq_allocated[offs + i]) {
@@ -157,10 +176,14 @@ int rvu_cpt_init(struct rvu *rvu)
 int rvu_cpt_register_interrupts(struct rvu *rvu)
 {
 
-	int i, offs, ret = 0;
+	int i, offs, blkaddr, ret = 0;
 	u64 reg;
 
-	reg = rvu_read64(rvu, BLKADDR_CPT0, CPT_PRIV_AF_INT_CFG);
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, 0);
+	if (blkaddr < 0)
+		return blkaddr;
+
+	reg = rvu_read64(rvu, blkaddr, CPT_PRIV_AF_INT_CFG);
 	offs = reg & 0x7FF;
 
 	for (i = 0; i < 2; i++) {
@@ -170,7 +193,7 @@ int rvu_cpt_register_interrupts(struct rvu *rvu)
 						    cpt_flt_irq_name[i]);
 		if (ret)
 			goto err;
-		rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_FLTX_INT_ENA_W1S(i), 0x1);
+		rvu_write64(rvu, blkaddr, CPT_AF_FLTX_INT_ENA_W1S(i), 0x1);
 	}
 
 	ret = rvu_cpt_do_register_interrupt(rvu, offs + CPT_AF_INT_VEC_RVU,
@@ -178,14 +201,14 @@ int rvu_cpt_register_interrupts(struct rvu *rvu)
 					    "CPTAF RVU");
 	if (ret)
 		goto err;
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_RVU_INT_ENA_W1S, 0x1);
+	rvu_write64(rvu, blkaddr, CPT_AF_RVU_INT_ENA_W1S, 0x1);
 
 	ret = rvu_cpt_do_register_interrupt(rvu, offs + CPT_AF_INT_VEC_RAS,
 					    rvu_cpt_af_ras_intr_handler,
 					    "CPTAF RAS");
 	if (ret)
 		goto err;
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_RAS_INT_ENA_W1S, 0x1);
+	rvu_write64(rvu, blkaddr, CPT_AF_RAS_INT_ENA_W1S, 0x1);
 
 	return 0;
 err:
@@ -208,7 +231,7 @@ int rvu_mbox_handler_cpt_lf_alloc(struct rvu *rvu,
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, pcifunc);
 	if (blkaddr < 0)
-		return CPT_AF_ERR_LF_INVALID;
+		return blkaddr;
 
 	block = &rvu->hw->block[blkaddr];
 	num_lfs = rvu_get_rsrc_mapcount(rvu_get_pfvf(rvu, pcifunc),
@@ -264,7 +287,7 @@ int rvu_mbox_handler_cpt_lf_free(struct rvu *rvu, struct msg_req *req,
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, pcifunc);
 	if (blkaddr < 0)
-		return CPT_AF_ERR_LF_INVALID;
+		return blkaddr;
 
 	block = &rvu->hw->block[blkaddr];
 	num_lfs = rvu_get_rsrc_mapcount(rvu_get_pfvf(rvu, pcifunc),
@@ -308,8 +331,12 @@ int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 					struct cpt_rd_wr_reg_msg *req,
 					struct cpt_rd_wr_reg_msg *rsp)
 {
+	int blkaddr, num_lfs, offs, lf;
 	struct rvu_block *block;
-	int num_lfs, offs, lf;
+
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, 0);
+	if (blkaddr < 0)
+		return blkaddr;
 
 	/* This message is accepted only if sent from CPT PF/VF */
 	if (!is_cpt_pf(req->hdr.pcifunc) &&
@@ -334,7 +361,7 @@ int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 			goto error;
 		}
 
-		block = &rvu->hw->block[BLKADDR_CPT0];
+		block = &rvu->hw->block[blkaddr];
 		num_lfs = rvu_get_rsrc_mapcount(
 					rvu_get_pfvf(rvu, req->hdr.pcifunc),
 					block->type);
@@ -345,7 +372,7 @@ int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 		/* Need to translate CPT LF slot to global number because
 		 * VFs use local numbering from 0 to number of LFs - 1
 		 */
-		lf = rvu_get_lf(rvu, &rvu->hw->block[BLKADDR_CPT0],
+		lf = rvu_get_lf(rvu, &rvu->hw->block[blkaddr],
 				req->hdr.pcifunc, lf);
 		if (lf < 0)
 			goto error;
@@ -378,9 +405,9 @@ int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 	}
 
 	if (req->is_write)
-		rvu_write64(rvu, BLKADDR_CPT0, req->reg_offset, req->val);
+		rvu_write64(rvu, blkaddr, req->reg_offset, req->val);
 	else
-		rsp->val = rvu_read64(rvu, BLKADDR_CPT0, req->reg_offset);
+		rsp->val = rvu_read64(rvu, blkaddr, req->reg_offset);
 
 	return 0;
 error:
-- 
2.17.1

