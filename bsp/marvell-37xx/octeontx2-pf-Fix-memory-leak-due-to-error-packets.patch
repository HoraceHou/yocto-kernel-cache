From 60b69f54f737b4c1fb37d05963461fb69e50af0a Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Tue, 5 Mar 2019 18:42:32 +0530
Subject: [PATCH 013/386] octeontx2-pf: Fix memory leak due to error packets

When HW adds a CQE_RX for a received error packet it also
consumes a buffer, ignoring that will lead to memory leak
and also stalls packet reception as number of buffers in
Aura/Pool will come down with each error pkt.

This patch fixes this by freeing the IOVA back to Aura.

Change-Id: Ib94b70a7ba3c9008a2133c6c809b1ddb0abd4c3e
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/5255
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/nic/otx2_txrx.c    | 15 ++++++++-------
 1 file changed, 8 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
index b4fa706cefb1..66c27e219cec 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
@@ -235,13 +235,6 @@ static void otx2_rcv_pkt_handler(struct otx2_nic *pfvf,
 
 	/* CQE_HDR_S for a Rx pkt is always followed by RX_PARSE_S */
 	parse = (struct nix_rx_parse_s *)(cqe + sizeof(*cqe_hdr));
-	/* Check for errors */
-	if (parse->errlev || parse->errcode) {
-		dev_info(pfvf->dev,
-			 "RQ%d: Error pkt received errlev %x errcode %x\n",
-			 cq->cint_idx, parse->errlev, parse->errcode);
-		return;
-	}
 
 	start = cqe + sizeof(*cqe_hdr) + sizeof(*parse);
 	end = start + ((parse->desc_sizem1 + 1) * 16);
@@ -266,6 +259,14 @@ static void otx2_rcv_pkt_handler(struct otx2_nic *pfvf,
 		iova = (void *)sg + sizeof(*sg);
 
 		for (seg = 0; seg < sg->segs; seg++) {
+			/* Check for errors */
+			if (parse->errlev || parse->errcode) {
+				otx2_aura_freeptr(pfvf, cq->cq_idx,
+						  *iova & ~0x07ULL);
+				iova++;
+				continue;
+			}
+
 			len = sg_lens[frag_num(seg)];
 			/* Starting IOVA's 2:0 bits give alignment
 			 * bytes after which packet data starts.
-- 
2.17.1

