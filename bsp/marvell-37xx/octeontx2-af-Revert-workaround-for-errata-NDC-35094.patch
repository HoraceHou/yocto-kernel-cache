From 9b78985e8fc4d782f34ecfc4b17ffe0824e2567e Mon Sep 17 00:00:00 2001
From: Linu Cherian <lcherian@marvell.com>
Date: Mon, 22 Apr 2019 11:52:43 +0530
Subject: [PATCH 164/386] octeontx2-af: Revert workaround for errata NDC-35094

Errata workaround found to be not valid,
since it hangs NCB bus.

Change-Id: Ie5224cf9f8b03ebc61c875623bf8558bf5fb5eee
Signed-off-by: Linu Cherian <lcherian@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/7891
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/af/Makefile    |   2 +-
 .../net/ethernet/marvell/octeontx2/af/rvu.c   |   4 -
 .../net/ethernet/marvell/octeontx2/af/rvu.h   |   9 -
 .../ethernet/marvell/octeontx2/af/rvu_ndc.c   | 183 ------------------
 .../ethernet/marvell/octeontx2/af/rvu_nix.c   |   5 +-
 5 files changed, 4 insertions(+), 199 deletions(-)
 delete mode 100644 drivers/net/ethernet/marvell/octeontx2/af/rvu_ndc.c

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/Makefile b/drivers/net/ethernet/marvell/octeontx2/af/Makefile
index a8e84643f170..92eef208e6b0 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/Makefile
+++ b/drivers/net/ethernet/marvell/octeontx2/af/Makefile
@@ -8,5 +8,5 @@ obj-$(CONFIG_OCTEONTX2_AF) += octeontx2_af.o
 
 octeontx2_mbox-y := mbox.o
 octeontx2_af-y := cgx.o rvu.o ptp.o rvu_ptp.o rvu_cgx.o rvu_npa.o rvu_sso.o \
-		  rvu_nix.o rvu_reg.o rvu_npc.o rvu_ndc.o rvu_debugfs.o \
+		  rvu_nix.o rvu_reg.o rvu_npc.o rvu_debugfs.o \
 		  rvu_validation.o rvu_tim.o rvu_cpt.o rvu_fixes.o rvu_npc_fs.o
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
index 4784270a86b6..5883a57f48c7 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
@@ -441,10 +441,6 @@ int rvu_lf_reset(struct rvu *rvu, struct rvu_block *block, int lf)
 	if (!block->implemented)
 		return 0;
 
-	if (((block->type == BLKTYPE_NIX || block->type == BLKTYPE_NPA)) &&
-	    (is_rvu_9xxx_A0(rvu)))
-		return rvu_lf_reset_ndc_errata_workaround(rvu, block, lf);
-
 	rvu_write64(rvu, block->addr, block->lfreset_reg, lf | BIT_ULL(12));
 	err = rvu_poll_reg(rvu, block->addr, block->lfreset_reg, BIT_ULL(12),
 			   true);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
index e2447064d19b..670029bd4453 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
@@ -487,8 +487,6 @@ bool is_block_implemented(struct rvu_hwinfo *hw, int blkaddr);
 bool is_pffunc_map_valid(struct rvu *rvu, u16 pcifunc, int blktype);
 int rvu_get_lf(struct rvu *rvu, struct rvu_block *block, u16 pcifunc, u16 slot);
 int rvu_lf_reset(struct rvu *rvu, struct rvu_block *block, int lf);
-int rvu_lf_reset_ndc_errata_workaround(struct rvu *rvu, struct rvu_block *block,
-				   int lf);
 int rvu_get_blkaddr(struct rvu *rvu, int blktype, u16 pcifunc);
 int rvu_poll_reg(struct rvu *rvu, u64 block, u64 offset, u64 mask, bool zero);
 u16 rvu_get_rsrc_mapcount(struct rvu_pfvf *pfvf, int blkid);
@@ -596,13 +594,6 @@ int rvu_cpt_init(struct rvu *rvu);
 int rvu_cpt_register_interrupts(struct rvu *rvu);
 void rvu_cpt_unregister_interrupts(struct rvu *rvu);
 
-/* NDC APIs */
-int rvu_ndc_sync(struct rvu *rvu, int lfblkid, int lfidx, u64 lfoffset,
-		 int ndcblkid);
-
-int rvu_ndc_sync_errata_workaround(struct rvu *rvu, int lfblkaddr, int lfidx,
-				   u64 lfoffset, int ndcblkaddr);
-
 /* TIM APIs */
 int rvu_tim_init(struct rvu *rvu);
 int rvu_lf_lookup_tim_errata(struct rvu *rvu, struct rvu_block *block,
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_ndc.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_ndc.c
deleted file mode 100644
index 7cad5c1c6f07..000000000000
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_ndc.c
+++ /dev/null
@@ -1,183 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-/* Marvell OcteonTx2 RVU Admin Function driver
- *
- * Copyright (C) 2018 Marvell International Ltd.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- */
-
-#include <linux/pci.h>
-
-#include "rvu.h"
-#include "rvu_reg.h"
-
-static int ndc_errata_35094_preop(struct rvu *rvu, int blkaddr)
-{
-	u64 port_rc[6], port_wc[6];
-	int port, retry_count;
-	bool retry;
-	u64 val;
-
-	/* Enable full backpressure to stall all NDC requests */
-	val = rvu_read64(rvu, blkaddr, NDC_AF_BP_TEST(0));
-	val |= BIT_ULL(61);
-	val &= ~GENMASK_ULL(23, 16);
-	rvu_write64(rvu, blkaddr, NDC_AF_BP_TEST(0), val);
-
-	val = rvu_read64(rvu, blkaddr, NDC_AF_BP_TEST_ENABLE);
-	val |= GENMASK_ULL(43, 40);
-	rvu_write64(rvu, blkaddr, NDC_AF_BP_TEST_ENABLE, val);
-
-	/* Wait for OUTSTD_PC read and write count to be contstant
-	 * over a period of 5 us
-	 */
-	retry_count = 0;
-	do {
-		retry = false;
-
-		/* Take snapshot */
-		for (port = 0; port < 6; port++) {
-			port_rc[port] =  rvu_read64(rvu, blkaddr,
-						 NDC_AF_PORTX_RTX_RWX_OSTDN_PC
-						 (port, CACHING,
-						  NDC_READ_TRANS));
-
-			port_wc[port] =  rvu_read64(rvu, blkaddr,
-						 NDC_AF_PORTX_RTX_RWX_OSTDN_PC
-						 (port, CACHING,
-						  NDC_WRITE_TRANS));
-		}
-
-		udelay(5);
-
-		/* Verify for any change after the wait period */
-		for (port = 0; port < 6; port++) {
-			val =  rvu_read64(rvu, blkaddr,
-						NDC_AF_PORTX_RTX_RWX_OSTDN_PC
-						 (port, CACHING,
-						  NDC_READ_TRANS));
-			if (val ^ port_rc[port]) {
-				retry = true;
-				break;
-			}
-
-			val =  rvu_read64(rvu, blkaddr,
-						 NDC_AF_PORTX_RTX_RWX_OSTDN_PC
-						 (port, CACHING,
-						  NDC_WRITE_TRANS));
-			if (val ^ port_wc[port]) {
-				retry = true;
-				break;
-			}
-		}
-
-		retry_count++;
-		if (retry_count > 200) /* time out of ~1ms */
-			return -EIO;
-
-	} while (retry);
-
-	return 0;
-}
-
-static int ndc_errata_35094_preop_blk(struct rvu *rvu, int blktype)
-{
-	int err = 0;
-
-	if (blktype == BLKTYPE_NIX) {
-		err = ndc_errata_35094_preop(rvu, BLKADDR_NDC_NIX0_RX);
-		if (err)
-			return err;
-		return ndc_errata_35094_preop(rvu, BLKADDR_NDC_NIX0_TX);
-	} else if (blktype == BLKTYPE_NPA) {
-		return ndc_errata_35094_preop(rvu, BLKADDR_NDC_NPA0);
-	}
-
-	return 0;
-}
-
-static void ndc_errata_35094_postop1(struct rvu *rvu, int blkaddr)
-{
-	u64 val;
-
-	val = rvu_read64(rvu, blkaddr, NDC_AF_BP_TEST_ENABLE);
-	val &= ~GENMASK_ULL(43, 40);
-	rvu_write64(rvu, blkaddr, NDC_AF_BP_TEST_ENABLE, val);
-}
-
-static void ndc_errata_35094_postop1_blk(struct rvu *rvu, int blktype)
-{
-	if (blktype == BLKTYPE_NIX) {
-		ndc_errata_35094_postop1(rvu, BLKADDR_NDC_NIX0_RX);
-		ndc_errata_35094_postop1(rvu, BLKADDR_NDC_NIX0_TX);
-	} else if (blktype == BLKTYPE_NPA) {
-		ndc_errata_35094_postop1(rvu, BLKADDR_NDC_NPA0);
-	}
-}
-
-static void ndc_errata_35094_postop2(void)
-{
-	udelay(50);
-}
-
-int rvu_ndc_sync_errata_workaround(struct rvu *rvu, int lfblkaddr, int lfidx,
-				   u64 lfoffset, int ndcblkaddr)
-{
-	int err;
-
-	err = ndc_errata_35094_preop(rvu, ndcblkaddr);
-	if (err)
-		return err;
-
-	/* Sync cached info for this LF in NDC to LLC/DRAM */
-	rvu_write64(rvu, lfblkaddr, lfoffset, BIT_ULL(12) | lfidx);
-
-	ndc_errata_35094_postop1(rvu, ndcblkaddr);
-
-	err = rvu_poll_reg(rvu, lfblkaddr, lfoffset, BIT_ULL(12), true);
-
-	ndc_errata_35094_postop2();
-
-	return err;
-}
-
-int rvu_lf_reset_ndc_errata_workaround(struct rvu *rvu, struct rvu_block *block,
-				   int lf)
-{
-	int err;
-
-	err = ndc_errata_35094_preop_blk(rvu, block->type);
-	if (err)
-		return err;
-
-	/* Do LF reset operation */
-	rvu_write64(rvu, block->addr, block->lfreset_reg, lf | BIT_ULL(12));
-
-	ndc_errata_35094_postop1_blk(rvu, block->type);
-
-	err = rvu_poll_reg(rvu, block->addr, block->lfreset_reg, BIT_ULL(12),
-			   true);
-
-	ndc_errata_35094_postop2();
-
-	return err;
-}
-
-int rvu_ndc_sync(struct rvu *rvu, int lfblkaddr, int lfidx,
-		 u64 lfoffset, int ndcblkaddr)
-{
-	int err;
-
-	if (is_rvu_9xxx_A0(rvu))
-		return rvu_ndc_sync_errata_workaround(rvu, lfblkaddr, lfidx,
-						      lfoffset, ndcblkaddr);
-
-	/* Sync cached info for this LF in NDC to LLC/DRAM */
-	rvu_write64(rvu, lfblkaddr, lfoffset, BIT_ULL(12) | lfidx);
-
-	err = rvu_poll_reg(rvu, lfblkaddr, lfoffset, BIT_ULL(12), true);
-
-	return err;
-}
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index 8fd423108784..891f6605df1d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -1589,8 +1589,9 @@ static int nix_txschq_free(struct rvu *rvu, u16 pcifunc)
 	}
 	mutex_unlock(&rvu->rsrc_lock);
 
-	err = rvu_ndc_sync(rvu, blkaddr, nixlf, NIX_AF_NDC_TX_SYNC,
-			   BLKADDR_NDC_NIX0_TX);
+	/* Sync cached info for this LF in NDC-TX to LLC/DRAM */
+	rvu_write64(rvu, blkaddr, NIX_AF_NDC_TX_SYNC, BIT_ULL(12) | nixlf);
+	err = rvu_poll_reg(rvu, blkaddr, NIX_AF_NDC_TX_SYNC, BIT_ULL(12), true);
 	if (err)
 		dev_err(rvu->dev, "NDC-TX sync failed for NIXLF %d\n", nixlf);
 
-- 
2.17.1

