From f94d9327a9194d7fc3d273ae72460718953682d5 Mon Sep 17 00:00:00 2001
From: Lukasz Bartosik <lukasz.bartosik@cavium.com>
Date: Wed, 27 Mar 2019 15:11:36 +0100
Subject: [PATCH 138/386] crypto: cpt - allow to create AE VF(s) on 8X

This change enables creation of AE VF(s) on 8x platform.
Previously that functionality was disabled.

Change-Id: I9f6f4fc858a6993d8222fd63ef082dacd22f768c
Signed-off-by: Lukasz Bartosik <lukasz.bartosik@cavium.com>
Reviewed-on: https://sj1git1.cavium.com/6424
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Srujana Challa <schalla@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 drivers/crypto/cavium/cpt/8x/cpt8x_pf_main.c |  9 ------
 drivers/crypto/cavium/cpt/8x/cpt8x_vf_main.c |  4 +--
 drivers/crypto/cavium/cpt/9x/cpt9x_lf_main.c |  2 +-
 drivers/crypto/cavium/cpt/common/cpt_algs.c  | 31 +++++++++++++-------
 drivers/crypto/cavium/cpt/common/cpt_algs.h  |  3 +-
 drivers/crypto/cavium/cpt/common/cpt_ucode.c |  1 +
 6 files changed, 26 insertions(+), 24 deletions(-)

diff --git a/drivers/crypto/cavium/cpt/8x/cpt8x_pf_main.c b/drivers/crypto/cavium/cpt/8x/cpt8x_pf_main.c
index 711e5918fe84..b2aaeca94248 100644
--- a/drivers/crypto/cavium/cpt/8x/cpt8x_pf_main.c
+++ b/drivers/crypto/cavium/cpt/8x/cpt8x_pf_main.c
@@ -178,15 +178,6 @@ static int cpt_sriov_configure(struct pci_dev *pdev, int numvfs)
 	if (cpt->vfs_in_use)
 		goto exit;
 
-	/*
-	 * Currently we do not register any asymmetric algorithms
-	 * therefore we don't allow to enable VFs for 83xx AE
-	 */
-	if (cpt->pf_type == CPT_AE_83XX) {
-		ret = -EINVAL;
-		goto exit;
-	}
-
 	ret = 0;
 	if (cpt->flags & CPT_FLAG_SRIOV_ENABLED)
 		disable = 1;
diff --git a/drivers/crypto/cavium/cpt/8x/cpt8x_vf_main.c b/drivers/crypto/cavium/cpt/8x/cpt8x_vf_main.c
index 37a281dc9bc8..33f13fd1bdf2 100644
--- a/drivers/crypto/cavium/cpt/8x/cpt8x_vf_main.c
+++ b/drivers/crypto/cavium/cpt/8x/cpt8x_vf_main.c
@@ -939,7 +939,7 @@ static int cptvf_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	return 0;
 
 cptvf_crypto_exit:
-	cvm_crypto_exit(pdev, THIS_MODULE);
+	cvm_crypto_exit(pdev, THIS_MODULE, cptvf->vftype);
 cptvf_free_irq_affinity:
 	cptvf_free_irq_affinity(cptvf, CPT_8X_VF_INT_VEC_E_DONE);
 	cptvf_free_irq_affinity(cptvf, CPT_8X_VF_INT_VEC_E_MISC);
@@ -971,7 +971,7 @@ static void cptvf_remove(struct pci_dev *pdev)
 	if (cptvf_send_vf_down(cptvf)) {
 		dev_err(&pdev->dev, "PF not responding to DOWN msg");
 	} else {
-		cvm_crypto_exit(pdev, THIS_MODULE);
+		cvm_crypto_exit(pdev, THIS_MODULE, cptvf->vftype);
 		cptvf_free_irq_affinity(cptvf, CPT_8X_VF_INT_VEC_E_DONE);
 		cptvf_free_irq_affinity(cptvf, CPT_8X_VF_INT_VEC_E_MISC);
 		free_irq(pci_irq_vector(pdev, CPT_8X_VF_INT_VEC_E_DONE), cptvf);
diff --git a/drivers/crypto/cavium/cpt/9x/cpt9x_lf_main.c b/drivers/crypto/cavium/cpt/9x/cpt9x_lf_main.c
index 5c19af6a0fea..22968291ba00 100644
--- a/drivers/crypto/cavium/cpt/9x/cpt9x_lf_main.c
+++ b/drivers/crypto/cavium/cpt/9x/cpt9x_lf_main.c
@@ -1118,7 +1118,7 @@ int cptlf_shutdown(struct pci_dev *pdev, struct cptlfs_info *lfs)
 	int ret = 0;
 
 	/* Unregister crypto algorithms */
-	cvm_crypto_exit(pdev, THIS_MODULE);
+	cvm_crypto_exit(pdev, THIS_MODULE, SE_TYPES);
 
 	/* Disable interrupts */
 	cptlf_disable_done_intr(lfs);
diff --git a/drivers/crypto/cavium/cpt/common/cpt_algs.c b/drivers/crypto/cavium/cpt/common/cpt_algs.c
index a9f156e54ab0..6d487ceb54b0 100644
--- a/drivers/crypto/cavium/cpt/common/cpt_algs.c
+++ b/drivers/crypto/cavium/cpt/common/cpt_algs.c
@@ -1614,31 +1614,40 @@ int cvm_crypto_init(struct pci_dev *pdev, struct module *mod,
 }
 EXPORT_SYMBOL_GPL(cvm_crypto_init);
 
-void cvm_crypto_exit(struct pci_dev *pdev, struct module *mod)
+void cvm_crypto_exit(struct pci_dev *pdev, struct module *mod,
+		     enum cpt_vf_type engine_type)
 {
+	struct cpt_device_table *dev_tbl;
 	bool dev_found = false;
 	int i, j, count;
 
 	mutex_lock(&mutex);
 
-	count = atomic_read(&se_devices.count);
+	dev_tbl = (engine_type == AE_TYPES) ? &ae_devices : &se_devices;
+	count = atomic_read(&dev_tbl->count);
 	for (i = 0; i < count; i++)
-		if (pdev == se_devices.desc[i].dev) {
+		if (pdev == dev_tbl->desc[i].dev) {
 			for (j = i; j < count-1; j++)
-				se_devices.desc[j] = se_devices.desc[j+1];
+				dev_tbl->desc[j] = dev_tbl->desc[j+1];
 			dev_found = true;
 			break;
 		}
 
-	if (!dev_found)
+	if (!dev_found) {
 		dev_err(&pdev->dev, "%s device not found", __func__);
-
-	if (atomic_dec_and_test(&se_devices.count) &&
-	    !is_any_alg_used()) {
-		cav_unregister_algs();
-		module_put(mod);
-		is_crypto_registered = false;
+		goto exit;
 	}
+
+	if (!(engine_type == AE_TYPES)) {
+		if (atomic_dec_and_test(&se_devices.count) &&
+		    !is_any_alg_used()) {
+			cav_unregister_algs();
+			module_put(mod);
+			is_crypto_registered = false;
+		}
+	} else
+		atomic_dec(&ae_devices.count);
+exit:
 	mutex_unlock(&mutex);
 }
 EXPORT_SYMBOL_GPL(cvm_crypto_exit);
diff --git a/drivers/crypto/cavium/cpt/common/cpt_algs.h b/drivers/crypto/cavium/cpt/common/cpt_algs.h
index e03bdb6a44b6..346816df10d2 100644
--- a/drivers/crypto/cavium/cpt/common/cpt_algs.h
+++ b/drivers/crypto/cavium/cpt/common/cpt_algs.h
@@ -21,7 +21,8 @@ int cvm_crypto_init(struct pci_dev *pdev, struct module *mod,
 		    struct algs_ops ops, enum cpt_pf_type pf_type,
 		    enum cpt_vf_type engine_type, int num_queues,
 		    int num_devices);
-void cvm_crypto_exit(struct pci_dev *pdev, struct module *mod);
+void cvm_crypto_exit(struct pci_dev *pdev, struct module *mod,
+		     enum cpt_vf_type engine_type);
 void cvm_callback(int status, void *arg, void *req);
 
 #endif /* __CPT_ALGS_H_*/
diff --git a/drivers/crypto/cavium/cpt/common/cpt_ucode.c b/drivers/crypto/cavium/cpt/common/cpt_ucode.c
index f7c61eb8c612..747d9036b6e4 100644
--- a/drivers/crypto/cavium/cpt/common/cpt_ucode.c
+++ b/drivers/crypto/cavium/cpt/common/cpt_ucode.c
@@ -1531,6 +1531,7 @@ int cpt_try_create_default_eng_grps(struct pci_dev *pdev,
 
 	switch (pf_type) {
 	case CPT_81XX:
+	case CPT_AE_83XX:
 	case CPT_SE_83XX:
 		tar_filename = CPT_8X_TAR_FILE_NAME;
 	break;
-- 
2.17.1

