From 2fe63002768e35f8f3ea3d2e9831dad081350058 Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Mon, 22 Apr 2019 18:51:40 +0530
Subject: [PATCH 166/386] octeontx2-af: Fix XOFF toggling in PSE restore logic

When NIX_AF_PSE_CHANNEL_LEVEL[BP_LEVEL] = 1, during restoring
NIX transmission, toggle TL2_XOFF instead of TL3.

Change-Id: Iaa14499b377584ee075f3cd9af4b18d43993bb59
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/7937
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
index 80a6beb1d4b5..5ecc1a7f3a9d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
@@ -556,7 +556,7 @@ static void rvu_nix_restore_tx(struct rvu *rvu, struct nix_hw *nix_hw,
 	for (tl = 0; tl < tx_stall->tl3_count; tl++) {
 		if (tx_stall->tl3_tl2_map[tl] != tl2)
 			continue;
-		if (tx_stall->pse_link_bp_level == NIX_TXSCH_LVL_TL3) {
+		if (tx_stall->pse_link_bp_level == NIX_TXSCH_LVL_TL2) {
 			rvu_wr64(rvu, blkaddr,
 				 NIX_AF_TL3X_SW_XOFF(tl), BIT_ULL(0));
 			rvu_wr64(rvu, blkaddr, NIX_AF_TL3X_SW_XOFF(tl), 0x00);
-- 
2.17.1

