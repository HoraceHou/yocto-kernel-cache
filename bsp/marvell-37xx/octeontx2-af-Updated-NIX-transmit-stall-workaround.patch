From 6950e1568849f780b94f273e7b445a19142d41cc Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Tue, 19 Mar 2019 23:16:37 +0530
Subject: [PATCH 075/386] octeontx2-af: Updated NIX transmit stall workaround

As per updated workaround for the transmit stall due to
PSE credit deadlock, toggling TL1 SW_XOFF isn't necessary
and on the contrary doing so might lead to a different issue.
Hence removed toggling TL1 SW_XOFF.

Also
- Don't config express link credits if not supported.
- Fix minor programmatic issue w.r.t link calculation

Change-Id: I731466da6a130f9314aa2b205e4b4e0804ddb500
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/6267
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/af/rvu_fixes.c    | 16 +++++++---------
 1 file changed, 7 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
index 161f7abc970e..3908a1be789c 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
@@ -491,10 +491,11 @@ static void rvu_nix_restore_tx(struct rvu *rvu, struct nix_hw *nix_hw,
 			       int blkaddr, int tl2)
 {
 	struct nix_tx_stall *tx_stall = nix_hw->tx_stall;
+	struct rvu_hwinfo *hw = rvu->hw;
 	struct nix_txsch *tl2_txsch;
 	int tl, link;
 
-	link = tx_stall->tl2_link_map[tl2];
+	link = tx_stall->tl2_link_map[tl2] & 0x7F;
 
 	tx_stall->stalled_cntr++;
 
@@ -505,7 +506,7 @@ static void rvu_nix_restore_tx(struct rvu *rvu, struct nix_hw *nix_hw,
 	 * the associated link.
 	 */
 	for (tl = 0; tl < tx_stall->tl2_count; tl++) {
-		if (tx_stall->tl2_link_map[tl] != link)
+		if ((tx_stall->tl2_link_map[tl] & 0x7F) != link)
 			continue;
 		/* Full workaround is implemented assuming fixed 1:1
 		 * TL3:TL2 mapping, ie TL3 and TL2 index can be used
@@ -531,8 +532,9 @@ static void rvu_nix_restore_tx(struct rvu *rvu, struct nix_hw *nix_hw,
 	/* Restore link credits */
 	rvu_wr64(rvu, blkaddr, NIX_AF_TX_LINKX_NORM_CREDIT(link),
 		 tx_stall->nlink_credits[link]);
-	rvu_wr64(rvu, blkaddr, NIX_AF_TX_LINKX_EXPR_CREDIT(link),
-		 tx_stall->nlink_credits[link]);
+	if (hw->cap.nix_express_traffic)
+		rvu_wr64(rvu, blkaddr, NIX_AF_TX_LINKX_EXPR_CREDIT(link),
+			 tx_stall->nlink_credits[link]);
 
 	/* Toggle SW_XOFF of every scheduler queue at every level
 	 * which points to this TL2.
@@ -566,14 +568,10 @@ static void rvu_nix_restore_tx(struct rvu *rvu, struct nix_hw *nix_hw,
 		}
 	}
 
-	tl = tx_stall->tl2_tl1_map[tl2];
-	rvu_wr64(rvu, blkaddr, NIX_AF_TL1X_SW_XOFF(tl), BIT_ULL(0));
-	rvu_wr64(rvu, blkaddr, NIX_AF_TL1X_SW_XOFF(tl), 0x00);
-
 clear_sw_xoff:
 	/* Clear SW_XOFF of all TL2 queues, which are set above */
 	for (tl = 0; tl < tx_stall->tl2_count; tl++) {
-		if (tx_stall->tl2_link_map[tl] != link)
+		if ((tx_stall->tl2_link_map[tl] & 0x7F) != link)
 			continue;
 		if (tx_stall->pse_link_bp_level == NIX_TXSCH_LVL_TL2)
 			rvu_wr64(rvu, blkaddr, NIX_AF_TL2X_SW_XOFF(tl), 0x00);
-- 
2.17.1

