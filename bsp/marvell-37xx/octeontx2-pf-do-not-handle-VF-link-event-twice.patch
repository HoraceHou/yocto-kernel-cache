From 05d25bc2c42ba9f9c33d212176628899cf779782 Mon Sep 17 00:00:00 2001
From: Tomasz Duszynski <tduszynski@cavium.com>
Date: Fri, 26 Apr 2019 09:23:47 +0200
Subject: [PATCH 223/386] octeontx2-pf: do not handle VF link event twice

otx2_open() is shared across both PFs and VFs and internally it may
update link state. Which is fine for PFs which may have already received
link event update. For example during probe.

Things get tricker in case of VFs which are informed about link changes
via different mechanism happening in parallel to otx2_open(). And this
is not necessary a good thing because leads to updating link status
twice.

So to make things behave as expected link handling during otx2_open()
should be limited to PFs only.

Change-Id: I80858cff519cde3702ce4b3a4c18f5cc71f4b4b1
Signed-off-by: Tomasz Duszynski <tduszynski@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/8801
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c | 3 ++-
 drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c | 1 +
 2 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index 1a3970e408a6..9625519927fe 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -1665,7 +1665,7 @@ int otx2_open(struct net_device *netdev)
 	pf->intf_down = false;
 
 	/* we have already received link status notification */
-	if (pf->linfo.link_up)
+	if (pf->linfo.link_up && !(pf->pcifunc & RVU_PFVF_FUNC_MASK))
 		otx2_handle_link_event(pf);
 
 	/* Alloc rxvlan entry in MCAM for PFs only */
@@ -2160,6 +2160,7 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	pf->pdev = pdev;
 	pf->dev = dev;
 	pf->total_vfs = pci_sriov_get_totalvfs(pdev);
+	pf->intf_down = true;
 
 	hw = &pf->hw;
 	hw->pdev = pdev;
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
index 73c6fd588814..e3df17bfcbed 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
@@ -489,6 +489,7 @@ static int otx2vf_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	vf->pdev = pdev;
 	vf->dev = dev;
 	vf->iommu_domain = iommu_get_domain_for_dev(dev);
+	vf->intf_down = true;
 	hw = &vf->hw;
 	hw->pdev = vf->pdev;
 	hw->rx_queues = qcount;
-- 
2.17.1

