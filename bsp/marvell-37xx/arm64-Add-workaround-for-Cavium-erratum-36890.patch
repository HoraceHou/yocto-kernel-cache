From 22309e0b79a8d2df34327b8292f68e953d4c2d84 Mon Sep 17 00:00:00 2001
From: Andrew Pinski <apinski@marvell.com>
Date: Tue, 21 May 2019 17:46:41 +0000
Subject: [PATCH 342/386] arm64: Add workaround for Cavium erratum 36890

On all ThunderX T88 passes, all OcteonTX T81 and T83 passes,
and some OcteonTX2 passes (some T96xx and F95XX), the "dc zva"
instruction has issues where old data would be in the cache in
some cases.  This happens when there are two different VAs
pointing to the same PA; even with different asids.

Change-Id: Ife8671af41822c4d6d6e4e7a24d005ee29d9dd17
Signed-off-by: Andrew Pinski <apinski@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/9376
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 arch/arm64/Kconfig               | 12 +++++++
 arch/arm64/include/asm/cpucaps.h |  3 +-
 arch/arm64/include/asm/sysreg.h  | 10 ++++++
 arch/arm64/kernel/cpu_errata.c   | 57 ++++++++++++++++++++++++++++++++
 4 files changed, 81 insertions(+), 1 deletion(-)

diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index 03c910a2154e..4f10e2b0d332 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -529,6 +529,18 @@ config CAVIUM_ERRATUM_30115
 
 	  If unsure, say Y.
 
+config CAVIUM_ERRATUM_36890
+	bool "Cavium erratum 36890"
+	default y
+	help
+	  Enable workaround for erratum 36890.  On all ThunderX T88xx and
+	  OcteonTX1 T81/T83 and some OcteonTX2 chips, the "dc zva" instruction
+	  does not work all the time.  This happens when there are two VAs
+	  that match up with one PA; including when the two VAs match but have
+	  different asids.  The fix is to disable "dc zva" in userspace.
+
+	  If unsure, say Y.
+
 config QCOM_FALKOR_ERRATUM_1003
 	bool "Falkor E1003: Incorrect translation due to ASID change"
 	default y
diff --git a/arch/arm64/include/asm/cpucaps.h b/arch/arm64/include/asm/cpucaps.h
index be3bf3d08916..34fb21853239 100644
--- a/arch/arm64/include/asm/cpucaps.h
+++ b/arch/arm64/include/asm/cpucaps.h
@@ -50,7 +50,8 @@
 #define ARM64_HW_DBM				29
 #define ARM64_SSBD				30
 #define ARM64_MISMATCHED_CACHE_TYPE		31
+#define ARM64_WORKAROUND_CAVIUM_36890           32
 
-#define ARM64_NCAPS				32
+#define ARM64_NCAPS                             33
 
 #endif /* __ASM_CPUCAPS_H */
diff --git a/arch/arm64/include/asm/sysreg.h b/arch/arm64/include/asm/sysreg.h
index a8f84812c6e8..39b99136735a 100644
--- a/arch/arm64/include/asm/sysreg.h
+++ b/arch/arm64/include/asm/sysreg.h
@@ -752,6 +752,16 @@ static inline void config_sctlr_el1(u32 clear, u32 set)
 	write_sysreg(val, sctlr_el1);
 }
 
+static inline void config_sctlr_el2(u32 clear, u32 set)
+{
+	u32 val;
+
+	val = read_sysreg(sctlr_el2);
+	val &= ~clear;
+	val |= set;
+	write_sysreg(val, sctlr_el2);
+}
+
 #endif
 
 #endif	/* __ASM_SYSREG_H */
diff --git a/arch/arm64/kernel/cpu_errata.c b/arch/arm64/kernel/cpu_errata.c
index 371da618035d..2dd38587efbb 100644
--- a/arch/arm64/kernel/cpu_errata.c
+++ b/arch/arm64/kernel/cpu_errata.c
@@ -88,6 +88,22 @@ cpu_enable_trap_ctr_access(const struct arm64_cpu_capabilities *__unused)
 
 atomic_t arm64_el2_vector_last_slot = ATOMIC_INIT(-1);
 
+#ifdef CONFIG_CAVIUM_ERRATUM_36890
+static int cpu_enable_trap_zva_access(void *__unused)
+{
+	/*
+	 * Clear SCTLR_EL2.DZE or SCTLR_EL1.DZE depending
+	 * on if we are in EL2.
+	 */
+	if (!is_kernel_in_hyp_mode())
+		config_sctlr_el1(SCTLR_EL1_DZE, 0);
+	else
+		config_sctlr_el2(SCTLR_EL1_DZE, 0);
+
+	return 0;
+}
+#endif
+
 #ifdef CONFIG_HARDEN_BRANCH_PREDICTOR
 #include <asm/mmu_context.h>
 #include <asm/cacheflush.h>
@@ -615,6 +631,47 @@ const struct arm64_cpu_capabilities arm64_errata[] = {
 		.capability = ARM64_WORKAROUND_CAVIUM_30115,
 		ERRATA_MIDR_REV(MIDR_OCTEON_T83, 0, 0),
 	},
+#endif
+#ifdef CONFIG_CAVIUM_ERRATUM_36890
+	{
+		/* Cavium ThunderX, T88 all passes */
+		.desc = "Cavium erratum 36890",
+		.capability = ARM64_WORKAROUND_CAVIUM_36890,
+		MIDR_ALL_VERSIONS(MIDR_THUNDERX),
+		.enable = cpu_enable_trap_zva_access,
+	},
+	{
+		/* Cavium ThunderX, T81 all passes */
+		.desc = "Cavium erratum 36890",
+		.capability = ARM64_WORKAROUND_CAVIUM_36890,
+		MIDR_ALL_VERSIONS(MIDR_OCTEON_T81),
+		.enable = cpu_enable_trap_zva_access,
+	},
+	{
+		/* Cavium ThunderX, T83 all passes */
+		.desc = "Cavium erratum 36890",
+		.capability = ARM64_WORKAROUND_CAVIUM_36890,
+		MIDR_ALL_VERSIONS(MIDR_OCTEON_T83),
+		.enable = cpu_enable_trap_zva_access,
+	},
+	{
+		/* Marvell OcteonTX 2, 96xx pass A0, A1, and B0 */
+		.desc = "Cavium erratum 36890",
+		.capability = ARM64_WORKAROUND_CAVIUM_36890,
+		MIDR_RANGE(MIDR_MRVL_OCTEONTX2_96XX,
+				MIDR_CPU_VAR_REV(0, 0),
+				MIDR_CPU_VAR_REV(1, 0)),
+		.enable = cpu_enable_trap_zva_access,
+	},
+	{
+		/* Marvell OcteonTX 2, 95 pass A0/A1 */
+		.desc = "Cavium erratum 36890",
+		.capability = ARM64_WORKAROUND_CAVIUM_36890,
+		MIDR_RANGE(MIDR_MRVL_OCTEONTX2_95XX,
+				MIDR_CPU_VAR_REV(0, 0),
+				MIDR_CPU_VAR_REV(0, 1)),
+		.enable = cpu_enable_trap_zva_access,
+	},
 #endif
 	{
 		.desc = "Mismatched cache line size",
-- 
2.17.1

