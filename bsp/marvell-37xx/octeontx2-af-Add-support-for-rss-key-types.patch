From 27911f6c4b4f6f1c1cfccf5b9d5e1bf801dc4d80 Mon Sep 17 00:00:00 2001
From: Kiran Kumar K <kirankumark@marvell.com>
Date: Tue, 12 Mar 2019 15:48:45 +0530
Subject: [PATCH 041/386] octeontx2-af: Add support for rss key types

This patch will add support for few more RSS key types for flow
key algo to compute rss hash index. Following flow key types have
been added.
Tunnel types like NVGRE, VXLAN, GENEVE.
L2 offload type ETH_DMAC, Here we will consider only DMAC 6 bytes.
And extension header IPV6_EXT (1 byte followed by IPV6 header)

Change-Id: I6d2b50762374d0e75a4f726298cd9565bf114a59
Signed-off-by: Kiran Kumar K <kirankumark@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/5672
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/mbox.h  |  5 ++
 .../ethernet/marvell/octeontx2/af/rvu_nix.c   | 46 +++++++++++++++++++
 2 files changed, 51 insertions(+)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
index a60794a01e02..850b1a62a176 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
@@ -647,6 +647,11 @@ struct nix_rss_flowkey_cfg {
 #define NIX_FLOW_KEY_TYPE_TCP	BIT(3)
 #define NIX_FLOW_KEY_TYPE_UDP	BIT(4)
 #define NIX_FLOW_KEY_TYPE_SCTP	BIT(5)
+#define NIX_FLOW_KEY_TYPE_NVGRE    BIT(6)
+#define NIX_FLOW_KEY_TYPE_VXLAN    BIT(7)
+#define NIX_FLOW_KEY_TYPE_GENEVE   BIT(8)
+#define NIX_FLOW_KEY_TYPE_ETH_DMAC BIT(9)
+#define NIX_FLOW_KEY_TYPE_IPV6_EXT BIT(10)
 	u32	flowkey_cfg; /* Flowkey types selected */
 	u8	group;       /* RSS context or group */
 };
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index ac6ad1487f3e..720393544349 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -2257,6 +2257,52 @@ static int set_flowkey_fields(struct nix_rx_flowkey_alg *alg, u32 flow_cfg)
 				keyoff_marker = false;
 			}
 			break;
+		case NIX_FLOW_KEY_TYPE_NVGRE:
+		case NIX_FLOW_KEY_TYPE_VXLAN:
+		case NIX_FLOW_KEY_TYPE_GENEVE:
+			field->lid = NPC_LID_LD;
+			field->bytesm1 = 2;
+			field->ltype_mask = 0xF;
+			field_marker = true;
+			keyoff_marker = false;
+			if (key_type == NIX_FLOW_KEY_TYPE_NVGRE && valid_key) {
+				field->hdr_offset = 4; /* VSID offset */
+				field->ltype_match = NPC_LT_LD_GRE;
+			}
+
+			if (key_type == NIX_FLOW_KEY_TYPE_VXLAN && valid_key) {
+				/* VNI at UDP header + 4B */
+				field->hdr_offset = 12;
+				field->ltype_match = NPC_LT_LD_UDP_VXLAN;
+			}
+
+			if (key_type == NIX_FLOW_KEY_TYPE_GENEVE && valid_key) {
+				/* VNI at UDP header + 4B */
+				field->hdr_offset = 12;
+				field->ltype_match = NPC_LT_LD_UDP_GENEVE;
+			}
+
+			if (key_type == NIX_FLOW_KEY_TYPE_GENEVE)
+				keyoff_marker = true;
+			break;
+		case NIX_FLOW_KEY_TYPE_ETH_DMAC:
+			field->lid = NPC_LID_LA;
+			field->hdr_offset = 0;
+			field->bytesm1 = 5; /* DMAC 6 Byte */
+			field->ltype_match = NPC_LT_LA_ETHER;
+			field->ltype_mask = 0xF;
+			field_marker = true;
+			keyoff_marker = true;
+			break;
+		case NIX_FLOW_KEY_TYPE_IPV6_EXT:
+			field->lid = NPC_LID_LC;
+			field->hdr_offset = 40; /* IPV6 hdr */
+			field->bytesm1 = 0; /* 1 Byte ext hdr*/
+			field->ltype_match = NPC_LT_LC_IP6_EXT;
+			field->ltype_mask = 0xF;
+			field_marker = true;
+			keyoff_marker = true;
+			break;
 		}
 		field->ena = 1;
 
-- 
2.17.1

