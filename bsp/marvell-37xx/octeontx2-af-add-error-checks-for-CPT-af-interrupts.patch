From a9c858324e4f310fe596e1976249edc7fc162bca Mon Sep 17 00:00:00 2001
From: Pavan Nikhilesh <pbhagavatula@marvell.com>
Date: Tue, 5 Mar 2019 14:15:09 +0530
Subject: [PATCH 054/386] octeontx2-af: add error checks for CPT af interrupts

Add error checks for CPT AF error interrupts registration.

Change-Id: I562dd1fdbf5eec97afca8f756efc905213fac627
Signed-off-by: Pavan Nikhilesh <pbhagavatula@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/5431
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Lukas Bartosik <Lukasz.Bartosik@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/rvu.c   | 14 +++++-----
 .../net/ethernet/marvell/octeontx2/af/rvu.h   |  1 +
 .../ethernet/marvell/octeontx2/af/rvu_cpt.c   | 28 ++++++++++++-------
 3 files changed, 26 insertions(+), 17 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
index d9514daa7c3e..a82881507892 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
@@ -2182,6 +2182,8 @@ static void rvu_unregister_interrupts(struct rvu *rvu)
 {
 	int irq;
 
+	rvu_cpt_unregister_interrupts(rvu);
+
 	/* Disable the Mbox interrupt */
 	rvu_write64(rvu, BLKADDR_RVUM, RVU_AF_PFAF_MBOX_INT_ENA_W1C,
 		    INTR_MASK(rvu->hw->total_pfs) & ~1ULL);
@@ -2386,8 +2388,12 @@ static int rvu_register_interrupts(struct rvu *rvu)
 		goto fail;
 	}
 	rvu->irq_allocated[offset] = true;
-	return 0;
 
+	ret = rvu_cpt_register_interrupts(rvu);
+	if (ret)
+		goto fail;
+
+	return 0;
 fail:
 	rvu_unregister_interrupts(rvu);
 	return ret;
@@ -2674,12 +2680,6 @@ static int rvu_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	if (err)
 		goto err_flr;
 
-	if (is_block_implemented(rvu->hw, BLKADDR_CPT0)) {
-		err = rvu_cpt_register_interrupts(rvu);
-		if (err)
-			goto err_irq;
-	}
-
 	rvu_setup_rvum_blk_revid(rvu);
 
 	err = rvu_policy_init(rvu);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
index a6112820035e..ea731a3a3499 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
@@ -566,6 +566,7 @@ int npc_mcam_verify_channel(struct rvu *rvu, u16 pcifunc, u8 intf, u16 channel);
 /* CPT APIs */
 int rvu_cpt_init(struct rvu *rvu);
 int rvu_cpt_register_interrupts(struct rvu *rvu);
+void rvu_cpt_unregister_interrupts(struct rvu *rvu);
 
 /* NDC APIs */
 int rvu_ndc_sync(struct rvu *rvu, int lfblkid, int lfidx, u64 lfoffset,
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
index 882f25cd3cec..5c4dcf3db06a 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
@@ -105,17 +105,20 @@ static int rvu_cpt_do_register_interrupt(struct rvu *rvu, int irq_offs,
 	return ret;
 }
 
-static void rvu_cpt_unregister_interrupts(struct rvu *rvu)
+void rvu_cpt_unregister_interrupts(struct rvu *rvu)
 {
 	int blkaddr, i, offs;
-	u64 reg;
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, 0);
 	if (blkaddr < 0)
 		return;
 
-	reg = rvu_read64(rvu, blkaddr, CPT_PRIV_AF_INT_CFG);
-	offs = reg & 0x7FF;
+	offs = rvu_read64(rvu, blkaddr, CPT_PRIV_AF_INT_CFG) & 0x7FF;
+	if (!offs) {
+		dev_warn(rvu->dev,
+			 "Failed to get CPT_AF_INT vector offsets\n");
+		return;
+	}
 
 	/* Disable all CPT AF interrupts */
 	for (i = 0; i < 2; i++)
@@ -177,18 +180,23 @@ int rvu_cpt_register_interrupts(struct rvu *rvu)
 {
 
 	int i, offs, blkaddr, ret = 0;
-	u64 reg;
+
+	if (!is_block_implemented(rvu->hw, BLKADDR_CPT0))
+		return 0;
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, 0);
 	if (blkaddr < 0)
 		return blkaddr;
 
-	reg = rvu_read64(rvu, blkaddr, CPT_PRIV_AF_INT_CFG);
-	offs = reg & 0x7FF;
+	offs = rvu_read64(rvu, blkaddr, CPT_PRIV_AF_INT_CFG) & 0x7FF;
+	if (!offs) {
+		dev_warn(rvu->dev,
+			 "Failed to get CPT_AF_INT vector offsets\n");
+		return 0;
+	}
 
-	for (i = 0; i < 2; i++) {
-		ret = rvu_cpt_do_register_interrupt(rvu, offs +
-						    CPT_AF_INT_VEC_FLT0 + i,
+	for (i = CPT_AF_INT_VEC_FLT0; i < CPT_AF_INT_VEC_RVU; i++) {
+		ret = rvu_cpt_do_register_interrupt(rvu, offs + i,
 						    rvu_cpt_af_flr_intr_handler,
 						    cpt_flt_irq_name[i]);
 		if (ret)
-- 
2.17.1

