From a5eeb9e306bb83110f6d8ad557047838815acac5 Mon Sep 17 00:00:00 2001
From: Subbaraya Sundeep <sbhatta@marvell.com>
Date: Fri, 12 Apr 2019 14:50:20 +0530
Subject: [PATCH 144/386] octeontx2-pf: Do not use single PTP clock across all
 PFs

Currently single PTP clock is registered and shared across
all PFs. And PTP mailbox messages are transmitted to AF using
only one PF(say PF1). This created dependency between the PFs
where PF1 driver should be unbound very last. This patch removes
such dependency by registering a PTP clock for each PF.

Change-Id: Id63faea6bf5a45602e71d3ec197ed67a7d4a8d72
Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/7302
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/nic/otx2_ptp.c | 41 +++----------------
 1 file changed, 6 insertions(+), 35 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ptp.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ptp.c
index e19ad143519a..caa5266132f6 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ptp.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ptp.c
@@ -14,7 +14,6 @@
 #include "otx2_ptp.h"
 
 struct otx2_ptp {
-	struct kref refcount;
 	struct ptp_clock_info ptp_info;
 	struct ptp_clock *ptp_clock;
 	struct otx2_nic *nic;
@@ -23,9 +22,6 @@ struct otx2_ptp {
 	struct timecounter time_counter;
 };
 
-static struct otx2_ptp *ptp_ptr;
-static DEFINE_MUTEX(ptp_mutex);
-
 static int otx2_ptp_adjfine(struct ptp_clock_info *ptp_info, long scaled_ppm)
 {
 	struct otx2_ptp *ptp = container_of(ptp_info, struct otx2_ptp,
@@ -130,6 +126,7 @@ static int otx2_ptp_enable(struct ptp_clock_info *ptp_info,
 
 int otx2_ptp_init(struct otx2_nic *pfvf)
 {
+	struct otx2_ptp *ptp_ptr;
 	struct cyclecounter *cc;
 	struct ptp_req *req;
 	int err;
@@ -151,15 +148,6 @@ int otx2_ptp_init(struct otx2_nic *pfvf)
 	}
 	otx2_mbox_unlock(&pfvf->mbox);
 
-	mutex_lock(&ptp_mutex);
-
-	if (ptp_ptr) {
-		kref_get(&ptp_ptr->refcount);
-		pfvf->ptp = ptp_ptr;
-		mutex_unlock(&ptp_mutex);
-		return 0;
-	}
-
 	ptp_ptr = kzalloc(sizeof(*ptp_ptr), GFP_KERNEL);
 	if (!ptp_ptr) {
 		err = -ENOMEM;
@@ -177,8 +165,6 @@ int otx2_ptp_init(struct otx2_nic *pfvf)
 	timecounter_init(&ptp_ptr->time_counter, &ptp_ptr->cycle_counter,
 			 ktime_to_ns(ktime_get_real()));
 
-	kref_init(&ptp_ptr->refcount);
-
 	ptp_ptr->ptp_info = (struct ptp_clock_info) {
 		.owner          = THIS_MODULE,
 		.name           = "OcteonTX2 PTP",
@@ -203,34 +189,19 @@ int otx2_ptp_init(struct otx2_nic *pfvf)
 	pfvf->ptp = ptp_ptr;
 
 error:
-	mutex_unlock(&ptp_mutex);
 	return err;
 }
 
-static void otx2_ptp_release(struct kref *kref)
-{
-	struct otx2_ptp *ptp = container_of(kref, struct otx2_ptp,
-					    refcount);
-	ptp_clock_unregister(ptp->ptp_clock);
-	kfree(ptp);
-}
-
 void otx2_ptp_destroy(struct otx2_nic *pfvf)
 {
-	if (!pfvf->ptp)
-		return;
+	struct otx2_ptp *ptp = pfvf->ptp;
 
-	mutex_lock(&ptp_mutex);
+	if (!ptp)
+		return;
 
-	if (kref_put(&pfvf->ptp->refcount, otx2_ptp_release)) {
-		ptp_ptr = NULL;
-	} else if (ptp_ptr->nic == pfvf) {
-		dev_err(pfvf->dev, "orphaned ptp instance; incorrect order of nic destruction");
-		ptp_ptr->nic = NULL;
-	}
+	ptp_clock_unregister(ptp->ptp_clock);
+	kfree(ptp);
 	pfvf->ptp = NULL;
-
-	mutex_unlock(&ptp_mutex);
 }
 
 int otx2_ptp_clock_index(struct otx2_nic *pfvf)
-- 
2.17.1

