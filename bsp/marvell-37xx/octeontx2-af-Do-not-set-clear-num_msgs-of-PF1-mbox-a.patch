From 1c50ea7ea9f122688a1a9311dee46321bc6f4ead Mon Sep 17 00:00:00 2001
From: Subbaraya Sundeep <sbhatta@marvell.com>
Date: Wed, 3 Jul 2019 18:00:48 +0530
Subject: [PATCH 318/386] octeontx2-af: Do not set/clear num_msgs of PF1 mbox
 always

Current code erroneously sets and clears num_msgs of
PF1 though messages are sent by other PFs. This patch
fixes that. Also removed unnecessary comments.

Fixes: ca7072623099ce8787a191edd836444a032ae187

Change-Id: Ic15d12bd119d1e013b01aed65663dee783da3926
Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/12055
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/rvu.c   | 24 +++++++------------
 .../net/ethernet/marvell/octeontx2/af/rvu.h   |  4 ++--
 2 files changed, 10 insertions(+), 18 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
index 609718b31907..9e4c91ad8d3e 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
@@ -1651,12 +1651,12 @@ static void __rvu_mbox_handler(struct rvu_work *mwork, int type)
 
 	/* Process received mbox messages */
 	req_hdr = mdev->mbase + mbox->rx_start;
-	if (mw->num_msgs == 0)
+	if (mw->mbox_wrk[devid].num_msgs == 0)
 		return;
 
 	offset = mbox->rx_start + ALIGN(sizeof(*req_hdr), MBOX_MSG_ALIGN);
 
-	for (id = 0; id < mw->num_msgs; id++) {
+	for (id = 0; id < mw->mbox_wrk[devid].num_msgs; id++) {
 		msg = mdev->mbase + offset;
 
 		/* Set which PF/VF sent this message based on mbox IRQ */
@@ -1689,12 +1689,8 @@ static void __rvu_mbox_handler(struct rvu_work *mwork, int type)
 				 err, otx2_mbox_id2name(msg->id),
 				 msg->id, devid);
 	}
-		/* mbox messages in the same direction to be handled by same
-		 * mailbox occurs serially. So write to mw->num_msgs happens
-		 * only after the previous context is done with it.
-		 */
+	mw->mbox_wrk[devid].num_msgs = 0;
 
-	mw->num_msgs = 0;
 	/* Send mbox responses to VF/PF */
 	otx2_mbox_msg_send(mbox, devid);
 }
@@ -1739,14 +1735,14 @@ static void __rvu_mbox_up_handler(struct rvu_work *mwork, int type)
 	mdev = &mbox->dev[devid];
 
 	rsp_hdr = mdev->mbase + mbox->rx_start;
-	if (mw->up_num_msgs == 0) {
+	if (mw->mbox_wrk_up[devid].up_num_msgs == 0) {
 		dev_warn(rvu->dev, "mbox up handler: num_msgs = 0\n");
 		return;
 	}
 
 	offset = mbox->rx_start + ALIGN(sizeof(*rsp_hdr), MBOX_MSG_ALIGN);
 
-	for (id = 0; id < mw->up_num_msgs; id++) {
+	for (id = 0; id < mw->mbox_wrk_up[devid].up_num_msgs; id++) {
 		msg = mdev->mbase + offset;
 
 		if (msg->id >= MBOX_MSG_MAX) {
@@ -1776,11 +1772,7 @@ static void __rvu_mbox_up_handler(struct rvu_work *mwork, int type)
 		offset = mbox->rx_start + msg->next_msgoff;
 		mdev->msgs_acked++;
 	}
-		/* mbox messages in the same direction to be handled by same
-		 * mailbox occurs serially. So write to mw->up_num_msgs
-		 * happens only after the previous context is done with it.
-		 */
-	mw->up_num_msgs = 0;
+	mw->mbox_wrk_up[devid].up_num_msgs = 0;
 
 	otx2_mbox_reset(mbox, devid);
 }
@@ -1928,7 +1920,7 @@ static void rvu_queue_work(struct mbox_wq_info *mw, int first,
 		 */
 
 		if (hdr->num_msgs) {
-			mw->num_msgs = hdr->num_msgs;
+			mw->mbox_wrk[i].num_msgs = hdr->num_msgs;
 			hdr->num_msgs = 0;
 			queue_work(mw->mbox_wq, &mw->mbox_wrk[i].work);
 		}
@@ -1936,7 +1928,7 @@ static void rvu_queue_work(struct mbox_wq_info *mw, int first,
 		mdev = &mbox->dev[i];
 		hdr = mdev->mbase + mbox->rx_start;
 		if (hdr->num_msgs) {
-			mw->up_num_msgs = hdr->num_msgs;
+			mw->mbox_wrk_up[i].up_num_msgs = hdr->num_msgs;
 			hdr->num_msgs = 0;
 			queue_work(mw->mbox_wq, &mw->mbox_wrk_up[i].work);
 		}
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
index 1ea0cd0d6881..485ebc12a20e 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
@@ -74,6 +74,8 @@ struct rvu_debugfs {
 struct rvu_work {
 	struct	work_struct work;
 	struct	rvu *rvu;
+	int num_msgs;
+	int up_num_msgs;
 };
 
 struct rsrc_bmap {
@@ -367,8 +369,6 @@ struct mbox_wq_info {
 	struct rvu_work *mbox_wrk_up;
 
 	struct workqueue_struct *mbox_wq;
-	int num_msgs;
-	int up_num_msgs;
 };
 
 struct rvu_fwdata {
-- 
2.17.1

