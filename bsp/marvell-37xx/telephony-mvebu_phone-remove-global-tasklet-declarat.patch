From ca4bf306c78a8c27a983caa83bdc8e1b489e9ad7 Mon Sep 17 00:00:00 2001
From: Marcin Wojtas <mw@semihalf.com>
Date: Sun, 21 Jul 2019 01:00:03 +0200
Subject: [PATCH 349/386] telephony: mvebu_phone: remove global tasklet
 declaration

Instead of declaring tasklets globally, initialize them
in probe function and keep as a part of mv_phone_dev structure.

Change-Id: Ie5a2df85cff986485fed90c9e9834f11dae3008a
Signed-off-by: Marcin Wojtas <mw@semihalf.com>
Reviewed-on: https://sj1git1.cavium.com/12957
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 drivers/telephony/mvebu_phone/mv_phone.h     |   6 +
 drivers/telephony/mvebu_phone/mv_phone_dev.c | 476 +++++++++----------
 2 files changed, 241 insertions(+), 241 deletions(-)

diff --git a/drivers/telephony/mvebu_phone/mv_phone.h b/drivers/telephony/mvebu_phone/mv_phone.h
index 1609b8236155..a5d639f029ca 100644
--- a/drivers/telephony/mvebu_phone/mv_phone.h
+++ b/drivers/telephony/mvebu_phone/mv_phone.h
@@ -12,6 +12,7 @@
 #include <linux/delay.h>
 #include <linux/dma-mapping.h>
 #include <linux/init.h>
+#include <linux/interrupt.h>
 #include <linux/io.h>
 #include <linux/mbus.h>
 #include <linux/module.h>
@@ -171,6 +172,11 @@ struct mv_phone_dev {
 
 	/* TDMMC silicon revision */
 	enum tdmmc_ip_version tdmmc_ip_ver;
+
+	/* Tasklets */
+	struct tasklet_struct tdm_if_rx_tasklet;
+	struct tasklet_struct tdm_if_tx_tasklet;
+	struct tasklet_struct tdm2c_if_reset_tasklet;
 };
 
 /* This enumerator defines the Marvell Units ID */
diff --git a/drivers/telephony/mvebu_phone/mv_phone_dev.c b/drivers/telephony/mvebu_phone/mv_phone_dev.c
index 302ad52fe6bd..68e318884750 100644
--- a/drivers/telephony/mvebu_phone/mv_phone_dev.c
+++ b/drivers/telephony/mvebu_phone/mv_phone_dev.c
@@ -18,23 +18,8 @@
 
 #define DRV_NAME "mvebu_phone"
 
-/* TDM Interrupt Service Routine */
-static irqreturn_t tdm_if_isr(int irq, void *dev_id);
-
-/* Rx/Tx Tasklets  */
-static void tdm2c_if_pcm_rx_process(unsigned long arg);
-static void tdmmc_if_pcm_rx_process(unsigned long arg);
-static void tdm2c_if_pcm_tx_process(unsigned long arg);
-static void tdmmc_if_pcm_tx_process(unsigned long arg);
-static void tdm2c_if_reset_channels(unsigned long arg);
-
 /* Globals */
 static struct mv_phone_dev *priv;
-static DECLARE_TASKLET(tdm2c_if_rx_tasklet, tdm2c_if_pcm_rx_process, 0);
-static DECLARE_TASKLET(tdmmc_if_rx_tasklet, tdmmc_if_pcm_rx_process, 0);
-static DECLARE_TASKLET(tdm2c_if_tx_tasklet, tdm2c_if_pcm_tx_process, 0);
-static DECLARE_TASKLET(tdmmc_if_tx_tasklet, tdmmc_if_pcm_tx_process, 0);
-static DECLARE_TASKLET(tdm2c_if_reset_tasklet, tdm2c_if_reset_channels, 0);
 
 /* Statistic printout in userspace via /proc/tdm */
 static int mv_phone_status_show(struct seq_file *m, void *v)
@@ -253,226 +238,12 @@ static int tdm_hw_init(struct mv_phone_params *tdm_params)
 	return ret;
 }
 
-/* Main TDM initialization routine */
-int tdm_if_init(struct tal_params *tal_params)
-{
-	struct mv_phone_params tdm_params;
-	int i, irqs_requested, ret;
-
-	if (priv->tdm_init) {
-		dev_warn(priv->dev,
-			 "Marvell Telephony Driver already started...\n");
-		return 0;
-	}
-
-	dev_info(priv->dev, "Loading Marvell Telephony Driver\n");
-
-	if (!tal_params) {
-		dev_err(priv->dev, "%s: bad parameters\n", __func__);
-		return -EINVAL;
-
-	}
-
-	/* Reset operation flags */
-	priv->tdm_init = false;
-	priv->pcm_enable = false;
-	priv->pcm_is_stopping = false;
-	priv->pcm_stop_flag = false;
-	priv->pcm_stop_status = false;
-	priv->pcm_stop_fail = 0;
-
-	/* Calculate Rx/Tx buffer size(use in callbacks) */
-	priv->buff_size = (tal_params->pcm_format * tal_params->total_lines *
-			   80 * (tal_params->sampling_period/
-			   MV_TDM_BASE_SAMPLING_PERIOD));
-
-	/* Assign TDM parameters */
-	memcpy(&tdm_params, tal_params, sizeof(struct mv_phone_params));
-
-	/* TDM hardware initialization */
-	ret = tdm_hw_init(&tdm_params);
-	if (ret) {
-		dev_err(priv->dev, "%s: TDM initialization failed\n", __func__);
-		return ret;
-	}
-
-	/* Create TDM procfs statistics */
-	priv->tdm_stats = proc_mkdir("tdm", NULL);
-	if (priv->tdm_stats) {
-		if (!proc_create("tdm_stats", 0444,
-				 priv->tdm_stats, &mv_phone_operations))
-			return -ENOMEM;
-	}
-
-	/* Register TDM interrupts */
-	irqs_requested = 0;
-	for (i = 0; i < priv->irq_count; i++) {
-		ret = request_irq(priv->irq[i], tdm_if_isr, 0x0, "tdm", NULL);
-		if (ret) {
-			dev_err(priv->dev, "%s: Failed to connect irq(%d)\n",
-				__func__, priv->irq[i]);
-			goto err_irq;
-		}
-		irqs_requested++;
-	}
-
-	priv->tdm_init = true;
-
-	return 0;
-
-err_irq:
-	for (i = 0; i < irqs_requested; i++)
-		free_irq(priv->irq[i], NULL);
-
-	return ret;
-}
-
-/* Disable TDM2C PCM */
-void tdm2c_pcm_disable(void)
-{
-	u32 max_poll = 0;
-
-	tdm2c_if_pcm_stop();
-
-	while (priv->pcm_is_stopping && (max_poll <
-	       MV_TDM_STOP_POLLING_TIMEOUT)) {
-		mdelay(1);
-		max_poll++;
-	}
-
-	if (max_poll >= MV_TDM_STOP_POLLING_TIMEOUT)
-		dev_warn(priv->dev, "\n%s: Channels disabling timeout (%dms)\n",
-			 __func__, MV_TDM_STOP_POLLING_TIMEOUT);
-
-}
-
-/* Main TDM deinitialization routine */
-void tdm_if_exit(void)
-{
-	int i;
-
-	/* Check if already stopped */
-	if (!priv->pcm_enable && !priv->tdm_init)
-		return;
-
-	/* Stop PCM channels */
-	if (priv->pcm_enable) {
-		switch (priv->tdm_type) {
-		case MV_TDM_UNIT_TDM2C:
-			tdm2c_pcm_disable();
-			break;
-		case MV_TDM_UNIT_TDMMC:
-			tdmmc_if_pcm_stop();
-			break;
-		default:
-			dev_err(&priv->parent->dev, "%s: undefined TDM type\n",
-				__func__);
-		}
-	}
-
-	/* Disable TDM and release resources */
-	if (priv->tdm_init) {
-		switch (priv->tdm_type) {
-		case MV_TDM_UNIT_TDM2C:
-			tdm2c_release();
-			break;
-		case MV_TDM_UNIT_TDMMC:
-			tdmmc_release();
-			break;
-		default:
-			dev_err(&priv->parent->dev, "%s: undefined TDM type\n",
-				__func__);
-		}
-
-		/* Remove proc directory & entries */
-		remove_proc_entry("tdm_stats", priv->tdm_stats);
-		remove_proc_entry("tdm", NULL);
-
-		/* Release interrupt */
-		for (i = 0; i < priv->irq_count; i++)
-			free_irq(priv->irq[i], NULL);
-
-		priv->tdm_init = false;
-	}
-}
-
-static int tdm_if_control(int cmd, void *arg)
-{
-	switch (cmd) {
-	case TDM_DEV_TDM_TEST_MODE_ENABLE:
-		priv->test_enable = true;
-		break;
-
-	case TDM_DEV_TDM_TEST_MODE_DISABLE:
-		priv->test_enable = false;
-		break;
-
-	default:
-		return -EINVAL;
-	};
-
-	return 0;
-}
-
-static int tdm2c_if_write(u8 *buffer, int size)
-{
-	if (priv->test_enable)
-		return tdm2c_tx(buffer);
-
-	return 0;
-}
-
-static int tdmmc_if_write(u8 *buffer, int size)
-{
-	if (priv->test_enable)
-		return tdmmc_tx(buffer);
-
-	return 0;
-}
-
-static void tdm_if_stats_get(struct tal_stats *tdm_if_stats)
-{
-	if (!priv->tdm_init)
-		return;
-
-	tdm_if_stats->tdm_init = priv->tdm_init;
-	tdm_if_stats->rx_miss = priv->rx_miss;
-	tdm_if_stats->tx_miss = priv->tx_miss;
-	tdm_if_stats->rx_over = priv->rx_over;
-	tdm_if_stats->tx_under = priv->tx_under;
-
-	if (priv->use_tdm_ext_stats)
-		tdm2c_ext_stats_get(&tdm_if_stats->tdm_ext_stats);
-}
-
-static struct tal_if tdm2c_if = {
-	.pcm_start	= tdm2c_if_pcm_start,
-	.pcm_stop	= tdm2c_if_pcm_stop,
-	.init		= tdm_if_init,
-	.exit		= tdm_if_exit,
-	.control	= tdm_if_control,
-	.write		= tdm2c_if_write,
-	.stats_get	= tdm_if_stats_get,
-};
-
-static struct tal_if tdmmc_if = {
-	.pcm_start	= tdmmc_if_pcm_start,
-	.pcm_stop	= tdmmc_if_pcm_stop,
-	.init		= tdm_if_init,
-	.exit		= tdm_if_exit,
-	.control	= tdm_if_control,
-	.write		= tdmmc_if_write,
-	.stats_get	= tdm_if_stats_get,
-};
-
-/* Interrupt handling and tasklet callbacks */
+/* Main interrupt handler and RX/TX tasklet callback routines */
 
 /* Common interrupt top-half handler */
 static irqreturn_t tdm_if_isr(int irq, void *dev_id)
 {
 	struct mv_phone_intr_info tdm_int_info;
-	struct tasklet_struct *tdm_rx_tasklet = NULL;
-	struct tasklet_struct *tdm_tx_tasklet = NULL;
 	u32 int_type;
 	int ret = 0;
 
@@ -480,13 +251,9 @@ static irqreturn_t tdm_if_isr(int irq, void *dev_id)
 	switch (priv->tdm_type) {
 	case MV_TDM_UNIT_TDM2C:
 		ret = tdm2c_intr_low(&tdm_int_info);
-		tdm_rx_tasklet = &tdm2c_if_rx_tasklet;
-		tdm_tx_tasklet = &tdm2c_if_tx_tasklet;
 		break;
 	case MV_TDM_UNIT_TDMMC:
 		tdmmc_intr_low(&tdm_int_info);
-		tdm_rx_tasklet = &tdmmc_if_rx_tasklet;
-		tdm_tx_tasklet = &tdmmc_if_tx_tasklet;
 		break;
 	default:
 		dev_err(&priv->parent->dev,
@@ -507,7 +274,7 @@ static irqreturn_t tdm_if_isr(int irq, void *dev_id)
 	else if (mv_phone_get_slic_board_type() == MV_BOARD_SLIC_ISI_ID)
 		silabs_if_isi_interrupt();
 
-	if (ret && !priv->pcm_stop_status)	{
+	if (ret && !priv->pcm_stop_status) {
 		priv->pcm_stop_status = true;
 
 		/*
@@ -518,7 +285,7 @@ static irqreturn_t tdm_if_isr(int irq, void *dev_id)
 			dev_dbg(priv->dev, "Stopping the TDM\n");
 			tdm2c_if_pcm_stop();
 			priv->pcm_stop_flag = false;
-			tasklet_hi_schedule(&tdm2c_if_reset_tasklet);
+			tasklet_hi_schedule(&priv->tdm2c_if_reset_tasklet);
 		} else {
 			dev_dbg(priv->dev, "Tasklet already running\n");
 			priv->pcm_stop_flag = true;
@@ -541,7 +308,7 @@ static irqreturn_t tdm_if_isr(int irq, void *dev_id)
 			/* Schedule Rx processing within SOFT_IRQ context */
 			dev_dbg(priv->dev, "%s: schedule Rx tasklet\n",
 				__func__);
-			tasklet_hi_schedule(tdm_rx_tasklet);
+			tasklet_hi_schedule(&priv->tdm_if_rx_tasklet);
 		}
 	}
 
@@ -556,7 +323,7 @@ static irqreturn_t tdm_if_isr(int irq, void *dev_id)
 			/* Schedule Tx processing within SOFT_IRQ context */
 			dev_dbg(priv->dev, "%s: schedule Tx tasklet\n",
 				__func__);
-			tasklet_hi_schedule(tdm_tx_tasklet);
+			tasklet_hi_schedule(&priv->tdm_if_tx_tasklet);
 		}
 	}
 
@@ -571,7 +338,7 @@ static irqreturn_t tdm_if_isr(int irq, void *dev_id)
 				__func__);
 			priv->pcm_enable = false;
 			/* Issue SW reset */
-			tasklet_hi_schedule(&tdm2c_if_reset_tasklet);
+			tasklet_hi_schedule(&priv->tdm2c_if_reset_tasklet);
 		}
 	}
 
@@ -622,7 +389,7 @@ static void tdm2c_if_pcm_rx_process(unsigned long arg)
 		spin_lock_irqsave(&priv->lock, flags);
 		priv->pcm_stop_flag = false;
 		spin_unlock_irqrestore(&priv->lock, flags);
-		tasklet_hi_schedule(&tdm2c_if_reset_tasklet);
+		tasklet_hi_schedule(&priv->tdm2c_if_reset_tasklet);
 	}
 }
 
@@ -686,7 +453,7 @@ static void tdm2c_if_pcm_tx_process(unsigned long arg)
 		spin_lock_irqsave(&priv->lock, flags);
 		priv->pcm_stop_flag = false;
 		spin_unlock_irqrestore(&priv->lock, flags);
-		tasklet_hi_schedule(&tdm2c_if_reset_tasklet);
+		tasklet_hi_schedule(&priv->tdm2c_if_reset_tasklet);
 	}
 }
 
@@ -751,6 +518,220 @@ static void tdm2c_if_reset_channels(unsigned long arg)
 	tdm2c_if_pcm_start();
 }
 
+/* Main TDM initialization routine */
+int tdm_if_init(struct tal_params *tal_params)
+{
+	struct mv_phone_params tdm_params;
+	int i, irqs_requested, ret;
+
+	if (priv->tdm_init) {
+		dev_warn(priv->dev,
+			 "Marvell Telephony Driver already started...\n");
+		return 0;
+	}
+
+	dev_info(priv->dev, "Loading Marvell Telephony Driver\n");
+
+	if (!tal_params) {
+		dev_err(priv->dev, "%s: bad parameters\n", __func__);
+		return -EINVAL;
+
+	}
+
+	/* Reset operation flags */
+	priv->tdm_init = false;
+	priv->pcm_enable = false;
+	priv->pcm_is_stopping = false;
+	priv->pcm_stop_flag = false;
+	priv->pcm_stop_status = false;
+	priv->pcm_stop_fail = 0;
+
+	/* Calculate Rx/Tx buffer size(use in callbacks) */
+	priv->buff_size = (tal_params->pcm_format * tal_params->total_lines *
+			   80 * (tal_params->sampling_period/
+			   MV_TDM_BASE_SAMPLING_PERIOD));
+
+	/* Assign TDM parameters */
+	memcpy(&tdm_params, tal_params, sizeof(struct mv_phone_params));
+
+	/* TDM hardware initialization */
+	ret = tdm_hw_init(&tdm_params);
+	if (ret) {
+		dev_err(priv->dev, "%s: TDM initialization failed\n", __func__);
+		return ret;
+	}
+
+	/* Create TDM procfs statistics */
+	priv->tdm_stats = proc_mkdir("tdm", NULL);
+	if (priv->tdm_stats) {
+		if (!proc_create("tdm_stats", 0444,
+				 priv->tdm_stats, &mv_phone_operations))
+			return -ENOMEM;
+	}
+
+	/* Register TDM interrupts */
+	irqs_requested = 0;
+	for (i = 0; i < priv->irq_count; i++) {
+		ret = request_irq(priv->irq[i], tdm_if_isr, 0x0, "tdm", NULL);
+		if (ret) {
+			dev_err(priv->dev, "%s: Failed to connect irq(%d)\n",
+				__func__, priv->irq[i]);
+			goto err_irq;
+		}
+		irqs_requested++;
+	}
+
+	priv->tdm_init = true;
+
+	return 0;
+
+err_irq:
+	for (i = 0; i < irqs_requested; i++)
+		free_irq(priv->irq[i], NULL);
+
+	return ret;
+}
+
+/* Disable TDM2C PCM */
+void tdm2c_pcm_disable(void)
+{
+	u32 max_poll = 0;
+
+	tdm2c_if_pcm_stop();
+
+	while (priv->pcm_is_stopping && (max_poll <
+	       MV_TDM_STOP_POLLING_TIMEOUT)) {
+		mdelay(1);
+		max_poll++;
+	}
+
+	if (max_poll >= MV_TDM_STOP_POLLING_TIMEOUT)
+		dev_warn(priv->dev, "\n%s: Channels disabling timeout (%dms)\n",
+			 __func__, MV_TDM_STOP_POLLING_TIMEOUT);
+
+}
+
+/* Main TDM deinitialization routine */
+void tdm_if_exit(void)
+{
+	int i;
+
+	/* Check if already stopped */
+	if (!priv->pcm_enable && !priv->tdm_init)
+		return;
+
+	/* Stop PCM channels */
+	if (priv->pcm_enable) {
+		switch (priv->tdm_type) {
+		case MV_TDM_UNIT_TDM2C:
+			tdm2c_pcm_disable();
+			break;
+		case MV_TDM_UNIT_TDMMC:
+			tdmmc_if_pcm_stop();
+			break;
+		default:
+			dev_err(&priv->parent->dev, "%s: undefined TDM type\n",
+				__func__);
+		}
+	}
+
+	/* Disable TDM and release resources */
+	if (priv->tdm_init) {
+		switch (priv->tdm_type) {
+		case MV_TDM_UNIT_TDM2C:
+			tdm2c_release();
+			break;
+		case MV_TDM_UNIT_TDMMC:
+			tdmmc_release();
+			break;
+		default:
+			dev_err(&priv->parent->dev, "%s: undefined TDM type\n",
+				__func__);
+		}
+
+		/* Remove proc directory & entries */
+		remove_proc_entry("tdm_stats", priv->tdm_stats);
+		remove_proc_entry("tdm", NULL);
+
+		/* Release interrupt */
+		for (i = 0; i < priv->irq_count; i++)
+			free_irq(priv->irq[i], NULL);
+
+		priv->tdm_init = false;
+	}
+}
+
+static int tdm_if_control(int cmd, void *arg)
+{
+	switch (cmd) {
+	case TDM_DEV_TDM_TEST_MODE_ENABLE:
+		priv->test_enable = true;
+		break;
+
+	case TDM_DEV_TDM_TEST_MODE_DISABLE:
+		priv->test_enable = false;
+		break;
+
+	default:
+		return -EINVAL;
+	};
+
+	return 0;
+}
+
+static int tdm2c_if_write(u8 *buffer, int size)
+{
+	if (priv->test_enable)
+		return tdm2c_tx(buffer);
+
+	return 0;
+}
+
+static int tdmmc_if_write(u8 *buffer, int size)
+{
+	if (priv->test_enable)
+		return tdmmc_tx(buffer);
+
+	return 0;
+}
+
+static void tdm_if_stats_get(struct tal_stats *tdm_if_stats)
+{
+	if (!priv->tdm_init)
+		return;
+
+	tdm_if_stats->tdm_init = priv->tdm_init;
+	tdm_if_stats->rx_miss = priv->rx_miss;
+	tdm_if_stats->tx_miss = priv->tx_miss;
+	tdm_if_stats->rx_over = priv->rx_over;
+	tdm_if_stats->tx_under = priv->tx_under;
+
+	if (priv->use_tdm_ext_stats)
+		tdm2c_ext_stats_get(&tdm_if_stats->tdm_ext_stats);
+}
+
+static struct tal_if tdm2c_if = {
+	.pcm_start	= tdm2c_if_pcm_start,
+	.pcm_stop	= tdm2c_if_pcm_stop,
+	.init		= tdm_if_init,
+	.exit		= tdm_if_exit,
+	.control	= tdm_if_control,
+	.write		= tdm2c_if_write,
+	.stats_get	= tdm_if_stats_get,
+};
+
+static struct tal_if tdmmc_if = {
+	.pcm_start	= tdmmc_if_pcm_start,
+	.pcm_stop	= tdmmc_if_pcm_stop,
+	.init		= tdm_if_init,
+	.exit		= tdm_if_exit,
+	.control	= tdm_if_control,
+	.write		= tdmmc_if_write,
+	.stats_get	= tdm_if_stats_get,
+};
+
+/* Additional helper routines */
+
 /* Enable device interrupts. */
 void mv_phone_intr_enable(u8 dev_id)
 {
@@ -1013,6 +994,19 @@ static int mvebu_phone_probe(struct platform_device *pdev)
 #ifdef CONFIG_MV_TDM_EXT_STATS
 		priv->use_tdm_ext_stats = true;
 #endif
+		tasklet_init(&priv->tdm_if_rx_tasklet,
+			     tdm2c_if_pcm_rx_process, 0);
+		tasklet_init(&priv->tdm_if_tx_tasklet,
+			     tdm2c_if_pcm_tx_process, 0);
+		tasklet_init(&priv->tdm2c_if_reset_tasklet,
+			     tdm2c_if_reset_channels, 0);
+	}
+
+	if (priv->tdm_type == MV_TDM_UNIT_TDMMC) {
+		tasklet_init(&priv->tdm_if_rx_tasklet,
+			     tdmmc_if_pcm_rx_process, 0);
+		tasklet_init(&priv->tdm_if_tx_tasklet,
+			     tdmmc_if_pcm_tx_process, 0);
 	}
 
 	spin_lock_init(&priv->lock);
-- 
2.17.1

