From 2ac0c71918027f0a062e81ac5968bd01fec77e15 Mon Sep 17 00:00:00 2001
From: Subbaraya Sundeep <sbhatta@marvell.com>
Date: Mon, 4 Mar 2019 20:26:04 +0530
Subject: [PATCH 030/386] octeontx2-pf: Use install flow mbox message for RX
 VLAN offload

Since mailbox messages for installing flows are in place RX
VLAN offload can be done by installing a flow with VTAG
action. Removed existing logic which uses rxvlan_alloc mailbox
message.

Change-Id: I5254553b8ef17f32b2d8906e6562f54a7ca3a688
Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/5519
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.c       | 47 +++++++++++++++++++
 .../marvell/octeontx2/nic/otx2_common.h       |  4 ++
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  | 33 +++++++++----
 3 files changed, 75 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
index bd921b60b2a6..bc4f1f743d18 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
@@ -22,6 +22,53 @@ static inline void otx2_nix_rq_op_stats(struct queue_stats *stats,
 static inline void otx2_nix_sq_op_stats(struct queue_stats *stats,
 					struct otx2_nic *pfvf, int qidx);
 
+int otx2_install_rxvlan_offload_flow(struct otx2_nic *pfvf)
+{
+	struct npc_install_flow_req *req;
+
+	if (!pfvf->rxvlan_alloc)
+		return -EINVAL;
+
+	req = otx2_mbox_alloc_msg_npc_install_flow(&pfvf->mbox);
+	if (!req)
+		return -ENOMEM;
+
+	req->entry = pfvf->rxvlan_entry;
+	req->intf = NIX_INTF_RX;
+	req->channel = pfvf->rx_chan_base;
+	req->op = NIX_RX_ACTIONOP_UCAST;
+	req->features = BIT_ULL(NPC_OUTER_VID);
+	req->vtag0_valid = 1;
+	req->vtag0_type = 0;
+
+	/* Send message to AF */
+	if (otx2_sync_mbox_msg(&pfvf->mbox))
+		return -EINVAL;
+
+	return 0;
+}
+EXPORT_SYMBOL(otx2_install_rxvlan_offload_flow);
+
+int otx2_delete_rxvlan_offload_flow(struct otx2_nic *pfvf)
+{
+	struct npc_delete_flow_req *req;
+
+	if (!pfvf->rxvlan_alloc)
+		return -EINVAL;
+
+	req = otx2_mbox_alloc_msg_npc_delete_flow(&pfvf->mbox);
+	if (!req)
+		return -ENOMEM;
+
+	req->entry = pfvf->rxvlan_entry;
+	/* Send message to AF */
+	if (otx2_sync_mbox_msg(&pfvf->mbox))
+		return -EINVAL;
+
+	return 0;
+}
+EXPORT_SYMBOL(otx2_delete_rxvlan_offload_flow);
+
 void otx2_update_lmac_stats(struct otx2_nic *pfvf)
 {
 	struct msg_req *req;
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index 807975b2f74d..92f885e335f0 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -177,6 +177,8 @@ struct otx2_nic {
 	struct otx2_vf_config	*vf_configs;
 	struct cgx_link_user_info linfo;
 	struct otx2_ptp		*ptp;
+	u16			rxvlan_entry;
+	bool			rxvlan_alloc;
 };
 
 static inline bool is_9xxx_pass1_silicon(struct pci_dev *pdev)
@@ -474,6 +476,8 @@ int otx2_update_rq_stats(struct otx2_nic *pfvf, int qidx);
 int otx2_update_sq_stats(struct otx2_nic *pfvf, int qidx);
 void otx2_set_ethtool_ops(struct net_device *netdev);
 void otx2vf_set_ethtool_ops(struct net_device *netdev);
+int otx2_install_rxvlan_offload_flow(struct otx2_nic *pfvf);
+int otx2_delete_rxvlan_offload_flow(struct otx2_nic *pfvf);
 
 int otx2_open(struct net_device *netdev);
 int otx2_stop(struct net_device *netdev);
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index 02e6d9a82540..47e87b94e1b7 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -825,6 +825,16 @@ static int otx2_enable_rxvlan(struct otx2_nic *pf, bool enable)
 	struct mbox_msghdr *rsp_hdr;
 	int err;
 
+	if (enable) {
+		err = otx2_install_rxvlan_offload_flow(pf);
+		if (err)
+			return err;
+	} else {
+		err = otx2_delete_rxvlan_offload_flow(pf);
+		if (err)
+			return err;
+	}
+
 	req = otx2_mbox_alloc_msg_nix_vtag_cfg(&pf->mbox);
 	if (!req)
 		return -ENOMEM;
@@ -871,24 +881,29 @@ static void otx2_alloc_rxvlan(struct otx2_nic *pf)
 {
 	netdev_features_t old, wanted = NETIF_F_HW_VLAN_STAG_RX |
 					NETIF_F_HW_VLAN_CTAG_RX;
-	struct mbox_msghdr *rsp_hdr;
-	struct msg_req *req;
+	struct npc_mcam_alloc_entry_req *req;
+	struct npc_mcam_alloc_entry_rsp *rsp;
 	int err;
 
-	req = otx2_mbox_alloc_msg_nix_rxvlan_alloc(&pf->mbox);
+	req = otx2_mbox_alloc_msg_npc_mcam_alloc_entry(&pf->mbox);
 	if (!req)
 		return;
 
-	err = otx2_sync_mbox_msg(&pf->mbox);
-	if (err)
+	req->contig = false;
+	req->count = 1;
+	/* Send message to AF */
+	if (otx2_sync_mbox_msg(&pf->mbox))
 		return;
-
-	rsp_hdr = otx2_mbox_get_rsp(&pf->mbox.mbox, 0, &req->hdr);
-	if (IS_ERR(rsp_hdr))
+	rsp = (struct npc_mcam_alloc_entry_rsp *)otx2_mbox_get_rsp
+						 (&pf->mbox.mbox, 0, &req->hdr);
+	if (IS_ERR(rsp))
 		return;
 
+	pf->rxvlan_entry = rsp->entry_list[0];
+	pf->rxvlan_alloc = true;
+
 	old = pf->netdev->hw_features;
-	if (rsp_hdr->rc) {
+	if (rsp->hdr.rc) {
 		/* in case of failure during rxvlan allocation
 		 * features must be updated accordingly
 		 */
-- 
2.17.1

