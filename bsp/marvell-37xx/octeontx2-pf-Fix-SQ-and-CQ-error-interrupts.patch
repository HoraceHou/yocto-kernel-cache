From 858941e30cd2f3b3fb84aafadb8e0c395b75d78b Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Mon, 4 Mar 2019 16:52:38 +0530
Subject: [PATCH 011/386] octeontx2-pf: Fix SQ and CQ error interrupts

Qidx should be written at 63:44 bit offset in SQ/CQ_OP_INT
csr and not at 32bit offset. Also under resonable traffic
rates packets will be dropped due to resource exhaustion,
triggerring RQ drop or red drop interrupt will unnecesaary
adds to the CPU load. Moreover it is not possible to count
red packet drops with these interrupts. Hence remove
triggering IRQ for these.

Change-Id: I53323b7ae5224e067d2b451034b2d00e0e56d53f
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/5253
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.h       |  8 ----
 .../marvell/octeontx2/nic/otx2_ethtool.c      | 29 +----------
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  | 48 +++----------------
 .../ethernet/marvell/octeontx2/nic/otx2_vf.c  | 15 +-----
 4 files changed, 10 insertions(+), 90 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index b97633c88464..5692bf326f4c 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -42,13 +42,6 @@ enum arua_mapped_qtypes {
 #define NIX_LF_ERR_VEC				0x81
 #define NIX_LF_POISON_VEC			0x82
 
-struct  otx2_pcpu_stats {
-	u64 rq_drops;
-	u64 rq_red_drops;
-
-	struct u64_stats_sync syncp;
-};
-
 /* RSS configuration */
 struct otx2_rss_info {
 	u8 enable;
@@ -115,7 +108,6 @@ struct otx2_hw {
 	struct pci_dev		*pdev;
 	struct otx2_rss_info	rss_info;
 	struct otx2_dev_stats	dev_stats;
-	struct otx2_pcpu_stats  __percpu *pcpu_stats;
 	u16                     rx_queues;
 	u16                     tx_queues;
 	u16			max_queues;
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
index 6f8a4292c96f..e580c617d055 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
@@ -33,11 +33,6 @@ struct otx2_stat {
 	.index = offsetof(struct otx2_dev_stats, stat) / sizeof(u64), \
 }
 
-#define OTX2_PCPU_STAT(stat) { \
-	.name = #stat, \
-	.index = offsetof(struct otx2_pcpu_stats, stat) / sizeof(u64), \
-}
-
 static const struct otx2_stat otx2_dev_stats[] = {
 	OTX2_DEV_STAT(rx_bytes),
 	OTX2_DEV_STAT(rx_frames),
@@ -54,18 +49,12 @@ static const struct otx2_stat otx2_dev_stats[] = {
 	OTX2_DEV_STAT(tx_drops),
 };
 
-static const struct otx2_stat otx2_pcpu_stats[] = {
-	OTX2_PCPU_STAT(rq_drops),
-	OTX2_PCPU_STAT(rq_red_drops),
-};
-
 static const struct otx2_stat otx2_queue_stats[] = {
 	{ "bytes", 0 },
 	{ "frames", 1 },
 };
 
 static const unsigned int otx2_n_dev_stats = ARRAY_SIZE(otx2_dev_stats);
-static const unsigned int otx2_n_pcpu_stats = ARRAY_SIZE(otx2_pcpu_stats);
 static const unsigned int otx2_n_queue_stats = ARRAY_SIZE(otx2_queue_stats);
 
 static void otx2_get_drvinfo(struct net_device *netdev,
@@ -112,11 +101,6 @@ static void otx2_get_strings(struct net_device *netdev, u32 sset, u8 *data)
 		data += ETH_GSTRING_LEN;
 	}
 
-	for (stats = 0; stats < otx2_n_pcpu_stats; stats++) {
-		memcpy(data, otx2_pcpu_stats[stats].name, ETH_GSTRING_LEN);
-		data += ETH_GSTRING_LEN;
-	}
-
 	otx2_get_qset_strings(pfvf, &data, 0);
 
 	for (stats = 0; stats < CGX_RX_STATS_COUNT; stats++) {
@@ -166,21 +150,12 @@ static void otx2_get_ethtool_stats(struct net_device *netdev,
 				   struct ethtool_stats *stats, u64 *data)
 {
 	struct otx2_nic *pfvf = netdev_priv(netdev);
-	int stat, cpu;
+	int stat;
 
 	otx2_get_dev_stats(pfvf);
 	for (stat = 0; stat < otx2_n_dev_stats; stat++)
 		*(data++) = ((u64 *)&pfvf->hw.dev_stats)
 				[otx2_dev_stats[stat].index];
-	for (stat = 0; stat < otx2_n_pcpu_stats; stat++) {
-		u64 tmp_stats = 0;
-
-		for_each_possible_cpu(cpu)
-			tmp_stats +=
-				((u64 *)per_cpu_ptr(pfvf->hw.pcpu_stats, cpu))
-					[otx2_pcpu_stats[stat].index];
-		*(data++) = tmp_stats;
-	}
 	otx2_get_qset_stats(pfvf, stats, &data);
 	otx2_update_lmac_stats(pfvf);
 	for (stat = 0; stat < CGX_RX_STATS_COUNT; stat++)
@@ -200,7 +175,7 @@ static int otx2_get_sset_count(struct net_device *netdev, int sset)
 
 	qstats_count = otx2_n_queue_stats *
 		       (pfvf->hw.rx_queues + pfvf->hw.tx_queues);
-	return otx2_n_dev_stats + otx2_n_pcpu_stats + qstats_count +
+	return otx2_n_dev_stats + qstats_count +
 		CGX_RX_STATS_COUNT + CGX_TX_STATS_COUNT + 1;
 }
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index 1fa1d40845fe..4319f8becc56 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -778,7 +778,7 @@ static irqreturn_t otx2_q_intr_handler(int irq, void *data)
 	/* CQ */
 	for (qidx = 0; qidx < pf->qset.cq_cnt; qidx++) {
 		ptr = pf->reg_base + NIX_LF_CQ_OP_INT;
-		val = atomic64_fetch_add_relaxed((qidx << 32) |
+		val = atomic64_fetch_add_relaxed((qidx << 44) |
 						 NIX_CQERRINT_BITS, ptr);
 
 		if (!(val & (NIX_CQERRINT_BITS | BIT_ULL(42))))
@@ -802,30 +802,10 @@ static irqreturn_t otx2_q_intr_handler(int irq, void *data)
 		schedule_work(&pf->reset_task);
 	}
 
-	/* RQ */
-	for (qidx = 0; qidx < pf->hw.rx_queues; qidx++) {
-		ptr = pf->reg_base + NIX_LF_RQ_OP_INT;
-		val = atomic64_fetch_add_relaxed((qidx << 32) | NIX_RQINT_BITS,
-						 ptr);
-		if (!(val & (NIX_RQINT_BITS | BIT_ULL(42))))
-			continue;
-
-		if (val & BIT_ULL(42)) {
-			dev_err(pf->dev, "RQ%lld: error reading NIX_LF_RQ_OP_INT\n",
-				qidx);
-			schedule_work(&pf->reset_task);
-		} else {
-			if (val & BIT_ULL(NIX_RQINT_DROP))
-				this_cpu_inc(pf->hw.pcpu_stats->rq_drops);
-			if (val & BIT_ULL(NIX_RQINT_RED))
-				this_cpu_inc(pf->hw.pcpu_stats->rq_red_drops);
-		}
-	}
-
 	/* SQ */
 	for (qidx = 0; qidx < pf->hw.tx_queues; qidx++) {
 		ptr = pf->reg_base + NIX_LF_SQ_OP_INT;
-		val = atomic64_fetch_add_relaxed((qidx << 32) | NIX_SQINT_BITS,
+		val = atomic64_fetch_add_relaxed((qidx << 44) | NIX_SQINT_BITS,
 						 ptr);
 		if (!(val & (NIX_SQINT_BITS | BIT_ULL(42))))
 			continue;
@@ -1041,14 +1021,9 @@ int otx2_open(struct net_device *netdev)
 	struct otx2_nic *pf = netdev_priv(netdev);
 	struct otx2_cq_poll *cq_poll = NULL;
 	struct otx2_qset *qset = &pf->qset;
-	int err = 0, qidx, vec, cpu;
+	int err = 0, qidx, vec;
 	char *irq_name;
 
-	/* Clear percpu stats */
-	for_each_possible_cpu(cpu)
-		memset(per_cpu_ptr(pf->hw.pcpu_stats, cpu), 0,
-		       sizeof(struct otx2_pcpu_stats));
-
 	netif_carrier_off(netdev);
 
 	pf->qset.cq_cnt = pf->hw.rx_queues + pf->hw.tx_queues;
@@ -1542,28 +1517,22 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	if (err < 0)
 		goto err_free_netdev;
 
-	hw->pcpu_stats = netdev_alloc_pcpu_stats(struct otx2_pcpu_stats);
-	if (!hw->pcpu_stats) {
-		err = -ENOMEM;
-		goto err_free_irq_vectors;
-	}
-
 	/* Map CSRs */
 	pf->reg_base = pcim_iomap(pdev, PCI_CFG_REG_BAR_NUM, 0);
 	if (!pf->reg_base) {
 		dev_err(dev, "Unable to map physical function CSRs, aborting\n");
 		err = -ENOMEM;
-		goto err_free_pcpu_stats;
+		goto err_free_irq_vectors;
 	}
 
 	err = otx2_check_pf_usable(pf);
 	if (err)
-		goto err_free_pcpu_stats;
+		goto err_free_irq_vectors;
 
 	/* Init PF <=> AF mailbox stuff */
 	err = otx2_pfaf_mbox_init(pf);
 	if (err)
-		goto err_free_pcpu_stats;
+		goto err_free_irq_vectors;
 
 	/* Register mailbox interrupt */
 	err = otx2_register_mbox_intr(pf);
@@ -1643,8 +1612,6 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 err_mbox_destroy:
 	otx2_pfaf_mbox_destroy(pf);
 	otx2_pfvf_mbox_destroy(pf);
-err_free_pcpu_stats:
-	free_percpu(hw->pcpu_stats);
 err_free_irq_vectors:
 	pci_free_irq_vectors(hw->pdev);
 err_free_netdev:
@@ -1659,13 +1626,11 @@ static void otx2_remove(struct pci_dev *pdev)
 {
 	struct net_device *netdev = pci_get_drvdata(pdev);
 	struct otx2_nic *pf;
-	struct otx2_hw *hw;
 
 	if (!netdev)
 		return;
 
 	pf = netdev_priv(netdev);
-	hw = &pf->hw;
 	unregister_netdev(netdev);
 	otx2_ptp_destroy(pf);
 
@@ -1673,7 +1638,6 @@ static void otx2_remove(struct pci_dev *pdev)
 
 	otx2_detach_resources(&pf->mbox);
 	otx2_pfaf_mbox_destroy(pf);
-	free_percpu(hw->pcpu_stats);
 	pci_free_irq_vectors(pf->pdev);
 	pci_set_drvdata(pdev, NULL);
 	free_netdev(netdev);
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
index 00d953c765e8..73d6531b8648 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
@@ -428,23 +428,17 @@ static int otx2vf_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	if (err < 0)
 		goto err_free_netdev;
 
-	hw->pcpu_stats = netdev_alloc_pcpu_stats(struct otx2_pcpu_stats);
-	if (!hw->pcpu_stats) {
-		err = -ENOMEM;
-		goto err_free_irq_vectors;
-	}
-
 	vf->reg_base = pcim_iomap(pdev, PCI_CFG_REG_BAR_NUM, 0);
 	if (!vf->reg_base) {
 		dev_err(dev, "Unable to map physical function CSRs, aborting\n");
 		err = -ENOMEM;
-		goto err_free_pcpu_stats;
+		goto err_free_irq_vectors;
 	}
 
 	/* Init VF <=> PF mailbox stuff */
 	err = otx2vf_vfaf_mbox_init(vf);
 	if (err)
-		goto err_free_pcpu_stats;
+		goto err_free_irq_vectors;
 
 	/* Register mailbox interrupt */
 	err = otx2vf_register_mbox_intr(vf);
@@ -496,8 +490,6 @@ static int otx2vf_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	otx2vf_disable_mbox_intr(vf);
 err_mbox_destroy:
 	otx2vf_vfaf_mbox_destroy(vf);
-err_free_pcpu_stats:
-	free_percpu(hw->pcpu_stats);
 err_free_irq_vectors:
 	pci_free_irq_vectors(hw->pdev);
 err_free_netdev:
@@ -512,20 +504,17 @@ static void otx2vf_remove(struct pci_dev *pdev)
 {
 	struct net_device *netdev = pci_get_drvdata(pdev);
 	struct otx2_nic *vf;
-	struct otx2_hw *hw;
 
 	if (!netdev)
 		return;
 
 	vf = netdev_priv(netdev);
-	hw = &vf->hw;
 	unregister_netdev(netdev);
 
 	otx2vf_disable_mbox_intr(vf);
 
 	otx2_detach_resources(&vf->mbox);
 	otx2vf_vfaf_mbox_destroy(vf);
-	free_percpu(hw->pcpu_stats);
 	pci_free_irq_vectors(vf->pdev);
 	pci_set_drvdata(pdev, NULL);
 	free_netdev(netdev);
-- 
2.17.1

