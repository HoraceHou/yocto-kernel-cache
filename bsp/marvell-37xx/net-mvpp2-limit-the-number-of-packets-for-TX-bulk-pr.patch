From d3988fa0e886fb715fc3036c582cd1fccd9d25d1 Mon Sep 17 00:00:00 2001
From: Marcin Wojtas <mw@semihalf.com>
Date: Fri, 19 Apr 2019 14:29:03 +0200
Subject: [PATCH 171/386] net: mvpp2: limit the number of packets for TX bulk
 processing

The deferred update of the aggregated queue, accumulates a number
of packets to be sent in bulk. The amount directly depends on the
tx_done coalescing size. The latter is by default small, but in
case changed by ethtool to a number exceeding the aggregated queue
size, there is huge risk of a crash during forwarding test with
multiple flows. Fix the issue by limiting the possible packet
aggregation.

Signed-off-by: Marcin Wojtas <mw@semihalf.com>
Change-Id: Ib2df631e0bcdcf544dfa331e97d5d51d52440837
Reviewed-on: https://sj1git1.cavium.com/7863
Reviewed-by: Stefan Chulski <Stefan.Chulski@cavium.com>
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2/mvpp2.h      | 1 +
 drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c | 3 ++-
 2 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2.h b/drivers/net/ethernet/marvell/mvpp2/mvpp2.h
index b4ea3ff7ee3a..17ed79631484 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2.h
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2.h
@@ -552,6 +552,7 @@
 #define MVPP2_RX_COAL_PKTS		32
 #define MVPP2_RX_COAL_USEC		64
 #define MVPP2_TX_BULK_TIME		(50 * NSEC_PER_USEC)
+#define MVPP2_TX_BULK_MAX_PACKETS	(MVPP2_AGGR_TXQ_SIZE / MVPP2_MAX_PORTS)
 
 /* The two bytes Marvell header. Either contains a special value used
  * by Marvell switches when a specific hardware mode is enabled (not
diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
index 7ed66813cfb6..67116e6a23ce 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
@@ -4264,7 +4264,8 @@ static netdev_tx_t mvpp2_tx(struct sk_buff *skb, struct net_device *dev)
 		/* Enable transmit; RX-to-TX may be deferred with Bulk-timer */
 		deferred_tx = (frags == 1) &&
 			MVPP2_RXTX_HASH_IS_OK_TX(skb, skb_get_hash_raw(skb)) &&
-			(aggr_txq->pending < (txq->done_pkts_coal / 2));
+			(aggr_txq->pending < min(MVPP2_TX_BULK_MAX_PACKETS,
+					       (int)(txq->done_pkts_coal / 2)));
 
 		if (deferred_tx) {
 			aggr_txq->pending += frags;
-- 
2.17.1

