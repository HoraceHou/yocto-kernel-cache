From dc4af737644f6ac527495cec7d4afc83ca59f9e4 Mon Sep 17 00:00:00 2001
From: Liron Himi <lironh@marvell.com>
Date: Tue, 1 Jan 2019 22:47:18 +0200
Subject: [PATCH 069/386] net: mvneta: fix phy-less link establishment for
 musdk port

Change-Id: Icfe433e2ce243c6b9139111efac73b76d3734501
Signed-off-by: Liron Himi <lironh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/62354
Reviewed-by: Alan Winkowski <walan@marvell.com>
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/1371
Reviewed-by: Stefan Chulski <Stefan.Chulski@cavium.com>
(cherry picked from commit 1fa90fc8a4c12003e7fd0212fc19223a7de50fc2)
Reviewed-on: https://sj1git1.cavium.com/6299
Tested-by: sa_ip-sw-jenkins
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 drivers/net/ethernet/marvell/mvneta.c | 74 ++++++++++++++++++++++-----
 1 file changed, 62 insertions(+), 12 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvneta.c b/drivers/net/ethernet/marvell/mvneta.c
index bee34a86e4e9..f13af3a208e1 100644
--- a/drivers/net/ethernet/marvell/mvneta.c
+++ b/drivers/net/ethernet/marvell/mvneta.c
@@ -2861,6 +2861,33 @@ static int mvneta_poll(struct napi_struct *napi, int budget)
 	return rx_done;
 }
 
+static int mvneta_poll_musdk(struct napi_struct *napi, int budget)
+{
+	struct mvneta_port *pp = netdev_priv(napi->dev);
+
+	/* Read cause register */
+	if (mvreg_read(pp, MVNETA_INTR_NEW_CAUSE) & MVNETA_MISCINTR_INTR_MASK) {
+		unsigned long flags;
+		u32 cause_misc = mvreg_read(pp, MVNETA_INTR_MISC_CAUSE);
+
+		mvreg_write(pp, MVNETA_INTR_MISC_CAUSE, 0);
+
+		if (cause_misc & (MVNETA_CAUSE_PHY_STATUS_CHANGE |
+				  MVNETA_CAUSE_LINK_CHANGE))
+			mvneta_link_change(pp);
+		local_irq_save(flags);
+		mvreg_write(pp, MVNETA_INTR_NEW_MASK,
+			    MVNETA_MISCINTR_INTR_MASK);
+		local_irq_restore(flags);
+	}
+
+	/* We always want trigger this function by interrupt.
+	 * This is why '0' is return to napi_complete and as return value
+	 */
+	napi_complete_done(napi, 0);
+	return 0;
+}
+
 /* Handle rxq fill: allocates rxq skbs; called when initializing a port */
 static int mvneta_rxq_fill(struct mvneta_port *pp, struct mvneta_rx_queue *rxq,
 			   int num)
@@ -3853,13 +3880,34 @@ static int mvneta_open(struct net_device *dev)
 	int ret;
 
 	if (pp->musdk_port) {
+		/* Connect to port interrupt line */
+		ret = request_irq(pp->dev->irq, mvneta_isr, 0,
+				  dev->name, pp);
+		if (ret) {
+			netdev_err(pp->dev, "cannot request irq %d\n",
+				   pp->dev->irq);
+			return ret;
+		}
+
 		ret = mvneta_mdio_probe(pp);
 		if (ret < 0) {
 			netdev_err(dev, "cannot probe MDIO bus\n");
-			return 0;
+			free_irq(pp->dev->irq, pp);
+			return ret;
 		}
+
+		/* Only mask phy-status and link-state interrupts */
+		mvreg_write(pp, MVNETA_INTR_NEW_MASK,
+			    MVNETA_MISCINTR_INTR_MASK);
+
+		mvreg_write(pp, MVNETA_INTR_MISC_MASK,
+			    MVNETA_CAUSE_PHY_STATUS_CHANGE |
+			    MVNETA_CAUSE_LINK_CHANGE);
+
+		napi_enable(&pp->napi);
+
 		phylink_start(pp->phylink);
-		netdev_warn(dev, "skipping ndo_open as this port is User Space port\n");
+		netdev_info(dev, "skipping ndo_open as this port is User Space port\n");
 		return 0;
 	}
 
@@ -4735,19 +4783,21 @@ static int mvneta_probe(struct platform_device *pdev)
 	/* Armada3700 network controller does not support per-cpu
 	 * operation, so only single NAPI should be initialized.
 	 */
-	if (!pp->musdk_port) {
-		if (pp->neta_armada3700) {
+	if (pp->neta_armada3700) {
+		if (pp->musdk_port)
+			netif_napi_add(dev, &pp->napi, mvneta_poll_musdk,
+				       NAPI_POLL_WEIGHT);
+		else
 			netif_napi_add(dev, &pp->napi, mvneta_poll,
 				       NAPI_POLL_WEIGHT);
-		} else {
-			for_each_present_cpu(cpu) {
-				struct mvneta_pcpu_port *port =
-					per_cpu_ptr(pp->ports, cpu);
+	} else {
+		for_each_present_cpu(cpu) {
+			struct mvneta_pcpu_port *port =
+				per_cpu_ptr(pp->ports, cpu);
 
-				netif_napi_add(dev, &port->napi, mvneta_poll,
-					       NAPI_POLL_WEIGHT);
-				port->pp = pp;
-			}
+			netif_napi_add(dev, &port->napi, mvneta_poll,
+				       NAPI_POLL_WEIGHT);
+			port->pp = pp;
 		}
 	}
 
-- 
2.17.1

