From d579c52eac0e9306369532bf3a7c27a7fa5cf219 Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Wed, 15 May 2019 16:54:05 +0300
Subject: [PATCH 229/386] net: mvpp2: add TX FIFO configuration module_param

TX FIFO has 19KB per CP, 1KB allocated to loopback port.
Other 18KB can be split between other 3 ports.

Patch add tx_fifo_map module_param for non default TX FIFO configuration.
tx_fifo_map is u32, bits:
0-7:	Port 0 TX FIFO size
8-15:	Port 1 TX FIFO size
16-23:	Port 2 TX FIFO size

For example: tx_fifo_map=0x10B06
Port 0 TX FIFO size = 6KB
Port 1 TX FIFO size = 11KB
Port 2 TX FIFO size = 1KB

Change-Id: Ib342309eb8b3d9dfcaf8afb2464c328417598b10
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/9030
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Marcin Wojtas <marcin@marvell.com>
Reviewed-by: Stefan Chulski <Stefan.Chulski@cavium.com>
[RH: Original patch taken from marvell 88F3720 board support SDK 10.0-PR2003]
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2/mvpp2.h    |  7 ++-
 .../net/ethernet/marvell/mvpp2/mvpp2_main.c   | 50 ++++++++++++++++++-
 2 files changed, 54 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2.h b/drivers/net/ethernet/marvell/mvpp2/mvpp2.h
index cd3aa3c0e360..12de906610b2 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2.h
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2.h
@@ -647,8 +647,13 @@
 #define MVPP22_TX_FIFO_DATA_SIZE_10KB		10
 #define MVPP22_TX_FIFO_DATA_SIZE_1KB		1
 #define MVPP2_TX_FIFO_THRESHOLD_MIN		256 /* Bytes */
-#define MVPP2_TX_FIFO_THRESHOLD(kb)	\
+#define MVPP2_TX_FIFO_THRESHOLD(kb)		\
 		(kb * 1024 - MVPP2_TX_FIFO_THRESHOLD_MIN)
+#define MVPP22_TX_FIFO_EXTRA_PARAM_MASK		0xFF
+#define MVPP22_TX_FIFO_EXTRA_PARAM_OFFS(port)	(8 * (port))
+#define MVPP22_TX_FIFO_EXTRA_PARAM_SIZE(port, val)		\
+	(((val) >> MVPP22_TX_FIFO_EXTRA_PARAM_OFFS(port)) &	\
+	 MVPP22_TX_FIFO_EXTRA_PARAM_MASK)
 
 /* RX FIFO threshold in 1KB granularity */
 #define MVPP23_PORT0_FIFO_TRSH	(9 * 1024)
diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
index 50d05a01035c..6b9bb066b6b2 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
@@ -140,6 +140,7 @@ static int queue_mode = MVPP2_QDIST_MULTI_MODE;
 static int tx_fifo_protection;
 static int bm_underrun_protect = 1;
 static int recycle;
+static u32 tx_fifo_map;
 
 module_param(queue_mode, int, 0444);
 MODULE_PARM_DESC(queue_mode, "Set queue_mode (single=0, multi=1)");
@@ -153,6 +154,9 @@ MODULE_PARM_DESC(bm_underrun_protect, "Set BM underrun protect feature (0-1), de
 module_param(recycle, int, 0444);
 MODULE_PARM_DESC(recycle, "Recycle: 0:disable(default), >=1:enable");
 
+module_param(tx_fifo_map, uint, 0444);
+MODULE_PARM_DESC(tx_fifo_map, "Set PPv2 TX FIFO ports map");
+
 static dma_addr_t mvpp2_txdesc_dma_addr_get(struct mvpp2_port *port,
 					    struct mvpp2_tx_desc *tx_desc)
 {
@@ -6816,7 +6820,7 @@ static void mvpp22_tx_fifo_set_hw(struct mvpp2 *priv, int port, int size)
  * The 10G interface should use 10kB (which is maximum possible size
  * per single port).
  */
-static void mvpp22_tx_fifo_init(struct mvpp2 *priv)
+static void mvpp22_tx_fifo_init_default(struct mvpp2 *priv)
 {
 	int port, size;
 	unsigned long port_map;
@@ -6852,6 +6856,45 @@ static void mvpp22_tx_fifo_init(struct mvpp2 *priv)
 	}
 }
 
+static void mvpp22_tx_fifo_init_param(struct platform_device *pdev,
+				      struct mvpp2 *priv)
+{
+	unsigned long port_map;
+	int size_remainder;
+	int port, size;
+
+	/* The loopback requires fixed 1kB of the FIFO space assignment. */
+	mvpp22_tx_fifo_set_hw(priv, MVPP2_LOOPBACK_PORT_INDEX,
+			      MVPP22_TX_FIFO_DATA_SIZE_1KB);
+	port_map = priv->port_map & ~BIT(MVPP2_LOOPBACK_PORT_INDEX);
+
+	/* Set TX FIFO size to 0 for inactive ports. */
+	for_each_clear_bit(port, &port_map, MVPP2_LOOPBACK_PORT_INDEX) {
+		mvpp22_tx_fifo_set_hw(priv, port, 0);
+		if (MVPP22_TX_FIFO_EXTRA_PARAM_SIZE(port, tx_fifo_map))
+			goto error;
+	}
+
+	/* Assign remaining TX FIFO space among all active ports. */
+	size_remainder = MVPP22_TX_FIFO_DATA_SIZE_18KB;
+	for (port = 0; port < MVPP2_LOOPBACK_PORT_INDEX; port++) {
+		size = MVPP22_TX_FIFO_EXTRA_PARAM_SIZE(port, tx_fifo_map);
+		if (!size)
+			continue;
+		size_remainder -= size;
+		mvpp22_tx_fifo_set_hw(priv, port, size);
+	}
+
+	if (size_remainder)
+		goto error;
+
+	return;
+
+error:
+	dev_warn(&pdev->dev, "Fail to set TX FIFO from module_param, fallback to default\n");
+	mvpp22_tx_fifo_init_default(priv);
+}
+
 static void mvpp2_axi_init(struct mvpp2 *priv)
 {
 	u32 val, rdval, wrval;
@@ -6961,7 +7004,10 @@ static int mvpp2_init(struct platform_device *pdev, struct mvpp2 *priv)
 		mvpp2_rx_fifo_init(priv);
 	} else {
 		mvpp22_rx_fifo_init(priv);
-		mvpp22_tx_fifo_init(priv);
+		if (tx_fifo_map)
+			mvpp22_tx_fifo_init_param(pdev, priv);
+		else
+			mvpp22_tx_fifo_init_default(priv);
 		if (priv->hw_version == MVPP23)
 			mvpp23_rx_fifo_fc_set_tresh(priv);
 	}
-- 
2.17.1

