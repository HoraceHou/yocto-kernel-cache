From 26b5a8e72d32b13a9576095588a33d4567501a35 Mon Sep 17 00:00:00 2001
From: Alex Marginean <alexandru.marginean@freescale.com>
Date: Wed, 18 Oct 2017 16:12:24 +0300
Subject: [PATCH 067/706] enetc: added SI statistics to ethtool

although at this time sim always returns 0 for all counters

Signed-off-by: Alex Marginean <alexandru.marginean@freescale.com>
(cherry picked from commit 2aa05ae0a2feec0dbc83dde24ac4341c9243de62)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../ethernet/freescale/enetc/enetc_ethtool.c  | 53 +++++++++++++++++++
 .../net/ethernet/freescale/enetc/enetc_hw.h   | 14 +++++
 2 files changed, 67 insertions(+)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c b/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
index 4849f65cef7c..99fcf4b2e74a 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
@@ -97,9 +97,62 @@ static void enetc_get_regs(struct net_device *ndev, struct ethtool_regs *regs,
 	}
 }
 
+static struct {
+	int reg;
+	char name[ETH_GSTRING_LEN];
+} enetc_si_counters[] =  {
+	{ ENETC_SIROCT, "SI received octets" },
+	{ ENETC_SIRFRM, "SI received frames" },
+	{ ENETC_SIRUCA, "SI received unicast frames" },
+	{ ENETC_SIRMCA, "SI received multicast frames" },
+	{ ENETC_SITOCT, "SI transmit octets" },
+	{ ENETC_SITFRM, "SI transmit frames" },
+	{ ENETC_SITUCA, "SI transmit unicast frames" },
+	{ ENETC_SITMCA, "SI transmit multicast frames" },
+};
+
+static int enetc_get_sset_count(struct net_device *ndev, int sset)
+{
+	switch (sset) {
+	case ETH_SS_STATS:
+		return ARRAY_SIZE(enetc_si_counters);
+	default:
+		return -EOPNOTSUPP;
+	}
+}
+
+static void enetc_get_strings(struct net_device *ndev, u32 stringset, u8 *data)
+{
+	u8 *p = data;
+	int i;
+
+	switch (stringset) {
+	case ETH_SS_STATS:
+		for (i = 0; i < ARRAY_SIZE(enetc_si_counters); i++) {
+			strlcpy(p, enetc_si_counters[i].name, ETH_GSTRING_LEN);
+			p += ETH_GSTRING_LEN;
+		}
+		break;
+	}
+}
+
+static void enetc_get_ethtool_stats(struct net_device *ndev,
+				    struct ethtool_stats *stats, u64 *data)
+{
+	struct enetc_ndev_priv *priv = netdev_priv(ndev);
+	struct enetc_hw *hw = &priv->si->hw;
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(enetc_si_counters); i++)
+		data[i] = enetc_rd64(hw, enetc_si_counters[i].reg);
+}
+
 const struct ethtool_ops enetc_ethtool_ops = {
 	.get_regs_len = enetc_get_reglen,
 	.get_regs = enetc_get_regs,
+	.get_sset_count = enetc_get_sset_count,
+	.get_strings = enetc_get_strings,
+	.get_ethtool_stats = enetc_get_ethtool_stats,
 };
 
 void enetc_set_ethtool_ops(struct net_device *ndev)
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_hw.h b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
index 2a4aa0d2b4af..a51a31276625 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_hw.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
@@ -14,6 +14,16 @@
 #define ENETC_SIPMAR0	0x80
 #define ENETC_SIPMAR1	0x84
 
+/* SI statistics */
+#define ENETC_SIROCT	0x300
+#define ENETC_SIRFRM	0x308
+#define ENETC_SIRUCA	0x310
+#define ENETC_SIRMCA	0x318
+#define ENETC_SITOCT	0x320
+#define ENETC_SITFRM	0x328
+#define ENETC_SITUCA	0x330
+#define ENETC_SITMCA	0x338
+
 /* Control BDR regs */
 #define ENETC_SICBDRMR		0x800
 #define ENETC_SICBDRSR		0x804	/* RO */
@@ -116,6 +126,10 @@ struct enetc_hw {
 #define enetc_wr_reg(reg, val)	iowrite32((val), (reg))
 #define enetc_rd(hw, off)	enetc_rd_reg((hw)->reg + (off))
 #define enetc_wr(hw, off, val)	enetc_wr_reg((hw)->reg + (off), val)
+#define enetc_rd_reg64(reg)		ioread64((reg))
+#define enetc_wr_reg64(reg)		iowrite64((val), (reg))
+#define enetc_rd64(hw, off)		enetc_rd_reg64((hw)->reg + (off))
+#define enetc_wr64(hw, off, val)	enetc_wr_reg64((hw)->reg + (off), val)
 /* port register accessors - PF only */
 #define enetc_port_rd(hw, off)		enetc_rd_reg((hw)->port + (off))
 #define enetc_port_wr(hw, off, val)	enetc_wr_reg((hw)->port + (off), val)
-- 
2.17.1

