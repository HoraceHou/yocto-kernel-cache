From 42cad6acd64570920c8ecff22d447f79f357691b Mon Sep 17 00:00:00 2001
From: Alison Wang <alison.wang@nxp.com>
Date: Sat, 29 Sep 2018 14:06:53 +0800
Subject: [PATCH 334/706] drm: hdp: add mem variable in imx_hdp

This patch adds mem variable in struct imx_hdp and moves regs_base and
ss_base to struct mem.

Signed-off-by: Sandor Yu <Sandor.yu@nxp.com>
Signed-off-by: Alison Wang <alison.wang@nxp.com>
(cherry picked from commit 45580d2f04456fb5eff10762dfb066dd4e116eb8)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/gpu/drm/imx/hdp/cdn_hdp/util.c |  8 ++++----
 drivers/gpu/drm/imx/hdp/cdn_hdp/util.h |  2 +-
 drivers/gpu/drm/imx/hdp/imx-hdmi.c     |  7 -------
 drivers/gpu/drm/imx/hdp/imx-hdp.c      | 12 ++++++------
 drivers/gpu/drm/imx/hdp/imx-hdp.h      |  3 +--
 5 files changed, 12 insertions(+), 20 deletions(-)

diff --git a/drivers/gpu/drm/imx/hdp/cdn_hdp/util.c b/drivers/gpu/drm/imx/hdp/cdn_hdp/util.c
index a6af22294178..c9977667201c 100644
--- a/drivers/gpu/drm/imx/hdp/cdn_hdp/util.c
+++ b/drivers/gpu/drm/imx/hdp/cdn_hdp/util.c
@@ -20,7 +20,7 @@
 
 int cdn_apb_read(state_struct *state, u32 addr, u32 *value)
 {
-	struct hdp_mem *mem = &state->mem;
+	struct hdp_mem *mem = state->mem;
 
 	state->rw->read_reg(mem, addr, value);
 	return 0;
@@ -28,7 +28,7 @@ int cdn_apb_read(state_struct *state, u32 addr, u32 *value)
 
 int cdn_apb_write(state_struct *state, u32 addr, u32 value)
 {
-	struct hdp_mem *mem = &state->mem;
+	struct hdp_mem *mem = state->mem;
 
 	state->rw->write_reg(mem, addr, value);
 	return 0;
@@ -36,7 +36,7 @@ int cdn_apb_write(state_struct *state, u32 addr, u32 value)
 
 int cdn_sapb_read(state_struct *state, u32 addr, u32 *value)
 {
-	struct hdp_mem *mem = &state->mem;
+	struct hdp_mem *mem = state->mem;
 
 	state->rw->sread_reg(mem, addr, value);
 	return 0;
@@ -44,7 +44,7 @@ int cdn_sapb_read(state_struct *state, u32 addr, u32 *value)
 
 int cdn_sapb_write(state_struct *state, u32 addr, u32 value)
 {
-	struct hdp_mem *mem = &state->mem;
+	struct hdp_mem *mem = state->mem;
 
 	state->rw->swrite_reg(mem, addr, value);
 	return 0;
diff --git a/drivers/gpu/drm/imx/hdp/cdn_hdp/util.h b/drivers/gpu/drm/imx/hdp/cdn_hdp/util.h
index e737d4820da7..e48d5496964d 100644
--- a/drivers/gpu/drm/imx/hdp/cdn_hdp/util.h
+++ b/drivers/gpu/drm/imx/hdp/cdn_hdp/util.h
@@ -174,7 +174,7 @@ typedef struct {
 	u32 edp; /* use eDP */
 
 	struct mutex mutex;	//mutex may replace running
-	struct hdp_mem mem;
+	struct hdp_mem *mem;
 	struct hdp_rw_func *rw;
 } state_struct;
 /**
diff --git a/drivers/gpu/drm/imx/hdp/imx-hdmi.c b/drivers/gpu/drm/imx/hdp/imx-hdmi.c
index 6cd82965dd8b..f60c3b57f9b8 100644
--- a/drivers/gpu/drm/imx/hdp/imx-hdmi.c
+++ b/drivers/gpu/drm/imx/hdp/imx-hdmi.c
@@ -78,7 +78,6 @@ void hdmi_mode_set(state_struct *state, struct drm_display_mode *mode,
 		   int format, int color_depth, int temp)
 {
 	int ret;
-	GENERAL_Read_Register_response regresp;
 
 	/* B/W Balance Type: 0 no data, 1 IT601, 2 ITU709 */
 	BT_TYPE bw_type = 0;
@@ -97,12 +96,6 @@ void hdmi_mode_set(state_struct *state, struct drm_display_mode *mode,
 
 	ret =  CDN_API_HDMITX_SetVic_blocking(state, mode, color_depth, format);
 
-	/* adjust the vsync/hsync polarity */
-	CDN_API_General_Read_Register_blocking(
-					state, ADDR_SOURCE_VIF + (HSYNC2VSYNC_POL_CTRL << 2), &regresp);
-	if ((regresp.val & 0x6) != 0)
-		__raw_writel(0x4, state->mem.ss_base);
-
 	msleep(50);
 }
 
diff --git a/drivers/gpu/drm/imx/hdp/imx-hdp.c b/drivers/gpu/drm/imx/hdp/imx-hdp.c
index 87bfe196a378..38cf4a3d7ede 100644
--- a/drivers/gpu/drm/imx/hdp/imx-hdp.c
+++ b/drivers/gpu/drm/imx/hdp/imx-hdp.c
@@ -68,7 +68,7 @@ static void imx_hdp_plmux_config(struct imx_hdp *hdp, struct drm_display_mode *m
 	if (mode->flags & DRM_MODE_FLAG_INTERLACE)
 		val |= 0x2;
 
-	writel(val, hdp->ss_base + CSR_PIXEL_LINK_MUX_CTL);
+	writel(val, hdp->mem.ss_base + CSR_PIXEL_LINK_MUX_CTL);
 }
 #endif
 
@@ -920,16 +920,16 @@ static int imx_hdp_imx_bind(struct device *dev, struct device *master,
 
 	/* register map */
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	hdp->regs_base = devm_ioremap_resource(dev, res);
-	if (IS_ERR(hdp->regs_base)) {
+	hdp->mem.regs_base = devm_ioremap_resource(dev, res);
+	if (IS_ERR(hdp->mem.regs_base)) {
 		dev_err(dev, "Failed to get HDP CTRL base register\n");
 		return -EINVAL;
 	}
 
-#ifdef arch_imx
+#ifndef CONFIG_ARCH_LAYERSCAPE
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
-	hdp->ss_base = devm_ioremap_resource(dev, res);
-	if (IS_ERR(hdp->ss_base)) {
+	hdp->mem.ss_base = devm_ioremap_resource(dev, res);
+	if (IS_ERR(hdp->mem.ss_base)) {
 		dev_err(dev, "Failed to get HDP CRS base register\n");
 		return -EINVAL;
 	}
diff --git a/drivers/gpu/drm/imx/hdp/imx-hdp.h b/drivers/gpu/drm/imx/hdp/imx-hdp.h
index 2d00d0eba73f..8c669fb6a7e5 100644
--- a/drivers/gpu/drm/imx/hdp/imx-hdp.h
+++ b/drivers/gpu/drm/imx/hdp/imx-hdp.h
@@ -159,8 +159,7 @@ struct imx_hdp {
 	char cable_state;
 	char fw_running;
 
-	void __iomem *regs_base; /* Controller regs base */
-	void __iomem *ss_base; /* HDP Subsystem regs base */
+	struct hdp_mem mem;
 
 	u8 load_fw;
 	u8 is_hdmi;
-- 
2.17.1

