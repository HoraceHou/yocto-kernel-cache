From 5f24790e84b4bcd4beb6bf6c3b95348163ba3c30 Mon Sep 17 00:00:00 2001
From: Alex Marginean <alexandru.marginean@freescale.com>
Date: Tue, 22 Aug 2017 16:59:05 +0300
Subject: [PATCH 044/706] enetc: SR-IOV: minimal support for spawning VFs

Includes an additional work-around for BAR mapping, VFs map ENETC registers
in BAR4 instead of BAR0.
Guarded sriov_configure against config option.

Signed-off-by: Alex Marginean <alexandru.marginean@freescale.com>
(cherry picked from commit 8a6e2bad89bb18d6604b36e746c2783e008bdd59)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/freescale/enetc/enetc.c | 42 +++++++++++++++++++-
 drivers/net/ethernet/freescale/enetc/enetc.h |  1 +
 2 files changed, 41 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc.c b/drivers/net/ethernet/freescale/enetc/enetc.c
index b4c575a7d799..66ae1eccf452 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc.c
@@ -1017,6 +1017,9 @@ static void enetc_configure_port(struct enetc_ndev_priv *priv)
 	struct enetc_hw *hw = &priv->si->hw;
 	u32 val;
 
+	if (priv->si->is_vf)
+		return;
+
 	val = ENETC_PVCFGR_SET_TXBDR(priv->num_tx_rings);
 	val |= ENETC_PVCFGR_SET_RXBDR(priv->num_rx_rings);
 	enetc_wr(hw, ENETC_PV0CFGR, val);
@@ -1130,8 +1133,18 @@ static int enetc_pci_probe(struct pci_dev *pdev,
 	si->pdev = pdev;
 	hw = &si->hw;
 
-	hw->reg = ioremap(pci_resource_start(pdev, 0),
-			  pci_resource_len(pdev, 0));
+	if(pdev->device == 0xef00) {
+		/* VF fix-ups */
+		/* ENETC regs are in VF BAR4 instead of VF BAR0 */
+		dev_info(&pdev->dev,
+				"VF doesn't have BAR0, map BAR4 instead");
+		hw->reg = pci_iomap(pdev, 4, pci_resource_len(pdev, 4));
+		si->is_vf = 1;
+	} else {
+		hw->reg = ioremap(pci_resource_start(pdev, 0),
+				  pci_resource_len(pdev, 0));
+	}
+
 	if (!hw->reg) {
 		err = -ENXIO;
 		dev_err(&pdev->dev, "ioremap() failed\n");
@@ -1205,8 +1218,30 @@ static void enetc_pci_remove(struct pci_dev *pdev)
 	pci_disable_device(pdev);
 }
 
+#ifdef CONFIG_PCI_IOV
+static int enetc_sriov_configure(struct pci_dev *dev, int num_vfs)
+{
+	int err;
+
+	if (!num_vfs) {
+		dev_info(&dev->dev, "SR-IOV stop\n");
+		pci_disable_sriov(dev);
+	} else {
+		dev_info(&dev->dev, "SR-IOV start, %d VFs\n", num_vfs);
+		err = pci_enable_sriov(dev, num_vfs);
+		if (err) {
+			dev_err(&dev->dev, "pci_enable_sriov err %d\n", err);
+			return err;
+		}
+	}
+
+	return num_vfs;
+}
+#endif
+
 static const struct pci_device_id enetc_id_table[] = {
 	{ PCI_DEVICE(PCI_VENDOR_ID_FREESCALE, 0xe001) },
+	{ PCI_DEVICE(PCI_VENDOR_ID_FREESCALE, 0xef00) },
 	{ 0, } /* End of table. */
 };
 MODULE_DEVICE_TABLE(pci, enetc_id_table);
@@ -1216,6 +1251,9 @@ static struct pci_driver enetc_driver = {
 	.id_table = enetc_id_table,
 	.probe = enetc_pci_probe,
 	.remove = enetc_pci_remove,
+#ifdef CONFIG_PCI_IOV
+	.sriov_configure = enetc_sriov_configure,
+#endif
 };
 module_pci_driver(enetc_driver);
 
diff --git a/drivers/net/ethernet/freescale/enetc/enetc.h b/drivers/net/ethernet/freescale/enetc/enetc.h
index 185c420abd07..e725c3e9632e 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc.h
@@ -80,6 +80,7 @@ static inline int enetc_bd_unused(struct enetc_bdr *bdr)
 struct enetc_si {
 	struct pci_dev *pdev;
 	struct enetc_hw hw;
+	int is_vf;
 
 	struct net_device *ndev; /* back ref. */
 };
-- 
2.17.1

