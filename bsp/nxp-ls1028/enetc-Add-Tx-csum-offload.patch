From 136ba77b6158e85b9b156269472483effd00062c Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@nxp.com>
Date: Wed, 15 Nov 2017 18:36:56 +0200
Subject: [PATCH 079/706] enetc: Add Tx csum offload

Implement NETIF_F_HW_CSUM for TCP/UDP over IPv4/v6,
as per ENETC HW BG Rev 0.9 ver 74 specification.
Validated on m0166 simulator model.

Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
(cherry picked from commit 036dc599e1e4d63b45f9e0d291ea6a4a279847e0)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/freescale/enetc/enetc.c  | 59 +++++++++++++++++--
 .../net/ethernet/freescale/enetc/enetc_hw.h   | 31 +++++++++-
 2 files changed, 83 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc.c b/drivers/net/ethernet/freescale/enetc/enetc.c
index 8191ca8c0e8a..2f8509187e2d 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc.c
@@ -1,6 +1,8 @@
 #include <linux/module.h>
 
 #include "enetc.h"
+#include <linux/tcp.h>
+#include <linux/udp.h>
 
 #define ENETC_DRV_VER_MAJ 0
 #define ENETC_DRV_VER_MIN 4
@@ -13,7 +15,8 @@ static const char enetc_drv_name[] = "ENETC driver";
 static int enetc_map_tx_buffs(struct enetc_bdr *tx_ring, struct sk_buff *skb);
 static void enetc_unmap_tx_buff(struct enetc_bdr *tx_ring,
 				struct enetc_tx_swbd *tx_swbd);
-static void enetc_update_txbdr(struct enetc_bdr *tx_ring, int count, u16 len);
+static void enetc_update_txbdr(struct enetc_bdr *tx_ring, struct sk_buff *skb,
+			       int count);
 static bool enetc_clean_tx_ring(struct enetc_bdr *tx_ring);
 
 static struct sk_buff *enetc_map_rx_buff_to_skb(struct enetc_bdr *rx_ring,
@@ -54,7 +57,7 @@ static netdev_tx_t enetc_xmit(struct sk_buff *skb, struct net_device *ndev)
 	count = enetc_map_tx_buffs(tx_ring, skb);
 
 	if (likely(count)) {
-		enetc_update_txbdr(tx_ring, count, skb->len);
+		enetc_update_txbdr(tx_ring, skb, count);
 
 		if (enetc_bd_unused(tx_ring) < ENETC_FREE_TXBD_NEEDED)
 			// TODO: check h/w index (CISR) for more acurate status
@@ -125,10 +128,50 @@ static int enetc_map_tx_buffs(struct enetc_bdr *tx_ring, struct sk_buff *skb)
 	return 0;
 }
 
-static void enetc_update_txbdr(struct enetc_bdr *tx_ring, int count, u16 len)
+static bool enetc_tx_csum(struct sk_buff *skb, struct enetc_tx_bd *txbd)
+{
+	int l3_start, l3_hsize, l4_hsize;
+	u16 l3_flags, l4_flags;
+
+	if (skb->ip_summed != CHECKSUM_PARTIAL)
+		return false;
+
+	switch (skb->csum_offset) {
+	case offsetof(struct tcphdr, check):
+		l4_hsize = sizeof(struct tcphdr);
+		l4_flags = ENETC_TXBD_L4_TCP;
+		break;
+	case offsetof(struct udphdr, check):
+		l4_hsize = sizeof(struct udphdr);
+		l4_flags = ENETC_TXBD_L4_UDP;
+		break;
+	default:
+		skb_checksum_help(skb);
+		return false;
+	}
+
+	l3_start = skb_network_offset(skb);
+	l3_hsize = skb_network_header_len(skb);
+
+	l3_flags = 0;
+	if (skb->protocol == htons(ETH_P_IPV6))
+		l3_flags = ENETC_TXBD_L3_IPV6;
+	else if (skb->protocol != htons(ETH_P_IP))
+		WARN_ON(1); //FIXME: Debug only (remove from final code)
+
+	/* write BD fields */
+	txbd->l3_csoff = enetc_txbd_l3_csoff(l3_start, l3_hsize, l3_flags);
+	txbd->l4_csoff = enetc_txbd_l4_csoff(l4_hsize, l4_flags);
+
+	return true;
+}
+
+static void enetc_update_txbdr(struct enetc_bdr *tx_ring, struct sk_buff *skb,
+			       int count)
 {
 	struct enetc_tx_swbd *tx_swbd;
 	struct enetc_tx_bd *txbd;
+	bool do_csum;
 	u8 flags;
 	int i;
 
@@ -136,10 +179,14 @@ static void enetc_update_txbdr(struct enetc_bdr *tx_ring, int count, u16 len)
 	txbd = ENETC_TXBD(*tx_ring, i);
 	tx_swbd = &tx_ring->tx_swbd[i];
 
+	do_csum = enetc_tx_csum(skb, txbd);
+
 	flags = ENETC_TXBD_FLAGS_IE;
+	if (do_csum)
+		flags |= ENETC_TXBD_FLAGS_CSUM | ENETC_TXBD_FLAGS_L4CS;
 
 	/* first BD needs frm_len set */
-	txbd->frm_len = cpu_to_le16(len);
+	txbd->frm_len = cpu_to_le16(skb->len);
 
 	while (count--) {
 		txbd->addr = cpu_to_le64(tx_swbd->dma);
@@ -1270,8 +1317,8 @@ static void enetc_netdev_setup(struct enetc_si *si, struct net_device *ndev,
 	ndev->min_mtu = ETH_MIN_MTU;
 	ndev->max_mtu = ENETC_MAX_MTU;
 
-	ndev->hw_features = NETIF_F_RXCSUM;
-	ndev->features = NETIF_F_RXCSUM | NETIF_F_HIGHDMA | NETIF_F_SG;
+	ndev->hw_features = NETIF_F_RXCSUM | NETIF_F_HW_CSUM;
+	ndev->features = ndev->hw_features | NETIF_F_HIGHDMA | NETIF_F_SG;
 	ndev->priv_flags |= IFF_UNICAST_FLT;
 }
 
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_hw.h b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
index 265cafd2758d..9f9a76fad83a 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_hw.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
@@ -163,15 +163,44 @@ struct enetc_tx_bd {
 	__le16 frm_len;
 	union {
 		struct {
-			u8 reserved[3];
+			__le16 l3_csoff;
+			u8 l4_csoff;
 			u8 flags;
 		}; /* default layout */
 	};
 };
 
+#define ENETC_TXBD_FLAGS_L4CS	BIT(0)
+#define ENETC_TXBD_FLAGS_CSUM	BIT(3)
+#define ENETC_TXBD_FLAGS_TSTMP	BIT(4)
 #define ENETC_TXBD_FLAGS_IE	BIT(5)
 #define ENETC_TXBD_FLAGS_F	BIT(7)
 
+/* L3 csum flags */
+#define ENETC_TXBD_L3_IPCS	BIT(7)
+#define ENETC_TXBD_L3_IPV6	BIT(15)
+
+#define ENETC_TXBD_L3_START_MASK	GENMASK(6, 0)
+#define ENETC_TXBD_L3_SET_HSIZE(val)	((((val) >> 2) & 0xef) << 8)
+#define ENETC_TXBD_L3_HSIZE_MASK	GENMASK(14, 8)
+
+static inline __le16 enetc_txbd_l3_csoff(int start, int hdr_sz, u16 l3_flags)
+{
+	return cpu_to_le16(l3_flags | ENETC_TXBD_L3_SET_HSIZE(hdr_sz) |
+			   (start & ENETC_TXBD_L3_START_MASK));
+}
+
+/* L4 csum flags */
+#define ENETC_TXBD_L4_UDP	BIT(5)
+#define ENETC_TXBD_L4_TCP	BIT(6)
+
+#define ENETC_TXBD_L4_SET_HSIZE(val)	(((val) >> 2) & 0x1f)
+
+static inline u8 enetc_txbd_l4_csoff(int hdr_sz, u8 l4_flags)
+{
+	return l4_flags | ENETC_TXBD_L4_SET_HSIZE(hdr_sz);
+}
+
 union enetc_rx_bd {
 	struct {
 		__le64 addr;
-- 
2.17.1

