From 181780571caa04c0f56361c7ed1506b6c6ca709e Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@nxp.com>
Date: Thu, 29 Nov 2018 18:23:57 +0200
Subject: [PATCH 387/706] enetc: Add rx buff allocation err counter, to replace
 WARN_ON()

Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
(cherry picked from commit 19216abacbb74c30c14f4e71e617eb69ee736fc1)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/freescale/enetc/enetc.c         |  9 +++------
 drivers/net/ethernet/freescale/enetc/enetc.h         |  1 +
 drivers/net/ethernet/freescale/enetc/enetc_ethtool.c | 11 +++++++++--
 3 files changed, 13 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc.c b/drivers/net/ethernet/freescale/enetc/enetc.c
index a8db9d3977d0..004e3e074fb0 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc.c
@@ -453,8 +453,7 @@ static int enetc_refill_rx_ring(struct enetc_bdr *rx_ring, const int buff_cnt)
 		/* try reuse page */
 		if (unlikely(!rx_swbd->page)) {
 			if (unlikely(!enetc_new_page(rx_ring, rx_swbd))) {
-				// TODO: alloc error
-				WARN_ON(1);
+				rx_ring->stats.rx_alloc_errs++;
 				break;
 			}
 		}
@@ -564,10 +563,8 @@ static int enetc_clean_rx_ring(struct enetc_bdr *rx_ring,
 		dma_rmb(); /* for readig other rxbd fields */
 		size = le16_to_cpu(rxbd->r.buf_len);
 		skb = enetc_map_rx_buff_to_skb(rx_ring, i, size);
-		if (!skb) {
-			// TODO: increase alloc error counter
+		if (!skb)
 			break;
-		}
 
 		enetc_get_offloads(rx_ring, rxbd, skb);
 
@@ -705,7 +702,7 @@ static struct sk_buff *enetc_map_rx_buff_to_skb(struct enetc_bdr *rx_ring,
 	ba = page_address(rx_swbd->page) + rx_swbd->page_offset;
 	skb = build_skb(ba - ENETC_RXB_PAD, ENETC_RXB_TRUESIZE);
 	if (unlikely(!skb)) {
-		// TODO: alloc err counter
+		rx_ring->stats.rx_alloc_errs++;
 		return NULL;
 	}
 
diff --git a/drivers/net/ethernet/freescale/enetc/enetc.h b/drivers/net/ethernet/freescale/enetc/enetc.h
index 0c0a0f9a717a..74e50ab3aa62 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc.h
@@ -41,6 +41,7 @@ struct enetc_rx_swbd {
 struct enetc_ring_stats {
 	unsigned int packets;
 	unsigned int bytes;
+	unsigned int rx_alloc_errs;
 };
 
 struct enetc_bdr {
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c b/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
index b6c8a9d8ce78..a4fe911a0987 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
@@ -183,6 +183,8 @@ static struct {
 	{ ENETC_PICDR(3),   "ICM DR3 discarded frames" },
 };
 
+#define ENETC_TX_RING_STATS	1
+#define ENETC_RX_RING_STATS	2
 static int enetc_get_sset_count(struct net_device *ndev, int sset)
 {
 	struct enetc_ndev_priv *priv = netdev_priv(ndev);
@@ -190,7 +192,8 @@ static int enetc_get_sset_count(struct net_device *ndev, int sset)
 	switch (sset) {
 	case ETH_SS_STATS:
 		return ARRAY_SIZE(enetc_si_counters) +
-			priv->num_tx_rings + priv->num_rx_rings +
+			ENETC_TX_RING_STATS * priv->num_tx_rings +
+			ENETC_RX_RING_STATS * priv->num_rx_rings +
 			(enetc_si_is_pf(priv->si) ?
 			ARRAY_SIZE(enetc_port_counters) : 0);
 	default:
@@ -217,6 +220,8 @@ static void enetc_get_strings(struct net_device *ndev, u32 stringset, u8 *data)
 		for (i = 0; i < priv->num_rx_rings; i++) {
 			sprintf(p, "Rx ring %2d frames", i);
 			p += ETH_GSTRING_LEN;
+			sprintf(p, "Rx ring %2d alloc errors", i);
+			p += ETH_GSTRING_LEN;
 		}
 
 		if (!enetc_si_is_pf(priv->si))
@@ -244,8 +249,10 @@ static void enetc_get_ethtool_stats(struct net_device *ndev,
 	for (i = 0; i < priv->num_tx_rings; i++)
 		data[o++] = priv->tx_ring[i]->stats.packets;
 
-	for (i = 0; i < priv->num_rx_rings; i++)
+	for (i = 0; i < priv->num_rx_rings; i++) {
 		data[o++] = priv->rx_ring[i]->stats.packets;
+		data[o++] = priv->rx_ring[i]->stats.rx_alloc_errs;
+	}
 
 	if (!enetc_si_is_pf(priv->si))
 		return;
-- 
2.17.1

