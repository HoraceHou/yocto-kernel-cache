From 9877115696bc148e25498f852a7a88adbe9e3397 Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@nxp.com>
Date: Fri, 11 Jan 2019 11:48:18 +0200
Subject: [PATCH 488/706] enetc: Add w/a for ENETC h/w limitation of max
 chained Tx BDs count

According to TKT394288, no more than 15 Tx BDs in a chain are
supported by the ENETC h/w.

Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
(cherry picked from commit 6bad8c64984644439c7bf2ebe9bcd0687896ac11)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/freescale/enetc/enetc.c | 18 +++++++++++++-----
 1 file changed, 13 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc.c b/drivers/net/ethernet/freescale/enetc/enetc.c
index fae54ef0a637..a80db9e2f14d 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc.c
@@ -38,7 +38,9 @@ static irqreturn_t enetc_msix(int irq, void *data)
 
 /* ENETC overhead: optional extension BD + 1 BD gap */
 #define ENETC_TXBDS_NEEDED(val)	((val) + 2)
-#define ENETC_TXBDS_MAX_NEEDED	ENETC_TXBDS_NEEDED(MAX_SKB_FRAGS + 1)
+/* max # of chained Tx BDs is 15, including head and extension BD */
+#define ENETC_MAX_SKB_FRAGS	13
+#define ENETC_TXBDS_MAX_NEEDED	ENETC_TXBDS_NEEDED(ENETC_MAX_SKB_FRAGS + 1)
 
 netdev_tx_t enetc_xmit(struct sk_buff *skb, struct net_device *ndev)
 {
@@ -48,6 +50,10 @@ netdev_tx_t enetc_xmit(struct sk_buff *skb, struct net_device *ndev)
 
 	tx_ring = priv->tx_ring[skb->queue_mapping];
 
+	if (unlikely(skb_shinfo(skb)->nr_frags > ENETC_MAX_SKB_FRAGS))
+		if (unlikely(skb_linearize(skb)))
+			goto drop_packet_err;
+
 	count = skb_shinfo(skb)->nr_frags + 1; /* fragments + head */
 	if (enetc_bd_unused(tx_ring) < ENETC_TXBDS_NEEDED(count)) {
 		netif_stop_subqueue(ndev, tx_ring->index);
@@ -55,15 +61,17 @@ netdev_tx_t enetc_xmit(struct sk_buff *skb, struct net_device *ndev)
 	}
 
 	count = enetc_map_tx_buffs(tx_ring, skb, priv->tx_tstamp);
-	if (unlikely(!count)) {
-		dev_kfree_skb_any(skb);
-		return NETDEV_TX_OK;
-	}
+	if (unlikely(!count))
+		goto drop_packet_err;
 
 	if (enetc_bd_unused(tx_ring) < ENETC_TXBDS_MAX_NEEDED)
 		netif_stop_subqueue(ndev, tx_ring->index);
 
 	return NETDEV_TX_OK;
+
+drop_packet_err:
+	dev_kfree_skb_any(skb);
+	return NETDEV_TX_OK;
 }
 
 static bool enetc_tx_csum(struct sk_buff *skb, union enetc_tx_bd *txbd)
-- 
2.17.1

