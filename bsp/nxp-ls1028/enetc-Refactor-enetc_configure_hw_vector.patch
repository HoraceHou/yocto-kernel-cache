From 3eeea6511ed804ab002f8f76cffb4b82dd53b0df Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@nxp.com>
Date: Mon, 18 Dec 2017 18:06:55 +0200
Subject: [PATCH 092/706] enetc: Refactor enetc_configure_hw_vector()

Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
(cherry picked from commit 8044e38a1b3a91c66ad69ac2417fb7d0710dae22)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/freescale/enetc/enetc.c  | 22 +++----------------
 drivers/net/ethernet/freescale/enetc/enetc.h  |  8 -------
 .../net/ethernet/freescale/enetc/enetc_hw.h   | 18 +++++++++++++++
 3 files changed, 21 insertions(+), 27 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc.c b/drivers/net/ethernet/freescale/enetc/enetc.c
index 209f5278d19b..84c4e586ddd1 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc.c
@@ -967,22 +967,6 @@ static void enetc_setup_bdrs(struct enetc_ndev_priv *priv)
 		enetc_setup_rxbdr(&priv->si->hw, priv->rx_ring[i]);
 }
 
-static void enetc_configure_hw_vector(struct enetc_hw *hw,
-				      enum enetc_msix_type type, int idx,
-				      u16 entry)
-{
-	switch (type) {
-	case ENETC_MSIX_SI_INT:
-		enetc_wr(hw, ENETC_SIMSIVR, entry);
-		break;
-	case ENETC_MSIX_SI_BDR_INT:
-		/* TODO: Only queue pairs supported for now */
-		enetc_wr(hw, ENETC_SIMSITRV(idx), entry);
-		enetc_wr(hw, ENETC_SIMSIRRV(idx), entry);
-		break;
-	}
-}
-
 int enetc_setup_irqs(struct enetc_ndev_priv *priv)
 {
 	struct pci_dev *pdev = priv->si->pdev;
@@ -998,8 +982,8 @@ int enetc_setup_irqs(struct enetc_ndev_priv *priv)
 			dev_err(priv->dev, "request_irq() failed!\n");
 			goto irq_err;
 		}
-		enetc_configure_hw_vector(&priv->si->hw, ENETC_MSIX_SI_BDR_INT,
-					  i, ENETC_BDR_INT_BASE_IDX + i);
+		enetc_configure_hw_vector(&priv->si->hw,
+					  ENETC_BDR_INT_BASE_IDX + i);
 	}
 
 	return 0;
@@ -1149,7 +1133,7 @@ int enetc_alloc_msix(struct enetc_ndev_priv *priv)
 	struct pci_dev *pdev = priv->si->pdev;
 	int i, n, nvec;
 
-	nvec = ENETC_SI_INT_NUM + priv->bdr_int_num;
+	nvec = ENETC_BDR_INT_BASE_IDX + priv->bdr_int_num;
 	/* allocate MSIX for both messaging and Rx/Tx interrupts */
 	n = pci_alloc_irq_vectors(pdev, nvec, nvec, PCI_IRQ_MSIX);
 
diff --git a/drivers/net/ethernet/freescale/enetc/enetc.h b/drivers/net/ethernet/freescale/enetc/enetc.h
index f2850f5cb643..8e795dd2b56e 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc.h
@@ -138,14 +138,6 @@ struct enetc_mac_filter {
 	int mac_addr_cnt;
 };
 
-/* ENETC MSIX interrupt classe types */
-enum enetc_msix_type {ENETC_MSIX_SI_INT, ENETC_MSIX_SI_BDR_INT};
-
-/* base index for station interface interrupts */
-#define ENETC_SI_INT_BASE_IDX 0
-#define ENETC_SI_INT_NUM 1
-/* base index for Rx/Tx interrupts */
-#define ENETC_BDR_INT_BASE_IDX 1
 /* PCI IEP device data */
 struct enetc_si {
 	struct pci_dev *pdev;
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_hw.h b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
index 878ec80c290e..0808335bd500 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_hw.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
@@ -326,3 +326,21 @@ static inline void enetc_get_primary_mac_addr(struct enetc_hw *hw, u8 *addr)
 	*(u32 *)(addr + 2) = htonl((u32)enetc_rd(hw, ENETC_SIPMAR0));
 	*(u16 *)addr = htons(enetc_rd(hw, ENETC_SIPMAR1) >> 16);
 }
+
+#define ENETC_SI_INT_IDX	0
+/* base index for Rx/Tx interrupts */
+#define ENETC_BDR_INT_BASE_IDX	1
+
+static inline void enetc_configure_hw_vector(struct enetc_hw *hw, int entry)
+{
+	if (entry >= ENETC_BDR_INT_BASE_IDX) {
+		/* TODO: Only queue pairs supported for now */
+		int idx = entry - ENETC_BDR_INT_BASE_IDX;
+
+		enetc_wr(hw, ENETC_SIMSITRV(idx), entry);
+		enetc_wr(hw, ENETC_SIMSIRRV(idx), entry);
+	} else {
+		/* configure SI interrupt */
+		enetc_wr(hw, ENETC_SIMSIVR, entry);
+	}
+}
-- 
2.17.1

