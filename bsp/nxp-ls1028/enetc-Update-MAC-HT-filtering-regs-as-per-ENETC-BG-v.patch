From ae2a05d9639dca60a0cd3f99c544c2c4a130f8b2 Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@nxp.com>
Date: Fri, 23 Mar 2018 18:56:17 +0200
Subject: [PATCH 122/706] enetc: Update MAC HT filtering regs as per ENETC BG
 v108, refactor

Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
(cherry picked from commit ce529d10e0b62fbc0aab90a6635195f28708b386)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/freescale/enetc/enetc.h  | 15 +---
 .../net/ethernet/freescale/enetc/enetc_cbdr.c | 72 +------------------
 .../net/ethernet/freescale/enetc/enetc_hw.h   | 13 ++--
 .../net/ethernet/freescale/enetc/enetc_pf.c   | 62 +++++++++++++++-
 .../net/ethernet/freescale/enetc/enetc_pf.h   | 13 +++-
 5 files changed, 84 insertions(+), 91 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc.h b/drivers/net/ethernet/freescale/enetc/enetc.h
index 451741be5c7f..47cf12b92af8 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc.h
@@ -128,16 +128,6 @@ struct enetc_cbdr {
 #define ENETC_TXBD(BDR, i) (&(((union enetc_tx_bd *)((BDR).bd_base))[i]))
 #define ENETC_RXBD(BDR, i) (&(((union enetc_rx_bd *)((BDR).bd_base))[i]))
 
-#define ENETC_MADDR_HASH_TBL_SZ	64
-enum enetc_mac_addr_type {UC, MC, MADDR_TYPE};
-struct enetc_mac_filter {
-	union {
-		char mac_addr[ETH_ALEN];
-		DECLARE_BITMAP(mac_hash_table, ENETC_MADDR_HASH_TBL_SZ);
-	};
-	int mac_addr_cnt;
-};
-
 struct enetc_msg_swbd {
 	void *vaddr;
 	dma_addr_t dma;
@@ -248,8 +238,9 @@ struct net_device_stats *enetc_get_stats(struct net_device *ndev);
 void enetc_set_ethtool_ops(struct net_device *ndev);
 
 /* control buffer descriptor ring (CBDR) */
-void enetc_sync_mac_filters(struct enetc_si *si, struct enetc_mac_filter *tbl,
-			    int si_idx);
+void enetc_set_mac_flt_entry(struct enetc_si *si, int index,
+			     char *mac_addr, int si_map);
+void enetc_clear_mac_flt_entry(struct enetc_si *si, int index);
 int enetc_set_fs_entry(struct enetc_si *si, struct enetc_cmd_rfse *rfse,
 		       int index);
 int enetc_set_rss_table(struct enetc_si *si, u16 *table, int len);
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_cbdr.c b/drivers/net/ethernet/freescale/enetc/enetc_cbdr.c
index 961211b137fe..4a5b98c73fe0 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_cbdr.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_cbdr.c
@@ -104,7 +104,7 @@ static int enetc_send_cmd(struct enetc_si *si, struct enetc_cbd *cbd,
 	return ENETC_CMD_OK;
 }
 
-static void enetc_clear_mac_flt_entry(struct enetc_si *si, int index)
+void enetc_clear_mac_flt_entry(struct enetc_si *si, int index)
 {
 	struct enetc_cbd cbd;
 	bool async = false;
@@ -126,8 +126,8 @@ static void enetc_clear_mac_flt_entry(struct enetc_si *si, int index)
 	}
 }
 
-static void enetc_set_mac_flt_entry(struct enetc_si *si, int index,
-				    char *mac_addr, int si_map)
+void enetc_set_mac_flt_entry(struct enetc_si *si, int index,
+			     char *mac_addr, int si_map)
 {
 	struct enetc_cbd cbd;
 	bool async = false;
@@ -161,72 +161,6 @@ static void enetc_set_mac_flt_entry(struct enetc_si *si, int index,
 	}
 }
 
-static void enetc_clear_mac_ht_flt(struct enetc_hw *hw, int type)
-{
-	if (type == MC) {
-		enetc_wr(hw, ENETC_MMHFTR0, 0);
-		enetc_wr(hw, ENETC_MMHFTR1, 0);
-	} else { /* UC */
-		enetc_wr(hw, ENETC_UMHFTR0, 0);
-		enetc_wr(hw, ENETC_UMHFTR1, 0);
-	}
-}
-
-static void enetc_set_mac_ht_flt(struct enetc_hw *hw, u32 *hash, int type)
-{
-	if (type == MC) {
-		enetc_wr(hw, ENETC_MMHFTR0, *hash);
-		enetc_wr(hw, ENETC_MMHFTR1, *(hash + 1));
-	} else { /* UC */
-		enetc_wr(hw, ENETC_UMHFTR0, *hash);
-		enetc_wr(hw, ENETC_UMHFTR1, *(hash + 1));
-	}
-}
-
-/* MAC Address Filter Table Entry Set Descriptor */
-void enetc_sync_mac_filters(struct enetc_si *si, struct enetc_mac_filter *tbl,
-			    int si_idx)
-{
-	struct enetc_mac_filter *f;
-	int i, pos;
-
-	if (!enetc_si_is_pf(si)) {
-		pr_err("VFs not allowed to change MAC addr filters!\n");
-		return;
-	}
-
-	f = &tbl[si_idx * MADDR_TYPE];
-	pos = EMETC_MAC_ADDR_FILT_RES + si_idx;
-
-	for (i = 0; i < MADDR_TYPE; i++, f++) {
-		bool em = (f->mac_addr_cnt == 1) && (i == UC);
-		bool clear = !f->mac_addr_cnt;
-
-		if (clear) {
-			if (i == UC)
-				enetc_clear_mac_flt_entry(si, pos);
-
-			enetc_clear_mac_ht_flt(&si->hw, i);
-			continue;
-		}
-
-		/* exact match filter */
-		if (em) {
-			enetc_clear_mac_ht_flt(&si->hw, UC);
-
-			enetc_set_mac_flt_entry(si, pos, f->mac_addr,
-						BIT(si_idx));
-			continue;
-		}
-
-		/* hash table filter, clear EM filter for UC entries */
-		if (i == UC)
-			enetc_clear_mac_flt_entry(si, pos);
-
-		enetc_set_mac_ht_flt(&si->hw, (u32 *)f->mac_hash_table, i);
-	}
-}
-
 /* Set entry in RFS table */
 int enetc_set_fs_entry(struct enetc_si *si, struct enetc_cmd_rfse *rfse,
 		       int index)
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_hw.h b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
index b39ab6b3b2fd..58e2f1bc23b3 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_hw.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
@@ -106,14 +106,6 @@ static inline u32 enetc_vsi_set_msize(u32 size)
 #define ENETC_SICAPR0	0x900
 #define ENETC_SICAPR1	0x904
 
-// FIXME: Temp hash filter registers, for m0169 (BG v88).
-// These moved to the Port reg block in the latest BG.
-// Use these temporarily, only for PF level MAC filtering.
-#define ENETC_UMHFTR0	0x1010
-#define ENETC_UMHFTR1	0x1014
-#define ENETC_MMHFTR0	0x1018
-#define ENETC_MMHFTR1	0x101c
-
 #define ENETC_PSIIER	0xa00
 #define ENETC_PSIIER_MR_MASK	GENMASK(2, 1)
 #define ENETC_PSIIDR	0xa10
@@ -221,6 +213,11 @@ enum enetc_bdr_type {TX, RX};
 #define ENETC_PMO_IFM_RG	BIT(2)
 #define ENETC_PM0_IFM_RLP	(BIT(5) | BIT(11))
 
+#define ENETC_PSIUMHFR0(n)	(0x01d00 + (n) * 0x10) /* n = SI index */
+#define ENETC_PSIUMHFR1(n)	(0x01d04 + (n) * 0x10)
+#define ENETC_PSIMMHFR0(n)	(0x01d08 + (n) * 0x10)
+#define ENETC_PSIMMHFR1(n)	(0x01d0c + (n) * 0x10)
+
 /* MAC counters */
 #define ENETC_PM0_REOCT		0x8100
 #define ENETC_PM0_RALN		0x8110
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_pf.c b/drivers/net/ethernet/freescale/enetc/enetc_pf.c
index 4f15978b39cb..5e642f86757a 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_pf.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_pf.c
@@ -120,6 +120,66 @@ static void enetc_add_mac_addr_ht_filter(struct enetc_mac_filter *filter,
 	filter->mac_addr_cnt++;
 }
 
+static void enetc_clear_mac_ht_flt(struct enetc_hw *hw, int si_idx, int type)
+{
+	if (type == UC) {
+		enetc_port_wr(hw, ENETC_PSIUMHFR0(si_idx), 0);
+		enetc_port_wr(hw, ENETC_PSIUMHFR1(si_idx), 0);
+	} else { /* MC */
+		enetc_port_wr(hw, ENETC_PSIMMHFR0(si_idx), 0);
+		enetc_port_wr(hw, ENETC_PSIMMHFR1(si_idx), 0);
+	}
+}
+
+static void enetc_set_mac_ht_flt(struct enetc_hw *hw, int si_idx, int type,
+				 u32 *hash)
+{
+	if (type == UC) {
+		enetc_port_wr(hw, ENETC_PSIUMHFR0(si_idx), *hash);
+		enetc_port_wr(hw, ENETC_PSIUMHFR1(si_idx), *(hash + 1));
+	} else { /* MC */
+		enetc_port_wr(hw, ENETC_PSIMMHFR0(si_idx), *hash);
+		enetc_port_wr(hw, ENETC_PSIMMHFR1(si_idx), *(hash + 1));
+	}
+}
+
+static void enetc_sync_mac_filters(struct enetc_pf *pf)
+{
+	struct enetc_mac_filter *f = pf->mac_filter;
+	struct enetc_si *si = pf->si;
+	int i, pos;
+
+	pos = EMETC_MAC_ADDR_FILT_RES;
+
+	for (i = 0; i < MADDR_TYPE; i++, f++) {
+		bool em = (f->mac_addr_cnt == 1) && (i == UC);
+		bool clear = !f->mac_addr_cnt;
+
+		if (clear) {
+			if (i == UC)
+				enetc_clear_mac_flt_entry(si, pos);
+
+			enetc_clear_mac_ht_flt(&si->hw, 0, i);
+			continue;
+		}
+
+		/* exact match filter */
+		if (em) {
+			enetc_clear_mac_ht_flt(&si->hw, 0, UC);
+
+			enetc_set_mac_flt_entry(si, pos, f->mac_addr,
+						BIT(0));
+			continue;
+		}
+
+		/* hash table filter, clear EM filter for UC entries */
+		if (i == UC)
+			enetc_clear_mac_flt_entry(si, pos);
+
+		enetc_set_mac_ht_flt(&si->hw, 0, i, (u32 *)f->mac_hash_table);
+	}
+}
+
 static void enetc_pf_set_rx_mode(struct net_device *ndev)
 {
 	struct enetc_ndev_priv *priv = netdev_priv(ndev);
@@ -174,7 +234,7 @@ static void enetc_pf_set_rx_mode(struct net_device *ndev)
 
 	if (!uprom || !mprom)
 		/* update PF entries */
-		enetc_sync_mac_filters(pf->si, pf->mac_filter, 0);
+		enetc_sync_mac_filters(pf);
 
 	psipmr |= enetc_port_rd(hw, ENETC_PSIPMR) &
 		  ~(ENETC_PSIPMR_SET_UP(0) | ENETC_PSIPMR_SET_MP(0));
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_pf.h b/drivers/net/ethernet/freescale/enetc/enetc_pf.h
index acaeddce1a42..89fc3fa28a0e 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_pf.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc_pf.h
@@ -34,9 +34,20 @@
 
 #include "enetc.h"
 
-#define ENETC_MAX_NUM_MAC_FLT	((ENETC_MAX_NUM_VFS + 1) * MADDR_TYPE)
 #define ENETC_PF_NUM_RINGS	8
 
+enum enetc_mac_addr_type {UC, MC, MADDR_TYPE};
+#define ENETC_MAX_NUM_MAC_FLT	((ENETC_MAX_NUM_VFS + 1) * MADDR_TYPE)
+
+#define ENETC_MADDR_HASH_TBL_SZ	64
+struct enetc_mac_filter {
+	union {
+		char mac_addr[ETH_ALEN];
+		DECLARE_BITMAP(mac_hash_table, ENETC_MADDR_HASH_TBL_SZ);
+	};
+	int mac_addr_cnt;
+};
+
 struct enetc_pf {
 	struct enetc_si *si;
 	int num_vfs; /* number of active VFs, after sriov_init */
-- 
2.17.1

