From 21123b016c59b13db9227da3be00e8af31c4d507 Mon Sep 17 00:00:00 2001
From: Po Liu <Po.Liu@nxp.com>
Date: Sat, 29 Sep 2018 15:25:56 +0800
Subject: [PATCH 408/706] net-tsn: coverity check fix

Signed-off-by: Po Liu <Po.Liu@nxp.com>
(cherry picked from commit 26f523acc2de4b5d46b45c0e081caf7830ff33bb)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../net/ethernet/freescale/enetc/enetc_tsn.c  |  3 +-
 net/tsn/genl_tsn.c                            | 30 ++++++++-----------
 2 files changed, 13 insertions(+), 20 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc_tsn.c b/drivers/net/ethernet/freescale/enetc/enetc_tsn.c
index ba70d160ae11..3e7d67f5ec25 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_tsn.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_tsn.c
@@ -1873,10 +1873,9 @@ static void enetc_cbs_init(struct enetc_si *si)
 	si->ecbs->port_transmit_rate = get_ndev_speed(si->ndev);
 
 	/*This trick is used only for CFP*/
-#ifdef CONFIG_CFP
 	if (!si->ecbs->port_transmit_rate)
 		si->ecbs->port_transmit_rate = 1000000000;
-#endif
+
 	if (!si->ecbs->port_transmit_rate) {
 		dev_err(&si->pdev->dev, "Failure to get port speed for CBS\n");
 		kfree(si->ecbs);
diff --git a/net/tsn/genl_tsn.c b/net/tsn/genl_tsn.c
index dc18c9ed5c4e..b69d5f2aeb38 100644
--- a/net/tsn/genl_tsn.c
+++ b/net/tsn/genl_tsn.c
@@ -148,7 +148,7 @@ static const struct nla_policy qbv_ctrl_policy[TSN_QBV_ATTR_CTRL_MAX + 1] = {
 	[TSN_QBV_ATTR_CTRL_GATESTATE]		= { .type = NLA_U8},
 	[TSN_QBV_ATTR_CTRL_CYCLETIME]		= { .type = NLA_U32},
 	[TSN_QBV_ATTR_CTRL_CYCLETIMEEXT]	= { .type = NLA_U32},
-	[TSN_QBV_ATTR_CTRL_BASETIME]		= { .type = NLA_U32},
+	[TSN_QBV_ATTR_CTRL_BASETIME]		= { .type = NLA_U64},
 	[TSN_QBV_ATTR_CTRL_LISTENTRY]		= { .type = NLA_NESTED},
 };
 
@@ -267,8 +267,10 @@ static int tsn_prepare_reply(struct genl_info *info, u8 cmd, struct sk_buff **sk
 	if (!skb)
 		return -ENOMEM;
 
-	if (!info)
+	if (!info) {
+		nlmsg_free(skb);
 		return -EINVAL;
+	}
 
 	reply = genlmsg_put_reply(skb, info, &tsn_family, 0, cmd);
 	if (!reply) {
@@ -431,20 +433,7 @@ int tsn_init_check(struct genl_info *info, struct net_device **ndev)
 	}
 
 	*ndev = netdev;
-#if 0
-	tsnops = netdev->tsn_ops;
 
-	if (!netdev->tsn_ops->get_capability) {
-		tsn_simple_reply(info, TSN_CMD_REPLY, netdev->name, -TSN_NODEVOPS);
-		pr_info("Need to implement the capability function first!\n");
-		return -EOPNOTSUPP;
-	}
-
-	if (!(netdev->tsn_ops->get_capability(netdev) & capability)) {
-		tsn_simple_reply(info, TSN_CMD_REPLY, netdev->name, -TSN_NODEVOPS);
-		return -EOPNOTSUPP;
-	}
-#endif
 	return 0;
 }
 
@@ -1959,7 +1948,7 @@ static int cmd_qbv_get(struct genl_info *info)
 
 	nla_nest_end(rep_skb, qbv);
 
-	return tsn_send_reply(rep_skb, info);
+	tsn_send_reply(rep_skb, info);
 
 	nlmsg_free(rep_skb);
 	return ret;
@@ -2065,7 +2054,7 @@ static int cmd_qbv_status_get(struct genl_info *info)
 
 	nla_nest_end(rep_skb, qbv);
 
-	return tsn_send_reply(rep_skb, info);
+	tsn_send_reply(rep_skb, info);
 
 	nlmsg_free(rep_skb);
 	return ret;
@@ -2136,7 +2125,7 @@ static int tsn_cbs_set(struct sk_buff *skb, struct genl_info *info)
 	}
 
 	bw = nla_get_u8(cbsa[TSN_CBS_ATTR_BW]);
-	if (bw < 0 || bw > 100) {
+	if (bw > 100) {
 		pr_err("tsn: TSN_CBS_ATTR_BW isn't in the range of 0~100 \n");
 		tsn_simple_reply(info, TSN_CMD_REPLY, netdev->name, -TSN_ATTRERR);
 		return -EINVAL;
@@ -2355,6 +2344,8 @@ static int tsn_tsd_set(struct sk_buff *skb, struct genl_info *info)
 	struct tsn_tsd tsd;
 	int ret;
 
+	memset(&tsd, 0, sizeof(struct tsn_tsd));
+
 	ret = tsn_init_check(info, &netdev);
 	if (ret)
 		return ret;
@@ -2373,6 +2364,9 @@ static int tsn_tsd_set(struct sk_buff *skb, struct genl_info *info)
 		return -EINVAL;
 	}
 
+	if (!netdev->tsn_ops)
+		return -EINVAL;
+
 	tsnops = netdev->tsn_ops;
 
 	if (!tsnops->tsd_set) {
-- 
2.17.1

