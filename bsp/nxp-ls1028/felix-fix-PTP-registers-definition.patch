From a579445e303666b1e57437f9efed35b0d20fd151 Mon Sep 17 00:00:00 2001
From: Yangbo Lu <yangbo.lu@nxp.com>
Date: Fri, 4 Jan 2019 11:34:57 +0800
Subject: [PATCH 435/706] felix: fix PTP registers definition

Added complete registers definition for Felix PTP,
and put PTP definition just after ANA in alphabetical
order.

Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
(cherry picked from commit d5eb743dccafda45230a3021f83b387d76b49b9d)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/mscc/felix_board.c | 18 ++++++-------
 drivers/net/ethernet/mscc/felix_regs.c  | 34 +++++++++++++++++--------
 drivers/net/ethernet/mscc/ocelot.h      | 34 ++++++++++++++++++++-----
 drivers/net/ethernet/mscc/ocelot_ptp.h  | 17 +++++++++++++
 drivers/net/ethernet/mscc/tsn_switch.c  | 14 +++++-----
 5 files changed, 83 insertions(+), 34 deletions(-)
 create mode 100644 drivers/net/ethernet/mscc/ocelot_ptp.h

diff --git a/drivers/net/ethernet/mscc/felix_board.c b/drivers/net/ethernet/mscc/felix_board.c
index f6fea53d215a..64697d76a16d 100644
--- a/drivers/net/ethernet/mscc/felix_board.c
+++ b/drivers/net/ethernet/mscc/felix_board.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: (GPL-2.0 OR MIT)
 /* Felix Switch driver
  *
- * Copyright 2018 NXP
+ * Copyright 2018-2019 NXP
  */
 
 #include <linux/module.h>
@@ -21,7 +21,7 @@ static const char felix_driver_version[] = DRV_VERSION;
 
 #define FELIX_MAX_NUM_PHY_PORTS	5
 #define FELIX_EXT_CPU_PORT_ID	4
-#define PORT_RES_START		(DEVCPU_PTP + 1)
+#define PORT_RES_START		(SYS + 1)
 
 #define PCI_DEVICE_ID_FELIX_PF5	0xEEF0
 
@@ -74,6 +74,12 @@ static struct resource felix_switch_res[] = {
 		.name = "ana",
 		.flags = IORESOURCE_MEM,
 	},
+	{
+		.start = 0x0090000,
+		.end = 0x00900ff,
+		.name = "ptp",
+		.flags = IORESOURCE_MEM,
+	},
 	{
 		.start = 0x0080000,
 		.end = 0x00800ff,
@@ -98,12 +104,6 @@ static struct resource felix_switch_res[] = {
 		.name = "sys",
 		.flags = IORESOURCE_MEM,
 	},
-	{
-		.start = 0x0090000,
-		.end = 0x00900ff,
-		.name = "devcpu_ptp",
-		.flags = IORESOURCE_MEM,
-	},
 	{
 		.start = 0x0100000,
 		.end = 0x010ffff,
@@ -545,7 +545,7 @@ static int felix_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 			felix_switch_res[i].end += offset;
 		}
 
-	for (i = ANA; i <= DEVCPU_PTP; i++) {
+	for (i = ANA; i <= SYS; i++) {
 		struct regmap *target;
 
 		target = felix_io_init(ocelot, i);
diff --git a/drivers/net/ethernet/mscc/felix_regs.c b/drivers/net/ethernet/mscc/felix_regs.c
index 00b43ff11047..dfca87702915 100644
--- a/drivers/net/ethernet/mscc/felix_regs.c
+++ b/drivers/net/ethernet/mscc/felix_regs.c
@@ -2,7 +2,7 @@
 /* Felix Switch driver
  *
  * Copyright 2017 Microsemi Corporation
- * Copyright 2018 NXP
+ * Copyright 2018-2019 NXP
  */
 #include <linux/phy.h>
 #include "ocelot.h"
@@ -109,6 +109,27 @@ static const u32 felix_ana_regmap[] = {
 //	REG(ANA_POL_MISC_CFG,              0x008c94),
 };
 
+static const u32 felix_ptp_regmap[] = {
+	REG(PTP_MISC_CFG,                  0x0000a0),
+	REG(PTP_CLK_ADJ_CFG,               0x0000a4),
+	REG(PTP_CLK_ADJ_FRQ,               0x0000a8),
+	REG(PTP_PIN_INTR,                  0x0000ac),
+	REG(PTP_PIN_INTR_ENA,              0x0000b0),
+	REG(PTP_INTR_IDENT,                0x0000b4),
+	REG(PTP_SYS_CLK_CFG,               0x0000b8),
+	REG(PTP_CUR_NSF,                   0x0000bc),
+	REG(PTP_CUR_NSEC,                  0x0000c0),
+	REG(PTP_CUR_SEC_LSB,               0x0000c4),
+	REG(PTP_CUR_SEC_MSB,               0x0000c8),
+	REG(PTP_PIN_CFG,                   0x000000),
+	REG(PTP_TOD_SEC_MSB,               0x000004),
+	REG(PTP_TOD_SEC_LSB,               0x000008),
+	REG(PTP_TOD_NSEC,                  0x00000c),
+	REG(PTP_NSF,                       0x000010),
+	REG(PTP_PIN_WF_HIGH_PERIOD,        0x000014),
+	REG(PTP_PIN_WF_LOW_PERIOD,         0x000018),
+};
+
 static const u32 felix_qs_regmap[] = {
 	REG(QS_XTR_GRP_CFG,                0x000000),
 	REG(QS_XTR_RD,                     0x000008),
@@ -270,22 +291,13 @@ static const u32 felix_sys_regmap[] = {
 //	REG(SYS_CM_OP,                     0x000f34),
 };
 
-static const u32 felix_devcpu_ptp_regmap[] = {
-	REG(DEVCPU_PTP_PINS,		   0x000000),
-	REG(DEVCPU_PTP_CFG,		   0x0000a0),
-	REG(DEVCPU_PTP_CUR_NSF,		   0x0000bc),
-	REG(DEVCPU_PTP_CUR_NSEC,           0x0000c0),
-	REG(DEVCPU_PTP_CUR_SEC_LSB,        0x0000c4),
-	REG(DEVCPU_PTP_CUR_SEC_MSB,        0x0000c8),
-};
-
 static const u32 *felix_regmap[] = {
 	[ANA] = felix_ana_regmap,
 	[QS] = felix_qs_regmap,
 	[QSYS] = felix_qsys_regmap,
 	[REW] = felix_rew_regmap,
 	[SYS] = felix_sys_regmap,
-	[DEVCPU_PTP] = felix_devcpu_ptp_regmap,
+	[PTP] = felix_ptp_regmap,
 };
 
 static const struct reg_field felix_regfields[] = {
diff --git a/drivers/net/ethernet/mscc/ocelot.h b/drivers/net/ethernet/mscc/ocelot.h
index 0e143736ea47..35b56906f1b5 100644
--- a/drivers/net/ethernet/mscc/ocelot.h
+++ b/drivers/net/ethernet/mscc/ocelot.h
@@ -22,6 +22,7 @@
 #include "ocelot_rew.h"
 #include "ocelot_sys.h"
 #include "ocelot_qs.h"
+#include "ocelot_ptp.h"
 
 #define PGID_AGGR    64
 #define PGID_SRC     80
@@ -67,11 +68,11 @@ struct frame_info {
 
 enum ocelot_target {
 	ANA = 1,
+	PTP,
 	QS,
 	QSYS,
 	REW,
 	SYS,
-	DEVCPU_PTP,
 	HSIO,
 	TARGET_MAX,
 };
@@ -176,6 +177,24 @@ enum ocelot_reg {
 	ANA_POL_FLOWC,
 	ANA_POL_HYST,
 //	ANA_POL_MISC_CFG,
+	PTP_MISC_CFG = PTP << TARGET_OFFSET,
+	PTP_CLK_ADJ_CFG,
+	PTP_CLK_ADJ_FRQ,
+	PTP_PIN_INTR,
+	PTP_PIN_INTR_ENA,
+	PTP_INTR_IDENT,
+	PTP_SYS_CLK_CFG,
+	PTP_CUR_NSF,
+	PTP_CUR_NSEC,
+	PTP_CUR_SEC_LSB,
+	PTP_CUR_SEC_MSB,
+	PTP_PIN_CFG,
+	PTP_TOD_SEC_MSB,
+	PTP_TOD_SEC_LSB,
+	PTP_TOD_NSEC,
+	PTP_NSF,
+	PTP_PIN_WF_HIGH_PERIOD,
+	PTP_PIN_WF_LOW_PERIOD,
 	QS_XTR_GRP_CFG = QS << TARGET_OFFSET,
 	QS_XTR_RD,
 	QS_XTR_FRM_PRUNING,
@@ -338,12 +357,6 @@ enum ocelot_reg {
 //	SYS_CM_DATA_RD,
 //	SYS_CM_OP,
 	SYS_CM_DATA,
-	DEVCPU_PTP_PINS = DEVCPU_PTP << TARGET_OFFSET,
-	DEVCPU_PTP_CFG,
-	DEVCPU_PTP_CUR_NSF,
-	DEVCPU_PTP_CUR_NSEC,
-	DEVCPU_PTP_CUR_SEC_LSB,
-	DEVCPU_PTP_CUR_SEC_MSB,
 	HSIO_PLL5G_CFG0 = HSIO << TARGET_OFFSET,
 	HSIO_PLL5G_CFG1,
 	HSIO_PLL5G_CFG2,
@@ -480,6 +493,13 @@ enum ocelot_regfield {
 	REGFIELD_MAX
 };
 
+enum ocelot_clk_pins {
+	ALT_PPS_PIN = 1,
+	EXT_CLK_PIN,
+	ALT_LDST_PIN,
+	TOD_ACC_PIN
+};
+
 struct ocelot_multicast {
 	struct list_head list;
 	unsigned char addr[ETH_ALEN];
diff --git a/drivers/net/ethernet/mscc/ocelot_ptp.h b/drivers/net/ethernet/mscc/ocelot_ptp.h
new file mode 100644
index 000000000000..138bc5651fbb
--- /dev/null
+++ b/drivers/net/ethernet/mscc/ocelot_ptp.h
@@ -0,0 +1,17 @@
+/* SPDX-License-Identifier: (GPL-2.0 OR MIT) */
+/* Copyright (c) 2017 Microsemi Corporation
+ * Copyright 2019 NXP
+ */
+
+#ifndef _MSCC_OCELOT_PTP_H_
+#define _MSCC_OCELOT_PTP_H_
+
+#define PTP_PIN_CFG_RSZ			0x20
+#define PTP_TOD_SEC_MSB_RSZ		PTP_PIN_CFG_RSZ
+#define PTP_TOD_SEC_LSB_RSZ		PTP_PIN_CFG_RSZ
+#define PTP_TOD_NSEC_RSZ		PTP_PIN_CFG_RSZ
+#define PTP_NSF_RSZ			PTP_PIN_CFG_RSZ
+#define PTP_PIN_WF_HIGH_PERIOD_RSZ	PTP_PIN_CFG_RSZ
+#define PTP_PIN_WF_LOW_PERIOD_RSZ	PTP_PIN_CFG_RSZ
+
+#endif
diff --git a/drivers/net/ethernet/mscc/tsn_switch.c b/drivers/net/ethernet/mscc/tsn_switch.c
index c636066ab4be..515c31ecef3a 100644
--- a/drivers/net/ethernet/mscc/tsn_switch.c
+++ b/drivers/net/ethernet/mscc/tsn_switch.c
@@ -2,7 +2,7 @@
  *
  * TSN_SWITCH driver
  *
- * Copyright 2018 NXP
+ * Copyright 2018-2019 NXP
  */
 #include <linux/io.h>
 #include <linux/of.h>
@@ -110,13 +110,13 @@ int switch_qbv_set(struct net_device *ndev, struct tsn_qbv_conf *shaper_config)
 		return -EINVAL;
 	}
 
-	cur_time = ocelot_read(ocelot, DEVCPU_PTP_CUR_SEC_MSB);
+	cur_time = ocelot_read(ocelot, PTP_CUR_SEC_MSB);
 	cur_time = cur_time << 32;
-	cur_time += ocelot_read(ocelot, DEVCPU_PTP_CUR_SEC_LSB);
+	cur_time += ocelot_read(ocelot, PTP_CUR_SEC_LSB);
 
 	if (base_time_sec < cur_time) {
 		base_time_sec = cur_time;
-		base_time_nsec = ocelot_read(ocelot, DEVCPU_PTP_CUR_NSEC);
+		base_time_nsec = ocelot_read(ocelot, PTP_CUR_NSEC);
 	}
 
 	/* Select port */
@@ -709,12 +709,12 @@ int switch_qci_sgi_set(struct net_device *ndev, u32 index,
 		return 0;
 	}
 	/*admin parameters*/
-	cur_time = ocelot_read(ocelot, DEVCPU_PTP_CUR_SEC_MSB);
+	cur_time = ocelot_read(ocelot, PTP_CUR_SEC_MSB);
 	cur_time = cur_time << 32;
-	cur_time += ocelot_read(ocelot, DEVCPU_PTP_CUR_SEC_LSB);
+	cur_time += ocelot_read(ocelot, PTP_CUR_SEC_LSB);
 	if (h_basetime < cur_time) {
 		h_basetime = cur_time;
-		l_basetime = ocelot_read(ocelot, DEVCPU_PTP_CUR_NSEC);
+		l_basetime = ocelot_read(ocelot, PTP_CUR_NSEC);
 	}
 
 	ocelot_write(ocelot, l_basetime, ANA_SG_CONFIG_REG_1);
-- 
2.17.1

