From d237d0d294788decf34e2d80e78c7423b2337fc7 Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@nxp.com>
Date: Thu, 5 Jul 2018 13:18:28 +0300
Subject: [PATCH 166/706] enetc: Clean up RSS and RFS dma alignment code, minor
 fixes

Fixes possible leak for rss dma_free().

Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
(cherry picked from commit 1259b1a2440e112f588db4dbcfbfde0ae61d5d30)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../net/ethernet/freescale/enetc/enetc_cbdr.c | 28 ++++++++++---------
 1 file changed, 15 insertions(+), 13 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc_cbdr.c b/drivers/net/ethernet/freescale/enetc/enetc_cbdr.c
index 6915ee805264..a2566df3c373 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_cbdr.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_cbdr.c
@@ -161,16 +161,15 @@ void enetc_set_mac_flt_entry(struct enetc_si *si, int index,
 	}
 }
 
+#define RFSE_ALIGN	64
 /* Set entry in RFS table */
 int enetc_set_fs_entry(struct enetc_si *si, struct enetc_cmd_rfse *rfse,
 		       int index)
 {
 	struct enetc_cbd cbd = {.cmd = 0};
-	bool async = false;
 	dma_addr_t dma, dma_align;
-	const int align = 64;
 	void *tmp, *tmp_align;
-	int len = sizeof(*rfse) + align - 1;
+	bool async = false;
 	int err;
 
 	/* fill up the "set" descriptor */
@@ -180,14 +179,15 @@ int enetc_set_fs_entry(struct enetc_si *si, struct enetc_cmd_rfse *rfse,
 	cbd.length = cpu_to_le16(sizeof(*rfse));
 	cbd.opt[3] = cpu_to_le32(0); /* SI */
 
-	tmp = dma_alloc_coherent(&si->pdev->dev, len, &dma, DMA_TO_DEVICE);
+	tmp = dma_alloc_coherent(&si->pdev->dev, sizeof(*rfse) + RFSE_ALIGN,
+				 &dma, DMA_TO_DEVICE);
 	if (!tmp) {
 		netdev_err(si->ndev, "DMA mapping of RFS entry failed!\n");
 		return -ENOMEM;
 	}
 
-	dma_align = ALIGN(dma, align);
-	tmp_align = PTR_ALIGN(tmp, align);
+	dma_align = ALIGN(dma, RFSE_ALIGN);
+	tmp_align = PTR_ALIGN(tmp, RFSE_ALIGN);
 	memcpy(tmp_align, rfse, sizeof(*rfse));
 
 	cbd.addr[0] = lower_32_bits(dma_align);
@@ -199,18 +199,19 @@ int enetc_set_fs_entry(struct enetc_si *si, struct enetc_cmd_rfse *rfse,
 	err = enetc_send_cmd(si, &cbd, async);
 	if (err)
 		netdev_err(si->ndev, "FS entry add failed (%d)!", err);
-	dma_free_coherent(&si->pdev->dev, len, tmp, dma);
+
+	dma_free_coherent(&si->pdev->dev, sizeof(*rfse) + RFSE_ALIGN,
+			  tmp, dma);
 
 	return err;
 }
 
+#define RSSE_ALIGN	64
 static int enetc_cmd_rss_table(struct enetc_si *si, u32 *table, int count,
 			       int read)
 {
 	struct enetc_cbd cbd = {.cmd = 0};
-	enum dma_data_direction dir = read ? DMA_FROM_DEVICE : DMA_TO_DEVICE;
 	dma_addr_t dma, dma_align;
-	const size_t align = 64;
 	u8 *tmp, *tmp_align;
 	int err, i;
 
@@ -218,13 +219,14 @@ static int enetc_cmd_rss_table(struct enetc_si *si, u32 *table, int count,
 		/* HW only takes in a full 64 entry table */
 		return -EINVAL;
 
-	tmp = dma_alloc_coherent(&si->pdev->dev, count + align - 1, &dma, dir);
+	tmp = dma_alloc_coherent(&si->pdev->dev, count + RSSE_ALIGN,
+				 &dma, read ? DMA_FROM_DEVICE : DMA_TO_DEVICE);
 	if (!tmp) {
 		netdev_err(si->ndev, "DMA mapping of RSS table failed!\n");
 		return -ENOMEM;
 	}
-	dma_align = ALIGN(dma, align);
-	tmp_align = PTR_ALIGN(tmp, align);
+	dma_align = ALIGN(dma, RSSE_ALIGN);
+	tmp_align = PTR_ALIGN(tmp, RSSE_ALIGN);
 
 	if (!read)
 		for (i = 0; i < count; i++)
@@ -246,7 +248,7 @@ static int enetc_cmd_rss_table(struct enetc_si *si, u32 *table, int count,
 		for (i = 0; i < count; i++)
 			table[i] = tmp_align[i];
 
-	dma_free_coherent(&si->pdev->dev, count, tmp, dma);
+	dma_free_coherent(&si->pdev->dev, count + RSSE_ALIGN, tmp, dma);
 
 	return err;
 }
-- 
2.17.1

