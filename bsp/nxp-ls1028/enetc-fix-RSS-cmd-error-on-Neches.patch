From 85af752d037287454b46bc5e69d3826f41ea6ed6 Mon Sep 17 00:00:00 2001
From: Alex Marginean <alexandru.marginean@nxp.com>
Date: Tue, 18 Sep 2018 13:47:48 +0300
Subject: [PATCH 316/706] enetc: fix RSS cmd error on Neches

Neches does not have RSS support, use capability bits to determine that
and avoid invoking unsupported commands.

Signed-off-by: Alex Marginean <alexandru.marginean@nxp.com>
(cherry picked from commit 4d28d5625a6cc7c59622a5c29ac86da01f2676b0)
(cherry picked from commit 4acfadf664d89bf4d951c8965d064da68928b7b0)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/freescale/enetc/enetc.c  | 20 +++++++++++++------
 drivers/net/ethernet/freescale/enetc/enetc.h  |  1 +
 .../ethernet/freescale/enetc/enetc_ethtool.c  |  6 +++---
 .../net/ethernet/freescale/enetc/enetc_hw.h   | 14 +++++++------
 .../net/ethernet/freescale/enetc/enetc_pf.c   |  5 ++++-
 5 files changed, 30 insertions(+), 16 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc.c b/drivers/net/ethernet/freescale/enetc/enetc.c
index fb02f76d868c..c7b878dc7fe0 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc.c
@@ -784,6 +784,11 @@ void enetc_get_si_caps(struct enetc_si *si)
 	si->num_tx_rings = val & 0xff;
 	si->num_fs_entries = enetc_rd(hw, ENETC_SIRFSCAPR) & 0x7f;
 	si->num_fs_entries = min(si->num_fs_entries, ENETC_MAX_RFS_SIZE);
+	si->num_rss = ((enetc_rd(hw, ENETC_SIRSSCAPR) & 0xf) + 1) * 32;
+
+	val = enetc_rd(hw, ENETC_SIPCAPR0);
+	if (!(val & ENETC_SIPCAPR0_RSS))
+		si->num_rss = 0;
 }
 
 static int enetc_alloc_txbdr(struct enetc_bdr *txr)
@@ -1014,9 +1019,9 @@ static void enetc_setup_cbdr(struct enetc_hw *hw, struct enetc_cbdr *cbdr)
 
 static void enetc_configure_si(struct enetc_ndev_priv *priv)
 {
-	int rss_table[ENETC_RSS_TABLE_SIZE];
 	struct enetc_si *si = priv->si;
 	struct enetc_hw *hw = &si->hw;
+	int rss_table[si->num_rss];
 	int i;
 
 	enetc_setup_cbdr(hw, &si->cbd_ring);
@@ -1027,11 +1032,14 @@ static void enetc_configure_si(struct enetc_ndev_priv *priv)
 	/* enable SI, TODO: start RSS by default */
 	enetc_wr(hw, ENETC_SIMR, ENETC_SIMR_EN /*| ENETC_SIMR_RSSE*/);
 
-	/* Set up RSS table defaults */
-	for (i = 0; i < ENETC_RSS_TABLE_SIZE; i++)
-		rss_table[i] = i % priv->num_rx_rings;
-	/* TODO: fix the size, *2 is just to keep sim happy */
-	enetc_set_rss_table(si, rss_table, ENETC_RSS_TABLE_SIZE * 2);
+	if (si->num_rss) {
+		/* Set up RSS table defaults */
+		for (i = 0; i < si->num_rss; i++)
+			rss_table[i] = i % priv->num_rx_rings;
+		if (si->num_rss)
+			/* TODO: fix the size, *2 is just to keep sim happy */
+			enetc_set_rss_table(si, rss_table, si->num_rss * 2);
+	}
 }
 
 void enetc_init_si_rings_params(struct enetc_ndev_priv *priv)
diff --git a/drivers/net/ethernet/freescale/enetc/enetc.h b/drivers/net/ethernet/freescale/enetc/enetc.h
index bb78bba38310..02b3f5dcac7e 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc.h
@@ -171,6 +171,7 @@ struct enetc_si {
 	int num_rx_rings; /* how many rings are available in the SI */
 	int num_tx_rings;
 	int num_fs_entries;
+	int num_rss; /* number of RSS buckets */
 	unsigned short pad;
 #ifdef CONFIG_ENETC_TSN
 	 struct enetc_cbs *ecbs;
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c b/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
index d94878c6c5e8..5303885aad01 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
@@ -492,10 +492,10 @@ static u32 enetc_get_rxfh_key_size(struct net_device *ndev)
 
 static u32 enetc_get_rxfh_indir_size(struct net_device *ndev)
 {
-	/* return the size of the RX flow hash indirection table */
+	struct enetc_ndev_priv *priv = netdev_priv(ndev);
 
-	/* TODO: use capabilities after moved to SI */
-	return ENETC_RSS_TABLE_SIZE;
+	/* return the size of the RX flow hash indirection table */
+	return priv->si->num_rss;
 }
 
 static int enetc_get_rxfh(struct net_device *ndev, u32 *indir, u8 *key,
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_hw.h b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
index 1b11981fa97f..3aeca8eea2a7 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_hw.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
@@ -46,6 +46,13 @@
 #define ENETC_SIMR_EN	BIT(31)
 #define ENETC_SIMR_RSSE	BIT(0)
 
+#define ENETC_SICTRL	0x18
+#define ENETC_SICTRH	0x1c
+#define ENETC_SIPCAPR0	0x20
+#define ENETC_SIPCAPR0_RSS	BIT(8)
+#define ENETC_SIPCAPR1	0x24
+#define ENETC_SITGTGR	0x30
+
 #define ENETC_SIRBGCR	0x38
 
 /* Cache attribute registers for transactions initiated by ENETC */
@@ -126,6 +133,7 @@ static inline u32 enetc_vsi_set_msize(u32 size)
 #define ENETC_SIUEFDCR	0xe28
 
 #define ENETC_SIRFSCAPR	0x1200
+#define ENETC_SIRSSCAPR	0x1600
 
 /** SI BDR sub-blocks, n = 0..7 */
 enum enetc_bdr_type {TX, RX};
@@ -970,12 +978,6 @@ struct enetc_cbd {
 	u8 status_flags;
 };
 
-#define ENETC_SICTRL		0x18
-#define ENETC_SICTRH		0x1c
-#define ENETC_SIPCAPR0	0x20
-#define ENETC_SIPCAPR1	0x24
-#define ENETC_SITGTGR	0x30
-
 #define ENETC_PTCFPR(n)		(0x1910 + (n) * 4) /* n = [0 ..7] */
 #define ENETC_FPE		BIT(31)
 
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_pf.c b/drivers/net/ethernet/freescale/enetc/enetc_pf.c
index aeac11f8942b..13eb2ab3d508 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_pf.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_pf.c
@@ -681,13 +681,16 @@ static void enetc_pf_netdev_setup(struct enetc_si *si, struct net_device *ndev,
 
 	ndev->hw_features = NETIF_F_RXCSUM | NETIF_F_HW_CSUM |
 			    NETIF_F_HW_VLAN_CTAG_TX | NETIF_F_HW_VLAN_CTAG_RX |
-			    NETIF_F_LOOPBACK | NETIF_F_RXHASH;
+			    NETIF_F_LOOPBACK;
 	ndev->features = NETIF_F_HIGHDMA | NETIF_F_SG |
 			 NETIF_F_RXCSUM | NETIF_F_HW_CSUM |
 			 NETIF_F_HW_VLAN_CTAG_TX |
 			 NETIF_F_HW_VLAN_CTAG_RX |
 			 NETIF_F_HW_VLAN_CTAG_FILTER;
 
+	if (si->num_rss)
+		ndev->hw_features |= NETIF_F_RXHASH;
+
 	ndev->priv_flags |= IFF_UNICAST_FLT;
 
 	/* pick up primary MAC address from SI */
-- 
2.17.1

