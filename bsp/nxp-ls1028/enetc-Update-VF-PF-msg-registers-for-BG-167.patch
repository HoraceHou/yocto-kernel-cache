From 4a3f64b1073cc9d60d45b2604b8b114009a67c2b Mon Sep 17 00:00:00 2001
From: Catalin Horghidan <catalin.horghidan@nxp.com>
Date: Tue, 19 Jun 2018 13:04:12 +0300
Subject: [PATCH 162/706] enetc: Update VF-PF msg registers for BG 167

Signed-off-by: Catalin Horghidan <catalin.horghidan@nxp.com>
(cherry picked from commit c05c7f36adc90bcf24f9d4e81a0c18294336615b)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../net/ethernet/freescale/enetc/enetc_hw.h   | 11 +++++-----
 .../net/ethernet/freescale/enetc/enetc_msg.c  | 20 +++++++++----------
 2 files changed, 15 insertions(+), 16 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc_hw.h b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
index fddb43b7c5d2..a10db5830036 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_hw.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
@@ -66,18 +66,17 @@
 #define ENETC_SIPMAR1	0x84
 
 /* VF-PF Message passing */
-#define ENETC_VSI_START_IDX	1
 #define ENETC_DEFAULT_MSG_SIZE	1024
 static inline u32 enetc_vsi_set_msize(u32 size)
 {
 	return size < ENETC_DEFAULT_MSG_SIZE ? size >> 5 : 0;
 }
 
-#define ENETC_PSIMSGSR	0x204
-#define ENETC_PSIMSGSR_MR_MASK	GENMASK(2, 1)
-#define ENETC_PSIMSGSR_MS	BIT(0)
-#define ENETC_PSIVMSGRCVAR0(n)	(0x208 + (n) * 0x8) /* n = VSI index */
-#define ENETC_PSIVMSGRCVAR1(n)	(0x20C + (n) * 0x8)
+#define ENETC_PSIMSGRR	0x204
+#define ENETC_PSIMSGRR_MR_MASK	GENMASK(2, 1)
+#define ENETC_PSIMSGRR_MR(n) BIT((n) + 1) /* n = VSI index */
+#define ENETC_PSIVMSGRCVAR0(n)	(0x210 + (n) * 0x8) /* n = VSI index */
+#define ENETC_PSIVMSGRCVAR1(n)	(0x214 + (n) * 0x8)
 
 #define ENETC_VSIMSGSR	0x204
 #define ENETC_VSIMSGSR_MB	BIT(0)
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_msg.c b/drivers/net/ethernet/freescale/enetc/enetc_msg.c
index 047366fe268f..fb6f2702f4e3 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_msg.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_msg.c
@@ -110,7 +110,7 @@ static void enetc_msg_task(struct work_struct *work)
 	int i;
 
 	for (;;) {
-		mr_mask = enetc_rd(hw, ENETC_PSIMSGSR) & ENETC_PSIMSGSR_MR_MASK;
+		mr_mask = enetc_rd(hw, ENETC_PSIMSGRR) & ENETC_PSIMSGRR_MR_MASK;
 		if (!mr_mask) {
 			/* re-arm MR interrupts, w1c the IDR reg */
 			enetc_wr(hw, ENETC_PSIIDR, ENETC_PSIIER_MR_MASK);
@@ -119,17 +119,17 @@ static void enetc_msg_task(struct work_struct *work)
 		}
 
 		for (i = 0; i < pf->num_vfs; i++) {
-			u32 psimsgsr;
+			u32 psimsgrr;
 			u16 msg_code;
 
-			if (!test_bit(i + ENETC_VSI_START_IDX, &mr_mask))
+			if (!(ENETC_PSIMSGRR_MR(i) & mr_mask))
 				continue;
 
 			enetc_msg_handle_rxmsg(pf, i, &msg_code);
 
-			psimsgsr = ENETC_SIMSGSR_SET_MC(msg_code);
-			psimsgsr |= BIT(i + ENETC_VSI_START_IDX);
-			enetc_wr(hw, ENETC_PSIMSGSR, psimsgsr); /* w1c */
+			psimsgrr = ENETC_SIMSGSR_SET_MC(msg_code);
+			psimsgrr |= ENETC_PSIMSGRR_MR(i); /* w1c */
+			enetc_wr(hw, ENETC_PSIMSGRR, psimsgrr);
 		}
 	}
 }
@@ -158,9 +158,9 @@ static int enetc_msg_alloc_mbx(struct enetc_si *si, int idx)
 
 	/* set multiple of 32 bytes */
 	val = lower_32_bits(msg->dma);
-	enetc_wr(hw, ENETC_PSIVMSGRCVAR0(idx + ENETC_VSI_START_IDX), val);
+	enetc_wr(hw, ENETC_PSIVMSGRCVAR0(idx), val);
 	val = upper_32_bits(msg->dma);
-	enetc_wr(hw, ENETC_PSIVMSGRCVAR1(idx + ENETC_VSI_START_IDX), val);
+	enetc_wr(hw, ENETC_PSIVMSGRCVAR1(idx), val);
 
 	return 0;
 }
@@ -175,8 +175,8 @@ static void enetc_msg_free_mbx(struct enetc_si *si, int idx)
 	dma_free_coherent(&si->pdev->dev, msg->size, msg->vaddr, msg->dma);
 	memset(msg, 0, sizeof(*msg));
 
-	enetc_wr(hw, ENETC_PSIVMSGRCVAR0(idx + ENETC_VSI_START_IDX), 0);
-	enetc_wr(hw, ENETC_PSIVMSGRCVAR1(idx + ENETC_VSI_START_IDX), 0);
+	enetc_wr(hw, ENETC_PSIVMSGRCVAR0(idx), 0);
+	enetc_wr(hw, ENETC_PSIVMSGRCVAR1(idx), 0);
 }
 
 int enetc_msg_psi_init(struct enetc_pf *pf)
-- 
2.17.1

