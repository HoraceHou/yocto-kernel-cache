From 3a2a1dae01dc2e21975ddd6afaed342f1878ca11 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Tue, 5 Mar 2019 15:07:31 +0800
Subject: [PATCH 301/706] drm: imx: fix checkpatch errors

This comes from 38f18055

Signed-off-by: Amit Jain <amit.jain_1@nxp.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/gpu/drm/imx/hdp/API_AFE_mcu1_dp.c     | 30 +++++++++----------
 drivers/gpu/drm/imx/hdp/API_AFE_mcu2_dp.c     | 30 +++++++++----------
 drivers/gpu/drm/imx/hdp/API_AFE_mcu2_dp.h     |  2 +-
 .../imx/hdp/API_AFE_ss28fdsoi_kiran_hdmitx.c  | 12 +++++---
 .../imx/hdp/API_AFE_ss28fdsoi_kiran_hdmitx.h  |  2 +-
 drivers/gpu/drm/imx/hdp/cdn_hdp/API_AVI.h     |  2 +-
 drivers/gpu/drm/imx/hdp/cdn_hdp/API_DPTX.c    |  2 +-
 drivers/gpu/drm/imx/hdp/cdn_hdp/API_HDMITX.c  |  2 +-
 drivers/gpu/drm/imx/hdp/imx-dp.c              |  4 +--
 9 files changed, 45 insertions(+), 41 deletions(-)

diff --git a/drivers/gpu/drm/imx/hdp/API_AFE_mcu1_dp.c b/drivers/gpu/drm/imx/hdp/API_AFE_mcu1_dp.c
index a88521da3c4e..dd278aa1dac7 100644
--- a/drivers/gpu/drm/imx/hdp/API_AFE_mcu1_dp.c
+++ b/drivers/gpu/drm/imx/hdp/API_AFE_mcu1_dp.c
@@ -312,63 +312,63 @@ void AFE_init(state_struct *state, int num_lanes, ENUM_AFE_LINK_RATE link_rate)
 #if FPGA
 	volatile unsigned short temp;
 
-	//1.    Assert
-	//a.    Iddq_Enable_pad  = 1’b0       // reg12[27]
+	/* 1.    Assert
+	   a.    Iddq_Enable_pad  = 1’b0       // reg12[27] */
 
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp & (~(1<<27));
 	cdn_apb_write(0xc000c<<2, temp);
 
-	//b.    Pll_ats_eanble = 1’b0 //reg12[29]
+	/* b.    Pll_ats_eanble = 1’b0 //reg12[29] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp & (~(1<<29));
 	cdn_apb_write(0xc000c<<2, temp);
 
-	//2.    Assert all Reset pads to Low
-	//a.    Tap_trst_n = 1’b0 //reg12[3]
+	/* 2.    Assert all Reset pads to Low
+	   a.    Tap_trst_n = 1’b0 //reg12[3] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp & (~(1<<3));
 	cdn_apb_write(0xc000c<<2, temp);
 
-	//b.    Apb_preset_n = 1’b0 //reg12[2]
+	/* b.    Apb_preset_n = 1’b0 //reg12[2] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp & (~(1<<2));
 	cdn_apb_write(0xc000c<<2, temp);
 
-	//c.    Chip_rst_b = 1’b0 reg12[0]
+	/* c.    Chip_rst_b = 1’b0 reg12[0] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp & (~(1<<0));
 	cdn_apb_write(0xc000c<<2, temp);
 
-	//d.    Phy_reset_n = 1’b0 //reg12[1]
+	/* d.    Phy_reset_n = 1’b0 //reg12[1] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp & (~(1<<1));
 	cdn_apb_write(0xc000c<<2, temp);
 
-	//3.    Assert Chipmode[2:0] = 3’b000 reg11[2:0]
+	/* 3.    Assert Chipmode[2:0] = 3’b000 reg11[2:0] */
 	cdn_apb_read(0xc000b<<2, &temp);
 	temp = temp & (~(7<<0));
 	cdn_apb_write(0xc000b<<2, temp);
 
-	//4.    Assert Sel_Tap[1:0]= 2’b00  //reg11[4:3];
+	/* 4.    Assert Sel_Tap[1:0]= 2’b00  //reg11[4:3];*/
 	cdn_apb_read(0xc000b<<2, &temp);
 	temp = temp & (~(3<<3));
 	cdn_apb_write(0xc000b<<2, temp);
 
-	//5.    Assert
-	//a.    After 100ns, Apb_preset_n = 1’b1 //reg12[2]
+	/* 5.    Assert
+	   a.    After 100ns, Apb_preset_n = 1’b1 //reg12[2] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp | ((1<<2));
 	cdn_apb_write(0xc000c<<2, temp);
 
 
-	//b.    After 100ns, Chip_reset_b = 1’b1 // Reg12[0]
+	/* b.    After 100ns, Chip_reset_b = 1’b1 // Reg12[0] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp | ((1<<0));
 	cdn_apb_write(0xc000c<<2, temp);
 
 
-	//c.    After 100ns, Tap_trst_n = 1’b1 //reg12[3]
+	/* c.    After 100ns, Tap_trst_n = 1’b1 //reg12[3] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp | ((1<<3));
 	cdn_apb_write(0xc000c<<2, temp);
@@ -401,7 +401,7 @@ void AFE_init(state_struct *state, int num_lanes, ENUM_AFE_LINK_RATE link_rate)
 	Afe_write(state, PHY_HDP_MODE_CTRL, 0x0004);
 
 #if FPGA
-	//Assert  Phy_reset_n = 1’b1
+	/* Assert  Phy_reset_n = 1’b1 */
 
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp | ((1<<1));
diff --git a/drivers/gpu/drm/imx/hdp/API_AFE_mcu2_dp.c b/drivers/gpu/drm/imx/hdp/API_AFE_mcu2_dp.c
index 09d8191e53b8..da747d3cc73a 100644
--- a/drivers/gpu/drm/imx/hdp/API_AFE_mcu2_dp.c
+++ b/drivers/gpu/drm/imx/hdp/API_AFE_mcu2_dp.c
@@ -420,61 +420,61 @@ void AFE_init(state_struct *state, int num_lanes,
 #if FPGA
 	volatile unsigned short temp;
 
-	//1.    Assert
-	//a.    Iddq_Enable_pad  = 1’b0       // reg12[27]
+	/* 1.    Assert
+	   a.    Iddq_Enable_pad  = 1’b0       // reg12[27] */
 
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp & (~(1<<27));
 	cdn_apb_write(0xc000c<<2, temp);
 
-	//b.    Pll_ats_eanble = 1’b0 //reg12[29]
+	/* b.    Pll_ats_eanble = 1’b0 //reg12[29] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp & (~(1<<29));
 	cdn_apb_write(0xc000c<<2, temp);
 
-	//2.    Assert all Reset pads to Low
-	//a.    Tap_trst_n = 1’b0 //reg12[3]
+	/* 2.    Assert all Reset pads to Low
+	   a.    Tap_trst_n = 1’b0 //reg12[3] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp & (~(1<<3));
 	cdn_apb_write(0xc000c<<2, temp);
 
-	//b.    Apb_preset_n = 1’b0 //reg12[2]
+	/* b.    Apb_preset_n = 1’b0 //reg12[2] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp & (~(1<<2));
 	cdn_apb_write(0xc000c<<2, temp);
 
-	//c.    Chip_rst_b = 1’b0 reg12[0]
+	/* c.    Chip_rst_b = 1’b0 reg12[0] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp & (~(1<<0));
 	cdn_apb_write(0xc000c<<2, temp);
 
-	//d.    Phy_reset_n = 1’b0 //reg12[1]
+	/* d.    Phy_reset_n = 1’b0 //reg12[1] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp & (~(1<<1));
 	cdn_apb_write(0xc000c<<2, temp);
 
-	//3.    Assert Chipmode[2:0] = 3’b000 reg11[2:0]
+	/* 3.    Assert Chipmode[2:0] = 3’b000 reg11[2:0] */
 	cdn_apb_read(0xc000b<<2, &temp);
 	temp = temp & (~(7<<0));
 	cdn_apb_write(0xc000b<<2, temp);
 
-	//4.    Assert Sel_Tap[1:0]= 2’b00  //reg11[4:3];
+	/* 4.    Assert Sel_Tap[1:0]= 2’b00  //reg11[4:3]; */
 	cdn_apb_read(0xc000b<<2, &temp);
 	temp = temp & (~(3<<3));
 	cdn_apb_write(0xc000b<<2, temp);
 
-	//5.    Assert
-	//a.    After 100ns, Apb_preset_n = 1’b1 //reg12[2]
+	/* 5.    Assert
+	   a.    After 100ns, Apb_preset_n = 1’b1 //reg12[2] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp | ((1<<2));
 	cdn_apb_write(0xc000c<<2, temp);
 
-	//b.    After 100ns, Chip_reset_b = 1’b1 // Reg12[0]
+	/* b.    After 100ns, Chip_reset_b = 1’b1 // Reg12[0] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp | ((1<<0));
 	cdn_apb_write(0xc000c<<2, temp);
 
-	//c.    After 100ns, Tap_trst_n = 1’b1 //reg12[3]
+	/* c.    After 100ns, Tap_trst_n = 1’b1 //reg12[3] */
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp | ((1<<3));
 	cdn_apb_write(0xc000c<<2, temp);
@@ -522,7 +522,7 @@ void AFE_init(state_struct *state, int num_lanes,
 	Afe_write(state, PHY_HDP_MODE_CTRL, 0x0004);
 
 #if FPGA
-	//Assert  Phy_reset_n = 1’b1
+	/* Assert  Phy_reset_n = 1’b1 */
 
 	cdn_apb_read(0xc000c<<2, &temp);
 	temp = temp | ((1<<1));
diff --git a/drivers/gpu/drm/imx/hdp/API_AFE_mcu2_dp.h b/drivers/gpu/drm/imx/hdp/API_AFE_mcu2_dp.h
index 2a1ce91ba580..9ffcb32c1a92 100644
--- a/drivers/gpu/drm/imx/hdp/API_AFE_mcu2_dp.h
+++ b/drivers/gpu/drm/imx/hdp/API_AFE_mcu2_dp.h
@@ -162,4 +162,4 @@
 #define PHY_HDP_TX_CTL_L2               0xC488
 #define PHY_HDP_TX_CTL_L3               0xC4C8
 
-#endif //API_AFE_MCU2_DP_H
+#endif /* API_AFE_MCU2_DP_H */
diff --git a/drivers/gpu/drm/imx/hdp/API_AFE_ss28fdsoi_kiran_hdmitx.c b/drivers/gpu/drm/imx/hdp/API_AFE_ss28fdsoi_kiran_hdmitx.c
index 6d2a9d753dee..fa264c2faf40 100644
--- a/drivers/gpu/drm/imx/hdp/API_AFE_ss28fdsoi_kiran_hdmitx.c
+++ b/drivers/gpu/drm/imx/hdp/API_AFE_ss28fdsoi_kiran_hdmitx.c
@@ -523,11 +523,13 @@ int phy_cfg_hdp_ss28fdsoi(state_struct *state, int num_lanes, VIC_MODES vicMode,
 		Afe_write(state, 0xC810, 0x0013);	/* Assert cmn_macro_pwr_en */
 
 		/* PHY_PMA_ISO_CMN_CTRL */
-		while (!(Afe_read(state, 0xC810) & (1 << 5))) ;
+		while (!(Afe_read(state, 0xC810) & (1 << 5)))
+			;
 		/* wait for cmn_macro_pwr_en_ack */
 
 		/* PHY_PMA_CMN_CTRL1 */
-		while (!(Afe_read(state, 0xC800) & (1 << 0))) ;
+		while (!(Afe_read(state, 0xC800) & (1 << 0)))
+			;
 		/* wait for cmn_ready */
 	} else {
 		for (i = 0; i < num_lanes; i++) {
@@ -557,12 +559,14 @@ int hdmi_tx_kiran_power_configuration_seq(state_struct *state, int num_lanes)
 	/* Configure the power state. */
 
 	/* PHY_DP_MODE_CTL */
-	while (!(Afe_read(state, 0xC008) & (1 << 6)));
+	while (!(Afe_read(state, 0xC008) & (1 << 6)))
+		;
 
 	/* PHY_DP_MODE_CTL */
 	Afe_write(state, 0xC008, (((0x0F << num_lanes) & 0x0F) << 12) | 0x0001);
 
 	/* PHY_DP_MODE_CTL */
-	while (!(Afe_read(state, 0xC008) & (1 << 4)));
+	while (!(Afe_read(state, 0xC008) & (1 << 4)))
+		;
 	return 0;
 }
diff --git a/drivers/gpu/drm/imx/hdp/API_AFE_ss28fdsoi_kiran_hdmitx.h b/drivers/gpu/drm/imx/hdp/API_AFE_ss28fdsoi_kiran_hdmitx.h
index 16a3dde30450..92b0e4b3dba3 100644
--- a/drivers/gpu/drm/imx/hdp/API_AFE_ss28fdsoi_kiran_hdmitx.h
+++ b/drivers/gpu/drm/imx/hdp/API_AFE_ss28fdsoi_kiran_hdmitx.h
@@ -19,7 +19,7 @@
 
 #include "./cdn_hdp/all.h"
 
-int phy_cfg_hdp_ss28fdsoi(state_struct *state, int num_lanes,
+int phy_cfg_hdp_ss28fdsoi(state_struct * state, int num_lanes,
 				VIC_MODES vicMode, int bpp, VIC_PXL_ENCODING_FORMAT format);
 int hdmi_tx_kiran_power_configuration_seq(state_struct *state, int num_lanes);
 int get_table_row_match_column(const u32 *array, u32 table_rows,
diff --git a/drivers/gpu/drm/imx/hdp/cdn_hdp/API_AVI.h b/drivers/gpu/drm/imx/hdp/cdn_hdp/API_AVI.h
index d52c647781b3..186f29e3dd42 100644
--- a/drivers/gpu/drm/imx/hdp/cdn_hdp/API_AVI.h
+++ b/drivers/gpu/drm/imx/hdp/cdn_hdp/API_AVI.h
@@ -24,4 +24,4 @@ CDN_API_STATUS CDN_API_Set_AVI(state_struct *state, VIC_MODES vicMode,
 			       VIC_PXL_ENCODING_FORMAT colorMode,
 			       BT_TYPE ITUver);
 
-#endif //API_AVI_H_
+#endif /* API_AVI_H_ */
diff --git a/drivers/gpu/drm/imx/hdp/cdn_hdp/API_DPTX.c b/drivers/gpu/drm/imx/hdp/cdn_hdp/API_DPTX.c
index 1f8c3766981c..bcd2a265abe5 100644
--- a/drivers/gpu/drm/imx/hdp/cdn_hdp/API_DPTX.c
+++ b/drivers/gpu/drm/imx/hdp/cdn_hdp/API_DPTX.c
@@ -100,7 +100,7 @@ CDN_API_STATUS CDN_API_DPTX_SetHostCap(state_struct *state, u8 maxLinkRate,
 				       u8 fastLinkTraining,
 				       u8 laneMapping, u8 enchanced)
 {
-	// fifth bit of lanesCount_SSC is used to declare eDP.
+	/* fifth bit of lanesCount_SSC is used to declare eDP. */
 	state->edp = ((lanesCount_SSC >> 5) & 1);
 	if (!state->running) {
 		if (!internal_apb_available(state))
diff --git a/drivers/gpu/drm/imx/hdp/cdn_hdp/API_HDMITX.c b/drivers/gpu/drm/imx/hdp/cdn_hdp/API_HDMITX.c
index 596a4679f8c1..8baa4189e126 100644
--- a/drivers/gpu/drm/imx/hdp/cdn_hdp/API_HDMITX.c
+++ b/drivers/gpu/drm/imx/hdp/cdn_hdp/API_HDMITX.c
@@ -259,7 +259,7 @@ CDN_API_STATUS CDN_API_HDMITX_SetVic_blocking(state_struct *state,
 	u32 hsync = hblank - hfront - hback;
 	u32 vsync = vsync_lines;
 	u32 vback = sof_lines;
-	u32 v_h_polarity = ((vic_table[vicMode][HSYNC_POL] == ACTIVE_LOW) ? F_HPOL(0) : F_HPOL(1)) + ((vic_table[vicMode][VSYNC_POL] == ACTIVE_LOW) ? F_VPOL(0) : F_VPOL(1));	//bit invert ??? Sandor
+	u32 v_h_polarity = ((vic_table[vicMode][HSYNC_POL] == ACTIVE_LOW) ? F_HPOL(0) : F_HPOL(1)) + ((vic_table[vicMode][VSYNC_POL] == ACTIVE_LOW) ? F_VPOL(0) : F_VPOL(1));	/* bit invert ??? Sandor */
 
 	ret =
 	    CDN_API_General_Write_Register_blocking(state, ADDR_SOURCE_MHL_HD +
diff --git a/drivers/gpu/drm/imx/hdp/imx-dp.c b/drivers/gpu/drm/imx/hdp/imx-dp.c
index ace24680fafd..90ccb0c669ae 100644
--- a/drivers/gpu/drm/imx/hdp/imx-dp.c
+++ b/drivers/gpu/drm/imx/hdp/imx-dp.c
@@ -3,7 +3,7 @@
  *
  * SPDX-License-Identifier: GPL-2.0+
  *
- */ 
+ */
 
 #include <linux/clk.h>
 #include <linux/io.h>
@@ -174,7 +174,7 @@ void dp_mode_set(state_struct *state, int vic, int format, int color_depth, int
 			printk("ERROR: Invalid ID:0x%.4X\n", eventId);
 			break;
 		}
-	}while (eventId != 0x08 && eventId != 0x10);
+	} while (eventId != 0x08 && eventId != 0x10);
 
 	ret = CDN_API_DPTX_ReadLinkStat_blocking(state, &rls);
 	printk("INFO: Get Read Link Status (ret = %d resp:\n"
-- 
2.17.1

