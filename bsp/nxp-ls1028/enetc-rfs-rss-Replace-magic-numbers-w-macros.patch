From 78c7f06f451acf3dade65d87b0af4375482b7f73 Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@nxp.com>
Date: Wed, 7 Nov 2018 16:00:35 +0200
Subject: [PATCH 471/706] enetc: rfs/rss: Replace magic numbers w/ macros

Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
(cherry picked from commit f4460100f9d06cedf9bf2ed75d1747cf640167c4)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/freescale/enetc/enetc.c        | 13 ++++++++-----
 .../net/ethernet/freescale/enetc/enetc_ethtool.c    |  8 ++++----
 drivers/net/ethernet/freescale/enetc/enetc_hw.h     |  2 ++
 3 files changed, 14 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc.c b/drivers/net/ethernet/freescale/enetc/enetc.c
index a4bca12d08b5..00f831fe8e6d 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc.c
@@ -705,14 +705,17 @@ void enetc_get_si_caps(struct enetc_si *si)
 	val = enetc_rd(hw, ENETC_SICAPR0);
 	si->num_rx_rings = (val >> 16) & 0xff;
 	si->num_tx_rings = val & 0xff;
-	si->num_fs_entries = enetc_rd(hw, ENETC_SIRFSCAPR) & 0x7f;
+
+	val = enetc_rd(hw, ENETC_SIRFSCAPR);
+	si->num_fs_entries = ENETC_SIRFSCAPR_GET_NUM_RFS(val);
 	si->num_fs_entries = min(si->num_fs_entries, ENETC_MAX_RFS_SIZE);
-	val = enetc_rd(hw, ENETC_SIRSSCAPR) & 0xf;
-	si->num_rss = BIT(val) * 32;
 
+	si->num_rss = 0;
 	val = enetc_rd(hw, ENETC_SIPCAPR0);
-	if (!(val & ENETC_SIPCAPR0_RSS))
-		si->num_rss = 0;
+	if (val & ENETC_SIPCAPR0_RSS) {
+		val = enetc_rd(hw, ENETC_SIRSSCAPR);
+		si->num_rss = ENETC_SIRSSCAPR_GET_NUM_RSS(val);
+	}
 }
 
 static int enetc_dma_alloc_bdr(struct enetc_bdr *r, size_t bd_size)
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c b/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
index a14b19c5cacc..c3a48615b8b1 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
@@ -302,8 +302,8 @@ static void ether_addr_copy_swap(u8 *dst, const u8 *src)
 {
 	int i;
 
-	for (i = 0; i < 6; i++)
-		dst[i] = src[5 - i];
+	for (i = 0; i < ETH_ALEN; i++)
+		dst[i] = src[ETH_ALEN - i - 1];
 }
 
 static int enetc_set_cls_entry(struct enetc_si *si,
@@ -340,7 +340,7 @@ static int enetc_set_cls_entry(struct enetc_si *si,
 		rfse.dport_m = ntohs(l4ip4_m->pdst);
 		if (l4ip4_m->tos)
 			netdev_warn(si->ndev, "ToS field is not supported and was ignored\n");
-		rfse.ethtype_h = 0x0800; /* IPv4 */
+		rfse.ethtype_h = ETH_P_IP; /* IPv4 */
 		rfse.ethtype_m = 0xffff;
 		break;
 	case IP_USER_FLOW:
@@ -353,7 +353,7 @@ static int enetc_set_cls_entry(struct enetc_si *si,
 		rfse.dip_m[0] = l3ip4_m->ip4dst;
 		if (l3ip4_m->tos)
 			netdev_warn(si->ndev, "ToS field is not supported and was ignored\n");
-		rfse.ethtype_h = 0x0800; /* IPv4 */
+		rfse.ethtype_h = ETH_P_IP; /* IPv4 */
 		rfse.ethtype_m = 0xffff;
 		break;
 	case ETHER_FLOW:
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_hw.h b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
index f2ca312b1847..a5be329f3cab 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_hw.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
@@ -95,7 +95,9 @@ static inline u32 enetc_vsi_set_msize(u32 size)
 #define ENETC_SIUEFDCR	0xe28
 
 #define ENETC_SIRFSCAPR	0x1200
+#define ENETC_SIRFSCAPR_GET_NUM_RFS(val) ((val) & 0x7f)
 #define ENETC_SIRSSCAPR	0x1600
+#define ENETC_SIRSSCAPR_GET_NUM_RSS(val) (BIT((val) & 0xf) * 32)
 
 /** SI BDR sub-blocks, n = 0..7 */
 enum enetc_bdr_type {TX, RX};
-- 
2.17.1

