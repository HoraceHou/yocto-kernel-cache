From eccdf3fb7daf02a26b846543edc5bf3a04c140a3 Mon Sep 17 00:00:00 2001
From: Alex Marginean <alexandru.marginean@nxp.com>
Date: Tue, 12 Jun 2018 11:57:51 +0300
Subject: [PATCH 160/706] enetc: RSS updates

Fix structure format for RSS commands, it's 1B per entry not 2B.
Don't store user config in priv structure, always read back from HW.
Fix structure alignment for get/set commands, HW errors out if unaligned.
Pre-set RSS table to distribute to Rx rings equally.

Signed-off-by: Alex Marginean <alexandru.marginean@nxp.com>
(cherry picked from commit 123b23173700b617fee149519f6880c22bd5ca3e)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/freescale/enetc/enetc.c  | 14 ++++-
 drivers/net/ethernet/freescale/enetc/enetc.h  |  4 +-
 .../net/ethernet/freescale/enetc/enetc_cbdr.c | 62 +++++++++++++------
 .../ethernet/freescale/enetc/enetc_ethtool.c  | 25 ++++----
 .../net/ethernet/freescale/enetc/enetc_hw.h   |  1 +
 5 files changed, 71 insertions(+), 35 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc.c b/drivers/net/ethernet/freescale/enetc/enetc.c
index a30c3f047598..4714ddf0778e 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc.c
@@ -920,9 +920,12 @@ static void enetc_setup_cbdr(struct enetc_hw *hw, struct enetc_cbdr *cbdr)
 	cbdr->cisr = hw->reg + ENETC_SICBDRCISR;
 }
 
-static void enetc_configure_si(struct enetc_si *si)
+static void enetc_configure_si(struct enetc_ndev_priv *priv)
 {
+	int rss_table[ENETC_RSS_TABLE_SIZE];
+	struct enetc_si *si = priv->si;
 	struct enetc_hw *hw = &si->hw;
+	int i;
 
 	enetc_setup_cbdr(hw, &si->cbd_ring);
 	/* set SI cache attributes */
@@ -931,6 +934,13 @@ static void enetc_configure_si(struct enetc_si *si)
 	enetc_wr(hw, ENETC_SICAR1, ENETC_SICAR_MSI);
 	/* enable SI, TODO: start RSS by default */
 	enetc_wr(hw, ENETC_SIMR, ENETC_SIMR_EN /*| ENETC_SIMR_RSSE*/);
+
+	/* Set up RSS table defaults */
+	for (i = 0; i < ENETC_RSS_TABLE_SIZE; i++)
+		rss_table[i] = i % priv->num_rx_rings;
+	/* TODO: fix the size, *2 is just to keep sim happy */
+	enetc_set_rss_table(si, rss_table, ENETC_RSS_TABLE_SIZE * 2);
+
 }
 
 int enetc_alloc_si_resources(struct enetc_ndev_priv *priv)
@@ -949,7 +959,7 @@ int enetc_alloc_si_resources(struct enetc_ndev_priv *priv)
 		goto err_alloc_cls;
 	}
 
-	enetc_configure_si(si);
+	enetc_configure_si(priv);
 
 	return 0;
 
diff --git a/drivers/net/ethernet/freescale/enetc/enetc.h b/drivers/net/ethernet/freescale/enetc/enetc.h
index aca066a21f4d..cdf11a9159fb 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc.h
@@ -194,7 +194,6 @@ struct enetc_ndev_priv {
 	struct enetc_bdr *rx_ring[16];
 
 	struct enetc_cls_rule *cls_rules;
-	u16 rss_table[64]; /* < TODO: remove and use HW results */
 };
 
 /* Messaging */
@@ -245,7 +244,8 @@ void enetc_clear_mac_flt_entry(struct enetc_si *si, int index);
 int enetc_set_fs_entry(struct enetc_si *si, struct enetc_cmd_rfse *rfse,
 		       int index);
 void enetc_set_rss_key(struct enetc_hw *hw, const u8 *bytes);
-int enetc_set_rss_table(struct enetc_si *si, u16 *table, int len);
+int enetc_get_rss_table(struct enetc_si *si, u32 *table, int count);
+int enetc_set_rss_table(struct enetc_si *si, const u32 *table, int count);
 
 #ifdef CONFIG_ENETC_TSN
 void enetc_tsn_init(struct enetc_si *si);
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_cbdr.c b/drivers/net/ethernet/freescale/enetc/enetc_cbdr.c
index 1d932bd2f6f5..1ab67aff6d46 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_cbdr.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_cbdr.c
@@ -198,35 +198,61 @@ int enetc_set_fs_entry(struct enetc_si *si, struct enetc_cmd_rfse *rfse,
 	return err;
 }
 
-/* Set RSS table */
-int enetc_set_rss_table(struct enetc_si *si, u16 *table, int len)
+static int enetc_cmd_rss_table(struct enetc_si *si, u32 *table, int count,
+			       int read)
 {
 	struct enetc_cbd cbd = {.cmd = 0};
-	dma_addr_t dma;
-	int err;
-
-	if (len < 0x80)
-		/* HW only takes in a full 64 entry/128B table */
+	enum dma_data_direction dir = read ? DMA_FROM_DEVICE : DMA_TO_DEVICE;
+	dma_addr_t dma, dma_align;
+	const size_t align = 64;
+	u8 *tmp, *tmp_align;
+	int err, i;
+
+	if (count < 0x40)
+		/* HW only takes in a full 64 entry table */
 		return -EINVAL;
 
-	/* fill up the "set" descriptor */
-	cbd.cmd = 1;
-	cbd.cls = 3;
-	cbd.length = len;
-
-	dma = dma_map_single(&si->pdev->dev, table, len, DMA_TO_DEVICE);
-	if (dma_mapping_error(&si->pdev->dev, dma)) {
+	tmp = dma_alloc_coherent(&si->pdev->dev, count + align - 1, &dma, dir);
+	if (!tmp) {
 		netdev_err(si->ndev, "DMA mapping of RSS table failed!\n");
 		return -ENOMEM;
 	}
+	dma_align = ALIGN(dma, align);
+	tmp_align = PTR_ALIGN(tmp, align);
 
-	cbd.addr[0] = lower_32_bits(dma);
-	cbd.addr[1] = upper_32_bits(dma);
+	if (!read)
+		for (i = 0; i < count; i++)
+			tmp_align[i] = (u8)(table[i]);
+
+	/* fill up the descriptor */
+	cbd.cmd = read ? 2 : 1;
+	cbd.cls = 3;
+	cbd.length = count;
+
+	cbd.addr[0] = lower_32_bits(dma_align);
+	cbd.addr[1] = upper_32_bits(dma_align);
 
 	err = enetc_send_cmd(si, &cbd, false);
 	if (err)
-		netdev_err(si->ndev, "RSS table update failed (%d)!", err);
-	dma_unmap_single(&si->pdev->dev, dma, cbd.length, DMA_TO_DEVICE);
+		netdev_err(si->ndev, "RSS cmd failed (%d)!", err);
+
+	if (read)
+		for (i = 0; i < count; i++)
+			table[i] = tmp_align[i];
+
+	dma_free_coherent(&si->pdev->dev, count, tmp, dma);
 
 	return err;
 }
+
+/* Get RSS table */
+int enetc_get_rss_table(struct enetc_si *si, u32 *table, int count)
+{
+	return enetc_cmd_rss_table(si, table, count, true);
+}
+
+/* Set RSS table */
+int enetc_set_rss_table(struct enetc_si *si, const u32 *table, int count)
+{
+	return enetc_cmd_rss_table(si, (u32 *)table, count, false);
+}
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c b/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
index b1db0c8178be..41eca2bb865f 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
@@ -476,7 +476,8 @@ static u32 enetc_get_rxfh_indir_size(struct net_device *ndev)
 {
 	/* return the size of the RX flow hash indirection table */
 
-	return 64; /* TODO: use capabilities after moved to SI */
+	/* TODO: use capabilities after moved to SI */
+	return ENETC_RSS_TABLE_SIZE;
 }
 
 static int enetc_get_rxfh(struct net_device *ndev, u32 *indir, u8 *key,
@@ -484,23 +485,24 @@ static int enetc_get_rxfh(struct net_device *ndev, u32 *indir, u8 *key,
 {
 	struct enetc_ndev_priv *priv = netdev_priv(ndev);
 	struct enetc_hw *hw = &priv->si->hw;
-	int i;
+	int err = 0, i;
 
 	/* return hash function */
 	if (hfunc)
 		*hfunc = ETH_RSS_HASH_TOP;
 
-	/* return RSS table */
-	if (indir)
-		for (i = 0; i < ARRAY_SIZE(priv->rss_table); i++)
-			indir[i] = priv->rss_table[i];
-
 	/* return hash key */
 	if (key && hw->port)
 		for (i = 0; i < ENETC_RSSHASH_KEY_SIZE / 4; i++)
 			((u32 *)key)[i] = enetc_port_rd(hw, ENETC_PRSSK(i));
 
-	return 0;
+	/* return RSS table */
+	if (indir)
+		err = enetc_get_rss_table(priv->si, indir,
+					  ENETC_RSS_TABLE_SIZE);
+
+	return err;
+}
 
 void enetc_set_rss_key(struct enetc_hw *hw, const u8 *bytes)
 {
@@ -516,7 +518,6 @@ static int enetc_set_rxfh(struct net_device *ndev, const u32 *indir,
 	struct enetc_ndev_priv *priv = netdev_priv(ndev);
 	struct enetc_hw *hw = &priv->si->hw;
 	int err = 0;
-	int i;
 
 	/* set hash key, if PF */
 	if (key && hw->port)
@@ -524,10 +525,8 @@ static int enetc_set_rxfh(struct net_device *ndev, const u32 *indir,
 
 	/* set RSS table */
 	if (indir) {
-		for (i = 0; i < 64; i++)
-			priv->rss_table[i] = (u16)indir[i];
-		err = enetc_set_rss_table(priv->si, priv->rss_table,
-					  sizeof(priv->rss_table));
+		err = enetc_set_rss_table(priv->si, indir,
+					  ENETC_RSS_TABLE_SIZE);
 	}
 
 	return err;
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_hw.h b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
index 8524d9a88a5e..fddb43b7c5d2 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_hw.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
@@ -205,6 +205,7 @@ enum enetc_bdr_type {TX, RX};
 #define ENETC_PSICFGR0_ASE	BIT(15)
 #define ENETC_PSICFGR0_SIVC(bmp)	(((bmp) & 0xff) << 24) /* VLAN_TYPE */
 
+#define ENETC_RSS_TABLE_SIZE	64
 #define ENETC_RSSHASH_KEY_SIZE	40
 #define ENETC_PRSSK(n)		(0x01410 + (n) * 4) /* n = [0..9] */
 
-- 
2.17.1

