From 0715191a54061590df4b893416eb5cc63b296e61 Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@nxp.com>
Date: Wed, 29 Aug 2018 18:58:57 +0300
Subject: [PATCH 286/706] enetc: Add initial PHY connect support

Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
(cherry picked from commit 8e099d22ba4805b6f188d59a431e498e04ad6621)
(cherry picked from commit 825d440eee2531bd52207a8a923cd9986223413c)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/freescale/enetc/enetc.c | 34 ++++++++++++++++++--
 1 file changed, 32 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc.c b/drivers/net/ethernet/freescale/enetc/enetc.c
index 6b6b39f23b41..e627bf11d571 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc.c
@@ -36,6 +36,7 @@
 #include "enetc.h"
 #include <linux/tcp.h>
 #include <linux/udp.h>
+#include <linux/of_mdio.h>
 
 static int enetc_map_tx_buffs(struct enetc_bdr *tx_ring, struct sk_buff *skb,
 			      bool tstamp);
@@ -1269,12 +1270,30 @@ static void enetc_disable_interrupts(struct enetc_ndev_priv *priv)
 		enetc_rxbdr_wr(&priv->si->hw, i, ENETC_RBIER, 0);
 }
 
+static void adjust_link(struct net_device *ndev)
+{
+	struct phy_device *phydev = ndev->phydev;
+
+	phy_print_status(phydev);
+}
+
 int enetc_open(struct net_device *ndev)
 {
 	struct enetc_ndev_priv *priv = netdev_priv(ndev);
 	int i, err;
 
-	netif_carrier_on(ndev);
+	if (priv->phy_node) {
+		struct phy_device *phydev;
+
+		phydev = of_phy_connect(ndev, priv->phy_node, &adjust_link,
+					0, priv->if_mode);
+		if (!phydev) {
+			dev_err(&ndev->dev, "could not attach to PHY\n");
+			return -ENODEV;
+		}
+
+		phy_attached_info(phydev);
+	}
 
 	err = enetc_alloc_tx_resources(priv);
 	if (err)
@@ -1294,6 +1313,11 @@ int enetc_open(struct net_device *ndev)
 	if (err)
 		goto err_set_queues;
 
+	if (ndev->phydev)
+		phy_start(ndev->phydev);
+	else
+		netif_carrier_on(ndev);
+
 	for (i = 0; i < priv->bdr_int_num; i++)
 		napi_enable(&priv->int_vector[i]->napi);
 
@@ -1317,7 +1341,6 @@ int enetc_close(struct net_device *ndev)
 	struct enetc_ndev_priv *priv = netdev_priv(ndev);
 	int i;
 
-	netif_carrier_off(ndev);
 	netif_tx_stop_all_queues(ndev);
 
 	enetc_disable_interrupts(priv);
@@ -1327,6 +1350,13 @@ int enetc_close(struct net_device *ndev)
 		napi_disable(&priv->int_vector[i]->napi);
 	}
 
+	if (ndev->phydev) {
+		phy_stop(ndev->phydev);
+		phy_disconnect(ndev->phydev);
+	} else {
+		netif_carrier_off(ndev);
+	}
+
 	enetc_free_rxtx_rings(priv);
 	enetc_free_rx_resources(priv);
 	enetc_free_tx_resources(priv);
-- 
2.17.1

