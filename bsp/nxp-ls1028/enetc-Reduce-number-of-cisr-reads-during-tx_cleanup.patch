From 9dc653be238b9f8d9cd470f9b8f795e0fb459e8a Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@nxp.com>
Date: Tue, 19 Dec 2017 19:19:21 +0200
Subject: [PATCH 097/706] enetc: Reduce number of cisr reads during tx_cleanup

Also remove skb pointer check, as it cannot be NULL if
there are BDs left to clean. Instead, always check for
the last BD in a frame after pending work is confirmed.

Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
(cherry picked from commit dc899571f30961651cc699fc3f264767c70d3a66)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/freescale/enetc/enetc.c | 22 +++++++++++++-------
 1 file changed, 15 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc.c b/drivers/net/ethernet/freescale/enetc/enetc.c
index dcc67ee9723c..dee7192876e5 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc.c
@@ -284,24 +284,34 @@ static void enetc_unmap_tx_buff(struct enetc_bdr *tx_ring,
 	}
 }
 
+static int enetc_bd_ready_count(struct enetc_bdr *tx_ring, int ci)
+{
+	int pi = enetc_rd_reg(tx_ring->tcisr) & ENETC_TBCISR_IDX_MASK;
+
+	return pi >= ci ? pi - ci : tx_ring->bd_count - ci + pi;
+}
+
 static bool enetc_clean_tx_ring(struct enetc_bdr *tx_ring)
 {
 	struct net_device *ndev = tx_ring->ndev;
 	int tx_frm_cnt = 0, tx_byte_cnt = 0;
 	struct enetc_tx_swbd *tx_swbd;
 	bool frame_cleaned = false;
-	int i, last;
+	int i, last, bds_to_clean;
 
 	i = tx_ring->next_to_clean;
 	tx_swbd = &tx_ring->tx_swbd[i];
-	last = tx_swbd->last_in_frame;
+	bds_to_clean = enetc_bd_ready_count(tx_ring, i);
 
-	while ((enetc_rd_reg(tx_ring->tcisr) & ENETC_TBCISR_IDX_MASK) != i) {
+	while (bds_to_clean) {
+		/* ready Tx BDs will always make up an exact # of frames */
+		last = tx_swbd->last_in_frame;
 		do {
 			enetc_unmap_tx_buff(tx_ring, tx_swbd);
 			tx_byte_cnt += tx_swbd->len;
 			frame_cleaned = (i == last);
 
+			bds_to_clean--;
 			tx_swbd++;
 			i++;
 			if (unlikely(i == tx_ring->bd_count)) {
@@ -314,10 +324,8 @@ static bool enetc_clean_tx_ring(struct enetc_bdr *tx_ring)
 
 		tx_frm_cnt++;
 
-		if (!tx_swbd->skb)
-			break;
-
-		last = tx_swbd->last_in_frame;
+		if (unlikely(!bds_to_clean))
+			bds_to_clean = enetc_bd_ready_count(tx_ring, i);
 	}
 
 	tx_ring->next_to_clean = i;
-- 
2.17.1

