From d20bec07dd3460e63b46221de5d4844f89d3674b Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@nxp.com>
Date: Thu, 10 Jan 2019 14:23:35 +0200
Subject: [PATCH 476/706] enetc: Refactor vf-pf messaging and fix vf primary
 mac addr config

Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
(cherry picked from commit ce62f09e165e5eb3d3876998094fd202dab7b71e)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../net/ethernet/freescale/enetc/enetc_msg.c  | 44 ----------
 .../net/ethernet/freescale/enetc/enetc_pf.c   | 81 ++++++++++++++++---
 .../net/ethernet/freescale/enetc/enetc_pf.h   | 10 +++
 3 files changed, 81 insertions(+), 54 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc_msg.c b/drivers/net/ethernet/freescale/enetc/enetc_msg.c
index 0dbe174526aa..71e0cf2db9c8 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_msg.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_msg.c
@@ -28,49 +28,6 @@ static irqreturn_t enetc_msg_psi_msix(int irq, void *data)
 	return IRQ_HANDLED;
 }
 
-static u16 enetc_msg_psi_set_vf_primary_mac_addr(struct enetc_pf *pf,
-						 int mbox_id)
-{
-	struct enetc_msg_swbd *msg = &pf->rxmsg[mbox_id];
-	struct enetc_msg_cmd_set_primary_mac *cmd;
-	struct enetc_si *si = pf->si;
-	u16 cmd_id;
-	char *addr;
-
-	cmd = (struct enetc_msg_cmd_set_primary_mac *)msg->vaddr;
-	cmd_id = cmd->header.id;
-	if (cmd_id != ENETC_MSG_CMD_MNG_ADD)
-		return ENETC_MSG_CMD_STATUS_FAIL;
-
-	addr = cmd->mac.sa_data;
-	dev_info(&si->pdev->dev, "Request from VF#%d for %x:%x:%x:%x:%x:%x\n",
-		 mbox_id, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);
-
-	return ENETC_MSG_CMD_STATUS_OK;
-}
-
-static void enetc_msg_handle_rxmsg(struct enetc_pf *pf, int mbox_id,
-				   u16 *status)
-{
-	struct enetc_msg_swbd *msg = &pf->rxmsg[mbox_id];
-	struct enetc_msg_cmd_header *cmd_hdr;
-	u16 cmd_type;
-
-	*status = ENETC_MSG_CMD_STATUS_OK;
-	/* TODO: dispatch command */
-	cmd_hdr = (struct enetc_msg_cmd_header *)msg->vaddr;
-	cmd_type = cmd_hdr->type;
-	pr_info("cmd_type: 0x%x\n", cmd_type);
-
-	switch (cmd_type) {
-	case ENETC_MSG_CMD_MNG_MAC:
-		*status = enetc_msg_psi_set_vf_primary_mac_addr(pf, mbox_id);
-		break;
-	default:
-		pr_err("command not supported (cmd_type: 0x%x)\n", cmd_type);
-	}
-}
-
 static void enetc_msg_task(struct work_struct *work)
 {
 	struct enetc_pf *pf = container_of(work, struct enetc_pf, msg_task);
@@ -104,7 +61,6 @@ static void enetc_msg_task(struct work_struct *work)
 }
 
 /* Init */
-
 static int enetc_msg_alloc_mbx(struct enetc_si *si, int idx)
 {
 	struct enetc_pf *pf = enetc_si_priv(si);
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_pf.c b/drivers/net/ethernet/freescale/enetc/enetc_pf.c
index 62e7d0885ce5..44c79de51041 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_pf.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_pf.c
@@ -25,7 +25,7 @@ static void enetc_pf_get_primary_mac_addr(struct enetc_hw *hw, int si, u8 *addr)
 }
 
 static void enetc_pf_set_primary_mac_addr(struct enetc_hw *hw, int si,
-				       const u8 *addr)
+					  const u8 *addr)
 {
 	u32 upper = *(const u32 *)addr;
 	u16 lower = *(const u16 *)(addr + 4);
@@ -366,6 +366,7 @@ static int enetc_pf_set_vf_mac(struct net_device *ndev, int vf, u8 *mac)
 {
 	struct enetc_ndev_priv *priv = netdev_priv(ndev);
 	struct enetc_pf *pf = enetc_si_priv(priv->si);
+	struct enetc_vf_state *vf_state;
 
 	if (vf >= pf->total_vfs)
 		return -EINVAL;
@@ -373,6 +374,8 @@ static int enetc_pf_set_vf_mac(struct net_device *ndev, int vf, u8 *mac)
 	if (!is_valid_ether_addr(mac))
 		return -EADDRNOTAVAIL;
 
+	vf_state = &pf->vf_state[vf];
+	vf_state->flags |= ENETC_VF_FLAG_PF_SET_MAC;
 	enetc_pf_set_primary_mac_addr(&priv->si->hw, vf + 1, mac);
 	return 0;
 }
@@ -495,7 +498,7 @@ static void enetc_port_si_configure(struct enetc_si *si)
 	}
 
 	for (i = 0; i < pf->total_vfs; i++)
-		enetc_port_wr(hw, ENETC_PSICFGR0(i+1), val);
+		enetc_port_wr(hw, ENETC_PSICFGR0(i + 1), val);
 
 	/* Port level VLAN settings */
 	val = ENETC_PVCLCTR_OVTPIDL(ENETC_VLAN_TYPE_C | ENETC_VLAN_TYPE_S);
@@ -531,10 +534,10 @@ static void enetc_configure_port_pmac(struct enetc_hw *hw)
 	/* Set pMAC step lock */
 	temp = enetc_port_rd(hw, ENETC_PFPMR);
 	enetc_port_wr(hw, ENETC_PFPMR,
-			temp|ENETC_PFPMR_PMACE|ENETC_PFPMR_MWLM);
+		      temp | ENETC_PFPMR_PMACE | ENETC_PFPMR_MWLM);
 
 	temp = enetc_port_rd(hw, ENETC_MMCSR);
-	enetc_port_wr(hw, ENETC_MMCSR, temp|ENETC_MMCSR_ME);
+	enetc_port_wr(hw, ENETC_MMCSR, temp | ENETC_MMCSR_ME);
 }
 
 static void enetc_configure_port(struct enetc_pf *pf)
@@ -568,6 +571,53 @@ static void enetc_configure_port(struct enetc_pf *pf)
 	enetc_port_wr(hw, ENETC_PMR, ENETC_PMR_EN);
 }
 
+/* Messaging */
+static u16 enetc_msg_pf_set_vf_primary_mac_addr(struct enetc_pf *pf,
+						int vf_id)
+{
+	struct enetc_vf_state *vf_state = &pf->vf_state[vf_id];
+	struct enetc_msg_swbd *msg = &pf->rxmsg[vf_id];
+	struct enetc_msg_cmd_set_primary_mac *cmd;
+	struct device *dev = &pf->si->pdev->dev;
+	u16 cmd_id;
+	char *addr;
+
+	cmd = (struct enetc_msg_cmd_set_primary_mac *)msg->vaddr;
+	cmd_id = cmd->header.id;
+	if (cmd_id != ENETC_MSG_CMD_MNG_ADD)
+		return ENETC_MSG_CMD_STATUS_FAIL;
+
+	addr = cmd->mac.sa_data;
+	if (vf_state->flags & ENETC_VF_FLAG_PF_SET_MAC)
+		dev_warn(dev, "Attempt to override PF set mac addr for VF%d\n",
+			 vf_id);
+	else
+		enetc_pf_set_primary_mac_addr(&pf->si->hw, vf_id + 1, addr);
+
+	return ENETC_MSG_CMD_STATUS_OK;
+}
+
+void enetc_msg_handle_rxmsg(struct enetc_pf *pf, int vf_id, u16 *status)
+{
+	struct enetc_msg_swbd *msg = &pf->rxmsg[vf_id];
+	struct device *dev = &pf->si->pdev->dev;
+	struct enetc_msg_cmd_header *cmd_hdr;
+	u16 cmd_type;
+
+	*status = ENETC_MSG_CMD_STATUS_OK;
+	cmd_hdr = (struct enetc_msg_cmd_header *)msg->vaddr;
+	cmd_type = cmd_hdr->type;
+
+	switch (cmd_type) {
+	case ENETC_MSG_CMD_MNG_MAC:
+		*status = enetc_msg_pf_set_vf_primary_mac_addr(pf, vf_id);
+		break;
+	default:
+		dev_err(dev, "command not supported (cmd_type: 0x%x)\n",
+			cmd_type);
+	}
+}
+
 #ifdef CONFIG_PCI_IOV
 static int enetc_sriov_configure(struct pci_dev *pdev, int num_vfs)
 {
@@ -577,27 +627,38 @@ static int enetc_sriov_configure(struct pci_dev *pdev, int num_vfs)
 
 	if (!num_vfs) {
 		enetc_msg_psi_free(pf);
+		kfree(pf->vf_state);
 		pf->num_vfs = 0;
 		pci_disable_sriov(pdev);
 	} else {
-		err = pci_enable_sriov(pdev, num_vfs);
-		if (err) {
-			dev_err(&pdev->dev, "pci_enable_sriov err %d\n", err);
-			return err;
+		pf->num_vfs = num_vfs;
+
+		pf->vf_state = kcalloc(num_vfs, sizeof(struct enetc_vf_state),
+				       GFP_KERNEL);
+		if (!pf->vf_state) {
+			pf->num_vfs = 0;
+			return -ENOMEM;
 		}
 
-		pf->num_vfs = num_vfs;
 		err = enetc_msg_psi_init(pf);
 		if (err) {
 			dev_err(&pdev->dev, "enetc_msg_psi_init (%d)\n", err);
 			goto err_msg_psi;
 		}
+
+		err = pci_enable_sriov(pdev, num_vfs);
+		if (err) {
+			dev_err(&pdev->dev, "pci_enable_sriov err %d\n", err);
+			goto err_en_sriov;
+		}
 	}
 
 	return num_vfs;
 
+err_en_sriov:
+	enetc_msg_psi_free(pf);
 err_msg_psi:
-	pci_disable_sriov(pdev);
+	kfree(pf->vf_state);
 	pf->num_vfs = 0;
 
 	return err;
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_pf.h b/drivers/net/ethernet/freescale/enetc/enetc_pf.h
index 2f815261d58b..9449eb67dd23 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_pf.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc_pf.h
@@ -19,10 +19,19 @@ struct enetc_mac_filter {
 
 #define ENETC_VLAN_HT_SIZE	64
 
+enum enetc_vf_flags {
+	ENETC_VF_FLAG_PF_SET_MAC	= BIT(0),
+};
+
+struct enetc_vf_state {
+	enum enetc_vf_flags flags;
+};
+
 struct enetc_pf {
 	struct enetc_si *si;
 	int num_vfs; /* number of active VFs, after sriov_init */
 	int total_vfs; /* max number of VFs, set for PF at probe */
+	struct enetc_vf_state *vf_state;
 
 	struct enetc_mac_filter mac_filter[ENETC_MAX_NUM_MAC_FLT];
 
@@ -37,3 +46,4 @@ struct enetc_pf {
 
 int enetc_msg_psi_init(struct enetc_pf *pf);
 void enetc_msg_psi_free(struct enetc_pf *pf);
+void enetc_msg_handle_rxmsg(struct enetc_pf *pf, int mbox_id, u16 *status);
-- 
2.17.1

