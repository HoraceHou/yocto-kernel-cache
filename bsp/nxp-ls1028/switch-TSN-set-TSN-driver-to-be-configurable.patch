From ab0c22335e64fb091159664138b118b7e59be6b7 Mon Sep 17 00:00:00 2001
From: Xiaoliang Yang <xiaoliang.yang_1@nxp.com>
Date: Fri, 7 Dec 2018 23:52:33 +0800
Subject: [PATCH 396/706] switch: TSN: set TSN driver to be configurable

Extract the TSN codes into a separate file, and set TSN driver
to be configurable.

Signed-off-by: Xiaoliang Yang <xiaoliang.yang_1@nxp.com>
(cherry picked from commit 8edd971cd58c2f20018c1f566426c986f1bfa321)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/mscc/Kconfig      |  6 +++
 drivers/net/ethernet/mscc/Makefile     |  3 +-
 drivers/net/ethernet/mscc/ocelot.c     |  5 ++-
 drivers/net/ethernet/mscc/ocelot.h     | 45 --------------------
 drivers/net/ethernet/mscc/tsn_switch.c |  1 +
 drivers/net/ethernet/mscc/tsn_switch.h | 57 ++++++++++++++++++++++++++
 6 files changed, 70 insertions(+), 47 deletions(-)
 create mode 100644 drivers/net/ethernet/mscc/tsn_switch.h

diff --git a/drivers/net/ethernet/mscc/Kconfig b/drivers/net/ethernet/mscc/Kconfig
index d54804b518cf..57648fe58fac 100644
--- a/drivers/net/ethernet/mscc/Kconfig
+++ b/drivers/net/ethernet/mscc/Kconfig
@@ -35,4 +35,10 @@ config MSCC_FELIX_SWITCH
 	  This driver supports the Felix network switch device, connected as a
 	  PCI device.
 
+config MSCC_FELIX_SWITCH_TSN
+	tristate "TSN on FELIX switch driver"
+	depends on MSCC_FELIX_SWITCH
+	help
+	  This driver supports TSN on felix switch.
+
 endif # NET_VENDOR_MICROSEMI
diff --git a/drivers/net/ethernet/mscc/Makefile b/drivers/net/ethernet/mscc/Makefile
index 1ca2366220eb..047b89645638 100644
--- a/drivers/net/ethernet/mscc/Makefile
+++ b/drivers/net/ethernet/mscc/Makefile
@@ -1,7 +1,8 @@
 # SPDX-License-Identifier: (GPL-2.0 OR MIT)
 obj-$(CONFIG_MSCC_OCELOT_SWITCH) += mscc_ocelot_common.o
-mscc_ocelot_common-y := ocelot.o ocelot_io.o tsn_switch.o
+mscc_ocelot_common-y := ocelot.o ocelot_io.o
 obj-$(CONFIG_MSCC_OCELOT_SWITCH_OCELOT) += ocelot_board.o ocelot_regs.o
 
 obj-$(CONFIG_MSCC_FELIX_SWITCH) += mscc_felix.o
 mscc_felix-y := felix_regs.o felix_board.o
+obj-$(CONFIG_MSCC_FELIX_SWITCH_TSN) += tsn_switch.o
diff --git a/drivers/net/ethernet/mscc/ocelot.c b/drivers/net/ethernet/mscc/ocelot.c
index 16193bde2a58..0766ac3601cb 100644
--- a/drivers/net/ethernet/mscc/ocelot.c
+++ b/drivers/net/ethernet/mscc/ocelot.c
@@ -21,6 +21,7 @@
 #include <net/switchdev.h>
 
 #include "ocelot.h"
+#include "tsn_switch.h"
 
 /* MAC table entry types.
  * ENTRYTYPE_NORMAL is subject to aging.
@@ -1340,6 +1341,7 @@ static const struct switchdev_ops ocelot_port_switchdev_ops = {
 	.switchdev_port_obj_del		= ocelot_port_obj_del,
 };
 
+#ifdef CONFIG_MSCC_FELIX_SWITCH_TSN
 const struct tsn_ops switch_tsn_ops = {
 	.qbv_set			= switch_qbv_set,
 	.qbv_get			= switch_qbv_get,
@@ -1361,6 +1363,7 @@ const struct tsn_ops switch_tsn_ops = {
 	.cbgen_set			= switch_seq_gen_set,
 	.cbrec_set			= switch_seq_rec_set,
 };
+#endif
 
 static int ocelot_port_bridge_join(struct ocelot_port *ocelot_port,
 				   struct net_device *bridge)
@@ -1640,7 +1643,7 @@ int ocelot_probe_port(struct ocelot *ocelot, u8 port,
 	dev->netdev_ops = &ocelot_port_netdev_ops;
 	dev->ethtool_ops = &ocelot_ethtool_ops;
 	dev->switchdev_ops = &ocelot_port_switchdev_ops;
-#ifdef CONFIG_TSN
+#ifdef CONFIG_MSCC_FELIX_SWITCH_TSN
 	dev->tsn_ops = &switch_tsn_ops;
 #endif
 
diff --git a/drivers/net/ethernet/mscc/ocelot.h b/drivers/net/ethernet/mscc/ocelot.h
index 2fa1a9870364..a494b1b5d250 100644
--- a/drivers/net/ethernet/mscc/ocelot.h
+++ b/drivers/net/ethernet/mscc/ocelot.h
@@ -26,10 +26,6 @@
 
 #define PGID_AGGR    64
 #define PGID_SRC     80
-#define TRUE 1
-#define FALSE 0
-#define SUCCESS 1
-#define FAILED 0
 
 /* Reserved PGIDs */
 #define PGID_CPU     (PGID_AGGR - 5)
@@ -47,11 +43,6 @@
 /* Length for long prefix header used for frame injection/extraction */
 #define XFH_LONG_PREFIX_LEN 32
 
-#define SWITCH_TAS_GCL_MAX 64
-#define SWITCH_TAS_CT_MAX 1000000000
-#define SWITCH_TAS_CT_MIN 100
-#define SWITCH_TAS_CTE_MAX 999999999
-
 struct frame_info {
 	u32 len;
 	u16 port;
@@ -613,40 +604,4 @@ int ocelot_probe_port(struct ocelot *ocelot, u8 port,
 
 extern struct notifier_block ocelot_netdevice_nb;
 
-int switch_qbv_set(struct net_device *ndev,
-		   struct tsn_qbv_conf *shaper_config);
-int switch_qbv_get(struct net_device *ndev,
-		   struct tsn_qbv_conf *shaper_config);
-int switch_qbv_get_status(struct net_device *ndev,
-			  struct tsn_qbv_status *qbvstatus);
-int switch_cut_thru_set(struct net_device *ndev, u8 cut_thru);
-int switch_cbs_set(struct net_device *ndev, u8 tc, u8 bw);
-int switch_qbu_set(struct net_device *ndev, u8 preemptable);
-int switch_cb_streamid_get(struct net_device *ndev, u32 index,
-			   struct tsn_cb_streamid *streamid);
-int switch_cb_streamid_set(struct net_device *ndev, u32 index,
-			   bool enable, struct tsn_cb_streamid *streamid);
-int switch_qci_sfi_get(struct net_device *ndev, u32 index,
-		       struct tsn_qci_psfp_sfi_conf *sfi);
-int switch_qci_sfi_set(struct net_device *ndev, u32 index,
-		       bool enable, struct tsn_qci_psfp_sfi_conf *sfi);
-int switch_cb_streamid_counters_get(struct net_device *ndev, u32 index,
-				    struct tsn_cb_streamid_counters *s_counters);
-int switch_qci_sfi_counters_get(struct net_device *ndev, u32 index,
-				struct tsn_qci_psfp_sfi_counters *sfi_counters);
-int switch_qci_sgi_set(struct net_device *ndev, u32 index,
-		       struct tsn_qci_psfp_sgi_conf *sgi_conf);
-int switch_qci_sgi_get(struct net_device *ndev, u32 index,
-		       struct tsn_qci_psfp_sgi_conf *sgi_conf);
-int switch_qci_sgi_status_get(struct net_device *ndev, u16 index,
-			      struct tsn_psfp_sgi_status *sgi_status);
-int switch_qci_fmi_set(struct net_device *ndev, u32 index,
-		       bool enable, struct tsn_qci_psfp_fmi *fmi);
-int switch_qci_fmi_get(struct net_device *ndev, u32 index,
-		       struct tsn_qci_psfp_fmi *fmi);
-int switch_seq_gen_set(struct net_device *ndev, u32 index,
-		       struct tsn_seq_gen_conf *sg_conf);
-int switch_seq_rec_set(struct net_device *ndev, u32 index,
-		       struct tsn_seq_rec_conf *sr_conf);
-
 #endif
diff --git a/drivers/net/ethernet/mscc/tsn_switch.c b/drivers/net/ethernet/mscc/tsn_switch.c
index 9b19ba2726cd..5a327a6b90bf 100644
--- a/drivers/net/ethernet/mscc/tsn_switch.c
+++ b/drivers/net/ethernet/mscc/tsn_switch.c
@@ -15,6 +15,7 @@
 #include <linux/kernel.h>
 #include <linux/phy.h>
 #include "ocelot.h"
+#include "tsn_switch.h"
 
 /* Round x divided by y to nearest higher integer. x and y are integers */
 #define MSCC_DIV_ROUND_UP(x, y) (((x) + (y) - 1) / (y))
diff --git a/drivers/net/ethernet/mscc/tsn_switch.h b/drivers/net/ethernet/mscc/tsn_switch.h
new file mode 100644
index 000000000000..3b882afff88d
--- /dev/null
+++ b/drivers/net/ethernet/mscc/tsn_switch.h
@@ -0,0 +1,57 @@
+/* SPDX-License-Identifier: (GPL-2.0 OR MIT)
+ *
+ * TSN_SWITCH driver
+ *
+ * Copyright 2018 NXP
+ */
+
+#ifndef _MSCC_FELIX_SWITCH_TSN_H_
+#define _MSCC_FELIX_SWITCH_TSN_H_
+
+#define TRUE 1
+#define FALSE 0
+#define SUCCESS 1
+#define FAILED 0
+
+#define SWITCH_TAS_GCL_MAX 64
+#define SWITCH_TAS_CT_MAX 1000000000
+#define SWITCH_TAS_CT_MIN 100
+#define SWITCH_TAS_CTE_MAX 999999999
+
+int switch_qbv_set(struct net_device *ndev,
+		   struct tsn_qbv_conf *shaper_config);
+int switch_qbv_get(struct net_device *ndev,
+		   struct tsn_qbv_conf *shaper_config);
+int switch_qbv_get_status(struct net_device *ndev,
+			  struct tsn_qbv_status *qbvstatus);
+int switch_cut_thru_set(struct net_device *ndev, u8 cut_thru);
+int switch_cbs_set(struct net_device *ndev, u8 tc, u8 bw);
+int switch_qbu_set(struct net_device *ndev, u8 preemptable);
+int switch_cb_streamid_get(struct net_device *ndev, u32 index,
+			   struct tsn_cb_streamid *streamid);
+int switch_cb_streamid_set(struct net_device *ndev, u32 index,
+			   bool enable, struct tsn_cb_streamid *streamid);
+int switch_qci_sfi_get(struct net_device *ndev, u32 index,
+		       struct tsn_qci_psfp_sfi_conf *sfi);
+int switch_qci_sfi_set(struct net_device *ndev, u32 index,
+		       bool enable, struct tsn_qci_psfp_sfi_conf *sfi);
+int switch_cb_streamid_counters_get(struct net_device *ndev, u32 index,
+				    struct tsn_cb_streamid_counters *s_counters);
+int switch_qci_sfi_counters_get(struct net_device *ndev, u32 index,
+				struct tsn_qci_psfp_sfi_counters *sfi_counters);
+int switch_qci_sgi_set(struct net_device *ndev, u32 index,
+		       struct tsn_qci_psfp_sgi_conf *sgi_conf);
+int switch_qci_sgi_get(struct net_device *ndev, u32 index,
+		       struct tsn_qci_psfp_sgi_conf *sgi_conf);
+int switch_qci_sgi_status_get(struct net_device *ndev, u16 index,
+			      struct tsn_psfp_sgi_status *sgi_status);
+int switch_qci_fmi_set(struct net_device *ndev, u32 index,
+		       bool enable, struct tsn_qci_psfp_fmi *fmi);
+int switch_qci_fmi_get(struct net_device *ndev, u32 index,
+		       struct tsn_qci_psfp_fmi *fmi);
+int switch_seq_gen_set(struct net_device *ndev, u32 index,
+		       struct tsn_seq_gen_conf *sg_conf);
+int switch_seq_rec_set(struct net_device *ndev, u32 index,
+		       struct tsn_seq_rec_conf *sr_conf);
+
+#endif
-- 
2.17.1

