From f07b4211a6f8006ac9185a1ad2f1b3e000a9e0c5 Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@nxp.com>
Date: Wed, 10 Oct 2018 11:14:59 +0300
Subject: [PATCH 325/706] enetc: Add hash table mac filtering reg swap errata
 w/a for rev1

Original ticket:  TKT381557.

Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
(cherry picked from commit 290a3210bb12464477d50f8d8ae44156f52f1c78)
(cherry picked from commit da43f9f16c083302be8359b833e6bf949c568438)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/freescale/enetc/enetc.c  |  3 +-
 drivers/net/ethernet/freescale/enetc/enetc.h  |  1 +
 .../net/ethernet/freescale/enetc/enetc_hw.h   |  4 +--
 .../net/ethernet/freescale/enetc/enetc_pf.c   | 34 +++++++++++--------
 4 files changed, 24 insertions(+), 18 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc.c b/drivers/net/ethernet/freescale/enetc/enetc.c
index 02be5bed9f28..2ad9ec26e7bf 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc.c
@@ -1648,7 +1648,8 @@ static void enetc_kfree_si(struct enetc_si *si)
 static void enetc_detect_errata(struct enetc_si *si)
 {
 	if (si->pdev->revision == ENETC_REV1)
-		si->errata = ENETC_ERR_TXCSUM | ENETC_ERR_VLAN_ISOL;
+		si->errata = ENETC_ERR_TXCSUM | ENETC_ERR_VLAN_ISOL |
+			     ENETC_ERR_UCMCSWP;
 }
 
 int enetc_pci_probe(struct pci_dev *pdev, const char *name, int sizeof_priv)
diff --git a/drivers/net/ethernet/freescale/enetc/enetc.h b/drivers/net/ethernet/freescale/enetc/enetc.h
index 8836a43da35c..46f1e73a6420 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc.h
@@ -132,6 +132,7 @@ struct enetc_cbs {
 enum enetc_errata {
 	ENETC_ERR_TXCSUM	= BIT(0),
 	ENETC_ERR_VLAN_ISOL	= BIT(1),
+	ENETC_ERR_UCMCSWP	= BIT(2),
 };
 
 /* PCI IEP device data */
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_hw.h b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
index d2c5f38f6394..34c026633565 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_hw.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
@@ -225,9 +225,9 @@ enum enetc_bdr_type {TX, RX};
 #define ENETC_PMO_IFM_RG	BIT(2)
 #define ENETC_PM0_IFM_RLP	(BIT(5) | BIT(11))
 
-#define ENETC_PSIUMHFR0(n)	(0x01d00 + (n) * 0x10) /* n = SI index */
+#define ENETC_PSIUMHFR0(n, err)	(((err) ? 0x01d08 : 0x01d00) + (n) * 0x10)
 #define ENETC_PSIUMHFR1(n)	(0x01d04 + (n) * 0x10)
-#define ENETC_PSIMMHFR0(n)	(0x01d08 + (n) * 0x10)
+#define ENETC_PSIMMHFR0(n, err)	(((err) ? 0x01d00 : 0x01d08) + (n) * 0x10)
 #define ENETC_PSIMMHFR1(n)	(0x01d0c + (n) * 0x10)
 
 #define ENETC_PSIVHFR0(n)	(0x01e00 + (n) * 8) /* n = SI index */
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_pf.c b/drivers/net/ethernet/freescale/enetc/enetc_pf.c
index 2ab18e94a532..59ed61ba695d 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_pf.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_pf.c
@@ -140,26 +140,30 @@ static void enetc_add_mac_addr_ht_filter(struct enetc_mac_filter *filter,
 	filter->mac_addr_cnt++;
 }
 
-static void enetc_clear_mac_ht_flt(struct enetc_hw *hw, int si_idx, int type)
+static void enetc_clear_mac_ht_flt(struct enetc_si *si, int si_idx, int type)
 {
-	if (type == UC) { // FIXME: Swap UC with MC low bits, TKT381557
-		enetc_port_wr(hw, ENETC_PSIMMHFR0(si_idx), 0);
-		enetc_port_wr(hw, ENETC_PSIUMHFR1(si_idx), 0);
+	bool err = si->errata & ENETC_ERR_UCMCSWP;
+
+	if (type == UC) {
+		enetc_port_wr(&si->hw, ENETC_PSIUMHFR0(si_idx, err), 0);
+		enetc_port_wr(&si->hw, ENETC_PSIUMHFR1(si_idx), 0);
 	} else { /* MC */
-		enetc_port_wr(hw, ENETC_PSIUMHFR0(si_idx), 0);
-		enetc_port_wr(hw, ENETC_PSIMMHFR1(si_idx), 0);
+		enetc_port_wr(&si->hw, ENETC_PSIMMHFR0(si_idx, err), 0);
+		enetc_port_wr(&si->hw, ENETC_PSIMMHFR1(si_idx), 0);
 	}
 }
 
-static void enetc_set_mac_ht_flt(struct enetc_hw *hw, int si_idx, int type,
+static void enetc_set_mac_ht_flt(struct enetc_si *si, int si_idx, int type,
 				 u32 *hash)
 {
-	if (type == UC) { // FIXME: Swap UC with MC low bits, TKT381557
-		enetc_port_wr(hw, ENETC_PSIMMHFR0(si_idx), *hash);
-		enetc_port_wr(hw, ENETC_PSIUMHFR1(si_idx), *(hash + 1));
+	bool err = si->errata & ENETC_ERR_UCMCSWP;
+
+	if (type == UC) {
+		enetc_port_wr(&si->hw, ENETC_PSIUMHFR0(si_idx, err), *hash);
+		enetc_port_wr(&si->hw, ENETC_PSIUMHFR1(si_idx), *(hash + 1));
 	} else { /* MC */
-		enetc_port_wr(hw, ENETC_PSIUMHFR0(si_idx), *hash);
-		enetc_port_wr(hw, ENETC_PSIMMHFR1(si_idx), *(hash + 1));
+		enetc_port_wr(&si->hw, ENETC_PSIMMHFR0(si_idx, err), *hash);
+		enetc_port_wr(&si->hw, ENETC_PSIMMHFR1(si_idx), *(hash + 1));
 	}
 }
 
@@ -179,7 +183,7 @@ static void enetc_sync_mac_filters(struct enetc_pf *pf)
 			if (i == UC)
 				enetc_clear_mac_flt_entry(si, pos);
 
-			enetc_clear_mac_ht_flt(&si->hw, 0, i);
+			enetc_clear_mac_ht_flt(si, 0, i);
 			continue;
 		}
 
@@ -187,7 +191,7 @@ static void enetc_sync_mac_filters(struct enetc_pf *pf)
 		if (em) {
 			int err;
 
-			enetc_clear_mac_ht_flt(&si->hw, 0, UC);
+			enetc_clear_mac_ht_flt(si, 0, UC);
 
 			err = enetc_set_mac_flt_entry(si, pos, f->mac_addr,
 						      BIT(0));
@@ -203,7 +207,7 @@ static void enetc_sync_mac_filters(struct enetc_pf *pf)
 		if (i == UC)
 			enetc_clear_mac_flt_entry(si, pos);
 
-		enetc_set_mac_ht_flt(&si->hw, 0, i, (u32 *)f->mac_hash_table);
+		enetc_set_mac_ht_flt(si, 0, i, (u32 *)f->mac_hash_table);
 	}
 }
 
-- 
2.17.1

