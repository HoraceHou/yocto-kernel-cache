From 1341f2b203384b786ea6e949dbb10cfd4748b6ea Mon Sep 17 00:00:00 2001
From: Claudiu Manoil <claudiu.manoil@nxp.com>
Date: Fri, 15 Mar 2019 12:11:46 +0200
Subject: [PATCH 666/706] enetc: Get tstamp info from xmit to tx_cleanup,
 cleanup

xmit() already knows which BDs have tstamp info, no
need to reconstruct this at tx_cleanup. This also
simplifies the code and makes it cleaner.

Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
(cherry picked from commit f2ed6aa73d53c225165eba780a652735e27baf01)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/freescale/enetc/enetc.c | 19 +++++++++----------
 drivers/net/ethernet/freescale/enetc/enetc.h |  3 ++-
 2 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc.c b/drivers/net/ethernet/freescale/enetc/enetc.c
index 1ef3717739c7..f1158d072327 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc.c
@@ -139,6 +139,7 @@ static int enetc_map_tx_buffs(struct enetc_bdr *tx_ring, struct sk_buff *skb,
 
 	do_vlan = skb_vlan_tag_present(skb);
 	do_tstamp = tstamp && (skb_shinfo(skb)->tx_flags & SKBTX_HW_TSTAMP);
+	tx_swbd->do_tstamp = do_tstamp;
 
 	if (do_vlan || do_tstamp)
 		flags |= ENETC_TXBD_FLAGS_EX;
@@ -330,35 +331,35 @@ static bool enetc_clean_tx_ring(struct enetc_bdr *tx_ring, int napi_budget)
 	struct net_device *ndev = tx_ring->ndev;
 	int tx_frm_cnt = 0, tx_byte_cnt = 0;
 	struct enetc_tx_swbd *tx_swbd;
-	struct enetc_ndev_priv *priv;
 	int i, bds_to_clean;
-	bool do_tstamp, first;
+	bool do_tstamp;
 	u64 tstamp = 0;
 
-	priv = netdev_priv(ndev);
-	do_tstamp = priv->tx_tstamp;
-
 	i = tx_ring->next_to_clean;
 	tx_swbd = &tx_ring->tx_swbd[i];
-	first = true;
+	do_tstamp = false;
 	bds_to_clean = enetc_bd_ready_count(tx_ring, i);
 
 	while (bds_to_clean && tx_frm_cnt < ENETC_DEFAULT_TX_WORK) {
 		bool is_eof = !!tx_swbd->skb;
 
-		if (unlikely(do_tstamp && first)) {
+		if (unlikely(tx_swbd->do_tstamp)) {
+			struct enetc_ndev_priv *priv = netdev_priv(ndev);
 			union enetc_tx_bd *txbd;
 
 			txbd = ENETC_TXBD(*tx_ring, i);
 			enetc_get_tx_tstamp(&priv->si->hw, txbd, &tstamp);
+			do_tstamp = true;
 		}
 
 		if (likely(tx_swbd->dma))
 			enetc_unmap_tx_buff(tx_ring, tx_swbd);
 
 		if (is_eof) {
-			if (unlikely(do_tstamp))
+			if (unlikely(do_tstamp)) {
 				enetc_tstamp_tx(tx_swbd->skb, tstamp);
+				do_tstamp = false;
+			}
 			napi_consume_skb(tx_swbd->skb, napi_budget);
 			tx_swbd->skb = NULL;
 		}
@@ -374,10 +375,8 @@ static bool enetc_clean_tx_ring(struct enetc_bdr *tx_ring, int napi_budget)
 		}
 
 		/* BD iteration loop end */
-		first = false;
 		if (is_eof) {
 			tx_frm_cnt++;
-			first = true;
 			/* re-arm interrupt source */
 			enetc_wr_reg(tx_ring->idr, BIT(tx_ring->index) |
 				     BIT(16 + tx_ring->index));
diff --git a/drivers/net/ethernet/freescale/enetc/enetc.h b/drivers/net/ethernet/freescale/enetc/enetc.h
index 4e64615f3af8..caf93e6a4f05 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc.h
@@ -23,7 +23,8 @@ struct enetc_tx_swbd {
 	struct sk_buff *skb;
 	dma_addr_t dma;
 	u16 len;
-	u16 is_dma_page;
+	u8 is_dma_page:1;
+	u8 do_tstamp:1;
 };
 
 #define ENETC_RX_MAXFRM_SIZE	ENETC_MAC_MAXFRM_SIZE
-- 
2.17.1

