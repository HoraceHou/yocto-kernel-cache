From 17c3733165612743b38ebdb58594e6c2ffc5e005 Mon Sep 17 00:00:00 2001
From: Alex Marginean <alexandru.marginean@freescale.com>
Date: Fri, 8 Sep 2017 18:09:41 +0300
Subject: [PATCH 053/706] enetc: split SI, Port and Global register pointers
 and accessors

Signed-off-by: Alex Marginean <alexandru.marginean@freescale.com>
(cherry picked from commit 8f2bb44ce69cb6eaa559abe60397c100dcc3d989)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/freescale/enetc/enetc.c  | 30 ++++++++-------
 .../ethernet/freescale/enetc/enetc_ethtool.c  | 37 ++++++++++++-------
 .../net/ethernet/freescale/enetc/enetc_hw.h   | 37 +++++++++++++------
 3 files changed, 65 insertions(+), 39 deletions(-)

diff --git a/drivers/net/ethernet/freescale/enetc/enetc.c b/drivers/net/ethernet/freescale/enetc/enetc.c
index fcabf59dd42b..1033c4b29bb4 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc.c
@@ -772,16 +772,16 @@ static void enetc_setup_bdrs(struct enetc_ndev_priv *priv)
 static void enetc_enable_port(struct enetc_si *si)
 {
 	enetc_wr(&si->hw, ENETC_SIMR, ENETC_SIMR_EN);
-	enetc_wr(&si->hw, ENETC_PMR, ENETC_PMR_EN);
+	enetc_port_wr(&si->hw, ENETC_PMR, ENETC_PMR_EN);
 }
 
 static void enetc_configure_port_mac(struct enetc_si *si)
 {
-	enetc_wr(&si->hw, ENETC_PM0_MAXFRM,
-		 ENETC_SET_MAXFRM(ENETC_RX_MAXFRM_SIZE));
+	enetc_port_wr(&si->hw, ENETC_PM0_MAXFRM,
+		      ENETC_SET_MAXFRM(ENETC_RX_MAXFRM_SIZE));
 
-	enetc_wr(&si->hw, ENETC_PM0_CMD_CFG,
-		 ENETC_PM0_TX_EN | ENETC_PM0_RX_EN);
+	enetc_port_wr(&si->hw, ENETC_PM0_CMD_CFG,
+		      ENETC_PM0_TX_EN | ENETC_PM0_RX_EN);
 }
 
 static void enetc_configure_hw_vector(struct enetc_hw *hw, int idx, u16 entry)
@@ -946,8 +946,8 @@ static void enetc_set_primary_mac_addr(struct enetc_hw *hw, const u8 *addr)
 	u16 upper = ntohs(*(const u16 *)addr);
 	u32 lower = ntohl(*(const u32 *)(addr + 2));
 
-	enetc_wr(hw, ENETC_PSIPMAR0(0), lower);
-	enetc_wr(hw, ENETC_PSIPMAR1(0), upper << 16);
+	enetc_port_wr(hw, ENETC_PSIPMAR0(0), lower);
+	enetc_port_wr(hw, ENETC_PSIPMAR1(0), upper << 16);
 }
 
 static int enetc_set_mac_addr(struct net_device *ndev, void *addr)
@@ -978,9 +978,9 @@ static void enetc_set_rx_mode(struct net_device *ndev)
 		psipmr = ENETC_PSIPMR_SET_MP(0);
 	}
 
-	psipmr |= enetc_rd(hw, ENETC_PSIPMR) &
+	psipmr |= enetc_port_rd(hw, ENETC_PSIPMR) &
 		  ~(ENETC_PSIPMR_SET_UP(0) | ENETC_PSIPMR_SET_MP(0));
-	enetc_wr(hw, ENETC_PSIPMR, psipmr);
+	enetc_port_wr(hw, ENETC_PSIPMR, psipmr);
 }
 
 static struct net_device_stats *enetc_get_stats(struct net_device *ndev)
@@ -1045,7 +1045,7 @@ static void enetc_configure_port(struct enetc_ndev_priv *priv)
 
 	val = ENETC_PVCFGR_SET_TXBDR(priv->num_tx_rings);
 	val |= ENETC_PVCFGR_SET_RXBDR(priv->num_rx_rings);
-	enetc_wr(hw, ENETC_PV0CFGR, val);
+	enetc_port_wr(hw, ENETC_PV0CFGR, val);
 
 	enetc_configure_port_mac(priv->si);
 	enetc_enable_port(priv->si);
@@ -1120,6 +1120,7 @@ static int enetc_pci_probe(struct pci_dev *pdev,
 	struct enetc_si *si;
 	struct enetc_hw *hw;
 	int err;
+	int len;
 
 	err = pci_enable_device_mem(pdev);
 	if (err) {
@@ -1155,14 +1156,17 @@ static int enetc_pci_probe(struct pci_dev *pdev,
 	si->pdev = pdev;
 	hw = &si->hw;
 
-	hw->reg = ioremap(pci_resource_start(pdev, 0),
-			  pci_resource_len(pdev, 0));
-
+	len = pci_resource_len(pdev, 0);
+	hw->reg = ioremap(pci_resource_start(pdev, 0), len);
 	if (!hw->reg) {
 		err = -ENXIO;
 		dev_err(&pdev->dev, "ioremap() failed\n");
 		goto err_ioremap;
 	}
+	if (len > ENETC_PORT_BASE)
+		hw->port = hw->reg + ENETC_PORT_BASE;
+	if (len > ENETC_GLOBAL_BASE)
+		hw->global = hw->reg + ENETC_GLOBAL_BASE;
 
 	ndev = alloc_etherdev_mq(sizeof(*priv), ENETC_MAX_NUM_TXQS);
 	if (!ndev) {
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c b/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
index 7cd6e93dc870..683722e02ada 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
+++ b/drivers/net/ethernet/freescale/enetc/enetc_ethtool.c
@@ -5,6 +5,10 @@
 
 #define PR_REG(hw, NAME)	pr_info(PR_REG_FMT_STR(NAME), ENETC_##NAME, \
 					enetc_rd(hw, ENETC_##NAME))
+#define PR_PREG(hw, NAME)	pr_info(PR_REG_FMT_STR(NAME), ENETC_##NAME, \
+					enetc_port_rd(hw, ENETC_##NAME))
+#define PR_GREG(hw, NAME)	pr_info(PR_REG_FMT_STR(NAME), ENETC_##NAME, \
+					enetc_global_rd(hw, ENETC_##NAME))
 #define enetc_rxbdr_off(i, off) ENETC_BDR(RX, i, (off))
 #define enetc_txbdr_off(i, off) ENETC_BDR(TX, i, (off))
 #define PR_BDR_REG(hw, t, i, NAME) \
@@ -61,21 +65,26 @@ static void enetc_get_regs(struct net_device *ndev, struct ethtool_regs *regs,
 		PR_BDR_REG(hw, rx, i, RBICIR0);
 		PR_BDR_REG(hw, rx, i, RBIER);
 	}
-	/* Port regs */
-	PR_REG(hw, PMR);
-	PR_REG(hw, PSR);
-	PR_REG(hw, PSIPMR);
-	PR_REG(hw, PSIPMAR0(0));
-	PR_REG(hw, PSIPMAR1(0));
-	PR_REG(hw, PCAPR0);
-	PR_REG(hw, PCAPR1);
-	PR_REG(hw, PV0CFGR);
-	PR_REG(hw, PM0_CMD_CFG);
-	PR_REG(hw, PM0_MAXFRM);
 
-	/* GLobal regs */
-	PR_REG(hw, G_EIPBRR0);
-	PR_REG(hw, G_EIPBRR1);
+	if (hw->port) {
+		/* Port regs */
+		PR_PREG(hw, PMR);
+		PR_PREG(hw, PSR);
+		PR_PREG(hw, PSIPMR);
+		PR_PREG(hw, PSIPMAR0(0));
+		PR_PREG(hw, PSIPMAR1(0));
+		PR_PREG(hw, PCAPR0);
+		PR_PREG(hw, PCAPR1);
+		PR_PREG(hw, PV0CFGR);
+		PR_PREG(hw, PM0_CMD_CFG);
+		PR_PREG(hw, PM0_MAXFRM);
+	}
+
+	if (hw->global) {
+		/* GLobal regs */
+		PR_GREG(hw, G_EIPBRR0);
+		PR_GREG(hw, G_EIPBRR1);
+	}
 }
 
 const struct ethtool_ops enetc_ethtool_ops = {
diff --git a/drivers/net/ethernet/freescale/enetc/enetc_hw.h b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
index d57326ff30df..3b0619b32229 100644
--- a/drivers/net/ethernet/freescale/enetc/enetc_hw.h
+++ b/drivers/net/ethernet/freescale/enetc/enetc_hw.h
@@ -53,35 +53,42 @@ enum enetc_bdr_type {TX, RX};
 #define ENETC_TBMR_EN	BIT(31)
 
 /* Port regs, offset: 1_0000h */
-#define ENETC_PMR	0x10000
+#define ENETC_PORT_BASE	0x10000
+#define ENETC_PMR	0x00000
 #define ENETC_PMR_EN	GENMASK(17, 16)
-#define ENETC_PSR	0x10004 /* RO */
-#define ENETC_PSIPMR	0x10018
+#define ENETC_PSR	0x00004 /* RO */
+#define ENETC_PSIPMR	0x00018
 #define ENETC_PSIPMR_SET_UP(n)	(0x1 << (n)) /* n = SI index */
 #define ENETC_PSIPMR_SET_MP(n)	(0x1 << ((n) + 8))
-#define ENETC_PSIPMAR0(n)	(0x10100 + (n) * 0x20) /* n = SI index */
-#define ENETC_PSIPMAR1(n)	(0x10104 + (n) * 0x20)
-#define ENETC_PCAPR0	0x10900
-#define ENETC_PCAPR1	0x10904
+#define ENETC_PSIPMAR0(n)	(0x00100 + (n) * 0x20) /* n = SI index */
+#define ENETC_PSIPMAR1(n)	(0x00104 + (n) * 0x20)
+#define ENETC_PCAPR0	0x00900
+#define ENETC_PCAPR1	0x00904
 
-#define ENETC_PV0CFGR	0x10920
+#define ENETC_PV0CFGR	0x00920
 #define ENETC_PVCFGR_SET_TXBDR(val)	((val) & 0xff)
 #define ENETC_PVCFGR_SET_RXBDR(val)	(((val) & 0xff) << 16)
 
-#define ENETC_PM0_CMD_CFG	0x18008
+#define ENETC_PM0_CMD_CFG	0x08008
 #define ENETC_PM0_TX_EN		BIT(31)
 #define ENETC_PM0_RX_EN		BIT(30)
 
-#define ENETC_PM0_MAXFRM	0x18014
+#define ENETC_PM0_MAXFRM	0x08014
 #define ENETC_SET_MAXFRM(val)	((val) << 16)
 
 /* Global regs, offset: 2_0000h */
-#define ENETC_G_EIPBRR0		0x20bf8
-#define ENETC_G_EIPBRR1		0x20bfc
+#define ENETC_GLOBAL_BASE		0x20000
+#define ENETC_G_EIPBRR0		0x00bf8
+#define ENETC_G_EIPBRR1		0x00bfc
 
 /* PCI device info */
 struct enetc_hw {
+	/* SI registers, used by all PCI functions */
 	void __iomem *reg;
+	/* Port registers, PF only */
+	void __iomem *port;
+	/* IP global registers, PF only */
+	void __iomem *global;
 };
 
 /* general register accessors */
@@ -89,6 +96,12 @@ struct enetc_hw {
 #define enetc_wr_reg(reg, val)	iowrite32((val), (reg))
 #define enetc_rd(hw, off)	enetc_rd_reg((hw)->reg + (off))
 #define enetc_wr(hw, off, val)	enetc_wr_reg((hw)->reg + (off), val)
+/* port register accessors - PF only */
+#define enetc_port_rd(hw, off)		enetc_rd_reg((hw)->port + (off))
+#define enetc_port_wr(hw, off, val)	enetc_wr_reg((hw)->port + (off), val)
+/* global register accessors - PF only */
+#define enetc_global_rd(hw, off)	enetc_rd_reg((hw)->global + (off))
+#define enetc_global_wr(hw, off, val)	enetc_wr_reg((hw)->global + (off), val)
 /* BDR register accessors, see ENETC_BDR() */
 #define enetc_bdr_rd(hw, t, n, off) \
 				enetc_rd(hw, ENETC_BDR(t, n, off))
-- 
2.17.1

