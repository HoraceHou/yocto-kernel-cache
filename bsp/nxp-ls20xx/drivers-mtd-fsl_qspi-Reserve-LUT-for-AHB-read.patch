From eefb23f385ec36b55dc5290b53c7112ea184c16e Mon Sep 17 00:00:00 2001
From: Suresh Gupta <suresh.gupta@nxp.com>
Date: Thu, 1 Mar 2018 13:37:56 +0530
Subject: [PATCH 388/767] drivers: mtd: fsl_qspi: Reserve LUT for AHB read

AHB read required for devmem type utilities which bypass the QSPI driver.
Reserve one LUT for AHB read so that Dynamic LUT do not overwrite the same
and memory mapped AHB read would work.

Signed-off-by: Suresh Gupta <suresh.gupta@nxp.com>
[Xulin: Original patch taken from NXP LSDK-18.09.]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/mtd/spi-nor/fsl-quadspi.c | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

diff --git a/drivers/mtd/spi-nor/fsl-quadspi.c b/drivers/mtd/spi-nor/fsl-quadspi.c
index b708cf1aa553..07e52e539efe 100644
--- a/drivers/mtd/spi-nor/fsl-quadspi.c
+++ b/drivers/mtd/spi-nor/fsl-quadspi.c
@@ -196,6 +196,7 @@
 /* LUT0 programmed by bootloader, for run-time create entry for LUT seqid 1 */
 #define SEQID_LUT0_BOOTLOADER	0
 #define SEQID_LUT1_RUNTIME	1
+#define SEQID_LUT2_AHBREAD	2
 
 #define QUADSPI_MIN_IOMAP SZ_4M
 
@@ -452,6 +453,8 @@ static void fsl_qspi_prepare_lut(struct spi_nor *nor,
 
 	/* Dynamic LUT */
 	lut_base = SEQID_LUT1_RUNTIME * 4;
+	if (ops == FSL_QSPI_OPS_READ)
+		lut_base = SEQID_LUT2_AHBREAD * 4;
 
 	/* default, STOP instruction to be programmed in (lut_base + 1) reg */
 	stop_lut = 1;
@@ -509,7 +512,7 @@ static void fsl_qspi_prepare_lut(struct spi_nor *nor,
 
 			/* For AHB read, add seqid in BFGENCR register. */
 			qspi_writel(q,
-				    SEQID_LUT1_RUNTIME <<
+				    SEQID_LUT2_AHBREAD <<
 				    QUADSPI_BFGENCR_SEQID_SHIFT,
 				    q->iobase + QUADSPI_BFGENCR);
 		}
@@ -725,7 +728,7 @@ static int fsl_qspi_init_ahb_read(struct fsl_qspi *q)
 	qspi_writel(q, 0, base + QUADSPI_BUF2IND);
 
 	/* Set dynamic LUT entry as lut sequence for AHB Read . */
-	seqid = SEQID_LUT1_RUNTIME;
+	seqid = SEQID_LUT2_AHBREAD;
 	qspi_writel(q, seqid << QUADSPI_BFGENCR_SEQID_SHIFT,
 		q->iobase + QUADSPI_BFGENCR);
 
@@ -1209,6 +1212,8 @@ static int fsl_qspi_probe(struct platform_device *pdev)
 		if (nor->page_size > q->devtype_data->txfifo)
 			nor->page_size = q->devtype_data->txfifo;
 
+		/*required for memory mapped AHB read*/
+		fsl_qspi_prepare_lut(nor, FSL_QSPI_OPS_READ, nor->read_opcode);
 		i++;
 	}
 
@@ -1217,6 +1222,8 @@ static int fsl_qspi_probe(struct platform_device *pdev)
 	if (ret)
 		goto last_init_failed;
 
+
+
 	fsl_qspi_clk_disable_unprep(q);
 	return 0;
 
-- 
2.17.0

