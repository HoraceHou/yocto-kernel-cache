From 4a73f6aecc65b528c03a6635b481205273ee239b Mon Sep 17 00:00:00 2001
From: Ramneek Mehresh <ramneek.mehresh@freescale.com>
Date: Thu, 18 Apr 2013 15:43:33 +0530
Subject: [PATCH 364/767] usb: fsl: Fix compilation error

Commit 42a1431068088 in the LSDK 4.9 kernel("usb: host: Add support
to add/remove usb host driver") introduced the compilation error. We fix it now.

Signed-off-by: Ran Wang <ran.wang_1@nxp.com>
[Xulin: Original patch taken from NXP LSDK-18.09.]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/usb/host/ehci-fsl.c | 94 ++++++++++++++++---------------------
 1 file changed, 40 insertions(+), 54 deletions(-)

diff --git a/drivers/usb/host/ehci-fsl.c b/drivers/usb/host/ehci-fsl.c
index 138ab7778ed4..185ff0b2a37e 100644
--- a/drivers/usb/host/ehci-fsl.c
+++ b/drivers/usb/host/ehci-fsl.c
@@ -69,13 +69,23 @@ struct ccsr_usb_phy {
 #define DRV_NAME "ehci-fsl"
 
 static struct hc_driver __read_mostly fsl_ehci_hc_driver;
+
 struct ehci_fsl {
-       /* store current hcd state for otg;
-	* have_hcd is true when host drv al already part of otg framework,
-	* otherwise false;
-	* hcd_add is true when otg framework wants to add host
-	* drv as part of otg;flase when it wants to remove it
-	*/
+	struct ehci_hcd ehci;
+
+#ifdef CONFIG_PM
+struct ehci_regs saved_regs;
+struct ccsr_usb_phy saved_phy_regs;
+/* Saved USB PHY settings, need to restore after deep sleep. */
+u32 usb_ctrl;
+#endif
+	/*
+	 * store current hcd state for otg;
+	 * have_hcd is true when host drv al already part of otg framework,
+	 * otherwise false;
+	 * hcd_add is true when otg framework wants to add host
+	 * drv as part of otg;flase when it wants to remove it
+	 */
 unsigned have_hcd:1;
 unsigned hcd_add:1;
 };
@@ -102,7 +112,7 @@ int retval;
 	/* host, gadget and otg share same int line */
 	retval = usb_add_hcd(hcd, hcd->irq, IRQF_SHARED);
 	if (retval == 0)
-	ehci_fsl->have_hcd = 1;
+		ehci_fsl->have_hcd = 1;
 	} else if (!ehci_fsl->hcd_add && ehci_fsl->have_hcd) {
 		usb_remove_hcd(hcd);
 		ehci_fsl->have_hcd = 0;
@@ -110,53 +120,26 @@ int retval;
 }
 #endif
 
-struct ehci_fsl {
-	struct ehci_hcd ehci;
-
-#ifdef CONFIG_PM
-struct ehci_regs saved_regs;
-struct ccsr_usb_phy saved_phy_regs;
-/* Saved USB PHY settings, need to restore after deep sleep. */
-u32 usb_ctrl;
-#endif
-	/*
-	 * store current hcd state for otg;
-	 * have_hcd is true when host drv al already part of otg framework,
-	 * otherwise false;
-	 * hcd_add is true when otg framework wants to add host
-	 * drv as part of otg;flase when it wants to remove it
-	 */
-unsigned have_hcd:1;
-unsigned hcd_add:1;
-};
-
-static strut ehci_fsl *hcd_to_ehci_fsl(struct usb_hcd *hcd)
-{
-struct ehci_hcd *ehci = hcd_to_ehci(hcd);
-
-return container_of(ehci, struct ehci_fsl, ehci);
-}
-
 #if defined(CONFIG_FSL_USB2_OTG) || defined(CONFIG_FSL_USB2_OTG_MODULE)
 static void do_change_hcd(struct work_struct *work)
 {
-struct ehci_hcd *ehci = container_of(work, struct ehci_hcd,
-change_hcd_work);
-struct usb_hcd *hcd = ehci_to_hcd(ehci);
-struct ehci_fsl *ehci_fsl = hcd_to_ehci_fsl(hcd);
-void __iomem *non_ehci = hcd->regs;
-int retval;
+	struct ehci_hcd *ehci = container_of(work, struct ehci_hcd,
+			change_hcd_work);
+	struct usb_hcd *hcd = ehci_to_hcd(ehci);
+	struct ehci_fsl *ehci_fsl = hcd_to_ehci_fsl(hcd);
+	void __iomem *non_ehci = hcd->regs;
+	int retval;
 
-if (ehci_fsl->hcd_add && !ehci_fsl->have_hcd) {
-writel(USBMODE_CM_HOST, non_ehci + FSL_SOC_USB_USBMODE);
-/* host, gadget and otg share same int line */
-retval = usb_add_hcd(hcd, hcd->irq, IRQF_SHARED);
-if (retval == 0)
-ehci_fsl->have_hcd = 1;
-} else if (!ehci_fsl->hcd_add && ehci_fsl->have_hcd) {
-	usb_remove_hcd(hcd);
-ehci_fsl->have_hcd = 0;
-}
+	if (ehci_fsl->hcd_add && !ehci_fsl->have_hcd) {
+		writel(USBMODE_CM_HOST, non_ehci + FSL_SOC_USB_USBMODE);
+		/* host, gadget and otg share same int line */
+		retval = usb_add_hcd(hcd, hcd->irq, IRQF_SHARED);
+		if (retval == 0)
+			ehci_fsl->have_hcd = 1;
+	} else if (!ehci_fsl->hcd_add && ehci_fsl->have_hcd) {
+		usb_remove_hcd(hcd);
+		ehci_fsl->have_hcd = 0;
+	}
 }
 #endif
 
@@ -313,8 +296,7 @@ static int fsl_ehci_drv_probe(struct platform_device *pdev)
 	return retval;
 }
 
-static bool usb_phy_clk_valid(struct usb_hcd *hcd,
-			enum fsl_usb2_phy_modes phy_mode)
+static bool usb_phy_clk_valid(struct usb_hcd *hcd)
 {
 	void __iomem *non_ehci = hcd->regs;
 	bool ret = true;
@@ -744,7 +726,9 @@ static int ehci_fsl_drv_suspend(struct device *dev)
 
 #ifdef CONFIG_PPC
 suspend_state_t pm_state;
-pm_state = pm_suspend_state();
+/* FIXME:Need to port fsl_pm.h before enable below code. */
+/*pm_state = pm_suspend_state();*/
+pm_state = PM_SUSPEND_MEM;
 
 if (pm_state == PM_SUSPEND_MEM)
 	ehci_fsl_save_context(hcd);
@@ -789,7 +773,9 @@ static int ehci_fsl_drv_resume(struct device *dev)
 
 #ifdef CONFIG_PPC
 suspend_state_t pm_state;
-pm_state = pm_suspend_state();
+/* FIXME:Need to port fsl_pm.h before enable below code.*/
+/* pm_state = pm_suspend_state(); */
+pm_state = PM_SUSPEND_MEM;
 
 if (pm_state == PM_SUSPEND_MEM)
 	ehci_fsl_restore_context(hcd);
-- 
2.17.0

