From a2889d3d715138794e61acddda7a3d3af707c92f Mon Sep 17 00:00:00 2001
From: Suresh Gupta <B42813@freescale.com>
Date: Thu, 1 Aug 2013 12:39:48 +0530
Subject: [PATCH 283/767] usb: phy: Workaround for USB erratum-A005728

PHY_CLK_VALID bit for UTMI PHY in USBDR does not set even
if PHY is providing valid clock. Workaround for this
involves resetting of PHY and check PHY_CLK_VALID bit
multiple times. If PHY_CLK_VALID bit is still not set even
after 5 retries, it would be safe to deaclare that PHY
clock is not available.
This erratum is applicable for USBDR less then ver 2.4.

Signed-off-by: Suresh Gupta <B42813@freescale.com>
Signed-off-by: yinbo.zhu <yinbo.zhu@nxp.com>
[Xulin: Original patch taken from NXP LSDK-18.09.]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/usb/host/ehci-fsl.c | 40 +++++++++++++++++++++++++++++++++++++
 drivers/usb/host/ehci-fsl.h |  3 +++
 2 files changed, 43 insertions(+)

diff --git a/drivers/usb/host/ehci-fsl.c b/drivers/usb/host/ehci-fsl.c
index bcf91f3cb0e5..a46c0ece5ea9 100644
--- a/drivers/usb/host/ehci-fsl.c
+++ b/drivers/usb/host/ehci-fsl.c
@@ -269,6 +269,46 @@ static int fsl_ehci_drv_probe(struct platform_device *pdev)
 	return retval;
 }
 
+static bool usb_phy_clk_valid(struct usb_hcd *hcd,
+			enum fsl_usb2_phy_modes phy_mode)
+{
+	void __iomem *non_ehci = hcd->regs;
+	struct device *dev = hcd->self.controller;
+	struct fsl_usb2_platform_data *pdata = dev->platform_data;
+	bool ret = true;
+	int retry = UTMI_PHY_CLK_VALID_CHK_RETRY;
+
+	if (phy_mode == FSL_USB2_PHY_ULPI) {
+		/* check PHY_CLK_VALID to get phy clk valid */
+		if (!(spin_event_timeout(in_be32(non_ehci + FSL_SOC_USB_CTRL) &
+				PHY_CLK_VALID, FSL_USB_PHY_CLK_TIMEOUT, 0) ||
+				in_be32(non_ehci + FSL_SOC_USB_PRICTRL))) {
+			ret = false;
+		}
+	} else if (phy_mode == FSL_USB2_PHY_UTMI) {
+		if (!(in_be32(non_ehci + FSL_SOC_USB_CTRL) & PHY_CLK_VALID)) {
+			ret = false;
+			if (pdata->controller_ver < FSL_USB_VER_2_4) {
+				while (retry--) {
+					clrbits32(non_ehci + FSL_SOC_USB_CTRL,
+							CTRL_UTMI_PHY_EN);
+					setbits32(non_ehci + FSL_SOC_USB_CTRL,
+							CTRL_UTMI_PHY_EN);
+					/* delay required for Clk to appear */
+					mdelay(FSL_UTMI_PHY_DLY);
+					if ((in_be32(non_ehci +
+					FSL_SOC_USB_CTRL) & PHY_CLK_VALID)) {
+						ret = true;
+						break;
+					}
+				}
+			}
+		}
+	}
+
+	return ret;
+}
+
 static int ehci_fsl_setup_phy(struct usb_hcd *hcd,
 			       enum fsl_usb2_phy_modes phy_mode,
 			       unsigned int port_offset)
diff --git a/drivers/usb/host/ehci-fsl.h b/drivers/usb/host/ehci-fsl.h
index cbc422032e50..9d18c6e6ab27 100644
--- a/drivers/usb/host/ehci-fsl.h
+++ b/drivers/usb/host/ehci-fsl.h
@@ -50,4 +50,7 @@
 #define UTMI_PHY_EN             (1<<9)
 #define ULPI_PHY_CLK_SEL        (1<<10)
 #define PHY_CLK_VALID		(1<<17)
+
+/* Retry count for checking UTMI PHY CLK validity */
+#define UTMI_PHY_CLK_VALID_CHK_RETRY 5
 #endif				/* _EHCI_FSL_H */
-- 
2.17.0

