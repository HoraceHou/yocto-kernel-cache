From d4330fe1abfb0cb483903cb8966afd7e57149f83 Mon Sep 17 00:00:00 2001
From: Camelia Groza <camelia.groza@nxp.com>
Date: Mon, 4 Sep 2017 15:02:57 +0300
Subject: [PATCH 059/767] net: export copy_skb_header

We use this call to copy the headers after realigning the skbs to 16
byte boundaries for the LS1043A A010022 FMan errata.

Signed-off-by: Camelia Groza <camelia.groza@nxp.com>
[Xulin: Original patch taken from NXP LSDK-18.09.]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 include/linux/skbuff.h | 1 +
 net/core/skbuff.c      | 9 +++++----
 2 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 4b186e860381..37dedbb7d367 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -3286,6 +3286,7 @@ static inline void skb_free_datagram_locked(struct sock *sk,
 }
 int skb_kill_datagram(struct sock *sk, struct sk_buff *skb, unsigned int flags);
 int skb_copy_bits(const struct sk_buff *skb, int offset, void *to, int len);
+void copy_skb_header(struct sk_buff *new, const struct sk_buff *old);
 int skb_store_bits(struct sk_buff *skb, int offset, const void *from, int len);
 __wsum skb_copy_and_csum_bits(const struct sk_buff *skb, int offset, u8 *to,
 			      int len, __wsum csum);
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 9fdabf477cab..0728b4d590fd 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -830,7 +830,7 @@ EXPORT_SYMBOL(skb_recycle);
 	BUILD_BUG_ON(offsetof(struct sk_buff, field) >		\
 		     offsetof(struct sk_buff, headers_end));	\
 
-static void __copy_skb_header(struct sk_buff *new, const struct sk_buff *old)
+void copy_skb_header(struct sk_buff *new, const struct sk_buff *old)
 {
 	new->tstamp		= old->tstamp;
 	/* We do not copy old->sk */
@@ -879,6 +879,7 @@ static void __copy_skb_header(struct sk_buff *new, const struct sk_buff *old)
 #endif
 
 }
+EXPORT_SYMBOL(copy_skb_header);
 
 /*
  * You should not add any new code to this function.  Add it to
@@ -890,7 +891,7 @@ static struct sk_buff *__skb_clone(struct sk_buff *n, struct sk_buff *skb)
 
 	n->next = n->prev = NULL;
 	n->sk = NULL;
-	__copy_skb_header(n, skb);
+	copy_skb_header(n, skb);
 
 	C(len);
 	C(data_len);
@@ -1346,7 +1347,7 @@ static void skb_headers_offset_update(struct sk_buff *skb, int off)
 
 void skb_copy_header(struct sk_buff *new, const struct sk_buff *old)
 {
-	__copy_skb_header(new, old);
+	copy_skb_header(new, old);
 
 	skb_shinfo(new)->gso_size = skb_shinfo(old)->gso_size;
 	skb_shinfo(new)->gso_segs = skb_shinfo(old)->gso_segs;
@@ -3699,7 +3700,7 @@ struct sk_buff *skb_segment(struct sk_buff *head_skb,
 			segs = nskb;
 		tail = nskb;
 
-		__copy_skb_header(nskb, head_skb);
+		copy_skb_header(nskb, head_skb);
 
 		skb_headers_offset_update(nskb, skb_headroom(nskb) - headroom);
 		skb_reset_mac_len(nskb);
-- 
2.17.0

