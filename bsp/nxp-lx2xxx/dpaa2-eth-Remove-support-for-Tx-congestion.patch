From 2ad3c19f3180675d83a302d4babdde67e05582f7 Mon Sep 17 00:00:00 2001
From: "G.h. Gao" <guanhua.gao@nxp.com>
Date: Wed, 13 Mar 2019 18:48:49 +0800
Subject: [PATCH 079/235] dpaa2-eth: Remove support for Tx congestion

With the addition of BQL support, Tx congestion feature is no longer required.

Signed-off-by: Guanhua Gao <guanhua.gao@nxp.com>
Signed-off-by: Ioana Radulescu <ruxandra.radulescu@nxp.com>
[Xulin: Original patch taken from NXP LSDK-19.06.]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 .../fsl-dpaa2/ethernet/dpaa2-eth-debugfs.c    |  9 +--
 .../staging/fsl-dpaa2/ethernet/dpaa2-eth.c    | 75 -------------------
 .../staging/fsl-dpaa2/ethernet/dpaa2-eth.h    | 14 ----
 .../fsl-dpaa2/ethernet/dpaa2-ethtool.c        |  3 -
 4 files changed, 4 insertions(+), 97 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth-debugfs.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth-debugfs.c
index 8db715997d51..f4f69334a2f4 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth-debugfs.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth-debugfs.c
@@ -110,9 +110,9 @@ static int dpaa2_dbg_fqs_show(struct seq_file *file, void *offset)
 	int i, err;
 
 	seq_printf(file, "non-zero FQ stats for %s:\n", priv->net_dev->name);
-	seq_printf(file, "%s%16s%16s%16s%16s%16s%16s\n",
+	seq_printf(file, "%s%16s%16s%16s%16s%16s\n",
 		   "VFQID", "CPU", "Traffic Class", "Type", "Frames",
-		   "Pending frames", "Congestion");
+		   "Pending frames");
 
 	for (i = 0; i <  priv->num_fqs; i++) {
 		fq = &priv->fq[i];
@@ -124,14 +124,13 @@ static int dpaa2_dbg_fqs_show(struct seq_file *file, void *offset)
 		if (!fq->stats.frames && !fcnt)
 			continue;
 
-		seq_printf(file, "%5d%16d%16d%16s%16llu%16u%16llu\n",
+		seq_printf(file, "%5d%16d%16d%16s%16llu%16u\n",
 			   fq->fqid,
 			   fq->target_cpu,
 			   fq->tc,
 			   fq_type_to_str(fq),
 			   fq->stats.frames,
-			   fcnt,
-			   fq->stats.congestion_entry);
+			   fcnt);
 	}
 
 	return 0;
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index 30ca0918341a..1fedad2abc20 100755
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -795,7 +795,6 @@ static void free_tx_fd(const struct dpaa2_eth_priv *priv,
 static netdev_tx_t dpaa2_eth_tx(struct sk_buff *skb, struct net_device *net_dev)
 {
 	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
-	struct device *dev = net_dev->dev.parent;
 	struct dpaa2_fd fd;
 	struct rtnl_link_stats64 *percpu_stats;
 	struct dpaa2_eth_drv_stats *percpu_extras;
@@ -809,7 +808,6 @@ static netdev_tx_t dpaa2_eth_tx(struct sk_buff *skb, struct net_device *net_dev)
 
 	queue_mapping = skb_get_queue_mapping(skb);
 	prio = netdev_txq_to_tc(net_dev, queue_mapping);
-
 	/* Hardware interprets priority level 0 as being the highest,
 	 * so we need to do a reverse mapping to the netdev tc index
 	 */
@@ -819,16 +817,6 @@ static netdev_tx_t dpaa2_eth_tx(struct sk_buff *skb, struct net_device *net_dev)
 	queue_mapping %= dpaa2_eth_queue_count(priv);
 	fq = &priv->fq[queue_mapping];
 
-	/* If we're congested, stop this tx queue; transmission of
-	 * the current skb happens regardless of congestion state
-	 */
-	dma_sync_single_for_cpu(dev, priv->cscn_dma,
-				DPAA2_CSCN_SIZE, DMA_FROM_DEVICE);
-	if (unlikely(dpaa2_cscn_state_congested(priv->cscn_mem))) {
-		netif_stop_subqueue(net_dev, queue_mapping);
-		fq->stats.congestion_entry++;
-	}
-
 	percpu_stats = this_cpu_ptr(priv->percpu_stats);
 	percpu_extras = this_cpu_ptr(priv->percpu_extras);
 
@@ -921,7 +909,6 @@ static void dpaa2_eth_tx_conf(struct dpaa2_eth_priv *priv,
 			      const struct dpaa2_fd *fd,
 			      struct dpaa2_eth_fq *fq)
 {
-	struct device *dev = priv->net_dev->dev.parent;
 	struct rtnl_link_stats64 *percpu_stats;
 	struct dpaa2_eth_drv_stats *percpu_extras;
 	u32 fd_len = dpaa2_fd_get_len(fd);
@@ -937,14 +924,6 @@ static void dpaa2_eth_tx_conf(struct dpaa2_eth_priv *priv,
 	fq->dq_frames++;
 	fq->dq_bytes += fd_len;
 
-	/* Check congestion state and wake all queues if necessary */
-	if (unlikely(__netif_subqueue_stopped(priv->net_dev, fq->flowid))) {
-		dma_sync_single_for_cpu(dev, priv->cscn_dma,
-					DPAA2_CSCN_SIZE, DMA_FROM_DEVICE);
-		if (!dpaa2_cscn_state_congested(priv->cscn_mem))
-			netif_tx_wake_all_queues(priv->net_dev);
-	}
-
 	/* Check frame errors in the FD field */
 	fd_errors = dpaa2_fd_get_ctrl(fd) & DPAA2_FD_TX_ERR_MASK;
 	free_tx_fd(priv, fd, true);
@@ -2408,52 +2387,6 @@ static void free_dpbp(struct dpaa2_eth_priv *priv)
 	fsl_mc_object_free(priv->dpbp_dev);
 }
 
-static int setup_tx_congestion(struct dpaa2_eth_priv *priv)
-{
-	struct dpni_congestion_notification_cfg notif_cfg = {0};
-	struct device *dev = priv->net_dev->dev.parent;
-	int err;
-
-	priv->cscn_unaligned = kzalloc(DPAA2_CSCN_SIZE + DPAA2_CSCN_ALIGN,
-				       GFP_KERNEL);
-
-	if (!priv->cscn_unaligned)
-		return -ENOMEM;
-
-	priv->cscn_mem = PTR_ALIGN(priv->cscn_unaligned, DPAA2_CSCN_ALIGN);
-	priv->cscn_dma = dma_map_single(dev, priv->cscn_mem, DPAA2_CSCN_SIZE,
-					DMA_FROM_DEVICE);
-	if (dma_mapping_error(dev, priv->cscn_dma)) {
-		dev_err(dev, "Error mapping CSCN memory area\n");
-		err = -ENOMEM;
-		goto err_dma_map;
-	}
-
-	notif_cfg.units = DPNI_CONGESTION_UNIT_BYTES;
-	notif_cfg.threshold_entry = DPAA2_ETH_TX_CONG_ENTRY_THRESH;
-	notif_cfg.threshold_exit = DPAA2_ETH_TX_CONG_EXIT_THRESH;
-	notif_cfg.message_ctx = (u64)priv;
-	notif_cfg.message_iova = priv->cscn_dma;
-	notif_cfg.notification_mode = DPNI_CONG_OPT_WRITE_MEM_ON_ENTER |
-				      DPNI_CONG_OPT_WRITE_MEM_ON_EXIT |
-				      DPNI_CONG_OPT_COHERENT_WRITE;
-	err = dpni_set_congestion_notification(priv->mc_io, 0, priv->mc_token,
-					       DPNI_QUEUE_TX, 0, &notif_cfg);
-	if (err) {
-		dev_err(dev, "dpni_set_congestion_notification failed\n");
-		goto err_set_cong;
-	}
-
-	return 0;
-
-err_set_cong:
-	dma_unmap_single(dev, priv->cscn_dma, DPAA2_CSCN_SIZE, DMA_FROM_DEVICE);
-err_dma_map:
-	kfree(priv->cscn_unaligned);
-
-	return err;
-}
-
 /* Configure the DPNI object this interface is associated with */
 static int setup_dpni(struct fsl_mc_device *ls_dev)
 {
@@ -2515,11 +2448,6 @@ static int setup_dpni(struct fsl_mc_device *ls_dev)
 	if (!priv->cls_rule)
 		goto close;
 
-	/* Enable congestion notifications for Tx queues */
-	err = setup_tx_congestion(priv);
-	if (err)
-		goto close;
-
 	/* Enable flow control */
 	cfg.options = DPNI_LINK_OPT_AUTONEG | DPNI_LINK_OPT_PAUSE;
 	priv->tx_pause_frames = true;
@@ -2539,7 +2467,6 @@ static int setup_dpni(struct fsl_mc_device *ls_dev)
 
 static void free_dpni(struct dpaa2_eth_priv *priv)
 {
-	struct device *dev = priv->net_dev->dev.parent;
 	int err;
 
 	err = dpni_reset(priv->mc_io, 0, priv->mc_token);
@@ -2549,8 +2476,6 @@ static void free_dpni(struct dpaa2_eth_priv *priv)
 
 	dpni_close(priv->mc_io, 0, priv->mc_token);
 
-	dma_unmap_single(dev, priv->cscn_dma, DPAA2_CSCN_SIZE, DMA_FROM_DEVICE);
-	kfree(priv->cscn_unaligned);
 }
 
 static int setup_rx_flow(struct dpaa2_eth_priv *priv,
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index f0c6483e7ee3..fc302d00d80e 100755
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -251,14 +251,6 @@ static inline struct dpaa2_faead *dpaa2_get_faead(void *buf_addr, bool swa)
  */
 #define DPAA2_ETH_ENQUEUE_RETRIES	10
 
-/* Tx congestion entry & exit thresholds, in number of bytes.
- * We allow a maximum of 512KB worth of frames pending processing on the Tx
- * queues of an interface
- */
-#define DPAA2_ETH_TX_CONG_ENTRY_THRESH  (512 * 1024)
-#define DPAA2_ETH_TX_CONG_EXIT_THRESH	\
-	(DPAA2_ETH_TX_CONG_ENTRY_THRESH * 9 / 10)
-
 /* Driver statistics, other than those in struct rtnl_link_stats64.
  * These are usually collected per-CPU and aggregated by ethtool.
  */
@@ -278,8 +270,6 @@ struct dpaa2_eth_drv_stats {
 struct dpaa2_eth_fq_stats {
 	/* Number of frames received on this queue */
 	__u64 frames;
-	/* Number of times this queue entered congestion */
-	__u64 congestion_entry;
 };
 
 /* Per-channel statistics */
@@ -368,10 +358,6 @@ struct dpaa2_eth_cls_rule {
 struct dpaa2_eth_priv {
 	struct net_device *net_dev;
 
-	void *cscn_mem;	/* Tx congestion notifications are written here */
-	void *cscn_unaligned;
-	dma_addr_t cscn_dma;
-
 	u8 num_fqs;
 	struct dpaa2_eth_fq fq[DPAA2_ETH_MAX_QUEUES];
 	int (*enqueue)(struct dpaa2_eth_priv *priv,
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
index 0ee8ca2b10ad..330dab6977bd 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
@@ -49,7 +49,6 @@ static char dpaa2_ethtool_extras[][ETH_GSTRING_LEN] = {
 	"[drv] dequeue portal busy",
 	"[drv] channel pull errors",
 	"[drv] cdan",
-	"[drv] tx congestion state",
 	/* FQ stats */
 	"rx pending frames",
 	"rx pending bytes",
@@ -365,8 +364,6 @@ static void dpaa2_eth_get_ethtool_stats(struct net_device *net_dev,
 	*(data + i++) = pull_err;
 	*(data + i++) = cdan;
 
-	*(data + i++) = dpaa2_cscn_state_congested(priv->cscn_mem);
-
 	for (j = 0; j < priv->num_fqs; j++) {
 		/* Print FQ instantaneous counts */
 		err = dpaa2_io_query_fq_count(NULL, priv->fq[j].fqid,
-- 
2.17.1

