From 5fb9b2b79766587143fd08ab2110ea398d8069fd Mon Sep 17 00:00:00 2001
From: Linu Cherian <lcherian@marvell.com>
Date: Fri, 7 Sep 2018 11:31:16 +0530
Subject: [PATCH 0210/1051] soc: octeontx2: Make cgx link up procedure threaded
 during boot

Doing cgx link up in driver probe affects the Linux boot time.
Hence, make the link up procedure threaded.

For this, a new cgx API cgx_lmac_linkup_start is introduced.

Signed-off-by: Linu Cherian <lcherian@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/soc/marvell/octeontx2/cgx.c     | 22 +++++++++++++++++++---
 drivers/soc/marvell/octeontx2/cgx.h     |  1 +
 drivers/soc/marvell/octeontx2/rvu_cgx.c | 11 +++++++++++
 3 files changed, 31 insertions(+), 3 deletions(-)

diff --git a/drivers/soc/marvell/octeontx2/cgx.c b/drivers/soc/marvell/octeontx2/cgx.c
index bd25de0bdfbb..b521df10411d 100644
--- a/drivers/soc/marvell/octeontx2/cgx.c
+++ b/drivers/soc/marvell/octeontx2/cgx.c
@@ -18,6 +18,7 @@
 #include <linux/of.h>
 #include <linux/of_mdio.h>
 #include <linux/of_net.h>
+#include <linux/kthread.h>
 
 #include "cgx.h"
 
@@ -620,8 +621,9 @@ static int cgx_lmac_verify_fwi_version(struct cgx *cgx)
 		return 0;
 }
 
-static void cgx_lmac_link_up(struct cgx *cgx)
+static int cgx_lmac_linkup_thread(void *data)
 {
+	struct cgx *cgx = data;
 	struct device *dev = &cgx->pdev->dev;
 	int i, err;
 
@@ -632,8 +634,24 @@ static void cgx_lmac_link_up(struct cgx *cgx)
 			dev_info(dev, "cgx port %d:%d Link up command failed\n",
 				 cgx->cgx_id, i);
 	}
+	do_exit(0);
 }
 
+int cgx_lmac_linkup_start(void *cgxd)
+{
+	struct cgx *cgx = cgxd;
+	struct task_struct *task;
+
+	/* Start the linkup procedure of lmac ports in the background */
+	task = kthread_run(cgx_lmac_linkup_thread, cgx, "cgx%d_linkup_thread",
+			      cgx->cgx_id);
+	if (IS_ERR(task))
+		return PTR_ERR(task);
+
+	return 0;
+}
+EXPORT_SYMBOL(cgx_lmac_linkup_start);
+
 static int cgx_lmac_init(struct cgx *cgx)
 {
 	struct lmac *lmac;
@@ -743,8 +761,6 @@ static int cgx_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	if (err)
 		goto err_release_lmac;
 
-	cgx_lmac_link_up(cgx);
-
 	return 0;
 
 err_release_lmac:
diff --git a/drivers/soc/marvell/octeontx2/cgx.h b/drivers/soc/marvell/octeontx2/cgx.h
index c0581dc5e448..b73c540cd4f7 100644
--- a/drivers/soc/marvell/octeontx2/cgx.h
+++ b/drivers/soc/marvell/octeontx2/cgx.h
@@ -108,4 +108,5 @@ void cgx_lmac_promisc_config(int cgx_id, int lmac_id, bool enable);
 int cgx_lmac_internal_loopback(void *cgxd, int lmac_id, bool enable);
 int cgx_get_link_info(void *cgxd, int lmac_id, struct cgx_link_user_info
 			*linfo);
+int cgx_lmac_linkup_start(void *cgxd);
 #endif /* CGX_H */
diff --git a/drivers/soc/marvell/octeontx2/rvu_cgx.c b/drivers/soc/marvell/octeontx2/rvu_cgx.c
index f2df4106e6e0..54f7a81124ff 100644
--- a/drivers/soc/marvell/octeontx2/rvu_cgx.c
+++ b/drivers/soc/marvell/octeontx2/rvu_cgx.c
@@ -245,6 +245,17 @@ static void cgx_lmac_event_handler_init(struct rvu *rvu)
 					"%d:%d handler register failed\n",
 					cgx, lmac);
 		}
+		/* Ensure event handler registration is completed, before
+		 * we turn on the links
+		 */
+		mb();
+
+		/* Start the link up procedure on all lmac ports */
+		err = cgx_lmac_linkup_start(cgxd);
+		if (err)
+			dev_err(rvu->dev,
+				"Link up process failed to start on cgx %d\n",
+				cgx);
 	}
 }
 
-- 
2.17.1

