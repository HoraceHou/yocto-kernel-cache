From 65dbf51075ca78a382c4954ce03239452400f3a9 Mon Sep 17 00:00:00 2001
From: Marcin Wojtas <mw@semihalf.com>
Date: Thu, 27 Sep 2018 09:15:56 +0200
Subject: [PATCH 0564/1051] net: mvpp2: tx reserve optimization

Don't account used/pending frames for reservation, the reserved_num
is enough.

Change-Id: Ifea2baac21b23cdeabb2833f954b808278f3dfac
Signed-off-by: Yan Markman <ymarkman@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/59724
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
Tested-by: Stefan Chulski <stefanc@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../net/ethernet/marvell/mvpp2/mvpp2_main.c   | 36 ++++++++-----------
 1 file changed, 14 insertions(+), 22 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
index 554fc4ef5ff6..524228b68306 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
@@ -1699,8 +1699,7 @@ static int mvpp2_txq_reserved_desc_num_proc(struct mvpp2_port *port,
 					    int num)
 {
 	unsigned int thread;
-	struct netdev_queue *nq;
-	int req, desc_count, total;
+	int req, desc_count;
 	struct mvpp2_txq_pcpu *txq_pcpu_aux;
 
 	if (txq_pcpu->reserved_num >= num)
@@ -1709,31 +1708,24 @@ static int mvpp2_txq_reserved_desc_num_proc(struct mvpp2_port *port,
 	/* Not enough descriptors reserved! Update the reserved descriptor
 	 * count and check again.
 	 */
-	/* Count total used descriptors (already reserved + waiting
-	 * for transmit) and check limit before going with HW reservation.
-	 */
-	desc_count = 0;
-	for (thread = 0; thread < port->priv->nthreads; thread++) {
-		txq_pcpu_aux = per_cpu_ptr(txq->pcpu, thread);
-		desc_count += txq_pcpu_aux->count;
-		desc_count += txq_pcpu_aux->reserved_num;
-	}
-	req = max(MVPP2_CPU_DESC_CHUNK, num - txq_pcpu->reserved_num);
-
-	total = desc_count + req;
-	if (likely((total + MVPP2_CPU_DESC_CHUNK) <= txq->size)) {
-		; /* goto reserve_in_hw */
-	} else if (total <= txq->size) {
-		 /* Pause the TX-Queue but continue with this packet */
-		nq = netdev_get_tx_queue(port->dev, txq->log_id);
-		netif_tx_stop_queue(nq);
+	if (num <= MAX_SKB_FRAGS) {
+		req = MVPP2_CPU_DESC_CHUNK;
 	} else {
-		return -ENOMEM; /* drop the packet */
+		/* Compute total of used descriptors */
+		desc_count = 0;
+		for (thread = 0; thread < port->priv->nthreads; thread++) {
+			txq_pcpu_aux = per_cpu_ptr(txq->pcpu, thread);
+			desc_count += txq_pcpu_aux->reserved_num;
+		}
+		req = max(MVPP2_CPU_DESC_CHUNK, num - txq_pcpu->reserved_num);
+		/* Check the reservation is possible */
+		if ((desc_count + req) > txq->size)
+			return -ENOMEM;
 	}
 
 	txq_pcpu->reserved_num += mvpp2_txq_alloc_reserved_desc(port, txq, req);
 
-	/* OK, the descriptor could have been updated: check again. */
+	/* Check the resulting reservation is enough */
 	if (txq_pcpu->reserved_num < num)
 		return -ENOMEM;
 	return 0;
-- 
2.17.1

