From b6c1eb887b5a208c6c738dd24d78504e5cf9ea32 Mon Sep 17 00:00:00 2001
From: Lukasz Bartosik <lbartosik@marvell.com>
Date: Fri, 4 Jan 2019 17:15:24 +0100
Subject: [PATCH 0901/1051] crypto: cpt - validate size of crypto requests

Validate size of each crypto request and drop requests which
size exceeds maximum size accepted by CPT (65535 bytes).

Change-Id: Id29438d88da12928b4958a735224da2aa893f00b
Signed-off-by: Lukasz Bartosik <lbartosik@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/2677
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Srujana Challa <schalla@cavium.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/crypto/cavium/cpt/common/cpt_algs.c   | 18 ++++++++++++++----
 drivers/crypto/cavium/cpt/common/cpt_common.h |  9 ++++++---
 2 files changed, 20 insertions(+), 7 deletions(-)

diff --git a/drivers/crypto/cavium/cpt/common/cpt_algs.c b/drivers/crypto/cavium/cpt/common/cpt_algs.c
index 02025a762424..400a4cf1b3cb 100644
--- a/drivers/crypto/cavium/cpt/common/cpt_algs.c
+++ b/drivers/crypto/cavium/cpt/common/cpt_algs.c
@@ -259,6 +259,10 @@ static inline int cvm_enc_dec(struct ablkcipher_request *req, u32 enc)
 	struct pci_dev *pdev = NULL;
 	int status, cpu_num;
 
+	/* Validate that request doesn't exceed maximum CPT supported size */
+	if (req->nbytes > CPT_MAX_REQ_SIZE)
+		return -E2BIG;
+
 	memset(rctx, 0, sizeof(struct cvm_req_ctx));
 	create_input_list(req, enc, enc_iv_len);
 	create_output_list(req, enc_iv_len);
@@ -956,9 +960,11 @@ static inline u32 create_aead_input_list(struct aead_request *req, u32 enc)
 	struct cvm_req_ctx *rctx = aead_request_ctx(req);
 	struct cpt_request_info *req_info = &rctx->cpt_req;
 	u32 inputlen =  req->cryptlen + req->assoclen;
-	u32 argcnt = 0;
+	u32 status, argcnt = 0;
 
-	create_aead_ctx_hdr(req, enc, &argcnt);
+	status = create_aead_ctx_hdr(req, enc, &argcnt);
+	if (status)
+		return status;
 	update_input_data(req_info, req->src, inputlen, &argcnt);
 	req_info->incnt = argcnt;
 
@@ -988,8 +994,7 @@ static inline u32 create_aead_null_input_list(struct aead_request *req,
 {
 	struct cvm_req_ctx *rctx = aead_request_ctx(req);
 	struct cpt_request_info *req_info = &rctx->cpt_req;
-	u32 inputlen =  req->cryptlen + req->assoclen;
-	u32 argcnt = 0;
+	u32 inputlen, argcnt = 0;
 
 	if (enc)
 		inputlen =  req->cryptlen + req->assoclen;
@@ -1129,6 +1134,11 @@ u32 cvm_aead_enc_dec(struct aead_request *req, u8 reg_type, u8 enc)
 		return -EINVAL;
 	}
 
+	/* Validate that request doesn't exceed maximum CPT supported size */
+	if (req_info->req.param1 > CPT_MAX_REQ_SIZE ||
+	    req_info->req.param2 > CPT_MAX_REQ_SIZE)
+		return -E2BIG;
+
 	status = get_se_device(&pdev, &cpu_num);
 	if (status)
 		return status;
diff --git a/drivers/crypto/cavium/cpt/common/cpt_common.h b/drivers/crypto/cavium/cpt/common/cpt_common.h
index b87188c3c8d7..3ae145adb54e 100644
--- a/drivers/crypto/cavium/cpt/common/cpt_common.h
+++ b/drivers/crypto/cavium/cpt/common/cpt_common.h
@@ -16,6 +16,9 @@
 #include <linux/module.h>
 #include "cpt_debug.h"
 
+/* Maximum request size in bytes */
+#define CPT_MAX_REQ_SIZE	65535
+
 /* Delay in us when waiting for a state change */
 #define CSR_DELAY		30
 
@@ -91,10 +94,10 @@ union opcode_info {
 };
 
 struct cptvf_request {
-	union opcode_info opcode;
-	u16 param1;
-	u16 param2;
+	u32 param1;
+	u32 param2;
 	u16 dlen;
+	union opcode_info opcode;
 };
 
 struct buf_ptr {
-- 
2.17.1

