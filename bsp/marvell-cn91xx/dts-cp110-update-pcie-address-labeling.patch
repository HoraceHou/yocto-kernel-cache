From de4c776a9ddbde88c4439dddcc25964a3d4cf134 Mon Sep 17 00:00:00 2001
From: David Sniatkiwicz <davidsn@marvell.com>
Date: Tue, 20 Mar 2018 10:02:00 +0200
Subject: [PATCH 0581/1051] dts: cp110: update pcie address labeling

This patch updates PCIe address labeling as part
of the preparations for armada8k-plus support.

Armada8k & Armada8k-plus have different PCIe MEM/IO
mapping, this patch allows each device to define the
correct values of:
    - CP110_PCIE_MEM_SIZE
    - CP110_PCIEx_CPU_IO_BASE
    - CP110_PCIEx_CPU_MEM_BASE
    - CP110_PCIEx_BUS_IO_BASE
    - CP110_PCIEx_BUS_MEM_BASE
    - CP110_PCIE_BUS_MEM_CFG

Change-Id: I7bada6191675ad9e9e03746a09cb6abc54a9ba10
Signed-off-by: David Sniatkiwicz <davidsn@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/arm64/boot/dts/marvell/armada-70x0.dtsi  | 42 +++++-----
 .../marvell/armada-8040-mcbin-single-shot.dts | 13 ++-
 arch/arm64/boot/dts/marvell/armada-80x0.dtsi  | 79 +++++++++---------
 .../arm64/boot/dts/marvell/armada-common.dtsi |  2 +-
 arch/arm64/boot/dts/marvell/armada-cp110.dtsi | 80 ++++++++++++-------
 5 files changed, 121 insertions(+), 95 deletions(-)

diff --git a/arch/arm64/boot/dts/marvell/armada-70x0.dtsi b/arch/arm64/boot/dts/marvell/armada-70x0.dtsi
index e5c6d7c25819..1e94a13200ae 100644
--- a/arch/arm64/boot/dts/marvell/armada-70x0.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-70x0.dtsi
@@ -5,6 +5,29 @@
  * Device Tree file for the Armada 70x0 SoC
  */
 
+/*
+ * Instantiate the CP110
+ */
+#define CP110_NUM				0
+#define CP110_BASE				0xf2000000
+#define CP110_PCIE_MEM_SIZE			0xf00000
+#define CP110_PCIEx_CPU_IO_BASE(iface)		(0xf9000000 + (iface) *  0x10000)
+#define CP110_PCIEx_CPU_MEM_BASE(iface)		(0xf6000000 + (iface) *  0x1000000)
+#define CP110_PCIEx_BUS_IO_BASE(iface)		(CP110_PCIEx_CPU_IO_BASE(iface))
+#define CP110_PCIEx_BUS_MEM_BASE(iface)		(CP110_PCIEx_CPU_MEM_BASE(iface))
+#define CP110_PCIE_BUS_MEM_CFG			(0x82000000)
+
+#include "armada-cp110.dtsi"
+
+#undef CP110_NUM
+#undef CP110_BASE
+#undef CP110_PCIE_MEM_SIZE
+#undef CP110_PCIEx_CPU_IO_BASE
+#undef CP110_PCIEx_CPU_MEM_BASE
+#undef CP110_PCIEx_BUS_IO_BASE
+#undef CP110_PCIEx_BUS_MEM_BASE
+#undef CP110_PCIE_BUS_MEM_CFG
+
 / {
 	aliases {
 		gpio1 = &cp0_gpio1;
@@ -14,26 +37,7 @@
 	};
 };
 
-/*
- * Instantiate the CP110
- */
-#define CP110_NAME		cp0
-#define CP110_BASE		f2000000
-#define CP110_PCIE_IO_BASE	0xf9000000
-#define CP110_PCIE_MEM_BASE	0xf6000000
-#define CP110_PCIE0_BASE	f2600000
-#define CP110_PCIE1_BASE	f2620000
-#define CP110_PCIE2_BASE	f2640000
 
-#include "armada-cp110.dtsi"
-
-#undef CP110_NAME
-#undef CP110_BASE
-#undef CP110_PCIE_IO_BASE
-#undef CP110_PCIE_MEM_BASE
-#undef CP110_PCIE0_BASE
-#undef CP110_PCIE1_BASE
-#undef CP110_PCIE2_BASE
 
 &cp0_gpio1 {
 	status = "okay";
diff --git a/arch/arm64/boot/dts/marvell/armada-8040-mcbin-single-shot.dts b/arch/arm64/boot/dts/marvell/armada-8040-mcbin-single-shot.dts
index 865a03fce65d..5db80122795d 100644
--- a/arch/arm64/boot/dts/marvell/armada-8040-mcbin-single-shot.dts
+++ b/arch/arm64/boot/dts/marvell/armada-8040-mcbin-single-shot.dts
@@ -17,9 +17,9 @@
 			"marvell,armada-ap806";
 
 	cp0 {
-		config-space@f2000000 {
-			cp0_ethernet: ethernet@0 {
-				cp0_eth0: eth0 {
+		config-space {
+			ethernet@0 {
+				eth0 {
 					/delete-property/phy;
 				};
 			};
@@ -28,9 +28,9 @@
 	};
 
 	cp1 {
-		config-space@f4000000 {
-			cp1_ethernet: ethernet@0 {
-				cp1_eth0: eth0 {
+		config-space {
+			ethernet@0 {
+				eth0 {
 					/delete-property/phy;
 				};
 			};
@@ -38,4 +38,3 @@
 		};
 	};
 };
-
diff --git a/arch/arm64/boot/dts/marvell/armada-80x0.dtsi b/arch/arm64/boot/dts/marvell/armada-80x0.dtsi
index 8129b40f12a4..171ddd4fa26f 100644
--- a/arch/arm64/boot/dts/marvell/armada-80x0.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-80x0.dtsi
@@ -5,58 +5,63 @@
  * Device Tree file for the Armada 80x0 SoC family
  */
 
-/ {
-	aliases {
-		gpio1 = &cp1_gpio1;
-		gpio2 = &cp0_gpio2;
-		spi1 = &cp0_spi0;
-		spi2 = &cp0_spi1;
-		spi3 = &cp1_spi0;
-		spi4 = &cp1_spi1;
-	};
-};
-
 /*
  * Instantiate the master CP110
  */
-#define CP110_NAME		cp0
-#define CP110_BASE		f2000000
-#define CP110_PCIE_IO_BASE	0xf9000000
-#define CP110_PCIE_MEM_BASE	0xf6000000
-#define CP110_PCIE0_BASE	f2600000
-#define CP110_PCIE1_BASE	f2620000
-#define CP110_PCIE2_BASE	f2640000
+#define CP110_NUM				0
+#define CP110_BASE				0xf2000000
+#define CP110_PCIE_MEM_SIZE			0xf00000
+#define CP110_PCIEx_CPU_IO_BASE(iface)		(0xf9000000 + (iface) *  0x10000)
+#define CP110_PCIEx_CPU_MEM_BASE(iface)		(0xf6000000 + (iface) *  0x1000000)
+#define CP110_PCIEx_BUS_IO_BASE(iface)		(CP110_PCIEx_CPU_IO_BASE(iface))
+#define CP110_PCIEx_BUS_MEM_BASE(iface)		(CP110_PCIEx_CPU_MEM_BASE(iface))
+#define CP110_PCIE_BUS_MEM_CFG			(0x82000000)
 
 #include "armada-cp110.dtsi"
 
-#undef CP110_NAME
+#undef CP110_NUM
 #undef CP110_BASE
-#undef CP110_PCIE_IO_BASE
-#undef CP110_PCIE_MEM_BASE
-#undef CP110_PCIE0_BASE
-#undef CP110_PCIE1_BASE
-#undef CP110_PCIE2_BASE
+#undef CP110_PCIE_MEM_SIZE
+#undef CP110_PCIEx_CPU_IO_BASE
+#undef CP110_PCIEx_CPU_MEM_BASE
+#undef CP110_PCIEx_BUS_IO_BASE
+#undef CP110_PCIEx_BUS_MEM_BASE
+#undef CP110_PCIE_BUS_MEM_CFG
 
 /*
  * Instantiate the slave CP110
  */
-#define CP110_NAME		cp1
-#define CP110_BASE		f4000000
-#define CP110_PCIE_IO_BASE	0xfd000000
-#define CP110_PCIE_MEM_BASE	0xfa000000
-#define CP110_PCIE0_BASE	f4600000
-#define CP110_PCIE1_BASE	f4620000
-#define CP110_PCIE2_BASE	f4640000
+#define CP110_NUM				1
+#define CP110_BASE				0xf4000000
+#define CP110_PCIE_MEM_SIZE			0xf00000
+#define CP110_PCIEx_CPU_IO_BASE(iface)		(0xfd000000 + (iface) *  0x10000)
+#define CP110_PCIEx_CPU_MEM_BASE(iface)		(0xfa000000 + (iface) *  0x1000000)
+#define CP110_PCIEx_BUS_IO_BASE(iface)		(CP110_PCIEx_CPU_IO_BASE(iface))
+#define CP110_PCIEx_BUS_MEM_BASE(iface)		(CP110_PCIEx_CPU_MEM_BASE(iface))
+#define CP110_PCIE_BUS_MEM_CFG			(0x82000000)
+
 
 #include "armada-cp110.dtsi"
 
-#undef CP110_NAME
+#undef CP110_NUM
 #undef CP110_BASE
-#undef CP110_PCIE_IO_BASE
-#undef CP110_PCIE_MEM_BASE
-#undef CP110_PCIE0_BASE
-#undef CP110_PCIE1_BASE
-#undef CP110_PCIE2_BASE
+#undef CP110_PCIE_MEM_SIZE
+#undef CP110_PCIEx_CPU_IO_BASE
+#undef CP110_PCIEx_CPU_MEM_BASE
+#undef CP110_PCIEx_BUS_IO_BASE
+#undef CP110_PCIEx_BUS_MEM_BASE
+#undef CP110_PCIE_BUS_MEM_CFG
+
+/ {
+	aliases {
+		gpio1 = &cp1_gpio1;
+		gpio2 = &cp0_gpio2;
+		spi1 = &cp0_spi0;
+		spi2 = &cp0_spi1;
+		spi3 = &cp1_spi0;
+		spi4 = &cp1_spi1;
+	};
+};
 
 /* The 80x0 has two CP blocks, but uses only one block from each. */
 &cp1_gpio1 {
diff --git a/arch/arm64/boot/dts/marvell/armada-common.dtsi b/arch/arm64/boot/dts/marvell/armada-common.dtsi
index d5e8aedec188..222b65c2c1fa 100644
--- a/arch/arm64/boot/dts/marvell/armada-common.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-common.dtsi
@@ -6,5 +6,5 @@
 /* Common definitions used by Armada 7K/8K DTs */
 #define PASTER(x, y) x ## y
 #define EVALUATOR(x, y) PASTER(x, y)
+#define CP110_NAME EVALUATOR(cp, CP110_NUM)
 #define CP110_LABEL(name) EVALUATOR(CP110_NAME, EVALUATOR(_, name))
-#define ADDRESSIFY(addr) EVALUATOR(0x, addr)
diff --git a/arch/arm64/boot/dts/marvell/armada-cp110.dtsi b/arch/arm64/boot/dts/marvell/armada-cp110.dtsi
index 26d6e602d1ec..ea216bad4262 100644
--- a/arch/arm64/boot/dts/marvell/armada-cp110.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-cp110.dtsi
@@ -9,9 +9,11 @@
 
 #include "armada-common.dtsi"
 
-#define CP110_PCIEx_IO_BASE(iface)	(CP110_PCIE_IO_BASE + (iface *  0x10000))
-#define CP110_PCIEx_MEM_BASE(iface)	(CP110_PCIE_MEM_BASE + (iface *  0x1000000))
-#define CP110_PCIEx_CONF_BASE(iface)	(CP110_PCIEx_MEM_BASE(iface) + 0xf00000)
+#define U64_TO_U32_H(addr)			(((addr) >> 32) & 0xffffffff)
+#define U64_TO_U32_L(addr)			((addr) & 0xffffffff)
+
+#define CP110_PCIEx_REG0_BASE(iface)		(CP110_BASE + 0x600000 + (iface) * 0x20000)
+#define CP110_PCIEx_REG1_BASE(iface)		(CP110_PCIEx_CPU_MEM_BASE(iface) + CP110_PCIE_MEM_SIZE)
 
 / {
 	/*
@@ -28,11 +30,11 @@
 	interrupt-parent = <&CP110_LABEL(icu)>;
 	ranges;
 
-	config-space@CP110_BASE {
+	config-space {
 		#address-cells = <1>;
 		#size-cells = <1>;
 		compatible = "simple-bus";
-		ranges = <0x0 0x0 ADDRESSIFY(CP110_BASE) 0x2000000>;
+		ranges = <0x0 U64_TO_U32_H(CP110_BASE) U64_TO_U32_L(CP110_BASE) 0x2000000>;
 
 		CP110_LABEL(ethernet): ethernet@0 {
 			compatible = "marvell,armada-7k-pp22";
@@ -430,10 +432,12 @@
 		};
 	};
 
-	CP110_LABEL(pcie0): pcie@CP110_PCIE0_BASE {
+	CP110_LABEL(pcie0): pcie@600000 {
 		compatible = "marvell,armada8k-pcie", "snps,dw-pcie";
-		reg = <0 ADDRESSIFY(CP110_PCIE0_BASE) 0 0x10000>,
-		      <0 CP110_PCIEx_CONF_BASE(0) 0 0x80000>;
+		reg =
+		   <U64_TO_U32_H(CP110_PCIEx_REG0_BASE(0)) U64_TO_U32_L(CP110_PCIEx_REG0_BASE(0)) 0 0x10000>,
+		   /* Last 512KB of mem space */
+		   <U64_TO_U32_H(CP110_PCIEx_REG1_BASE(0)) U64_TO_U32_L(CP110_PCIEx_REG1_BASE(0)) 0 0x80000>;
 		reg-names = "ctrl", "config";
 		#address-cells = <3>;
 		#size-cells = <2>;
@@ -441,13 +445,17 @@
 		device_type = "pci";
 		dma-coherent;
 		msi-parent = <&gic_v2m0>;
-
 		bus-range = <0 0xff>;
 		ranges =
-		/* downstream I/O */
-		<0x81000000 0 CP110_PCIEx_IO_BASE(0) 0  CP110_PCIEx_IO_BASE(0) 0 0x10000
-		/* non-prefetchable memory */
-		0x82000000 0 CP110_PCIEx_MEM_BASE(0) 0  CP110_PCIEx_MEM_BASE(0) 0 0xf00000>;
+			/* downstream I/O */
+			<0x81000000 U64_TO_U32_H(CP110_PCIEx_BUS_IO_BASE(0))
+			U64_TO_U32_L(CP110_PCIEx_BUS_IO_BASE(0)) U64_TO_U32_H(CP110_PCIEx_CPU_IO_BASE(0))
+			U64_TO_U32_L(CP110_PCIEx_CPU_IO_BASE(0)) 0 0x10000
+			/* non-prefetchable memory */
+			CP110_PCIE_BUS_MEM_CFG U64_TO_U32_H(CP110_PCIEx_BUS_MEM_BASE(0))
+			U64_TO_U32_L(CP110_PCIEx_BUS_MEM_BASE(0)) U64_TO_U32_H(CP110_PCIEx_CPU_MEM_BASE(0))
+			U64_TO_U32_L(CP110_PCIEx_CPU_MEM_BASE(0)) U64_TO_U32_H(CP110_PCIE_MEM_SIZE)
+			U64_TO_U32_L(CP110_PCIE_MEM_SIZE)>;
 		interrupt-map-mask = <0 0 0 0>;
 		interrupt-map = <0 0 0 0 &CP110_LABEL(icu) ICU_GRP_NSR 22 IRQ_TYPE_LEVEL_HIGH>;
 		interrupts = <ICU_GRP_NSR 22 IRQ_TYPE_LEVEL_HIGH>;
@@ -457,10 +465,12 @@
 		status = "disabled";
 	};
 
-	CP110_LABEL(pcie1): pcie@CP110_PCIE1_BASE {
+	CP110_LABEL(pcie1): pcie@620000 {
 		compatible = "marvell,armada8k-pcie", "snps,dw-pcie";
-		reg = <0 ADDRESSIFY(CP110_PCIE1_BASE) 0 0x10000>,
-		      <0 CP110_PCIEx_CONF_BASE(1) 0 0x80000>;
+		reg =
+		   <U64_TO_U32_H(CP110_PCIEx_REG0_BASE(1)) U64_TO_U32_L(CP110_PCIEx_REG0_BASE(1)) 0 0x10000>,
+		   /* Last 512KB of mem space */
+		   <U64_TO_U32_H(CP110_PCIEx_REG1_BASE(1)) U64_TO_U32_L(CP110_PCIEx_REG1_BASE(1)) 0 0x80000>;
 		reg-names = "ctrl", "config";
 		#address-cells = <3>;
 		#size-cells = <2>;
@@ -468,27 +478,32 @@
 		device_type = "pci";
 		dma-coherent;
 		msi-parent = <&gic_v2m0>;
-
 		bus-range = <0 0xff>;
 		ranges =
-		/* downstream I/O */
-		<0x81000000 0 CP110_PCIEx_IO_BASE(1) 0  CP110_PCIEx_IO_BASE(1) 0 0x10000
-		/* non-prefetchable memory */
-		0x82000000 0 CP110_PCIEx_MEM_BASE(1) 0  CP110_PCIEx_MEM_BASE(1) 0 0xf00000>;
+			/* downstream I/O */
+			<0x81000000 U64_TO_U32_H(CP110_PCIEx_BUS_IO_BASE(1))
+			U64_TO_U32_L(CP110_PCIEx_BUS_IO_BASE(1)) U64_TO_U32_H(CP110_PCIEx_CPU_IO_BASE(1))
+			U64_TO_U32_L(CP110_PCIEx_CPU_IO_BASE(1)) 0 0x10000
+			/* non-prefetchable memory */
+			CP110_PCIE_BUS_MEM_CFG U64_TO_U32_H(CP110_PCIEx_BUS_MEM_BASE(1))
+			U64_TO_U32_L(CP110_PCIEx_BUS_MEM_BASE(1)) U64_TO_U32_H(CP110_PCIEx_CPU_MEM_BASE(1))
+			U64_TO_U32_L(CP110_PCIEx_CPU_MEM_BASE(1)) U64_TO_U32_H(CP110_PCIE_MEM_SIZE)
+			U64_TO_U32_L(CP110_PCIE_MEM_SIZE)>;
 		interrupt-map-mask = <0 0 0 0>;
 		interrupt-map = <0 0 0 0 &CP110_LABEL(icu) ICU_GRP_NSR 24 IRQ_TYPE_LEVEL_HIGH>;
 		interrupts = <ICU_GRP_NSR 24 IRQ_TYPE_LEVEL_HIGH>;
-
 		num-lanes = <1>;
 		clock-names = "core", "reg";
 		clocks = <&CP110_LABEL(clk) 1 11>, <&CP110_LABEL(clk) 1 14>;
 		status = "disabled";
 	};
 
-	CP110_LABEL(pcie2): pcie@CP110_PCIE2_BASE {
+	CP110_LABEL(pcie2): pcie@640000 {
 		compatible = "marvell,armada8k-pcie", "snps,dw-pcie";
-		reg = <0 ADDRESSIFY(CP110_PCIE2_BASE) 0 0x10000>,
-		      <0 CP110_PCIEx_CONF_BASE(2) 0 0x80000>;
+		reg =
+		   <U64_TO_U32_H(CP110_PCIEx_REG0_BASE(2)) U64_TO_U32_L(CP110_PCIEx_REG0_BASE(2)) 0 0x10000>,
+		   /* Last 64KB of mem space */
+		   <U64_TO_U32_H(CP110_PCIEx_REG1_BASE(2)) U64_TO_U32_L(CP110_PCIEx_REG1_BASE(2)) 0 0x80000>;
 		reg-names = "ctrl", "config";
 		#address-cells = <3>;
 		#size-cells = <2>;
@@ -496,17 +511,20 @@
 		device_type = "pci";
 		dma-coherent;
 		msi-parent = <&gic_v2m0>;
-
 		bus-range = <0 0xff>;
 		ranges =
-		/* downstream I/O */
-		<0x81000000 0 CP110_PCIEx_IO_BASE(2) 0  CP110_PCIEx_IO_BASE(2) 0 0x10000
-		/* non-prefetchable memory */
-		0x82000000 0 CP110_PCIEx_MEM_BASE(2) 0  CP110_PCIEx_MEM_BASE(2) 0 0xf00000>;
+			/* downstream I/O */
+			<0x81000000 U64_TO_U32_H(CP110_PCIEx_BUS_IO_BASE(2))
+			U64_TO_U32_L(CP110_PCIEx_BUS_IO_BASE(2)) U64_TO_U32_H(CP110_PCIEx_CPU_IO_BASE(2))
+			U64_TO_U32_L(CP110_PCIEx_CPU_IO_BASE(2)) 0 0x10000
+			/* non-prefetchable memory */
+			CP110_PCIE_BUS_MEM_CFG U64_TO_U32_H(CP110_PCIEx_BUS_MEM_BASE(2))
+			U64_TO_U32_L(CP110_PCIEx_BUS_MEM_BASE(2)) U64_TO_U32_H(CP110_PCIEx_CPU_MEM_BASE(2))
+			U64_TO_U32_L(CP110_PCIEx_CPU_MEM_BASE(2)) U64_TO_U32_H(CP110_PCIE_MEM_SIZE)
+			U64_TO_U32_L(CP110_PCIE_MEM_SIZE)>;
 		interrupt-map-mask = <0 0 0 0>;
 		interrupt-map = <0 0 0 0 &CP110_LABEL(icu) ICU_GRP_NSR 23 IRQ_TYPE_LEVEL_HIGH>;
 		interrupts = <ICU_GRP_NSR 23 IRQ_TYPE_LEVEL_HIGH>;
-
 		num-lanes = <1>;
 		clock-names = "core", "reg";
 		clocks = <&CP110_LABEL(clk) 1 12>, <&CP110_LABEL(clk) 1 14>;
-- 
2.17.1

