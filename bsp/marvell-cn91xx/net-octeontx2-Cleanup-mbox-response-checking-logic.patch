From 8224003547edc2d7de553f4736b2666d9eeca0aa Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Fri, 2 Nov 2018 23:03:37 +0530
Subject: [PATCH 0374/1051] net: octeontx2: Cleanup mbox response checking
 logic

Made use of newly added otx2_mbox_check_rsps() API and
cleaned up mbox response checking logic. Now all mbox msg
responses from AF are validated by default.

Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/otx2_common.c  | 27 +++----------------
 .../ethernet/marvell/octeontx2/otx2_common.h  | 16 +++++++++--
 .../net/ethernet/marvell/octeontx2/otx2_pf.c  |  8 +-----
 .../net/ethernet/marvell/octeontx2/otx2_vf.c  |  8 +-----
 4 files changed, 19 insertions(+), 40 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
index 17b24790623d..5714ad8060ed 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
@@ -423,9 +423,7 @@ int otx2_txschq_config(struct otx2_nic *pfvf, int lvl)
 int otx2_txsch_alloc(struct otx2_nic *pfvf)
 {
 	struct nix_txsch_alloc_req *req;
-	struct mbox_msghdr *rsp_hdr;
-	int lvl;
-	int err;
+	int lvl, err;
 
 	/* Get memory to put this msg */
 	req = otx2_mbox_alloc_msg_NIX_TXSCH_ALLOC(&pfvf->mbox);
@@ -439,12 +437,7 @@ int otx2_txsch_alloc(struct otx2_nic *pfvf)
 	err = otx2_sync_mbox_msg(&pfvf->mbox);
 	if (err)
 		return err;
-
-	rsp_hdr = otx2_mbox_get_rsp(&pfvf->mbox.mbox, 0, &req->hdr);
-	if (IS_ERR(rsp_hdr))
-		return PTR_ERR(rsp_hdr);
-
-	return rsp_hdr->rc;
+	return 0;
 }
 
 int otx2_txschq_stop(struct otx2_nic *pfvf)
@@ -950,7 +943,6 @@ int otx2_config_npa(struct otx2_nic *pfvf)
 {
 	struct otx2_qset *qset = &pfvf->qset;
 	struct npa_lf_alloc_req  *npalf;
-	struct mbox_msghdr *rsp_hdr;
 	struct otx2_hw *hw = &pfvf->hw;
 	int aura_cnt, err;
 
@@ -979,12 +971,7 @@ int otx2_config_npa(struct otx2_nic *pfvf)
 	err = otx2_sync_mbox_msg(&pfvf->mbox);
 	if (err)
 		return err;
-
-	rsp_hdr = otx2_mbox_get_rsp(&pfvf->mbox.mbox, 0, &npalf->hdr);
-	if (IS_ERR(rsp_hdr))
-		return PTR_ERR(rsp_hdr);
-
-	return rsp_hdr->rc;
+	return 0;
 }
 
 int otx2_detach_resources(struct mbox *mbox)
@@ -1008,7 +995,6 @@ int otx2_attach_npa_nix(struct otx2_nic *pfvf)
 {
 	struct rsrc_attach *attach;
 	struct msg_req *msix;
-	struct mbox_msghdr *rsp_hdr;
 	int err;
 
 	/* Get memory to put this msg */
@@ -1033,13 +1019,6 @@ int otx2_attach_npa_nix(struct otx2_nic *pfvf)
 	if (err)
 		return err;
 
-	rsp_hdr = otx2_mbox_get_rsp(&pfvf->mbox.mbox, 0, &msix->hdr);
-	if (IS_ERR(rsp_hdr))
-		return PTR_ERR(rsp_hdr);
-
-	if (rsp_hdr->rc)
-		return rsp_hdr->rc;
-
 	if (pfvf->hw.npa_msixoff == MSIX_VECTOR_INVALID ||
 	    pfvf->hw.nix_msixoff == MSIX_VECTOR_INVALID) {
 		dev_err(pfvf->dev,
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
index a88e3d44acbe..4f9a118e1328 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
@@ -250,10 +250,16 @@ static inline void otx2_get_page(struct otx2_pool *pool)
 /* Mbox APIs */
 static inline int otx2_sync_mbox_msg(struct mbox *mbox)
 {
+	int err;
+
 	if (!otx2_mbox_nonempty(&mbox->mbox, 0))
 		return 0;
 	otx2_mbox_msg_send(&mbox->mbox, 0);
-	return otx2_mbox_wait_for_rsp(&mbox->mbox, 0);
+	err = otx2_mbox_wait_for_rsp(&mbox->mbox, 0);
+	if (err)
+		return err;
+
+	return otx2_mbox_check_rsp_msgs(&mbox->mbox, 0);
 }
 
 /* Use this API to send mbox msgs in atomic context
@@ -261,10 +267,16 @@ static inline int otx2_sync_mbox_msg(struct mbox *mbox)
  */
 static inline int otx2_sync_mbox_msg_busy_poll(struct mbox *mbox)
 {
+	int err;
+
 	if (!otx2_mbox_nonempty(&mbox->mbox, 0))
 		return 0;
 	otx2_mbox_msg_send(&mbox->mbox, 0);
-	return otx2_mbox_busy_poll_for_rsp(&mbox->mbox, 0);
+	err = otx2_mbox_busy_poll_for_rsp(&mbox->mbox, 0);
+	if (err)
+		return err;
+
+	return otx2_mbox_check_rsp_msgs(&mbox->mbox, 0);
 }
 
 #define M(_name, _id, _req_type, _rsp_type)				\
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
index bba4e16de529..91ddaa1fbbae 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
@@ -238,7 +238,6 @@ static int otx2_register_mbox_intr(struct otx2_nic *pf)
 {
 	struct otx2_hw *hw = &pf->hw;
 	struct msg_req *req;
-	struct mbox_msghdr *rsp_hdr;
 	char *irq_name;
 	int err;
 
@@ -270,12 +269,7 @@ static int otx2_register_mbox_intr(struct otx2_nic *pf)
 			 "AF not responding to mailbox, deferring probe\n");
 		return -EPROBE_DEFER;
 	}
-
-	rsp_hdr = otx2_mbox_get_rsp(&pf->mbox.mbox, 0, &req->hdr);
-	if (IS_ERR(rsp_hdr))
-		return PTR_ERR(rsp_hdr);
-
-	return rsp_hdr->rc;
+	return 0;
 }
 
 static void otx2_disable_mbox_intr(struct otx2_nic *pf)
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
index 72144deb9e92..bc378922a4bb 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
@@ -147,7 +147,6 @@ static int otx2vf_register_mbox_intr(struct otx2_nic *vf)
 {
 	struct otx2_hw *hw = &vf->hw;
 	struct msg_req *req;
-	struct mbox_msghdr *rsp_hdr;
 	char *irq_name;
 	int err;
 
@@ -179,12 +178,7 @@ static int otx2vf_register_mbox_intr(struct otx2_nic *vf)
 			 "AF not responding to mailbox, deferring probe\n");
 		return -EPROBE_DEFER;
 	}
-
-	rsp_hdr = otx2_mbox_get_rsp(&vf->mbox.mbox, 0, &req->hdr);
-	if (IS_ERR(rsp_hdr))
-		return PTR_ERR(rsp_hdr);
-
-	return rsp_hdr->rc;
+	return 0;
 }
 
 static void otx2vf_disable_mbox_intr(struct otx2_nic *vf)
-- 
2.17.1

