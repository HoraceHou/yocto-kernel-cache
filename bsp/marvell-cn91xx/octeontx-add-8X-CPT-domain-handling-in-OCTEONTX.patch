From dceaf351c1200f972b0d5838f5fdb833412ed969 Mon Sep 17 00:00:00 2001
From: Lukasz Bartosik <lbartosik@marvell.com>
Date: Fri, 28 Dec 2018 15:22:25 +0300
Subject: [PATCH 0875/1051] octeontx: add 8X CPT domain handling in OCTEONTX

Add CPT domain handling code to OCTEONTX module. This patch enables
creation and destruction of CPT's domains in OcteonTx RM. This code
is based on patch linux-octeontx-cpt-crypto.patch from
se2-rel-ga6.2p1-cpt-crypto release.

Change-Id: Ic8784ce064bb238454baa0f8270113272ffa21af
Signed-off-by: Lukasz Bartosik <lbartosik@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/1782
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../cavium/octeontx-83xx/octeontx_main.c      | 58 +++++++++++++++++--
 1 file changed, 54 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
index 7464ba8444c3..8d7667cc6281 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
@@ -31,6 +31,7 @@
 #include "pki.h"
 #include "dpi.h"
 #include "zip.h"
+#include "cpt.h"
 
 #define DRV_NAME "octeontx"
 #define DRV_VERSION "1.0"
@@ -58,6 +59,7 @@ static struct fpapf_com_s *fpapf;
 static struct ssopf_com_s *ssopf;
 static struct pkopf_com_s *pkopf;
 static struct timpf_com_s *timpf;
+static struct cptpf_com_s *cptpf;
 static struct ssowpf_com_s *ssowpf;
 static struct pki_com_s *pki;
 static struct dpipf_com_s *dpipf;
@@ -87,6 +89,7 @@ struct octtx_domain {
 	int tim_vf_count;
 	int dpi_vf_count;
 	int zip_vf_count;
+	int cpt_vf_count;
 
 	u64 aura_set;
 	u64 grp_mask;
@@ -116,6 +119,7 @@ struct octtx_domain {
 	bool dpi_domain_created;
 	bool zip_domain_created;
 	bool sdp_domain_created;
+	bool cpt_domain_created;
 };
 
 static int gpio_in_use;
@@ -135,7 +139,7 @@ static int octeontx_create_domain(const char *name, int type, int sso_count,
 				  int fpa_count, int ssow_count, int pko_count,
 				  int pki_count, int tim_count, int bgx_count,
 				  int lbk_count, int dpi_count, int zip_count,
-				  int sdp_count,
+				  int sdp_count, int cpt_count,
 				  const long int *bgx_port,
 				  const long int *lbk_port,
 				  const long int *sdp_port);
@@ -184,6 +188,7 @@ static ssize_t octtx_create_domain_store(struct device *dev,
 	long int zip_count = 0;
 	long int pki_count = 0;
 	long int sdp_count = 0;
+	long int cpt_count = 0;
 	long int lbk_port[OCTTX_MAX_LBK_PORTS];
 	long int bgx_port[OCTTX_MAX_BGX_PORTS];
 	long int sdp_port[OCTTX_MAX_SDP_PORTS];
@@ -249,6 +254,12 @@ static ssize_t octtx_create_domain_store(struct device *dev,
 				goto error;
 			if (kstrtol(strim(start), 10, &tim_count))
 				goto error;
+		}  else if (!strncmp(strim(start), "cpt", sizeof("cpt") - 1)) {
+			temp = strsep(&start, ":");
+			if (!start)
+				goto error;
+			if (kstrtol(strim(start), 10, &cpt_count))
+				goto error;
 		} else if (!strncmp(strim(start), "net", sizeof("net") - 1)) {
 			temp = strsep(&start, ":");
 			if (!start)
@@ -290,8 +301,8 @@ static ssize_t octtx_create_domain_store(struct device *dev,
 	ret = octeontx_create_domain(name, type, sso_count, fpa_count,
 				     ssow_count, pko_count, pki_count,
 				     tim_count, bgx_count, lbk_count,
-				     dpi_count, zip_count,
-				     sdp_count, (const long int *)bgx_port,
+				     dpi_count, zip_count, sdp_count,
+				     cpt_count, (const long int *)bgx_port,
 				     (const long int *)lbk_port,
 				     (const long int *)sdp_port);
 	if (ret) {
@@ -577,6 +588,15 @@ static void do_destroy_domain(struct octtx_domain *domain)
 		}
 	}
 
+	if (domain->cpt_domain_created) {
+		ret = cptpf->destroy_domain(node, domain_id, domain->kobj);
+		if (ret) {
+			dev_err(octtx_device,
+				"Failed to remove CPT of domain %d on node %d.\n",
+				domain->domain_id, node);
+		}
+	}
+
 	if (domain->fpa_domain_created) {
 		ret = fpapf->destroy_domain(node, domain_id, domain->kobj);
 		if (ret) {
@@ -686,7 +706,7 @@ int octeontx_create_domain(const char *name, int type, int sso_count,
 			   int fpa_count, int ssow_count, int pko_count,
 			   int pki_count, int tim_count, int bgx_count,
 			   int lbk_count, int dpi_count, int zip_count,
-			   int sdp_count,
+			   int sdp_count, int cpt_count,
 			   const long int *bgx_port,
 			   const long int *lbk_port,
 			   const long int *sdp_port)
@@ -1002,6 +1022,17 @@ int octeontx_create_domain(const char *name, int type, int sso_count,
 		domain->tim_domain_created = true;
 	}
 
+	domain->cpt_vf_count = cpt_count;
+	if (domain->cpt_vf_count > 0) {
+		ret = cptpf->create_domain(node, domain_id,
+					   domain->cpt_vf_count, domain->kobj);
+		if (ret) {
+			dev_err(octtx_device, "Failed to create CPT domain\n");
+			goto error;
+		}
+		domain->cpt_domain_created = true;
+	}
+
 	domain->dpi_vf_count = dpi_count;
 	if (domain->dpi_vf_count > 0) {
 		ret = dpipf->create_domain(node, domain_id,
@@ -1153,6 +1184,15 @@ static int octeontx_reset_domain(void *master_data)
 		}
 	}
 
+	if (domain->cpt_domain_created) {
+		ret = cptpf->reset_domain(node, domain->domain_id);
+		if (ret) {
+			dev_err(octtx_device,
+				"Failed to reset CPT of domain %d on node %d.\n",
+				domain->domain_id, node);
+		}
+	}
+
 	if (domain->dpi_domain_created) {
 		ret = dpipf->reset_domain(node, domain->domain_id);
 		if (ret) {
@@ -1476,6 +1516,12 @@ static int __init octeontx_init_module(void)
 		goto timpf_err;
 	}
 
+	cptpf = try_then_request_module(symbol_get(cptpf_com), "cptpf");
+	if (!cptpf) {
+		ret = -ENODEV;
+		goto cptpf_err;
+	}
+
 	/* Register a physical link status poll fn() */
 	check_link = alloc_workqueue("octeontx_check_link_status",
 				     WQ_UNBOUND | WQ_MEM_RECLAIM, 1);
@@ -1565,6 +1611,9 @@ static int __init octeontx_init_module(void)
 	task_cleanup_handler_remove(cleanup_el3_irqs);
 
 wq_err:
+	symbol_put(cptpf_com);
+
+cptpf_err:
 	symbol_put(timpf_com);
 
 timpf_err:
@@ -1619,6 +1668,7 @@ static void __exit octeontx_cleanup_module(void)
 	symbol_put(timpf_com);
 	symbol_put(zippf_com);
 	symbol_put(dpipf_com);
+	symbol_put(cptpf_com);
 	symbol_put(lbk_com);
 	symbol_put(slipf_com);
 	symbol_put(thunder_bgx_com);
-- 
2.17.1

