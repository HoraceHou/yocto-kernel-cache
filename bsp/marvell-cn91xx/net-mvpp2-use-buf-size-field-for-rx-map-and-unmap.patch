From 446ba9d3f613b11a95bc19668d9e4f64936ee25c Mon Sep 17 00:00:00 2001
From: Yan Markman <ymarkman@marvell.com>
Date: Wed, 17 Oct 2018 16:44:18 +0300
Subject: [PATCH 0731/1051] net: mvpp2: use buf-size field for rx map and unmap

BM-pool should be refilled with buffer and dma-mapped (unmapped).
according to the size. This is done per-packet and therefore
time-critical.
The bm-pool buffer size depends upon mtu/packet size and pool
but is bigger calculated over macro MVPP2_RX_BUF_SIZE(pkt_size).
To avoid the per-packet calculation we have a special
field "buf_size" in the bm-pool structure.

Let's use the "buf_size" instead of MVPP2_RX_BUF_SIZE(pkt_size)
This improves the cpu-loading and performance.

Change-Id: I978fc8031f8dd2c826bf3ed9ccc4226ebccf46aa
Signed-off-by: Yan Markman <ymarkman@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/60523
Reviewed-by: Igal Liberman <igall@marvell.com>
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c | 9 +++------
 1 file changed, 3 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
index a5100b3c9e2e..41c67d7ba061 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
@@ -571,8 +571,7 @@ static dma_addr_t mvpp2_buf_alloc(struct mvpp2_port *port,
 		return (dma_addr_t)data;
 
 	dma_addr = dma_map_single(port->dev->dev.parent, data,
-				  MVPP2_RX_BUF_SIZE(bm_pool->pkt_size),
-				  DMA_FROM_DEVICE);
+				  bm_pool->buf_size, DMA_FROM_DEVICE);
 	if (unlikely(dma_mapping_error(port->dev->dev.parent, dma_addr))) {
 		mvpp2_frag_free(bm_pool, data);
 		dma_addr = 0;
@@ -3331,8 +3330,7 @@ static struct sk_buff *mvpp2_recycle_get(struct mvpp2_port *port,
 
 	/* refill the buffer into BM */
 	dma_addr = dma_map_single(port->dev->dev.parent, frag,
-				  MVPP2_RX_BUF_SIZE(bm_pool->pkt_size),
-				  DMA_FROM_DEVICE);
+				  bm_pool->buf_size, DMA_FROM_DEVICE);
 	if (unlikely(dma_mapping_error(port->dev->dev.parent, dma_addr))) {
 		pcpu->idx[bm_pool->id]++; /* Return back to recycle */
 		netdev_err(port->dev, "failed to refill BM pool-%d (%d:%p)\n",
@@ -3352,8 +3350,7 @@ static struct sk_buff *mvpp2_recycle_get(struct mvpp2_port *port,
 
 	if (!skb) {
 		dma_unmap_single(port->dev->dev.parent, dma_addr,
-				 MVPP2_RX_BUF_SIZE(bm_pool->pkt_size),
-				 DMA_FROM_DEVICE);
+				 bm_pool->buf_size, DMA_FROM_DEVICE);
 		mvpp2_frag_free(bm_pool, frag);
 		return NULL;
 	}
-- 
2.17.1

