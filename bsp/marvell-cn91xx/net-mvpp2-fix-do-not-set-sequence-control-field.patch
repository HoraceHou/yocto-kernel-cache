From 6612505cae8203fff1292467fc2a0116ab3fb5eb Mon Sep 17 00:00:00 2001
From: Alan Winkowski <walan@marvell.com>
Date: Tue, 20 Nov 2018 13:54:47 +0200
Subject: [PATCH 0797/1051] net: mvpp2: fix: do not set sequence control field

In mvpp2, the sequence control field is used for complex lookup sequences
For basic flows, this field should be set to 0.

Complex Lookup Sequence:
 The Classifier engine supports a complex lookup sequence that consists
 of a sequence of lookup commands that are processed as a single lookup
 operation using 2 classification extension types:

 - Extension type-1 Called the X-Tuple lookup sequence. It extends the
   exact match capability of the 5-Tuple described above into up to 13
   Tuples. The N-Tuple is a generic name to a single lookup in C3 engine
   with up to 5-Tuple of a packet (actually 6-Tuple when considering the
   Port ID). The extension is for up to 8 additional fields of a packet
   that can be matched to a reference value to qualify for a lookup hit.
   A use-case for this extension is to add Layer-2 or Tunnel header
   fields to a 5-Tuple to uniquely define a flow or connection

 - Extension type-2 Called the Combinational lookup sequence. The
   classifier's forwarding action is a function of a combination of
   the status (hit/hit, hit/miss, miss/hit and miss/miss)of 2 sequential
   lookup operation. A use case of this extension is to correctly process
   exceptions to a rule.

Signed-off-by: Alan Winkowski <walan@marvell.com>

Change-Id: Ifd2678a229101104b411860a3e08a7d8b2293c7c
Reviewed-on: http://vgitil04.il.marvell.com:8080/61101
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-by: Yan Markman <ymarkman@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c | 10 +---------
 1 file changed, 1 insertion(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c
index b889f446d9b1..ab49757c36ff 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c
@@ -429,12 +429,6 @@ static void mvpp2_cls_flow_port_id_sel(struct mvpp2_cls_flow_entry *fe,
 		fe->data[0] &= ~MVPP2_CLS_FLOW_TBL0_PORT_ID_SEL;
 }
 
-static void mvpp2_cls_flow_seq_set(struct mvpp2_cls_flow_entry *fe, u32 seq)
-{
-	fe->data[1] &= ~MVPP2_CLS_FLOW_TBL1_SEQ(MVPP2_CLS_FLOW_TBL1_SEQ_MASK);
-	fe->data[1] |= MVPP2_CLS_FLOW_TBL1_SEQ(seq);
-}
-
 static void mvpp2_cls_flow_last_set(struct mvpp2_cls_flow_entry *fe,
 				    bool is_last)
 {
@@ -499,7 +493,7 @@ static void mvpp2_cls_flow_init(struct mvpp2 *priv, struct mvpp2_cls_flow *flow)
 	mvpp2_cls_flow_port_id_sel(&fe, true);
 	mvpp2_cls_flow_last_set(&fe, 0);
 	mvpp2_cls_flow_pri_set(&fe, 0);
-	mvpp2_cls_flow_seq_set(&fe, MVPP2_CLS_FLOW_SEQ_FIRST1);
+
 
 	/* Add all ports */
 	for (i = 0; i < MVPP2_MAX_PORTS; i++)
@@ -514,7 +508,6 @@ static void mvpp2_cls_flow_init(struct mvpp2 *priv, struct mvpp2_cls_flow *flow)
 
 		mvpp2_cls_flow_port_id_sel(&fe, true);
 		mvpp2_cls_flow_pri_set(&fe, i + 1);
-		mvpp2_cls_flow_seq_set(&fe, MVPP2_CLS_FLOW_SEQ_MIDDLE);
 		mvpp2_cls_flow_port_add(&fe, BIT(i));
 
 		mvpp2_cls_flow_write(priv, &fe);
@@ -522,7 +515,6 @@ static void mvpp2_cls_flow_init(struct mvpp2 *priv, struct mvpp2_cls_flow *flow)
 
 	/* Update the last entry */
 	mvpp2_cls_flow_last_set(&fe, 1);
-	mvpp2_cls_flow_seq_set(&fe, MVPP2_CLS_FLOW_SEQ_LAST);
 
 	mvpp2_cls_flow_write(priv, &fe);
 }
-- 
2.17.1

