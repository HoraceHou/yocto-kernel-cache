From 072acea48f2a3479ddd37202093e7cfce5c7f719 Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@cavium.com>
Date: Wed, 29 Nov 2017 11:33:11 +0300
Subject: [PATCH 0003/1051] net: thunderx: Set IRQ affinity for vf's interrupts

This will set irq affinities incase irqbalance tool is not present.
Note: This is not for upstream.

Signed-off-by: Sunil Goutham <sgoutham@cavium.com>
Signed-off-by: Aleksey Makarov <aleksey.makarov@cavium.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/cavium/thunder/nicvf_main.c | 8 ++++++--
 kernel/irq/manage.c                              | 2 ++
 2 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/cavium/thunder/nicvf_main.c b/drivers/net/ethernet/cavium/thunder/nicvf_main.c
index edcaa224f0b3..b47fb01b2dac 100644
--- a/drivers/net/ethernet/cavium/thunder/nicvf_main.c
+++ b/drivers/net/ethernet/cavium/thunder/nicvf_main.c
@@ -1087,6 +1087,7 @@ static irqreturn_t nicvf_qs_err_intr_handler(int irq, void *nicvf_irq)
 static void nicvf_set_irq_affinity(struct nicvf *nic)
 {
 	int vec, cpu;
+	int irqnum;
 
 	for (vec = 0; vec < nic->num_vec; vec++) {
 		if (!nic->irq_allocated[vec])
@@ -1103,8 +1104,11 @@ static void nicvf_set_irq_affinity(struct nicvf *nic)
 
 		cpumask_set_cpu(cpumask_local_spread(cpu, nic->node),
 				nic->affinity_mask[vec]);
-		irq_set_affinity_hint(pci_irq_vector(nic->pdev, vec),
-				      nic->affinity_mask[vec]);
+		irqnum = pci_irq_vector(nic->pdev, vec);
+		irq_set_affinity_hint(irqnum, nic->affinity_mask[vec]);
+		if (irq_can_set_affinity(irqnum))
+			__irq_set_affinity(irqnum,
+					   nic->affinity_mask[vec], false);
 	}
 }
 
diff --git a/kernel/irq/manage.c b/kernel/irq/manage.c
index 152ae6fb8255..c770974421e2 100644
--- a/kernel/irq/manage.c
+++ b/kernel/irq/manage.c
@@ -134,6 +134,7 @@ int irq_can_set_affinity(unsigned int irq)
 {
 	return __irq_can_set_affinity(irq_to_desc(irq));
 }
+EXPORT_SYMBOL(irq_can_set_affinity);
 
 /**
  * irq_can_set_affinity_usr - Check if affinity of a irq can be set from user space
@@ -278,6 +279,7 @@ int __irq_set_affinity(unsigned int irq, const struct cpumask *mask, bool force)
 	raw_spin_unlock_irqrestore(&desc->lock, flags);
 	return ret;
 }
+EXPORT_SYMBOL(__irq_set_affinity);
 
 int irq_set_affinity_hint(unsigned int irq, const struct cpumask *m)
 {
-- 
2.17.1

