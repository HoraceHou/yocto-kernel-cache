From debce17593da03c93b8dca2d5c7e14478d4f3c52 Mon Sep 17 00:00:00 2001
From: "Duszynski, Tomasz" <Tomasz.Duszynski@cavium.com>
Date: Mon, 5 Nov 2018 10:48:52 +0300
Subject: [PATCH 0369/1051] soc: octeontx2: simplify RX Vtag configuration flow

This patch is actually a mixture of 3 simple but related changes.
Hence all were squashed together.

* Improve members documentation in struct nix_vtag_config.

* Allow setting STRIP/CAPTURE VTAG actions separately. With this
  change following combinations are possible: STRIP, STRIP and CAPTURE,
  CAPTURE or nothing (0 disables respective actions).

* Fix bogus read-modify-write of VTAG Type register. Previously
  upon reading register some bits were not cleared properly.
  Which could eventually lead to wrong values being written.

Signed-off-by: Tomasz Duszynski <tduszynski@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/soc/marvell/octeontx2/mbox.h    |  3 ++-
 drivers/soc/marvell/octeontx2/rvu_nix.c | 23 +++++------------------
 2 files changed, 7 insertions(+), 19 deletions(-)

diff --git a/drivers/soc/marvell/octeontx2/mbox.h b/drivers/soc/marvell/octeontx2/mbox.h
index 674e3bb11c36..4604cd25f87c 100644
--- a/drivers/soc/marvell/octeontx2/mbox.h
+++ b/drivers/soc/marvell/octeontx2/mbox.h
@@ -544,6 +544,7 @@ struct nix_txschq_config {
 
 struct nix_vtag_config {
 	struct mbox_msghdr hdr;
+	/* '0' for 4 octet VTAG, '1' for 8 octet VTAG */
 	u8 vtag_size;
 	/* cfg_type is '0' for tx vlan cfg
 	 * cfg_type is '1' for rx vlan cfg
@@ -564,7 +565,7 @@ struct nix_vtag_config {
 
 		/* valid when cfg_type is '1' */
 		struct {
-			/* rx vtag type index */
+			/* rx vtag type index, valid values are in 0..7 range */
 			u8 vtag_type;
 			/* rx vtag strip */
 			u8 strip_vtag :1;
diff --git a/drivers/soc/marvell/octeontx2/rvu_nix.c b/drivers/soc/marvell/octeontx2/rvu_nix.c
index e0624f0682af..4297dc5d9723 100644
--- a/drivers/soc/marvell/octeontx2/rvu_nix.c
+++ b/drivers/soc/marvell/octeontx2/rvu_nix.c
@@ -1581,28 +1581,15 @@ int rvu_mbox_handler_NIX_TXSCHQ_CFG(struct rvu *rvu,
 static int nix_rx_vtag_cfg(struct rvu *rvu, int nixlf, int blkaddr,
 			   struct nix_vtag_config *req)
 {
-	u64 regval = 0;
+	u64 regval = req->vtag_size;
 
-#define NIX_VTAGTYPE_MAX 0x8ull
-#define NIX_VTAGSIZE_MASK 0x7ull
-#define NIX_VTAGSTRIP_CAP_MASK 0x30ull
-
-	if ((req->rx.vtag_type >= NIX_VTAGTYPE_MAX) ||
-	    (req->vtag_size > VTAGSIZE_T8))
+	if ((req->rx.vtag_type > 7) || (req->vtag_size > VTAGSIZE_T8))
 		return -EINVAL;
 
-	regval = rvu_read64(rvu, blkaddr,
-			    NIX_AF_LFX_RX_VTAG_TYPEX(nixlf, req->rx.vtag_type));
-
-	if (req->rx.strip_vtag && req->rx.capture_vtag)
-		regval |= BIT_ULL(4) | BIT_ULL(5);
-	else if (req->rx.strip_vtag)
+	if (req->rx.capture_vtag)
+		regval |= BIT_ULL(5);
+	if (req->rx.strip_vtag)
 		regval |= BIT_ULL(4);
-	else
-		regval &= ~(BIT_ULL(4) | BIT_ULL(5));
-
-	regval &= ~NIX_VTAGSIZE_MASK;
-	regval |= req->vtag_size & NIX_VTAGSIZE_MASK;
 
 	rvu_write64(rvu, blkaddr,
 		    NIX_AF_LFX_RX_VTAG_TYPEX(nixlf, req->rx.vtag_type), regval);
-- 
2.17.1

