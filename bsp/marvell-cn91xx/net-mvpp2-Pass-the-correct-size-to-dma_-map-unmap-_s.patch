From ae6046e114a4014f78c1c69b0ce3e7d324981d92 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Wed, 12 Jun 2019 18:56:41 +0800
Subject: [PATCH] net: mvpp2: Pass the correct size to dma_{map,unmap}_single()

The skb buffer is allocated with bm_pool->frag_size, so when we invoke
the dma_{map,unmap}_single(), we should also use this size as
parameter. Otherwise we would get the below warning when the
CONFIG_DMA_API_DEBUG is enabled.
  mvpp2 f2000000.ethernet: DMA-API: device driver tries to sync DMA memory it has not allocated [device address=0x00000002345339c0] [size=70
4 bytes]

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
index fc7ecfc28f06..ab9dd882be8a 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
@@ -429,7 +429,7 @@ static void mvpp2_bm_bufs_free(struct device *dev, struct mvpp2 *priv,
 					&buf_dma_addr, &buf_phys_addr);
 
 		dma_unmap_single(dev, buf_dma_addr,
-				 bm_pool->buf_size, DMA_FROM_DEVICE);
+				 bm_pool->frag_size, DMA_FROM_DEVICE);
 
 		data = (void *)phys_to_virt(buf_phys_addr);
 		if (!data)
@@ -622,7 +622,7 @@ static dma_addr_t mvpp2_buf_alloc(struct mvpp2_port *port,
 		return (dma_addr_t)data;
 
 	dma_addr = dma_map_single(port->dev->dev.parent, data,
-				  bm_pool->buf_size, DMA_FROM_DEVICE);
+				  bm_pool->frag_size, DMA_FROM_DEVICE);
 	if (unlikely(dma_mapping_error(port->dev->dev.parent, dma_addr))) {
 		mvpp2_frag_free(bm_pool, data);
 		dma_addr = 0;
@@ -3726,7 +3726,7 @@ static struct sk_buff *mvpp2_recycle_get(struct mvpp2_port *port,
 
 	/* refill the buffer into BM */
 	dma_addr = dma_map_single(port->dev->dev.parent, frag,
-				  bm_pool->buf_size, DMA_FROM_DEVICE);
+				  bm_pool->frag_size, DMA_FROM_DEVICE);
 	if (unlikely(dma_mapping_error(port->dev->dev.parent, dma_addr))) {
 		pcpu->idx[bm_pool->id]++; /* Return back to recycle */
 		netdev_err(port->dev, "failed to refill BM pool-%d (%d:%p)\n",
@@ -3746,7 +3746,7 @@ static struct sk_buff *mvpp2_recycle_get(struct mvpp2_port *port,
 
 	if (!skb) {
 		dma_unmap_single(port->dev->dev.parent, dma_addr,
-				 bm_pool->buf_size, DMA_FROM_DEVICE);
+				 bm_pool->frag_size, DMA_FROM_DEVICE);
 		mvpp2_frag_free(bm_pool, frag);
 		return NULL;
 	}
@@ -3893,10 +3893,10 @@ static int mvpp2_rx(struct mvpp2_port *port, struct napi_struct *napi,
 		 */
 		if (rx_todo == 1)
 			dma_sync_single_for_cpu(dev->dev.parent, dma_addr,
-						bm_pool->buf_size,
+						bm_pool->frag_size,
 						DMA_FROM_DEVICE);
 		dma_unmap_single(dev->dev.parent, dma_addr,
-				 bm_pool->buf_size, DMA_FROM_DEVICE);
+				 bm_pool->frag_size, DMA_FROM_DEVICE);
 
 		prefetch(data + NET_SKB_PAD); /* packet header */
 
-- 
2.17.1

