From 1e14a817573d319ca2a4b55233daabc133ddf88d Mon Sep 17 00:00:00 2001
From: Christina Jacob <cjacob@marvell.com>
Date: Tue, 5 Feb 2019 15:02:00 +0530
Subject: [PATCH 0947/1051] soc: octeontx2: Fix checkpatch issues reported by
 4.20 script

Fix checkpatch issues reported by 4.20 script.
Along with that a trivial mbox macro change.

Change-Id: I52a30e91c8b7021c9c59e59c43f841ffc12e0bd5
Signed-off-by: Christina Jacob <cjacob@marvell.com>
Signed-off-by: Linu Cherian <linu.cherian@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/3487
Tested-by: Linu Cherian <Linu.Cherian@cavium.com>
Reviewed-by: Linu Cherian <Linu.Cherian@cavium.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/soc/marvell/octeontx2/cgx.c         |  4 +-
 drivers/soc/marvell/octeontx2/cgx.h         | 10 +--
 drivers/soc/marvell/octeontx2/common.h      |  4 +-
 drivers/soc/marvell/octeontx2/mbox.c        | 12 ++--
 drivers/soc/marvell/octeontx2/mbox.h        | 75 ++++++++++-----------
 drivers/soc/marvell/octeontx2/rvu.c         | 38 ++++++-----
 drivers/soc/marvell/octeontx2/rvu.h         | 37 +++++-----
 drivers/soc/marvell/octeontx2/rvu_debugfs.c | 54 ++++++++++-----
 drivers/soc/marvell/octeontx2/rvu_npa.c     | 16 ++---
 drivers/soc/marvell/octeontx2/rvu_reg.c     |  4 +-
 drivers/soc/marvell/octeontx2/rvu_reg.h     |  5 +-
 drivers/soc/marvell/octeontx2/rvu_struct.h  | 44 ++++++------
 12 files changed, 161 insertions(+), 142 deletions(-)

diff --git a/drivers/soc/marvell/octeontx2/cgx.c b/drivers/soc/marvell/octeontx2/cgx.c
index 051e27751f89..4375fd0a2e1a 100644
--- a/drivers/soc/marvell/octeontx2/cgx.c
+++ b/drivers/soc/marvell/octeontx2/cgx.c
@@ -570,7 +570,7 @@ static inline bool cgx_event_is_linkevent(u64 event)
 }
 
 static inline int cgx_fwi_get_mkex_prfl_sz(u64 *prfl_sz,
-					struct cgx *cgx)
+					   struct cgx *cgx)
 {
 	u64 req = 0;
 	u64 resp;
@@ -585,7 +585,7 @@ static inline int cgx_fwi_get_mkex_prfl_sz(u64 *prfl_sz,
 }
 
 static inline int cgx_fwi_get_mkex_prfl_addr(u64 *prfl_addr,
-					struct cgx *cgx)
+					     struct cgx *cgx)
 {
 	u64 req = 0;
 	u64 resp;
diff --git a/drivers/soc/marvell/octeontx2/cgx.h b/drivers/soc/marvell/octeontx2/cgx.h
index b0acc18be6d0..5bedf66db68c 100644
--- a/drivers/soc/marvell/octeontx2/cgx.h
+++ b/drivers/soc/marvell/octeontx2/cgx.h
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: GPL-2.0
-/* Marvell OcteonTx2 CGX driver
+/* SPDX-License-Identifier: GPL-2.0
+ * Marvell OcteonTx2 CGX driver
  *
  * Copyright (C) 2018 Marvell International Ltd.
  *
@@ -95,7 +95,7 @@ struct cgx_link_event {
  * @data:	data passed to callback function
  */
 struct cgx_event_cb {
-	int (*notify_link_chg)(struct cgx_link_event *, void *);
+	int (*notify_link_chg)(struct cgx_link_event *event, void *data);
 	void *data;
 };
 
@@ -117,8 +117,8 @@ void cgx_lmac_promisc_config(int cgx_id, int lmac_id, bool enable);
 void cgx_lmac_ptp_config(void *cgxd, int lmac_id, bool enable);
 void cgx_lmac_bp_config(void *cgxd, int lmac_id, bool enable);
 int cgx_lmac_internal_loopback(void *cgxd, int lmac_id, bool enable);
-int cgx_get_link_info(void *cgxd, int lmac_id, struct cgx_link_user_info
-			*linfo);
+int cgx_get_link_info(void *cgxd, int lmac_id,
+		      struct cgx_link_user_info *linfo);
 int cgx_lmac_linkup_start(void *cgxd);
 int cgx_get_mkex_prfl_info(u64 *addr, u64 *size);
 #endif /* CGX_H */
diff --git a/drivers/soc/marvell/octeontx2/common.h b/drivers/soc/marvell/octeontx2/common.h
index 87e412b18b81..4ab217e4eb5d 100644
--- a/drivers/soc/marvell/octeontx2/common.h
+++ b/drivers/soc/marvell/octeontx2/common.h
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: GPL-2.0
-/* Marvell OcteonTx2 RVU Admin Function driver
+/* SPDX-License-Identifier: GPL-2.0
+ * Marvell OcteonTx2 RVU Admin Function driver
  *
  * Copyright (C) 2018 Marvell International Ltd.
  *
diff --git a/drivers/soc/marvell/octeontx2/mbox.c b/drivers/soc/marvell/octeontx2/mbox.c
index e8090075c929..288e1918ee60 100644
--- a/drivers/soc/marvell/octeontx2/mbox.c
+++ b/drivers/soc/marvell/octeontx2/mbox.c
@@ -48,8 +48,8 @@ EXPORT_SYMBOL(otx2_mbox_destroy);
 int otx2_mbox_init(struct otx2_mbox *mbox, void *hwbase, struct pci_dev *pdev,
 		   void *reg_base, int direction, int ndevs)
 {
-	int devid;
 	struct otx2_mbox_dev *mdev;
+	int devid;
 
 	switch (direction) {
 	case MBOX_DIR_AFPF:
@@ -165,8 +165,10 @@ void otx2_mbox_msg_send(struct otx2_mbox *mbox, int devid)
 {
 	void *hw_mbase = mbox->hwbase + (devid * MBOX_SIZE);
 	struct otx2_mbox_dev *mdev = &mbox->dev[devid];
-	struct mbox_hdr *tx_hdr = hw_mbase  + mbox->tx_start;
-	struct mbox_hdr *rx_hdr = hw_mbase  + mbox->rx_start;
+	struct mbox_hdr *tx_hdr, *rx_hdr;
+
+	tx_hdr = hw_mbase + mbox->tx_start;
+	rx_hdr = hw_mbase + mbox->rx_start;
 
 	/* If bounce buffer is implemented copy mbox messages from
 	 * bounce buffer to hw mbox memory.
@@ -223,8 +225,8 @@ struct mbox_msghdr *otx2_mbox_alloc_msg_rsp(struct otx2_mbox *mbox, int devid,
 		mdev->num_msgs = 0;
 	mdev->num_msgs++;
 
-	msghdr = (struct mbox_msghdr *)(mdev->mbase + mbox->tx_start +
-					msgs_offset + mdev->msg_size);
+	msghdr = mdev->mbase + mbox->tx_start + msgs_offset + mdev->msg_size;
+
 	/* Clear the whole msg region */
 	memset(msghdr, 0, size);
 	/* Init message header with reset values */
diff --git a/drivers/soc/marvell/octeontx2/mbox.h b/drivers/soc/marvell/octeontx2/mbox.h
index 1eed17b71cf8..239d3fc26f8c 100644
--- a/drivers/soc/marvell/octeontx2/mbox.h
+++ b/drivers/soc/marvell/octeontx2/mbox.h
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: GPL-2.0
-/* Marvell OcteonTx2 RVU Admin Function driver
+/* SPDX-License-Identifier: GPL-2.0
+ * Marvell OcteonTx2 RVU Admin Function driver
  *
  * Copyright (C) 2018 Marvell International Ltd.
  *
@@ -75,7 +75,7 @@ struct otx2_mbox {
 
 /* Header which preceeds all mbox messages */
 struct mbox_hdr {
-	u64  msg_size;	/* Total msgs size embedded */
+	u64 msg_size;	/* Total msgs size embedded */
 	u16  num_msgs;   /* No of msgs embedded */
 };
 
@@ -116,7 +116,7 @@ static inline struct mbox_msghdr *otx2_mbox_alloc_msg(struct otx2_mbox *mbox,
 }
 
 /* Mailbox message types */
-#define MBOX_MSG_MASK	 			0xFFFF
+#define MBOX_MSG_MASK				0xFFFF
 #define MBOX_MSG_INVALID			0xFFFE
 #define MBOX_MSG_MAX				0xFFFF
 
@@ -133,15 +133,15 @@ M(PTP_OP,		0x007, ptp_op, ptp_req, ptp_rsp)		\
 M(CGX_START_RXTX,	0x200, cgx_start_rxtx, msg_req, msg_rsp)	\
 M(CGX_STOP_RXTX,	0x201, cgx_stop_rxtx, msg_req, msg_rsp)		\
 M(CGX_STATS,		0x202, cgx_stats, msg_req, cgx_stats_rsp)	\
-M(CGX_MAC_ADDR_SET,	0x203, cgx_mac_addr_set, cgx_mac_addr_set_or_get,\
+M(CGX_MAC_ADDR_SET,	0x203, cgx_mac_addr_set, cgx_mac_addr_set_or_get,    \
 				cgx_mac_addr_set_or_get)		\
-M(CGX_MAC_ADDR_GET,	0x204, cgx_mac_addr_get, cgx_mac_addr_set_or_get,\
+M(CGX_MAC_ADDR_GET,	0x204, cgx_mac_addr_get, cgx_mac_addr_set_or_get,    \
 				cgx_mac_addr_set_or_get)		\
 M(CGX_PROMISC_ENABLE,	0x205, cgx_promisc_enable, msg_req, msg_rsp)	\
 M(CGX_PROMISC_DISABLE,	0x206, cgx_promisc_disable, msg_req, msg_rsp)	\
 M(CGX_START_LINKEVENTS, 0x207, cgx_start_linkevents, msg_req, msg_rsp)	\
 M(CGX_STOP_LINKEVENTS,	0x208, cgx_stop_linkevents, msg_req, msg_rsp)	\
-M(CGX_GET_LINKINFO,	0x209, cgx_get_linkinfo, msg_req, cgx_link_info_msg)\
+M(CGX_GET_LINKINFO,	0x209, cgx_get_linkinfo, msg_req, cgx_link_info_msg) \
 M(CGX_INTLBK_ENABLE,	0x20A, cgx_intlbk_enable, msg_req, msg_rsp)	\
 M(CGX_INTLBK_DISABLE,	0x20B, cgx_intlbk_disable, msg_req, msg_rsp)	\
 M(CGX_PTP_RX_ENABLE,	0x20C, cgx_ptp_rx_enable, msg_req, msg_rsp)	\
@@ -150,7 +150,7 @@ M(CGX_PTP_RX_DISABLE,	0x20D, cgx_ptp_rx_disable, msg_req, msg_rsp)	\
 M(NPA_LF_ALLOC,		0x400, npa_lf_alloc,				\
 				npa_lf_alloc_req, npa_lf_alloc_rsp)	\
 M(NPA_LF_FREE,		0x401, npa_lf_free, msg_req, msg_rsp)		\
-M(NPA_AQ_ENQ,		0x402, npa_aq_enq, npa_aq_enq_req, npa_aq_enq_rsp)\
+M(NPA_AQ_ENQ,		0x402, npa_aq_enq, npa_aq_enq_req, npa_aq_enq_rsp)   \
 M(NPA_HWCTX_DISABLE,	0x403, npa_hwctx_disable, hwctx_disable_req, msg_rsp)\
 /* SSO/SSOW mbox IDs (range 0x600 - 0x7FF) */				\
 M(SSO_LF_ALLOC,		0x600, sso_lf_alloc,				\
@@ -187,21 +187,20 @@ M(CPT_SET_CRYPTO_GRP,	0xA03, cpt_set_crypto_grp,			\
 M(NPC_MCAM_ALLOC_ENTRY,	0x6000, npc_mcam_alloc_entry, npc_mcam_alloc_entry_req,\
 				npc_mcam_alloc_entry_rsp)		\
 M(NPC_MCAM_FREE_ENTRY,	0x6001, npc_mcam_free_entry,			\
-				npc_mcam_free_entry_req, msg_rsp)	\
+				 npc_mcam_free_entry_req, msg_rsp)	\
 M(NPC_MCAM_WRITE_ENTRY,	0x6002, npc_mcam_write_entry,			\
-				npc_mcam_write_entry_req, msg_rsp)	\
+				 npc_mcam_write_entry_req, msg_rsp)	\
 M(NPC_MCAM_ENA_ENTRY,   0x6003, npc_mcam_ena_entry,			\
 				 npc_mcam_ena_dis_entry_req, msg_rsp)	\
 M(NPC_MCAM_DIS_ENTRY,   0x6004, npc_mcam_dis_entry,			\
 				 npc_mcam_ena_dis_entry_req, msg_rsp)	\
-M(NPC_MCAM_SHIFT_ENTRY, 0x6005, npc_mcam_shift_entry,			\
-				 npc_mcam_shift_entry_req,		\
-				 npc_mcam_shift_entry_rsp)		\
+M(NPC_MCAM_SHIFT_ENTRY, 0x6005, npc_mcam_shift_entry, npc_mcam_shift_entry_req,\
+				npc_mcam_shift_entry_rsp)		\
 M(NPC_MCAM_ALLOC_COUNTER, 0x6006, npc_mcam_alloc_counter,		\
-				   npc_mcam_alloc_counter_req,		\
-				   npc_mcam_alloc_counter_rsp)		\
+					npc_mcam_alloc_counter_req,	\
+					npc_mcam_alloc_counter_rsp)	\
 M(NPC_MCAM_FREE_COUNTER,  0x6007, npc_mcam_free_counter,		\
-				   npc_mcam_oper_counter_req, msg_rsp)	\
+				    npc_mcam_oper_counter_req, msg_rsp)	\
 M(NPC_MCAM_UNMAP_COUNTER, 0x6008, npc_mcam_unmap_counter,		\
 				   npc_mcam_unmap_counter_req, msg_rsp)	\
 M(NPC_MCAM_CLEAR_COUNTER, 0x6009, npc_mcam_clear_counter,		\
@@ -209,49 +208,49 @@ M(NPC_MCAM_CLEAR_COUNTER, 0x6009, npc_mcam_clear_counter,		\
 M(NPC_MCAM_COUNTER_STATS, 0x600a, npc_mcam_counter_stats,		\
 				   npc_mcam_oper_counter_req,		\
 				   npc_mcam_oper_counter_rsp)		\
-M(NPC_MCAM_ALLOC_AND_WRITE_ENTRY, 0x600b, npc_mcam_alloc_and_write_entry,    \
-					  npc_mcam_alloc_and_write_entry_req,\
-					  npc_mcam_alloc_and_write_entry_rsp)\
+M(NPC_MCAM_ALLOC_AND_WRITE_ENTRY, 0x600b, npc_mcam_alloc_and_write_entry,      \
+					  npc_mcam_alloc_and_write_entry_req,  \
+					  npc_mcam_alloc_and_write_entry_rsp)  \
 M(NPC_GET_KEX_CFG,	  0x600c, npc_get_kex_cfg,			\
 				   msg_req, npc_get_kex_cfg_rsp)	\
 /* NIX mbox IDs (range 0x8000 - 0xFFFF) */				\
 M(NIX_LF_ALLOC,		0x8000, nix_lf_alloc,				\
 				 nix_lf_alloc_req, nix_lf_alloc_rsp)	\
 M(NIX_LF_FREE,		0x8001, nix_lf_free, msg_req, msg_rsp)		\
-M(NIX_AQ_ENQ,		0x8002, nix_aq_enq,				\
-				 nix_aq_enq_req, nix_aq_enq_rsp)	\
+M(NIX_AQ_ENQ,		0x8002, nix_aq_enq, nix_aq_enq_req, nix_aq_enq_rsp)  \
 M(NIX_HWCTX_DISABLE,	0x8003, nix_hwctx_disable,			\
 				 hwctx_disable_req, msg_rsp)		\
 M(NIX_TXSCH_ALLOC,	0x8004, nix_txsch_alloc,			\
-				 nix_txsch_alloc_req, nix_txsch_alloc_rsp)  \
-M(NIX_TXSCH_FREE,	0x8005, nix_txsch_free, nix_txsch_free_req, msg_rsp)\
-M(NIX_TXSCHQ_CFG,	0x8006, nix_txschq_cfg, nix_txschq_config, msg_rsp) \
+				 nix_txsch_alloc_req, nix_txsch_alloc_rsp)   \
+M(NIX_TXSCH_FREE,	0x8005, nix_txsch_free, nix_txsch_free_req, msg_rsp) \
+M(NIX_TXSCHQ_CFG,	0x8006, nix_txschq_cfg, nix_txschq_config, msg_rsp)  \
 M(NIX_STATS_RST,	0x8007, nix_stats_rst, msg_req, msg_rsp)	\
 M(NIX_VTAG_CFG,		0x8008, nix_vtag_cfg, nix_vtag_config, msg_rsp)	\
 M(NIX_RSS_FLOWKEY_CFG,  0x8009, nix_rss_flowkey_cfg,			\
-				 nix_rss_flowkey_cfg, nix_rss_flowkey_cfg_rsp)\
-M(NIX_SET_MAC_ADDR,	0x800a, nix_set_mac_addr,			\
-				 nix_set_mac_addr, msg_rsp)		\
+				 nix_rss_flowkey_cfg,			\
+				 nix_rss_flowkey_cfg_rsp)		\
+M(NIX_SET_MAC_ADDR,	0x800a, nix_set_mac_addr, nix_set_mac_addr, msg_rsp) \
 M(NIX_SET_RX_MODE,	0x800b, nix_set_rx_mode, nix_rx_mode, msg_rsp)	\
 M(NIX_SET_HW_FRS,	0x800c, nix_set_hw_frs, nix_frs_cfg, msg_rsp)	\
 M(NIX_LF_START_RX,	0x800d, nix_lf_start_rx, msg_req, msg_rsp)	\
 M(NIX_LF_STOP_RX,	0x800e, nix_lf_stop_rx, msg_req, msg_rsp)	\
 M(NIX_MARK_FORMAT_CFG,	0x800f, nix_mark_format_cfg,			\
-				 nix_mark_format_cfg, nix_mark_format_cfg_rsp)\
+				 nix_mark_format_cfg,			\
+				 nix_mark_format_cfg_rsp)		\
 M(NIX_SET_RX_CFG,	0x8010, nix_set_rx_cfg, nix_rx_cfg, msg_rsp)	\
-M(NIX_LSO_FORMAT_CFG,   0x8011, nix_lso_format_cfg,			\
-				 nix_lso_format_cfg, nix_lso_format_cfg_rsp)\
+M(NIX_LSO_FORMAT_CFG,	0x8011, nix_lso_format_cfg,			\
+				 nix_lso_format_cfg,			\
+				 nix_lso_format_cfg_rsp)		\
 M(NIX_RXVLAN_ALLOC,	0x8012, nix_rxvlan_alloc, msg_req, msg_rsp)	\
 M(NIX_LF_PTP_TX_ENABLE, 0x8013, nix_lf_ptp_tx_enable, msg_req, msg_rsp)	\
 M(NIX_LF_PTP_TX_DISABLE, 0x8014, nix_lf_ptp_tx_disable, msg_req, msg_rsp)
 
 /* Messages initiated by AF (range 0xC00 - 0xDFF) */
 #define MBOX_UP_CGX_MESSAGES						\
-M(CGX_LINK_EVENT,	0xC00, cgx_link_event,				\
-				cgx_link_info_msg, msg_rsp)
+M(CGX_LINK_EVENT,	0xC00, cgx_link_event, cgx_link_info_msg, msg_rsp)
 
 enum {
-#define M(_name, _id, _fn_name, _1, _2) MBOX_MSG_ ## _name = _id,
+#define M(_name, _id, _1, _2, _3) MBOX_MSG_ ## _name = _id,
 MBOX_MESSAGES
 MBOX_UP_CGX_MESSAGES
 #undef M
@@ -355,11 +354,11 @@ struct msix_offset_rsp {
 /* CGX mbox message formats */
 
 struct cgx_stats_rsp {
-	 struct mbox_msghdr hdr;
+	struct mbox_msghdr hdr;
 #define CGX_RX_STATS_COUNT	13
 #define CGX_TX_STATS_COUNT	18
-	 u64 rx_stats[CGX_RX_STATS_COUNT];
-	 u64 tx_stats[CGX_TX_STATS_COUNT];
+	u64 rx_stats[CGX_RX_STATS_COUNT];
+	u64 tx_stats[CGX_TX_STATS_COUNT];
 };
 
 /* Structure for requesting the operation for
@@ -624,13 +623,13 @@ struct nix_vtag_config {
 struct nix_rss_flowkey_cfg {
 	struct mbox_msghdr hdr;
 	int	mcam_index;  /* MCAM entry index to modify */
-	u32	flowkey_cfg; /* Flowkey types selected */
 #define NIX_FLOW_KEY_TYPE_PORT	BIT(0)
 #define NIX_FLOW_KEY_TYPE_IPV4	BIT(1)
 #define NIX_FLOW_KEY_TYPE_IPV6	BIT(2)
 #define NIX_FLOW_KEY_TYPE_TCP	BIT(3)
 #define NIX_FLOW_KEY_TYPE_UDP	BIT(4)
 #define NIX_FLOW_KEY_TYPE_SCTP	BIT(5)
+	u32	flowkey_cfg; /* Flowkey types selected */
 	u8	group;       /* RSS context or group */
 };
 
@@ -670,8 +669,8 @@ struct nix_rx_cfg {
 	struct mbox_msghdr hdr;
 #define NIX_RX_OL3_VERIFY   BIT(0)
 #define NIX_RX_OL4_VERIFY   BIT(1)
+	u8 len_verify; /* Outer L3/L4 len check */
 #define NIX_RX_CSUM_OL4_VERIFY  BIT(0)
-	u8 len_verify; /* outer L3/L4 len check */
 	u8 csum_verify; /* Outer L4 checksum verification */
 };
 
diff --git a/drivers/soc/marvell/octeontx2/rvu.c b/drivers/soc/marvell/octeontx2/rvu.c
index b15d2f2dd761..8f92945bcafc 100644
--- a/drivers/soc/marvell/octeontx2/rvu.c
+++ b/drivers/soc/marvell/octeontx2/rvu.c
@@ -164,8 +164,8 @@ int rvu_alloc_bitmap(struct rsrc_bmap *rsrc)
 /* Get block LF's HW index from a PF_FUNC's block slot number */
 int rvu_get_lf(struct rvu *rvu, struct rvu_block *block, u16 pcifunc, u16 slot)
 {
-	int lf;
 	u16 match = 0;
+	int lf;
 
 	mutex_lock(&rvu->rsrc_lock);
 	for (lf = 0; lf < block->lf.max; lf++) {
@@ -377,7 +377,7 @@ bool is_block_implemented(struct rvu_hwinfo *hw, int blkaddr)
 {
 	struct rvu_block *block;
 
-	if ((blkaddr < BLKADDR_RVUM) || (blkaddr >= BLK_COUNT))
+	if (blkaddr < BLKADDR_RVUM || blkaddr >= BLK_COUNT)
 		return false;
 
 	block = &hw->block[blkaddr];
@@ -440,6 +440,7 @@ static void rvu_reset_all_blocks(struct rvu *rvu)
 	rvu_block_reset(rvu, BLKADDR_NDC_NIX0_RX, NDC_AF_BLK_RST);
 	rvu_block_reset(rvu, BLKADDR_NDC_NIX0_TX, NDC_AF_BLK_RST);
 	rvu_block_reset(rvu, BLKADDR_NDC_NPA0, NDC_AF_BLK_RST);
+
 }
 
 static void rvu_scan_block(struct rvu *rvu, struct rvu_block *block)
@@ -592,6 +593,7 @@ static int rvu_setup_msix_resources(struct rvu *rvu)
 	iova = dma_map_resource(rvu->dev, phy_addr,
 				max_msix * PCI_MSIX_ENTRY_SIZE,
 				DMA_BIDIRECTIONAL, 0);
+
 	if (dma_mapping_error(rvu->dev, iova))
 		return -ENOMEM;
 
@@ -1017,8 +1019,8 @@ static int rvu_detach_rsrcs(struct rvu *rvu, struct rsrc_detach *detach,
 			    u16 pcifunc)
 {
 	struct rvu_hwinfo *hw = rvu->hw;
-	struct rvu_block *block;
 	bool detach_all = true;
+	struct rvu_block *block;
 	int blkid;
 
 	mutex_lock(&rvu->rsrc_lock);
@@ -1035,7 +1037,7 @@ static int rvu_detach_rsrcs(struct rvu *rvu, struct rsrc_detach *detach,
 		if (!block->lf.bmap)
 			continue;
 		if (!detach_all && detach) {
-			if ((blkid == BLKADDR_NPA) && !detach->npalf)
+			if (blkid == BLKADDR_NPA && !detach->npalf)
 				continue;
 			else if ((blkid == BLKADDR_NIX0) && !detach->nixlf)
 				continue;
@@ -1152,7 +1154,7 @@ static int rvu_check_rsrc_availability(struct rvu *rvu,
 		mappedlfs = rvu_get_rsrc_mapcount(pfvf, block->type);
 		free_lfs = rvu_rsrc_free_count(&block->lf);
 		/* Check if additional resources are available */
-		if ((req->sso > mappedlfs) &&
+		if (req->sso > mappedlfs &&
 		    ((req->sso - mappedlfs) > free_lfs))
 			goto fail;
 	}
@@ -1167,7 +1169,7 @@ static int rvu_check_rsrc_availability(struct rvu *rvu,
 		}
 		mappedlfs = rvu_get_rsrc_mapcount(pfvf, block->type);
 		free_lfs = rvu_rsrc_free_count(&block->lf);
-		if ((req->ssow > mappedlfs) &&
+		if (req->ssow > mappedlfs &&
 		    ((req->ssow - mappedlfs) > free_lfs))
 			goto fail;
 	}
@@ -1182,7 +1184,7 @@ static int rvu_check_rsrc_availability(struct rvu *rvu,
 		}
 		mappedlfs = rvu_get_rsrc_mapcount(pfvf, block->type);
 		free_lfs = rvu_rsrc_free_count(&block->lf);
-		if ((req->timlfs > mappedlfs) &&
+		if (req->timlfs > mappedlfs &&
 		    ((req->timlfs - mappedlfs) > free_lfs))
 			goto fail;
 	}
@@ -1197,7 +1199,7 @@ static int rvu_check_rsrc_availability(struct rvu *rvu,
 		}
 		mappedlfs = rvu_get_rsrc_mapcount(pfvf, block->type);
 		free_lfs = rvu_rsrc_free_count(&block->lf);
-		if ((req->cptlfs > mappedlfs) &&
+		if (req->cptlfs > mappedlfs &&
 		    ((req->cptlfs - mappedlfs) > free_lfs))
 			goto fail;
 	}
@@ -1393,7 +1395,7 @@ static int rvu_mbox_handler_vf_flr(struct rvu *rvu, struct msg_req *req,
 			 RVU_PRIV_PFX_CFG(rvu_get_pf(pcifunc)));
 	numvfs = (cfg >> 12) & 0xFF;
 
-	if (vf && (vf <= numvfs))
+	if (vf && vf <= numvfs)
 		__rvu_flr_handler(rvu, pcifunc);
 	else
 		return RVU_INVALID_VF_ID;
@@ -1434,8 +1436,8 @@ static int rvu_process_mbox_msg(struct otx2_mbox *mbox, int devid,
 		}							\
 									\
 		err = rvu_mbox_handler_ ## _fn_name(rvu,		\
-						 (struct _req_type *)req, \
-						 rsp);			\
+						    (struct _req_type *)req, \
+						    rsp);		\
 		if (rsp && err)						\
 			rsp->hdr.rc = err;				\
 									\
@@ -1477,14 +1479,14 @@ static void __rvu_mbox_handler(struct rvu_work *mwork, int type)
 	mdev = &mbox->dev[devid];
 
 	/* Process received mbox messages */
-	req_hdr = (struct mbox_hdr *)(mdev->mbase + mbox->rx_start);
+	req_hdr = mdev->mbase + mbox->rx_start;
 	if (req_hdr->num_msgs == 0)
 		return;
 
 	offset = mbox->rx_start + ALIGN(sizeof(*req_hdr), MBOX_MSG_ALIGN);
 
 	for (id = 0; id < req_hdr->num_msgs; id++) {
-		msg = (struct mbox_msghdr *)(mdev->mbase + offset);
+		msg = mdev->mbase + offset;
 
 		/* Set which PF/VF sent this message based on mbox IRQ */
 		switch (type) {
@@ -1560,7 +1562,7 @@ static void __rvu_mbox_up_handler(struct rvu_work *mwork, int type)
 	mbox = &mw->mbox_up;
 	mdev = &mbox->dev[devid];
 
-	rsp_hdr = (struct mbox_hdr *)(mdev->mbase + mbox->rx_start);
+	rsp_hdr = mdev->mbase + mbox->rx_start;
 	if (rsp_hdr->num_msgs == 0) {
 		dev_warn(rvu->dev, "mbox up handler: num_msgs = 0\n");
 		return;
@@ -1569,7 +1571,7 @@ static void __rvu_mbox_up_handler(struct rvu_work *mwork, int type)
 	offset = mbox->rx_start + ALIGN(sizeof(*rsp_hdr), MBOX_MSG_ALIGN);
 
 	for (id = 0; id < rsp_hdr->num_msgs; id++) {
-		msg = (struct mbox_msghdr *)(mdev->mbase + offset);
+		msg = mdev->mbase + offset;
 
 		if (msg->id >= MBOX_MSG_MAX) {
 			dev_err(rvu->dev,
@@ -1734,13 +1736,13 @@ static void rvu_queue_work(struct mbox_wq_info *mw, int first,
 
 		mbox = &mw->mbox;
 		mdev = &mbox->dev[i];
-		hdr = (struct mbox_hdr *)(mdev->mbase + mbox->rx_start);
+		hdr = mdev->mbase + mbox->rx_start;
 		if (hdr->num_msgs)
 			queue_work(mw->mbox_wq, &mw->mbox_wrk[i].work);
 
 		mbox = &mw->mbox_up;
 		mdev = &mbox->dev[i];
-		hdr = (struct mbox_hdr *)(mdev->mbase + mbox->rx_start);
+		hdr = mdev->mbase + mbox->rx_start;
 		if (hdr->num_msgs)
 			queue_work(mw->mbox_wq, &mw->mbox_wrk_up[i].work);
 	}
@@ -2338,7 +2340,7 @@ static int rvu_flr_init(struct rvu *rvu)
 	}
 
 	rvu->flr_wq = alloc_workqueue("rvu_afpf_flr",
-				       WQ_UNBOUND | WQ_HIGHPRI | WQ_MEM_RECLAIM,
+				      WQ_UNBOUND | WQ_HIGHPRI | WQ_MEM_RECLAIM,
 				       1);
 	if (!rvu->flr_wq)
 		return -ENOMEM;
diff --git a/drivers/soc/marvell/octeontx2/rvu.h b/drivers/soc/marvell/octeontx2/rvu.h
index 18d331ef4732..84f6c8e6b2f3 100644
--- a/drivers/soc/marvell/octeontx2/rvu.h
+++ b/drivers/soc/marvell/octeontx2/rvu.h
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: GPL-2.0
-/* Marvell OcteonTx2 RVU Admin Function driver
+/* SPDX-License-Identifier: GPL-2.0
+ * Marvell OcteonTx2 RVU Admin Function driver
  *
  * Copyright (C) 2018 Marvell International Ltd.
  *
@@ -17,12 +17,12 @@
 #include "mbox.h"
 #include "rvu_validation.h"
 
-/* Subsystem Device ID */
-#define PCI_SUBSYS_DEVID_96XX			0xB200
-
 /* PCI device IDs */
 #define	PCI_DEVID_OCTEONTX2_RVU_AF		0xA065
 
+/* Subsystem Device ID */
+#define PCI_SUBSYS_DEVID_96XX                  0xB200
+
 /* PCI BAR nos */
 #define	PCI_AF_REG_BAR_NUM			0
 #define	PCI_PF_REG_BAR_NUM			2
@@ -191,11 +191,11 @@ struct rvu_pfvf {
 struct nix_txsch {
 	struct rsrc_bmap schq;
 	u8   lvl;
+#define NIX_TXSCHQ_TL1_CFG_DONE       BIT_ULL(0)
+#define TXSCH_MAP_FUNC(__pfvf_map)    ((__pfvf_map) & 0xFFFF)
+#define TXSCH_MAP_FLAGS(__pfvf_map)   ((__pfvf_map) >> 16)
+#define TXSCH_MAP(__func, __flags)    (((__func) & 0xFFFF) | ((__flags) << 16))
 	u32  *pfvf_map;
-#define NIX_TXSCHQ_TL1_CFG_DONE		BIT_ULL(0)
-#define TXSCH_MAP_FUNC(__pfvf_map)	(__pfvf_map & 0xFFFF)
-#define TXSCH_MAP_FLAGS(__pfvf_map)	(__pfvf_map >> 16)
-#define TXSCH_MAP(__func, __flags)	((__func & 0xFFFF) | (__flags << 16))
 };
 
 struct nix_mark_format {
@@ -510,7 +510,8 @@ int rvu_mbox_handler_nix_txsch_free(struct rvu *rvu,
 				    struct nix_txsch_free_req *req,
 				    struct msg_rsp *rsp);
 int rvu_mbox_handler_nix_txschq_cfg(struct rvu *rvu,
-			struct nix_txschq_config *req, struct msg_rsp *rsp);
+				    struct nix_txschq_config *req,
+				    struct msg_rsp *rsp);
 int rvu_mbox_handler_nix_stats_rst(struct rvu *rvu, struct msg_req *req,
 				   struct msg_rsp *rsp);
 int rvu_mbox_handler_nix_vtag_cfg(struct rvu *rvu,
@@ -529,14 +530,14 @@ int rvu_mbox_handler_nix_set_rx_mode(struct rvu *rvu, struct nix_rx_mode *req,
 int rvu_mbox_handler_nix_set_hw_frs(struct rvu *rvu, struct nix_frs_cfg *req,
 				    struct msg_rsp *rsp);
 int rvu_mbox_handler_nix_lf_start_rx(struct rvu *rvu, struct msg_req *req,
-				      struct msg_rsp *rsp);
-int rvu_mbox_handler_nix_lf_stop_rx(struct rvu *rvu, struct msg_req *req,
 				     struct msg_rsp *rsp);
+int rvu_mbox_handler_nix_lf_stop_rx(struct rvu *rvu, struct msg_req *req,
+				    struct msg_rsp *rsp);
 int rvu_mbox_handler_nix_mark_format_cfg(struct rvu *rvu,
 					 struct nix_mark_format_cfg  *req,
 					 struct nix_mark_format_cfg_rsp *rsp);
 int rvu_mbox_handler_nix_set_rx_cfg(struct rvu *rvu, struct nix_rx_cfg *req,
-				struct msg_rsp *rsp);
+				    struct msg_rsp *rsp);
 int rvu_mbox_handler_nix_lso_format_cfg(struct rvu *rvu,
 					struct nix_lso_format_cfg *req,
 					struct nix_lso_format_cfg_rsp *rsp);
@@ -568,9 +569,11 @@ void rvu_npc_enable_default_entries(struct rvu *rvu, u16 pcifunc, int nixlf);
 void rvu_npc_update_flowkey_alg_idx(struct rvu *rvu, u16 pcifunc, int nixlf,
 				    int group, int alg_idx, int mcam_index);
 void rvu_npc_get_mcam_entry_alloc_info(struct rvu *rvu, u16 pcifunc,
-				int blkaddr, int *alloc_cnt, int *enable_cnt);
+				       int blkaddr, int *alloc_cnt,
+				       int *enable_cnt);
 void rvu_npc_get_mcam_counter_alloc_info(struct rvu *rvu, u16 pcifunc,
-				int blkaddr, int *alloc_cnt, int *enable_cnt);
+					 int blkaddr, int *alloc_cnt,
+					 int *enable_cnt);
 int rvu_mbox_handler_npc_mcam_alloc_entry(struct rvu *rvu,
 					  struct npc_mcam_alloc_entry_req *req,
 					  struct npc_mcam_alloc_entry_rsp *rsp);
@@ -587,8 +590,8 @@ int rvu_mbox_handler_npc_mcam_dis_entry(struct rvu *rvu,
 					struct npc_mcam_ena_dis_entry_req *req,
 					struct msg_rsp *rsp);
 int rvu_mbox_handler_npc_mcam_shift_entry(struct rvu *rvu,
-			struct npc_mcam_shift_entry_req *req,
-			struct npc_mcam_shift_entry_rsp *rsp);
+					  struct npc_mcam_shift_entry_req *req,
+					  struct npc_mcam_shift_entry_rsp *rsp);
 int rvu_mbox_handler_npc_mcam_alloc_counter(struct rvu *rvu,
 				struct npc_mcam_alloc_counter_req *req,
 				struct npc_mcam_alloc_counter_rsp *rsp);
diff --git a/drivers/soc/marvell/octeontx2/rvu_debugfs.c b/drivers/soc/marvell/octeontx2/rvu_debugfs.c
index e6e189087831..cc2aabe55cb5 100644
--- a/drivers/soc/marvell/octeontx2/rvu_debugfs.c
+++ b/drivers/soc/marvell/octeontx2/rvu_debugfs.c
@@ -219,7 +219,7 @@ static ssize_t rvu_dbg_npa_qsize_display(struct file *filp,
 	if (cmd_buf)
 		ret = -EINVAL;
 
-	if (!strncmp(subtoken, "help", 4) || (ret < 0)) {
+	if (!strncmp(subtoken, "help", 4) || ret < 0) {
 		pr_info("Use echo <npalf > qsize\n");
 		goto npa_qsize_display_done;
 	}
@@ -457,7 +457,7 @@ static int parse_cmd_buffer_ctx(char *cmd_buf, size_t *count,
 	subtoken = strsep(&cmd_buf, " ");
 	if (subtoken && strcmp(subtoken, "all") == 0) {
 		*all = true;
-	} else{
+	} else {
 		ret = subtoken ? kstrtoint(subtoken, 10, id) : -EINVAL;
 		if (ret < 0)
 			return ret;
@@ -495,6 +495,7 @@ static ssize_t rvu_dbg_npa_ctx_display(struct file *filp,
 	kfree(cmd_buf);
 	return count;
 }
+
 RVU_DEBUG_FOPS(npa_qsize, NULL, npa_qsize_display);
 
 static ssize_t rvu_dbg_npa_aura_ctx_display(struct file *filp,
@@ -504,6 +505,7 @@ static ssize_t rvu_dbg_npa_aura_ctx_display(struct file *filp,
 	return  rvu_dbg_npa_ctx_display(filp, buffer, count, ppos,
 					NPA_AQ_CTYPE_AURA);
 }
+
 RVU_DEBUG_FOPS(npa_aura_ctx,  NULL, npa_aura_ctx_display);
 
 static ssize_t rvu_dbg_npa_pool_ctx_display(struct file *filp,
@@ -513,6 +515,7 @@ static ssize_t rvu_dbg_npa_pool_ctx_display(struct file *filp,
 	return  rvu_dbg_npa_ctx_display(filp, buffer, count, ppos,
 					NPA_AQ_CTYPE_POOL);
 }
+
 RVU_DEBUG_FOPS(npa_pool_ctx, NULL, npa_pool_ctx_display);
 
 static void ndc_cache_stats(struct rvu *rvu, int blk_addr,
@@ -527,11 +530,11 @@ static void ndc_cache_stats(struct rvu *rvu, int blk_addr,
 		lat = rvu_read64(rvu, blk_addr, NDC_AF_PORTX_RTX_RWX_LAT_PC
 						(port, ctype, transaction));
 		out_req = rvu_read64(rvu, blk_addr,
-				     NDC_AF_PORTX_RTX_RWX_OSTDN_PC(port, ctype,
-								  transaction));
+				     NDC_AF_PORTX_RTX_RWX_OSTDN_PC
+				     (port, ctype, transaction));
 		cant_alloc = rvu_read64(rvu, blk_addr,
-					NDC_AF_PORTX_RTX_CANT_ALLOC_PC(port,
-							       transaction));
+					NDC_AF_PORTX_RTX_CANT_ALLOC_PC
+					(port, transaction));
 		pr_info("\nPort:%d\n", port);
 		pr_info("\tTotal Requests:\t\t%lld\n", req);
 		pr_info("\tTotal Time Taken:\t%lld cycles\n", lat);
@@ -561,6 +564,7 @@ static ssize_t rvu_dbg_npa_ndc_cache_display(struct file *filp,
 	return ndc_blk_cache_stats(filp->private_data, NPA0_U,
 				   BLKADDR_NDC_NPA0);
 }
+
 RVU_DEBUG_FOPS(npa_ndc_cache, npa_ndc_cache_display, NULL);
 
 static int ndc_blk_hits_miss_stats(struct rvu *rvu, int idx, int blk_addr)
@@ -570,10 +574,12 @@ static int ndc_blk_hits_miss_stats(struct rvu *rvu, int idx, int blk_addr)
 	max_bank = NDC_MAX_BANK(rvu, blk_addr);
 	for (bank = 0; bank < max_bank; bank++) {
 		pr_info("BANK:%d\n", bank);
-		pr_info("\tHits:\t%lld\n", (u64)rvu_read64(rvu, blk_addr,
-						NDC_AF_BANKX_HIT_PC(bank)));
-		pr_info("\tMiss:\t%lld\n", (u64)rvu_read64(rvu, blk_addr,
-						NDC_AF_BANKX_MISS_PC(bank)));
+		pr_info("\tHits:\t%lld\n",
+			(u64)rvu_read64(rvu, blk_addr,
+					NDC_AF_BANKX_HIT_PC(bank)));
+		pr_info("\tMiss:\t%lld\n",
+			(u64)rvu_read64(rvu, blk_addr,
+					NDC_AF_BANKX_MISS_PC(bank)));
 	}
 	return 0;
 }
@@ -585,6 +591,7 @@ static ssize_t rvu_dbg_npa_ndc_hits_miss_display(struct file *filp,
 	return ndc_blk_hits_miss_stats(filp->private_data,
 				      NPA0_U, BLKADDR_NDC_NPA0);
 }
+
 RVU_DEBUG_FOPS(npa_ndc_hits_miss, npa_ndc_hits_miss_display, NULL);
 
 static void rvu_dbg_npa_init(struct rvu *rvu)
@@ -679,13 +686,14 @@ static ssize_t rvu_dbg_cgx_stat_display(struct file *filp,
 		return count;
 
 	err = kstrtoint(buf + 1, 10, &lmac_id);
-	if (err >= 0) {
+	if (!err) {
 		err = cgx_print_stats(data, lmac_id);
 		if (err)
 			return err;
 	}
 	return err;
 }
+
 RVU_DEBUG_FOPS(cgx_stat, cgx_stat_display, NULL);
 
 static void rvu_dbg_cgx_init(struct rvu *rvu)
@@ -705,7 +713,7 @@ static void rvu_dbg_cgx_init(struct rvu *rvu)
 		/* cgx debugfs dir */
 		sprintf(dname, "cgx%d", i);
 		rvu->rvu_dbg.cgx = debugfs_create_dir(dname,
-					rvu->rvu_dbg.cgx_root);
+						      rvu->rvu_dbg.cgx_root);
 		for (lmac_id = 0; lmac_id < cgx_get_lmac_cnt(cgx); lmac_id++) {
 			/* lmac debugfs dir */
 			sprintf(dname, "lmac%d", lmac_id);
@@ -908,13 +916,13 @@ static void read_nix_ctx(struct rvu *rvu, bool all, int nixlf,
 	}
 
 	pfvf = rvu_get_pfvf(rvu, pcifunc);
-	if ((ctype == NIX_AQ_CTYPE_SQ) && (!pfvf->sq_ctx)) {
+	if (ctype == NIX_AQ_CTYPE_SQ && !pfvf->sq_ctx) {
 		pr_info("SQ context is not initialized\n");
 		return;
-	} else if ((ctype == NIX_AQ_CTYPE_RQ) && (!pfvf->rq_ctx)) {
+	} else if (ctype == NIX_AQ_CTYPE_RQ && !pfvf->rq_ctx) {
 		pr_info("RQ context is not initialized\n");
 		return;
-	} else if ((ctype == NIX_AQ_CTYPE_CQ) && (!pfvf->cq_ctx)) {
+	} else if (ctype == NIX_AQ_CTYPE_CQ && !pfvf->cq_ctx) {
 		pr_info("CQ context is not initialized\n");
 		return;
 	}
@@ -1004,6 +1012,7 @@ static ssize_t rvu_dbg_nix_sq_ctx_display(struct file *filp,
 	return  rvu_dbg_nix_ctx_display(filp, buffer,
 					count, ppos, NIX_AQ_CTYPE_SQ);
 }
+
 RVU_DEBUG_FOPS(nix_sq_ctx, NULL, nix_sq_ctx_display);
 
 static ssize_t rvu_dbg_nix_rq_ctx_display(struct file *filp,
@@ -1013,15 +1022,17 @@ static ssize_t rvu_dbg_nix_rq_ctx_display(struct file *filp,
 	return  rvu_dbg_nix_ctx_display(filp, buffer,
 					count, ppos, NIX_AQ_CTYPE_RQ);
 }
+
 RVU_DEBUG_FOPS(nix_rq_ctx, NULL, nix_rq_ctx_display);
 
 static ssize_t rvu_dbg_nix_cq_ctx_display(struct file *filp,
-					   const char __user *buffer,
-					    size_t count, loff_t *ppos)
+					  const char __user *buffer,
+					  size_t count, loff_t *ppos)
 {
 	return  rvu_dbg_nix_ctx_display(filp, buffer,
 					count, ppos, NIX_AQ_CTYPE_CQ);
 }
+
 RVU_DEBUG_FOPS(nix_cq_ctx, NULL, nix_cq_ctx_display);
 
 static ssize_t rvu_dbg_nix_ndc_rx_cache_display(struct file *filp,
@@ -1031,6 +1042,7 @@ static ssize_t rvu_dbg_nix_ndc_rx_cache_display(struct file *filp,
 	return ndc_blk_cache_stats(filp->private_data, NIX0_RX,
 				   BLKADDR_NDC_NIX0_RX);
 }
+
 RVU_DEBUG_FOPS(nix_ndc_rx_cache, nix_ndc_rx_cache_display, NULL);
 
 static ssize_t rvu_dbg_nix_ndc_tx_cache_display(struct file *filp,
@@ -1040,6 +1052,7 @@ static ssize_t rvu_dbg_nix_ndc_tx_cache_display(struct file *filp,
 	return ndc_blk_cache_stats(filp->private_data, NIX0_TX,
 				   BLKADDR_NDC_NIX0_TX);
 }
+
 RVU_DEBUG_FOPS(nix_ndc_tx_cache, nix_ndc_tx_cache_display, NULL);
 
 static ssize_t rvu_dbg_nix_ndc_rx_hits_miss_display(struct file *filp,
@@ -1049,6 +1062,7 @@ static ssize_t rvu_dbg_nix_ndc_rx_hits_miss_display(struct file *filp,
 	return ndc_blk_hits_miss_stats(filp->private_data,
 				      NPA0_U, BLKADDR_NDC_NIX0_RX);
 }
+
 RVU_DEBUG_FOPS(nix_ndc_rx_hits_miss, nix_ndc_rx_hits_miss_display, NULL);
 
 static ssize_t rvu_dbg_nix_ndc_tx_hits_miss_display(struct file *filp,
@@ -1058,6 +1072,7 @@ static ssize_t rvu_dbg_nix_ndc_tx_hits_miss_display(struct file *filp,
 	return ndc_blk_hits_miss_stats(filp->private_data,
 				      NPA0_U, BLKADDR_NDC_NIX0_TX);
 }
+
 RVU_DEBUG_FOPS(nix_ndc_tx_hits_miss, nix_ndc_tx_hits_miss_display, NULL);
 
 static void rvu_dbg_nix_init(struct rvu *rvu)
@@ -1146,7 +1161,8 @@ static inline void rvu_print_npc_mcam_info(struct rvu *rvu,
 }
 
 static ssize_t rvu_dbg_npc_mcam_info_display(struct file *filp,
-				char __user *buffer, size_t count, loff_t *ppos)
+					     char __user *buffer,
+					     size_t count, loff_t *ppos)
 {
 	struct rvu *rvu = filp->private_data;
 	int pf, vf, numvfs, blkaddr;
@@ -1206,6 +1222,7 @@ static ssize_t rvu_dbg_npc_mcam_info_display(struct file *filp,
 	mutex_unlock(&mcam->lock);
 	return 0;
 }
+
 RVU_DEBUG_FOPS(npc_mcam_info, npc_mcam_info_display, NULL);
 
 static ssize_t rvu_dbg_npc_rx_miss_stats_display(struct file *filp,
@@ -1229,6 +1246,7 @@ static ssize_t rvu_dbg_npc_rx_miss_stats_display(struct file *filp,
 
 	return 0;
 }
+
 RVU_DEBUG_FOPS(npc_rx_miss_act, npc_rx_miss_stats_display, NULL);
 
 static void rvu_dbg_npc_init(struct rvu *rvu)
diff --git a/drivers/soc/marvell/octeontx2/rvu_npa.c b/drivers/soc/marvell/octeontx2/rvu_npa.c
index e569ba1a4b57..e702a1159de9 100644
--- a/drivers/soc/marvell/octeontx2/rvu_npa.c
+++ b/drivers/soc/marvell/octeontx2/rvu_npa.c
@@ -66,11 +66,11 @@ int rvu_npa_aq_enq_inst(struct rvu *rvu, struct npa_aq_enq_req *req,
 	bool ena;
 
 	pfvf = rvu_get_pfvf(rvu, pcifunc);
-	if (!pfvf->aura_ctx || (req->aura_id >= pfvf->aura_ctx->qsize))
+	if (!pfvf->aura_ctx || req->aura_id >= pfvf->aura_ctx->qsize)
 		return NPA_AF_ERR_AQ_ENQUEUE;
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NPA, pcifunc);
-	if (!pfvf->npalf || (blkaddr < 0))
+	if (!pfvf->npalf || blkaddr < 0)
 		return NPA_AF_ERR_AF_LF_INVALID;
 
 	block = &hw->block[blkaddr];
@@ -285,13 +285,13 @@ int rvu_mbox_handler_npa_lf_alloc(struct rvu *rvu,
 	u64 cfg, ctx_cfg;
 	int blkaddr;
 
-	if ((req->aura_sz > NPA_AURA_SZ_MAX) ||
-	    (req->aura_sz == NPA_AURA_SZ_0) || !req->nr_pools)
+	if (req->aura_sz > NPA_AURA_SZ_MAX ||
+	    req->aura_sz == NPA_AURA_SZ_0 || !req->nr_pools)
 		return NPA_AF_ERR_PARAM;
 
 	pfvf = rvu_get_pfvf(rvu, pcifunc);
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NPA, pcifunc);
-	if (!pfvf->npalf || (blkaddr < 0))
+	if (!pfvf->npalf || blkaddr < 0)
 		return NPA_AF_ERR_AF_LF_INVALID;
 
 	block = &hw->block[blkaddr];
@@ -316,7 +316,7 @@ int rvu_mbox_handler_npa_lf_alloc(struct rvu *rvu,
 		goto free_mem;
 
 	pfvf->aura_bmap = kcalloc(NPA_AURA_COUNT(req->aura_sz), sizeof(long),
-				 GFP_KERNEL);
+				  GFP_KERNEL);
 	if (!pfvf->aura_bmap)
 		goto free_mem;
 
@@ -327,7 +327,7 @@ int rvu_mbox_handler_npa_lf_alloc(struct rvu *rvu,
 		goto free_mem;
 
 	pfvf->pool_bmap = kcalloc(NPA_AURA_COUNT(req->aura_sz), sizeof(long),
-				 GFP_KERNEL);
+				  GFP_KERNEL);
 	if (!pfvf->pool_bmap)
 		goto free_mem;
 
@@ -384,7 +384,7 @@ int rvu_mbox_handler_npa_lf_free(struct rvu *rvu, struct msg_req *req,
 
 	pfvf = rvu_get_pfvf(rvu, pcifunc);
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NPA, pcifunc);
-	if (!pfvf->npalf || (blkaddr < 0))
+	if (!pfvf->npalf || blkaddr < 0)
 		return NPA_AF_ERR_AF_LF_INVALID;
 
 	block = &hw->block[blkaddr];
diff --git a/drivers/soc/marvell/octeontx2/rvu_reg.c b/drivers/soc/marvell/octeontx2/rvu_reg.c
index 0c8622210f09..9d7c135c7965 100644
--- a/drivers/soc/marvell/octeontx2/rvu_reg.c
+++ b/drivers/soc/marvell/octeontx2/rvu_reg.c
@@ -63,8 +63,8 @@ bool rvu_check_valid_reg(int regmap, int regblk, u64 reg)
 	reg &= map->mask;
 
 	for (idx = 0; idx < map->num_ranges; idx++) {
-		if ((reg >= map->range[idx].start) &&
-		    (reg < map->range[idx].end))
+		if (reg >= map->range[idx].start &&
+		    reg < map->range[idx].end)
 			return true;
 	}
 	return false;
diff --git a/drivers/soc/marvell/octeontx2/rvu_reg.h b/drivers/soc/marvell/octeontx2/rvu_reg.h
index c99f3c99bba2..3271f275d52a 100644
--- a/drivers/soc/marvell/octeontx2/rvu_reg.h
+++ b/drivers/soc/marvell/octeontx2/rvu_reg.h
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: GPL-2.0
-/* Marvell OcteonTx2 RVU Admin Function driver
+/* SPDX-License-Identifier: GPL-2.0
+ * Marvell OcteonTx2 RVU Admin Function driver
  *
  * Copyright (C) 2018 Marvell International Ltd.
  *
@@ -153,7 +153,6 @@
 #define NPA_PRIV_LFX_INT_CFG		(0x10020)
 #define NPA_AF_RVU_LF_CFG_DEBUG         (0x10030)
 
-
 /* NIX block's admin function registers */
 #define NIX_AF_CFG			(0x0000)
 #define NIX_AF_STATUS			(0x0010)
diff --git a/drivers/soc/marvell/octeontx2/rvu_struct.h b/drivers/soc/marvell/octeontx2/rvu_struct.h
index 020185724f76..aa3912b2f30d 100644
--- a/drivers/soc/marvell/octeontx2/rvu_struct.h
+++ b/drivers/soc/marvell/octeontx2/rvu_struct.h
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: GPL-2.0
-/* Marvell OcteonTx2 RVU Admin Function driver
+/* SPDX-License-Identifier: GPL-2.0
+ * Marvell OcteonTx2 RVU Admin Function driver
  *
  * Copyright (C) 2018 Marvell International Ltd.
  *
@@ -11,31 +11,27 @@
 #ifndef RVU_STRUCT_H
 #define RVU_STRUCT_H
 
-/*
- * RVU Block Address Enumeration
- */
+/* RVU Block Address Enumeration */
 enum rvu_block_addr_e {
-	BLKADDR_RVUM		= 0x0ULL,
-	BLKADDR_LMT		= 0x1ULL,
-	BLKADDR_MSIX		= 0x2ULL,
-	BLKADDR_NPA		= 0x3ULL,
-	BLKADDR_NIX0		= 0x4ULL,
-	BLKADDR_NIX1		= 0x5ULL,
-	BLKADDR_NPC		= 0x6ULL,
-	BLKADDR_SSO		= 0x7ULL,
-	BLKADDR_SSOW		= 0x8ULL,
-	BLKADDR_TIM		= 0x9ULL,
-	BLKADDR_CPT0		= 0xaULL,
-	BLKADDR_CPT1		= 0xbULL,
-	BLKADDR_NDC_NIX0_RX	= 0xcULL,
-	BLKADDR_NDC_NIX0_TX	= 0xdULL,
-	BLKADDR_NDC_NPA0	= 0xeULL,
-	BLK_COUNT		= 0xfULL,
+	BLKADDR_RVUM            = 0x0ULL,
+	BLKADDR_LMT             = 0x1ULL,
+	BLKADDR_MSIX            = 0x2ULL,
+	BLKADDR_NPA             = 0x3ULL,
+	BLKADDR_NIX0            = 0x4ULL,
+	BLKADDR_NIX1            = 0x5ULL,
+	BLKADDR_NPC             = 0x6ULL,
+	BLKADDR_SSO             = 0x7ULL,
+	BLKADDR_SSOW            = 0x8ULL,
+	BLKADDR_TIM             = 0x9ULL,
+	BLKADDR_CPT0            = 0xaULL,
+	BLKADDR_CPT1            = 0xbULL,
+	BLKADDR_NDC_NIX0_RX     = 0xcULL,
+	BLKADDR_NDC_NIX0_TX     = 0xdULL,
+	BLKADDR_NDC_NPA0        = 0xeULL,
+	BLK_COUNT               = 0xfULL,
 };
 
-/*
- * RVU Block Type Enumeration
- */
+/* RVU Block Type Enumeration */
 enum rvu_block_type_e {
 	BLKTYPE_RVUM = 0x0,
 	BLKTYPE_MSIX = 0x1,
-- 
2.17.1

