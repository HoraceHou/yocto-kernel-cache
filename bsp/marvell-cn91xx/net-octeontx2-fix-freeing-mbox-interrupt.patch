From 3394fe2cdf7fae07bb886489732e50c213c41f0d Mon Sep 17 00:00:00 2001
From: Aleksey Makarov <amakarov@marvell.com>
Date: Tue, 18 Sep 2018 14:18:17 +0300
Subject: [PATCH 0199/1051] net: octeontx2: fix freeing mbox interrupt

In the patch "net: octeontx2: fix msix allocation/release"
mbox interrupt was allocated using the managed allocation
function devm_request_irq().  It turns out that this does not work
well with explicit calls to pci_free_irq_vectors() from
the driver's release() method.  So revert that to plain request_irq()

Signed-off-by: Aleksey Makarov <amakarov@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/otx2_pf.c | 10 +++++-----
 drivers/net/ethernet/marvell/octeontx2/otx2_vf.c |  8 +++++---
 2 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
index f043784f313d..f94205e33af3 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
@@ -244,11 +244,8 @@ static int otx2_register_mbox_intr(struct otx2_nic *pf)
 	/* Register mailbox interrupt handler */
 	irq_name = &hw->irq_name[RVU_PF_INT_VEC_AFPF_MBOX * NAME_SIZE];
 	snprintf(irq_name, NAME_SIZE, "RVUPFAF Mbox");
-	err = devm_request_irq(pf->dev,
-			       pci_irq_vector(pf->pdev,
-					      RVU_PF_INT_VEC_AFPF_MBOX),
-			       otx2_pfaf_mbox_intr_handler, 0,
-			       irq_name, pf);
+	err = request_irq(pci_irq_vector(pf->pdev, RVU_PF_INT_VEC_AFPF_MBOX),
+			  otx2_pfaf_mbox_intr_handler, 0, irq_name, pf);
 	if (err) {
 		dev_err(pf->dev,
 			"RVUPF: IRQ registration failed for PFAF mbox irq\n");
@@ -282,8 +279,11 @@ static int otx2_register_mbox_intr(struct otx2_nic *pf)
 
 static void otx2_disable_mbox_intr(struct otx2_nic *pf)
 {
+	int vector = pci_irq_vector(pf->pdev, RVU_PF_INT_VEC_AFPF_MBOX);
+
 	/* Disable AF => PF mailbox IRQ */
 	otx2_write64(pf, RVU_PF_INT_ENA_W1C, BIT_ULL(0));
+	free_irq(vector, pf);
 }
 
 static void otx2_pfaf_mbox_destroy(struct otx2_nic *pf)
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
index 73087f810b39..5d6cbd6d2bf9 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
@@ -154,9 +154,8 @@ static int otx2vf_register_mbox_intr(struct otx2_nic *vf)
 	/* Register mailbox interrupt handler */
 	irq_name = &hw->irq_name[RVU_VF_INT_VEC_MBOX * NAME_SIZE];
 	snprintf(irq_name, NAME_SIZE, "RVUVFAF Mbox");
-	err = devm_request_irq(vf->dev,
-			       pci_irq_vector(vf->pdev, RVU_VF_INT_VEC_MBOX),
-			       otx2vf_vfaf_mbox_intr_handler, 0, irq_name, vf);
+	err = request_irq(pci_irq_vector(vf->pdev, RVU_VF_INT_VEC_MBOX),
+			  otx2vf_vfaf_mbox_intr_handler, 0, irq_name, vf);
 	if (err) {
 		dev_err(vf->dev,
 			"RVUPF: IRQ registration failed for VFAF mbox irq\n");
@@ -190,8 +189,11 @@ static int otx2vf_register_mbox_intr(struct otx2_nic *vf)
 
 static void otx2vf_disable_mbox_intr(struct otx2_nic *vf)
 {
+	int vector = pci_irq_vector(vf->pdev, RVU_VF_INT_VEC_MBOX);
+
 	/* Disable VF => PF mailbox IRQ */
 	otx2_write64(vf, RVU_VF_INT_ENA_W1C, BIT_ULL(0));
+	free_irq(vector, vf);
 }
 
 static void otx2vf_vfaf_mbox_destroy(struct otx2_nic *vf)
-- 
2.17.1

