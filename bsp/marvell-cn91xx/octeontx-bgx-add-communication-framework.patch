From 7d08360874be8adfd0007db793d8f939e0ae3633 Mon Sep 17 00:00:00 2001
From: Tirumalesh Chalamarla <tchalamarla@caviumnetworks.com>
Date: Thu, 27 Sep 2018 10:41:53 +0300
Subject: [PATCH 0227/1051] octeontx-bgx: add communication framework

Add com_s to bgx so that it will follow same convention as others

Signed-off-by: Yuri Tolstov <yuri.tolstov@caviumnetworks.com>
Signed-off-by: Tirumalesh Chalamarla <tchalamarla@caviumnetworks.com>
Signed-off-by: Yury Norov <ynorov@caviumnetworks.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06.
Just some minor context mods in order to port to wrlinux]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../net/ethernet/cavium/thunder/thunder_bgx.c | 36 +++++++++++++++++++
 .../net/ethernet/cavium/thunder/thunder_bgx.h | 17 +++++++++
 2 files changed, 53 insertions(+)

diff --git a/drivers/net/ethernet/cavium/thunder/thunder_bgx.c b/drivers/net/ethernet/cavium/thunder/thunder_bgx.c
index 05a0f8cdef29..5a12c07eb056 100644
--- a/drivers/net/ethernet/cavium/thunder/thunder_bgx.c
+++ b/drivers/net/ethernet/cavium/thunder/thunder_bgx.c
@@ -191,6 +191,20 @@ unsigned bgx_get_map(int node)
 }
 EXPORT_SYMBOL(bgx_get_map);
 
+/* Return the BGX CSR block base address and size.*/
+u64 bgx_get_reg_base(int node, int bgx_idx, u64 *iosize)
+{
+	struct bgx *bgx;
+
+	bgx = get_bgx(node, bgx_idx);
+	if (bgx) {
+		*iosize = pci_resource_len(bgx->pdev, 0);
+		return pci_resource_start(bgx->pdev, 0);
+	}
+	return 0;
+}
+EXPORT_SYMBOL(bgx_get_reg_base);
+
 /* Return number of LMAC configured for this BGX */
 int bgx_get_lmac_count(int node, int bgx_idx)
 {
@@ -647,6 +661,28 @@ u64 bgx_get_tx_stats(int node, int bgx_idx, int lmac, int idx)
 }
 EXPORT_SYMBOL(bgx_get_tx_stats);
 
+static void bgx_enable_rx_tx(int node, int bgx_idx, int lmacid)
+{
+	bgx_lmac_rx_tx_enable(node, bgx_idx, lmacid, 1);
+}
+
+static void bgx_disable_rx_tx(int node, int bgx_idx, int lmacid)
+{
+	bgx_lmac_rx_tx_enable(node, bgx_idx, lmacid, 0);
+}
+
+struct thunder_bgx_com_s thunder_bgx_com = {
+	.get_bgx_count = bgx_get_map,
+	.get_reg_base = bgx_get_reg_base,
+	.get_lmac_count = bgx_get_lmac_count,
+	.get_link_status = bgx_get_lmac_link_state,
+	.get_mac_addr = bgx_get_lmac_mac,
+	.set_mac_addr = bgx_set_lmac_mac,
+	.enable = bgx_enable_rx_tx,
+	.disable = bgx_disable_rx_tx,
+};
+EXPORT_SYMBOL(thunder_bgx_com);
+
 /* Configure BGX LMAC in internal loopback mode */
 void bgx_lmac_internal_loopback(int node, int bgx_idx,
 				int lmac_idx, bool enable)
diff --git a/drivers/net/ethernet/cavium/thunder/thunder_bgx.h b/drivers/net/ethernet/cavium/thunder/thunder_bgx.h
index cbdd20b9ee6f..d6719fcce857 100644
--- a/drivers/net/ethernet/cavium/thunder/thunder_bgx.h
+++ b/drivers/net/ethernet/cavium/thunder/thunder_bgx.h
@@ -39,6 +39,8 @@
 #define  CMR_PKT_TX_EN				BIT_ULL(13)
 #define  CMR_PKT_RX_EN				BIT_ULL(14)
 #define  CMR_EN					BIT_ULL(15)
+#define CMR_X2P_SELECT_PKI			BIT_ULL(16)
+#define CMR_P2X_SELECT_PKO			BIT_ULL(17)
 #define BGX_CMR_GLOBAL_CFG		0x08
 #define  CMR_GLOBAL_CFG_FCS_STRIP		BIT_ULL(6)
 #define BGX_CMRX_RX_ID_MAP		0x60
@@ -235,6 +237,21 @@ u64 bgx_get_tx_stats(int node, int bgx_idx, int lmac, int idx);
 #define BGX_RX_STATS_COUNT 11
 #define BGX_TX_STATS_COUNT 18
 
+struct thunder_bgx_com_s {
+	u32 (*get_bgx_count)(int node);
+	int (*get_lmac_count)(int node, int bgx_idx);
+	u64 (*get_reg_base)(int node, int bgx_idx, u64 *iosize);
+	void (*get_link_status)(int node, int bgx_idx,
+				int lmac_idx, void *status);
+	const u8* (*get_mac_addr)(int node, int bgx_idx, int lmac_idx);
+	void (*set_mac_addr)(int node, int bgx_idx,
+			     int lmac_idx, const u8 *mac);
+	void (*enable)(int node, int bgx_idx, int lmac_idx);
+	void (*disable)(int node, int bgx_idx, int lmac_idx);
+};
+
+extern struct thunder_bgx_com_s thunder_bgx_com;
+
 struct bgx_stats {
 	u64 rx_stats[BGX_RX_STATS_COUNT];
 	u64 tx_stats[BGX_TX_STATS_COUNT];
-- 
2.17.1

