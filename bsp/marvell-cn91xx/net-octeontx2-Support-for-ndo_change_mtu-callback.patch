From 46dd62c68f3ee8530e6141eb295f66bfb80fa0f2 Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Sat, 11 Aug 2018 22:46:33 +0530
Subject: [PATCH 0116/1051] net: octeontx2: Support for ndo_change_mtu callback

Added support to modify MTU for RVU PF netdev interfaces.
MTU range supported is 68 to 9190 bytes.

Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/otx2_common.c  | 36 +++++++++++++++++--
 .../ethernet/marvell/octeontx2/otx2_common.h  |  2 ++
 .../net/ethernet/marvell/octeontx2/otx2_pf.c  | 11 ++++++
 .../ethernet/marvell/octeontx2/otx2_txrx.h    |  5 +++
 4 files changed, 52 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
index dfe760bfcaaf..adbf9be7fa34 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
@@ -53,6 +53,38 @@ int otx2_set_mac_address(struct net_device *netdev, void *p)
 	return 0;
 }
 
+int otx2_hw_set_mtu(struct otx2_nic *pfvf, int mtu)
+{
+	struct nix_frs_cfg *req;
+
+	if (!pfvf->hw.num_vec)
+		return -EINVAL;
+
+	req = otx2_mbox_alloc_msg_NIX_SET_HW_FRS(&pfvf->mbox);
+	if (!req)
+		return -ENOMEM;
+
+	req->update_smq = true;
+	req->maxlen = mtu + OTX2_ETH_HLEN;
+	return otx2_sync_mbox_msg(&pfvf->mbox);
+}
+
+int otx2_change_mtu(struct net_device *netdev, int new_mtu)
+{
+	struct otx2_nic *pfvf = netdev_priv(netdev);
+	int err;
+
+	if (netif_running(netdev)) {
+		err = otx2_hw_set_mtu(pfvf, new_mtu);
+		if (err)
+			return err;
+	}
+	netdev_info(netdev, "Changing MTU from %d to %d\n",
+		    netdev->mtu, new_mtu);
+	netdev->mtu = new_mtu;
+	return 0;
+}
+
 void otx2_get_dev_stats(struct otx2_nic *pfvf)
 {
 	struct otx2_dev_stats *dev_stats = &pfvf->hw.dev_stats;
@@ -194,8 +226,8 @@ int otx2_txschq_config(struct otx2_nic *pfvf, int lvl)
 	if (lvl == NIX_TXSCH_LVL_SMQ) {
 		/* Set min and max Tx packet lengths */
 		req->reg[0] = NIX_AF_SMQX_CFG(schq);
-		req->regval[0] = (pfvf->netdev->mtu << 8) | NIC_HW_MIN_FRS;
-
+		req->regval[0] = ((pfvf->netdev->mtu  + OTX2_ETH_HLEN) << 8) |
+				   OTX2_MIN_MTU;
 		req->num_regs++;
 		/* MDQ config */
 		parent =  hw->txschq_list[NIX_TXSCH_LVL_TL4][0];
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
index 894d08cc400f..45bfc8b0895f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
@@ -275,6 +275,8 @@ void otx2_get_stats64(struct net_device *netdev,
 void otx2_set_irq_affinity(struct otx2_nic *pfvf);
 int otx2_hw_set_mac_addr(struct otx2_nic *pfvf, struct net_device *netdev);
 int otx2_set_mac_address(struct net_device *netdev, void *p);
+int otx2_change_mtu(struct net_device *netdev, int new_mtu);
+int otx2_hw_set_mtu(struct otx2_nic *pfvf, int mtu);
 
 /* Mbox handlers */
 void mbox_handler_MSIX_OFFSET(struct otx2_nic *pfvf,
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
index 62f5e0f3f2ef..3e716573c90a 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
@@ -499,6 +499,11 @@ static int otx2_open(struct net_device *netdev)
 		pf->set_mac_pending = false;
 	}
 
+	/* Set default MTU in HW */
+	err = otx2_hw_set_mtu(pf, netdev->mtu);
+	if (err)
+		goto cleanup;
+
 	/* Register CQ IRQ handlers */
 	vec = pf->hw.nix_msixoff + NIX_LF_CINT_VEC_START;
 	for (qidx = 0; qidx < pf->hw.cint_cnt; qidx++) {
@@ -599,6 +604,7 @@ static const struct net_device_ops otx2_netdev_ops = {
 	.ndo_stop		= otx2_stop,
 	.ndo_start_xmit		= otx2_xmit,
 	.ndo_set_mac_address    = otx2_set_mac_address,
+	.ndo_change_mtu         = otx2_change_mtu,
 	.ndo_get_stats64	= otx2_get_stats64,
 };
 
@@ -703,6 +709,11 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	pf->iommu_domain = iommu_get_domain_for_dev(dev);
 
 	netdev->netdev_ops = &otx2_netdev_ops;
+
+	/* MTU range: 68 - 9190 */
+	netdev->min_mtu = OTX2_MIN_MTU;
+	netdev->max_mtu = OTX2_MAX_MTU;
+
 	err = register_netdev(netdev);
 	if (err) {
 		dev_err(dev, "Failed to register netdevice\n");
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.h b/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.h
index aa272d6df1fe..34e6a262d17d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.h
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.h
@@ -13,6 +13,7 @@
 
 #include <linux/etherdevice.h>
 #include <linux/iommu.h>
+#include <linux/if_vlan.h>
 
 #define LBK_CHAN_BASE	0x000
 #define SDP_CHAN_BASE	0x700
@@ -24,6 +25,10 @@
 #define RCV_FRAG_LEN	(SKB_DATA_ALIGN(DMA_BUFFER_LEN + NET_SKB_PAD) + \
 			 SKB_DATA_ALIGN(sizeof(struct skb_shared_info)))
 
+#define	OTX2_ETH_HLEN		(VLAN_ETH_HLEN + VLAN_HLEN)
+#define OTX2_MIN_MTU		ETH_MIN_MTU
+#define OTX2_MAX_MTU		(9212 - OTX2_ETH_HLEN)
+
 #define OTX2_MAX_FRAGS_IN_SQE	9
 
 struct sg_list {
-- 
2.17.1

