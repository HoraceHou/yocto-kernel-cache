From 67b119b19828d05bda682a4fd070c8307febc7b9 Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Sat, 11 Aug 2018 16:24:04 +0530
Subject: [PATCH 0106/1051] net: octeontx2: Initialize NIX RQ/SQ/CQ contexts

Do the following mapping
- RQ to a NPA aura for receive packet buffers
- RQ to a CQ for receive packet notifications
- SQ to a NPA aura for queueing SQEs in SQB
- SQ to a CQ for transmit packet notifications

And send NIX admin queue enqueue intructions to AF to
initialize RQ/SQ/CQ's contexts.

Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/otx2_common.c  | 101 ++++++++++++++++++
 .../ethernet/marvell/octeontx2/otx2_common.h  |   3 +-
 .../net/ethernet/marvell/octeontx2/otx2_pf.c  |  48 ++++++---
 3 files changed, 135 insertions(+), 17 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
index 1e3f94610a66..9818b7a8a6e3 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
@@ -48,6 +48,107 @@ static dma_addr_t otx2_alloc_rbuf(struct otx2_nic *pfvf, struct otx2_pool *pool)
 	return iova;
 }
 
+static int otx2_rq_init(struct otx2_nic *pfvf, u16 qidx)
+{
+	struct nix_aq_enq_req *aq;
+
+	/* Get memory to put this msg */
+	aq = otx2_mbox_alloc_msg_NIX_AQ_ENQ(&pfvf->mbox);
+	if (!aq)
+		return -ENOMEM;
+
+	aq->rq.cq = qidx;
+	aq->rq.ena = 1;
+	aq->rq.pb_caching = 1;
+	aq->rq.lpb_aura = qidx; /* Use large packet buffer aura */
+	aq->rq.lpb_sizem1 = (DMA_BUFFER_LEN / 8) - 1;
+	aq->rq.xqe_imm_size = 0; /* Copying of packet to CQE not needed */
+
+	/* Fill AQ info */
+	aq->qidx = qidx;
+	aq->ctype = NIX_AQ_CTYPE_RQ;
+	aq->op = NIX_AQ_INSTOP_INIT;
+
+	return otx2_sync_mbox_msg(&pfvf->mbox);
+}
+
+static int otx2_sq_init(struct otx2_nic *pfvf, u16 qidx)
+{
+	struct nix_aq_enq_req *aq;
+
+	/* Get memory to put this msg */
+	aq = otx2_mbox_alloc_msg_NIX_AQ_ENQ(&pfvf->mbox);
+	if (!aq)
+		return -ENOMEM;
+
+	aq->sq.cq = pfvf->hw.rx_queues + qidx;
+	aq->sq.max_sqe_size = NIX_MAXSQESZ_W16; /* 128 byte */
+	aq->sq.cq_ena = 1;
+	aq->sq.ena = 1;
+	aq->sq.smq = 0;
+	aq->sq.smq_rr_quantum = DMA_BUFFER_LEN / 4;
+	aq->sq.default_chan = pfvf->tx_chan_base;
+	aq->sq.sqe_stype = NIX_STYPE_STF; /* Cache SQB */
+	aq->sq.sqb_aura = pfvf->hw.rx_queues + qidx;
+
+	/* Fill AQ info */
+	aq->qidx = qidx;
+	aq->ctype = NIX_AQ_CTYPE_SQ;
+	aq->op = NIX_AQ_INSTOP_INIT;
+
+	return otx2_sync_mbox_msg(&pfvf->mbox);
+}
+
+static int otx2_cq_init(struct otx2_nic *pfvf, u16 qidx)
+{
+	struct nix_aq_enq_req *aq;
+
+	/* Get memory to put this msg */
+	aq = otx2_mbox_alloc_msg_NIX_AQ_ENQ(&pfvf->mbox);
+	if (!aq)
+		return -ENOMEM;
+
+	aq->cq.ena = 1;
+	aq->cq.qsize = Q_SIZE_4K;
+	aq->cq.caching = 1;
+	aq->cq.base = 1;
+
+	/* Fill AQ info */
+	aq->qidx = qidx;
+	aq->ctype = NIX_AQ_CTYPE_CQ;
+	aq->op = NIX_AQ_INSTOP_INIT;
+
+	return otx2_sync_mbox_msg(&pfvf->mbox);
+}
+
+int otx2_config_nix_queues(struct otx2_nic *pfvf)
+{
+	int qidx, err;
+
+	/* Initialize RX queues */
+	for (qidx = 0; qidx < pfvf->hw.rx_queues; qidx++) {
+		err = otx2_rq_init(pfvf, qidx);
+		if (err)
+			return err;
+	}
+
+	/* Initialize TX queues */
+	for (qidx = 0; qidx < pfvf->hw.tx_queues; qidx++) {
+		err = otx2_sq_init(pfvf, qidx);
+		if (err)
+			return err;
+	}
+
+	/* Initialize completion queues */
+	for (qidx = 0; qidx < pfvf->qset.cq_cnt; qidx++) {
+		err = otx2_cq_init(pfvf, qidx);
+		if (err)
+			return err;
+	}
+
+	return 0;
+}
+
 int otx2_config_nix(struct otx2_nic *pfvf)
 {
 	struct nix_lf_alloc_req  *nixlf;
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
index 2e52b13a630e..13dc82f4ccb0 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
@@ -197,9 +197,10 @@ void otx2_disable_msix(struct otx2_nic *pfvf);
 int otx2_attach_npa_nix(struct otx2_nic *pfvf);
 int otx2_detach_resources(struct mbox *mbox);
 int otx2_config_npa(struct otx2_nic *pfvf);
-int otx2_config_nix(struct otx2_nic *pfvf);
 int otx2_sq_aura_pool_init(struct otx2_nic *pfvf);
 int otx2_rq_aura_pool_init(struct otx2_nic *pfvf);
+int otx2_config_nix(struct otx2_nic *pfvf);
+int otx2_config_nix_queues(struct otx2_nic *pfvf);
 
 /* Mbox handlers */
 void mbox_handler_MSIX_OFFSET(struct otx2_nic *pfvf,
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
index 20cb46c6117e..656f4a05fd21 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
@@ -252,25 +252,17 @@ static int otx2_set_real_num_queues(struct net_device *netdev,
 	return err;
 }
 
-static int otx2_open(struct net_device *netdev)
+static int otx2_init_hw_resources(struct otx2_nic *pf)
 {
-	struct otx2_nic *pf = netdev_priv(netdev);
-	int err = 0;
-
-	netif_carrier_off(netdev);
+	int err;
 
-	err = otx2_register_mbox_intr(pf);
+	/* NPA init */
+	err = otx2_config_npa(pf);
 	if (err)
 		return err;
 
-	pf->qset.cq_cnt = pf->hw.rx_queues + pf->hw.tx_queues;
-
-	/* Check if MAC address from AF is valid or else set a random MAC */
-	if (is_zero_ether_addr(netdev->dev_addr))
-		eth_hw_addr_random(netdev);
-
-	/* NPA init */
-	err = otx2_config_npa(pf);
+	/* NIX init */
+	err = otx2_config_nix(pf);
 	if (err)
 		return err;
 
@@ -284,10 +276,34 @@ static int otx2_open(struct net_device *netdev)
 	if (err)
 		return err;
 
-	/* NIX init */
-	err = otx2_config_nix(pf);
+	err = otx2_config_nix_queues(pf);
 	if (err)
 		return err;
+
+	return 0;
+}
+
+static int otx2_open(struct net_device *netdev)
+{
+	struct otx2_nic *pf = netdev_priv(netdev);
+	int err = 0;
+
+	netif_carrier_off(netdev);
+
+	err = otx2_register_mbox_intr(pf);
+	if (err)
+		return err;
+
+	pf->qset.cq_cnt = pf->hw.rx_queues + pf->hw.tx_queues;
+
+	/* Check if MAC address from AF is valid or else set a random MAC */
+	if (is_zero_ether_addr(netdev->dev_addr))
+		eth_hw_addr_random(netdev);
+
+	err = otx2_init_hw_resources(pf);
+	if (err)
+		return err;
+
 	return 0;
 }
 
-- 
2.17.1

