From 9f4ffd1eacdbace22c2b12f80a992ef87d925ea9 Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Sat, 26 Jan 2019 21:38:32 +0530
Subject: [PATCH 0899/1051] net: octeontx2: Fix SMQ/SQ configuration

Made following changes
- Set SQ's RR_QUANTUM to atleast one MTU. otherwise when
  multiple SQs are transmitting the bandwidth will be limited.
- Keep default values in NIX_SMQX_CFG[PRI_THR, RR_MINLEN] as is,
  otherwise traffic rate may not scale with multiple SMQs
  transmitting pkts.

Also fixed NAPI's workdone calculation to avoid exiting and
reenabling IRQ everytime.

Change-Id: Ibd1ff214ef9c67eeec5de59d1c26dcef41a0a125
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/2798
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/otx2_common.c | 3 ++-
 drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c   | 2 +-
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
index ccaafd74e558..d0748857e5d2 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
@@ -367,6 +367,7 @@ int otx2_txschq_config(struct otx2_nic *pfvf, int lvl)
 		req->reg[0] = NIX_AF_SMQX_CFG(schq);
 		req->regval[0] = ((pfvf->netdev->mtu  + OTX2_ETH_HLEN) << 8) |
 				   OTX2_MIN_MTU;
+		req->regval[0] |= (0x20ULL << 51) | (0x80ULL << 39);
 		req->num_regs++;
 		/* MDQ config */
 		parent =  hw->txschq_list[NIX_TXSCH_LVL_TL4][0];
@@ -583,7 +584,7 @@ static int otx2_sq_init(struct otx2_nic *pfvf, u16 qidx, u16 sqb_aura)
 	aq->sq.ena = 1;
 	/* Only one SMQ is allocated, map all SQ's to that SMQ  */
 	aq->sq.smq = pfvf->hw.txschq_list[NIX_TXSCH_LVL_SMQ][0];
-	aq->sq.smq_rr_quantum = DMA_BUFFER_LEN / 4;
+	aq->sq.smq_rr_quantum = OTX2_MAX_MTU;
 	aq->sq.default_chan = pfvf->tx_chan_base;
 	aq->sq.sqe_stype = NIX_STYPE_STF; /* Cache SQB */
 	aq->sq.sqb_aura = sqb_aura;
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c b/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c
index 2079a6947b60..09413204bd75 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c
@@ -422,7 +422,7 @@ int otx2_poll(struct napi_struct *napi, int budget)
 		if (cq_idx == CINT_INVALID_CQ)
 			continue;
 		cq = &qset->cq[cq_idx];
-		workdone = otx2_napi_handler(cq, pfvf, budget);
+		workdone += otx2_napi_handler(cq, pfvf, budget);
 	}
 
 	/* Clear the IRQ */
-- 
2.17.1

