From 4a9672b4b3b5329cbef29ac17642f4642db32d68 Mon Sep 17 00:00:00 2001
From: Yan Markman <ymarkman@marvell.com>
Date: Tue, 4 Sep 2018 18:15:14 +0300
Subject: [PATCH 0570/1051] net: mvpp2: add tx-guard-trigger counter into
 ethtool statistic

Change-Id: I82e912237c6a1293587f9f4a7bcc82a6ac6245b7
Signed-off-by: Yan Markman <ymarkman@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/59730
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
Tested-by: Stefan Chulski <stefanc@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../net/ethernet/marvell/mvpp2/mvpp2_main.c   | 28 +++++++++++++++++--
 1 file changed, 26 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
index 52e03e61e391..83f2145d8fcf 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
@@ -108,6 +108,7 @@ static void mvpp2_tx_done_guard_force_irq(struct mvpp2_port *port,
 					  int sw_thread, u8 to_zero_map);
 static inline void mvpp2_tx_done_guard_timer_set(struct mvpp2_port *port,
 						 int sw_thread);
+static u32 mvpp2_tx_done_guard_get_stats(struct mvpp2_port *port, int cpu);
 
 /* The prototype is added here to be used in start_dev when using ACPI. This
  * will be removed once phylink is used for all modes (dt+ACPI).
@@ -1269,6 +1270,14 @@ static const struct mvpp2_ethtool_counter mvpp2_ethtool_regs[] = {
 	{ MVPP2_RX_PKT_FULLQ_DROP_REG,	" rx_fullq_drop  " },
 	{ MVPP2_RX_PKT_EARLY_DROP_REG,	" rx_early_drop  " },
 	{ MVPP2_RX_PKT_BM_DROP_REG,	" rx_bm_drop     " },
+
+	/* Extend SW counters (not registers) */
+#define MVPP2_FIRST_CNT_SW		0xf000
+#define MVPP2_TX_GUARD_CNT(cpu)	(MVPP2_FIRST_CNT_SW + cpu)
+	{ MVPP2_TX_GUARD_CNT(0),	"tx-guard-cpu0 " },
+	{ MVPP2_TX_GUARD_CNT(1),	"tx-guard-cpu1 " },
+	{ MVPP2_TX_GUARD_CNT(2),	"tx-guard-cpu2 " },
+	{ MVPP2_TX_GUARD_CNT(3),	"tx-guard-cpu3 " },
 };
 
 static int mvpp2_ethtool_get_mib_cntr_size(void)
@@ -1287,7 +1296,7 @@ static int mvpp2_ethtool_get_mib_cntr_size(void)
  */
 static void mvpp2_hw_get_stats(struct mvpp2_port *port, u64 *pstats)
 {
-	int i, mib_size, queue;
+	int i, mib_size, queue, cpu;
 	unsigned int reg_offs;
 	u64 *ptmp;
 
@@ -1296,7 +1305,7 @@ static void mvpp2_hw_get_stats(struct mvpp2_port *port, u64 *pstats)
 	for (i = 0; i < mib_size; i++)
 		*pstats++ += mvpp2_read_count(port, &mvpp2_ethtool_regs[i]);
 
-	/* Extend counters */
+	/* Extend HW counters */
 	*pstats++ += mvpp2_read(port->priv, MVPP2_OVERRUN_DROP_REG(port->id));
 	*pstats++ += mvpp2_read(port->priv, MVPP2_CLS_DROP_REG(port->id));
 	ptmp = pstats;
@@ -1307,9 +1316,15 @@ static void mvpp2_hw_get_stats(struct mvpp2_port *port, u64 *pstats)
 		i = mib_size + 2;
 		while (i < ARRAY_SIZE(mvpp2_ethtool_regs)) {
 			reg_offs = mvpp2_ethtool_regs[i++].offset;
+			if (reg_offs == MVPP2_FIRST_CNT_SW)
+				break;
 			*pstats++ += mvpp2_read(port->priv, reg_offs);
 		}
 	}
+
+	/* Extend SW counters (i=MVPP2_FIRST_CNT_SW) */
+	for (cpu = 0; cpu < 4; cpu++)
+		*pstats++ = mvpp2_tx_done_guard_get_stats(port, cpu);
 }
 
 static void mvpp2_hw_clear_stats(struct mvpp2_port *port)
@@ -1331,9 +1346,13 @@ static void mvpp2_hw_clear_stats(struct mvpp2_port *port)
 		i = mib_size + 2;
 		while (i < ARRAY_SIZE(mvpp2_ethtool_regs)) {
 			reg_offs = mvpp2_ethtool_regs[i++].offset;
+			if (reg_offs == MVPP2_FIRST_CNT_SW)
+				break;
 			mvpp2_read(port->priv, reg_offs);
 		}
 	}
+	/* Extend SW counters (i=MVPP2_FIRST_CNT_SW) */
+	/* no clear */
 }
 
 static void mvpp2_ethtool_get_strings(struct net_device *netdev, u32 sset,
@@ -2926,6 +2945,11 @@ static void mvpp2_tx_done_guard_tasklet_cb(unsigned long data)
 	put_cpu();
 }
 
+static u32 mvpp2_tx_done_guard_get_stats(struct mvpp2_port *port, int cpu)
+{
+	return per_cpu_ptr(port->pcpu, cpu)->tx_guard_cntr;
+}
+
 static void mvpp2_tx_done_init_on_open(struct mvpp2_port *port, bool open)
 {
 	struct mvpp2_port_pcpu *port_pcpu;
-- 
2.17.1

