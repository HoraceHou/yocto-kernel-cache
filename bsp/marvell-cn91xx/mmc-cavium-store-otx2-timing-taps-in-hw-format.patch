From 136141d6d0fdd23e219460fbf352ffd0ac41187f Mon Sep 17 00:00:00 2001
From: Peter Swain <pswain@marvell.com>
Date: Fri, 25 Jan 2019 18:37:43 -0800
Subject: [PATCH 0915/1051] mmc: cavium: store otx2 timing taps in hw format

Much like code can be collapsed together if the four
MIO_EMM_TIMING fields are represented in per-slot
data structures in the same format as the hardware.

Note that MIO_EMM_TIMING_DATA_OUT is always stored
in slot->taps in DDR value, but zero'd out when applied
to hardware MIO_EMM_TIMING, unless slot is using a DDR mode

Also shortened the names

Change-Id: I0ba4a620f2268002f28b3ee3fe0b9daffc6873b8
Signed-off-by: Peter Swain <pswain@marvell.com>
Depends-On: I13df44e96d61a071b73f1d3f014ff0276ba51135
Reviewed-on: https://sj1git1.cavium.com/2756
Reviewed-by: Peter Swain <pswain@cavium.com>
Tested-by: sa_ip-sw-jenkins
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/mmc/host/cavium.c | 57 +++++++++++++++++++++------------------
 drivers/mmc/host/cavium.h | 17 ++++++------
 2 files changed, 39 insertions(+), 35 deletions(-)

diff --git a/drivers/mmc/host/cavium.c b/drivers/mmc/host/cavium.c
index 5e45c7a7f3fe..8999a5416895 100644
--- a/drivers/mmc/host/cavium.c
+++ b/drivers/mmc/host/cavium.c
@@ -146,6 +146,25 @@ bool cvm_is_mmc(struct cvm_mmc_slot *slot)
 	}
 }
 
+static void cvm_mmc_set_timing(struct cvm_mmc_slot *slot)
+{
+	u64 timing;
+
+	if (is_mmc_8xxx(slot->host))
+		return;
+
+	/*
+	 * slot->taps contains the DDR-style settings,
+	 * when in SDR mode the DATA_OUT tap must be squashed
+	 */
+	timing = slot->taps;
+
+	if (!cvm_is_mmc_timing_ddr(slot))
+		timing &= ~MIO_EMM_TIMING_DATA_OUT;
+
+	writeq(timing, slot->host->base + MIO_EMM_TIMING(slot->host));
+}
+
 static int cvm_mmc_configure_delay(struct cvm_mmc_slot *slot)
 {
 	struct cvm_mmc_host *host = slot->host;
@@ -157,32 +176,18 @@ static int cvm_mmc_configure_delay(struct cvm_mmc_slot *slot)
 			FIELD_PREP(MIO_EMM_SAMPLE_DAT_CNT, slot->data_cnt);
 		writeq(emm_sample, host->base + MIO_EMM_SAMPLE(host));
 	} else {
-		u64 timing = 0;
-
-		slot->cmd_cnt = 4;
-		slot->data_cnt = 4;
-		slot->cmd_out_tap = 39;
-		slot->data_out_tap = 39;
-
-		/* SDR, data out delay is zero */
-		if (!cvm_is_mmc_timing_ddr(slot))
-			slot->data_out_tap = 0;
-
-		timing =
-			FIELD_PREP(MIO_EMM_MIO_TIMING_DATA_IN,
-				slot->data_cnt) |
-			FIELD_PREP(MIO_EMM_MIO_TIMING_DATA_OUT,
-				slot->data_out_tap) |
-			FIELD_PREP(MIO_EMM_MIO_TIMING_CMD_IN,
-				slot->cmd_cnt) |
-			FIELD_PREP(MIO_EMM_MIO_TIMING_CMD_OUT,
-				slot->cmd_out_tap);
-
-		pr_debug("data in: %u, data out: %u, cmd in: %u, cmd out: %u\n",
-				slot->data_cnt, slot->data_out_tap,
-				slot->cmd_cnt, slot->cmd_out_tap);
-
-		writeq(timing, host->base + MIO_EMM_TIMING(host));
+		if (!slot->tuned) {
+			int half = MAX_NO_OF_TAPS / 2;
+
+			slot->taps =
+				FIELD_PREP(MIO_EMM_TIMING_CMD_IN, half) |
+				FIELD_PREP(MIO_EMM_TIMING_CMD_OUT, half) |
+				FIELD_PREP(MIO_EMM_TIMING_DATA_IN, half) |
+				FIELD_PREP(MIO_EMM_TIMING_DATA_OUT, half);
+		}
+
+		pr_debug("taps %llx\n", slot->taps);
+		cvm_mmc_set_timing(slot);
 	}
 
 	return 0;
diff --git a/drivers/mmc/host/cavium.h b/drivers/mmc/host/cavium.h
index f93a73a5803d..7b21fcd478c6 100644
--- a/drivers/mmc/host/cavium.h
+++ b/drivers/mmc/host/cavium.h
@@ -145,11 +145,10 @@ struct cvm_mmc_slot {
 	u64 cached_switch;
 	u64 cached_rca;
 
-	unsigned int cmd_cnt;		/* sample cmd in delay */
-	unsigned int data_cnt;		/* sample data in delay */
-
-	unsigned int cmd_out_tap;	/* sample cmd out delay */
-	unsigned int data_out_tap;	/* sample data out delay */
+	bool tuned;
+	u64 taps;			/* otx2: MIO_EMM_TIMING */
+	unsigned int cmd_cnt;		/* otx: sample cmd in delay */
+	unsigned int data_cnt;		/* otx: sample data in delay */
 
 	unsigned int drive;		/* Current drive */
 	unsigned int slew;		/* clock skew */
@@ -222,10 +221,10 @@ struct cvm_mmc_cr_mods {
 #define MIO_EMM_CALB_START		BIT_ULL(0)
 #define MIO_EMM_TAP_DELAY		GENMASK_ULL(7, 0)
 
-#define MIO_EMM_MIO_TIMING_CMD_IN      GENMASK_ULL(53, 48)
-#define MIO_EMM_MIO_TIMING_CMD_OUT     GENMASK_ULL(37, 32)
-#define MIO_EMM_MIO_TIMING_DATA_IN     GENMASK_ULL(21, 16)
-#define MIO_EMM_MIO_TIMING_DATA_OUT    GENMASK_ULL(5, 0)
+#define MIO_EMM_TIMING_CMD_IN		GENMASK_ULL(53, 48)
+#define MIO_EMM_TIMING_CMD_OUT		GENMASK_ULL(37, 32)
+#define MIO_EMM_TIMING_DATA_IN		GENMASK_ULL(21, 16)
+#define MIO_EMM_TIMING_DATA_OUT		GENMASK_ULL(5, 0)
 
 #define MIO_EMM_INT_NCB_RAS		BIT_ULL(8)
 #define MIO_EMM_INT_NCB_FLT		BIT_ULL(7)
-- 
2.17.1

