From d951fa7c28c1426406191c1bee7828369e23dba1 Mon Sep 17 00:00:00 2001
From: Pavan Nikhilesh <pbhagavatula@marvell.com>
Date: Mon, 1 Oct 2018 15:20:54 +0530
Subject: [PATCH 0217/1051] soc: octeontx2: add workaround for TIM reverse
 lookup

Signed-off-by: Pavan Nikhilesh <pbhagavatula@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/soc/marvell/octeontx2/rvu.c     |  3 +++
 drivers/soc/marvell/octeontx2/rvu.h     |  3 +++
 drivers/soc/marvell/octeontx2/rvu_tim.c | 20 ++++++++++++++++++++
 3 files changed, 26 insertions(+)

diff --git a/drivers/soc/marvell/octeontx2/rvu.c b/drivers/soc/marvell/octeontx2/rvu.c
index 731b97bbb008..fad6cee58ead 100644
--- a/drivers/soc/marvell/octeontx2/rvu.c
+++ b/drivers/soc/marvell/octeontx2/rvu.c
@@ -930,6 +930,9 @@ static int rvu_lookup_rsrc(struct rvu *rvu, struct rvu_block *block,
 {
 	u64 val;
 
+	if (block->type == BLKTYPE_TIM && is_rvu_9xxx_A0(rvu))
+		return rvu_lf_lookup_tim_errata(rvu, block, pcifunc, slot);
+
 	val = ((u64)pcifunc << 24) | (slot << 16) | (1ULL << 13);
 	rvu_write64(rvu, block->addr, block->lookup_reg, val);
 	/* Wait for the lookup to finish */
diff --git a/drivers/soc/marvell/octeontx2/rvu.h b/drivers/soc/marvell/octeontx2/rvu.h
index 2aa5e120a356..f7fa00b29d92 100644
--- a/drivers/soc/marvell/octeontx2/rvu.h
+++ b/drivers/soc/marvell/octeontx2/rvu.h
@@ -573,6 +573,9 @@ int rvu_mbox_handler_TIM_DISABLE_RING(struct rvu *rvu,
 				      struct tim_ring_req *req,
 				      struct msg_rsp *rsp);
 
+int rvu_lf_lookup_tim_errata(struct rvu *rvu, struct rvu_block *block,
+		u16 pcifunc, int slot);
+
 #ifdef CONFIG_DEBUG_FS
 void rvu_dbg_init(struct rvu *rvu);
 void rvu_dbg_exit(struct rvu *rvu);
diff --git a/drivers/soc/marvell/octeontx2/rvu_tim.c b/drivers/soc/marvell/octeontx2/rvu_tim.c
index 8779356ee822..82933ed3517f 100644
--- a/drivers/soc/marvell/octeontx2/rvu_tim.c
+++ b/drivers/soc/marvell/octeontx2/rvu_tim.c
@@ -53,6 +53,26 @@ static void rvu_tim_disable_lf(struct rvu *rvu, int lf, int blkaddr)
 			TIM_AF_RINGX_CTL1_RCF_BUSY, true);
 }
 
+int rvu_lf_lookup_tim_errata(struct rvu *rvu, struct rvu_block *block,
+		u16 pcifunc, int slot)
+{
+	int i, blkaddr;
+	u64 val;
+
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_TIM, 0);
+	if (blkaddr < 0)
+		return TIM_AF_LF_INVALID;
+
+	for (i = 0; i < block->lf.max; i++) {
+		val = rvu_read64(rvu, block->addr, block->lfcfg_reg);
+		if ((((val >> 8) & 0xffff) == pcifunc) &&
+				(val & 0xff) == slot)
+			return i;
+	}
+
+	return -1;
+}
+
 int rvu_mbox_handler_TIM_LF_ALLOC(struct rvu *rvu,
 				  struct tim_lf_alloc_req *req,
 				  struct tim_lf_alloc_rsp *rsp)
-- 
2.17.1

