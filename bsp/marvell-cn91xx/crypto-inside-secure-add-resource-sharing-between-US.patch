From 276b240066fbc3956abcb83fc96bcc18b90d95bf Mon Sep 17 00:00:00 2001
From: Igal Liberman <igall@marvell.com>
Date: Sun, 12 Mar 2017 19:06:44 +0200
Subject: [PATCH 0610/1051] crypto: inside-secure: add resource sharing between
 US and KS

This patch adds new module param called "rings".
This parameters allows the user to tell the driver how many
rings are available for its use.

The driver expects to read the number of rings for each engine
in the following way:
insmod <name.ko> rings= <engine1 rings>, <engine2 rings>
For example: crypto_safexcel.ko rings = 4,0
	4 rings of the first engine to be used by the Kernel
	0 rings of the second engine to be used by the Kernel
If "rings" is not state, all rings will be used by the Kernel.

This patch allows to divide the HW rings between the Kernel and
the user-space. The Kernel will do basic initialization of all
rings, but won't use the rings which are dedicated to US.

Change-Id: I067c49b7e68577309b3d51d7e52d63a036aa5866
Signed-off-by: Igal Liberman <igall@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/crypto/inside-secure/safexcel.c | 64 +++++++++++++++++++------
 drivers/crypto/inside-secure/safexcel.h |  7 +++
 2 files changed, 56 insertions(+), 15 deletions(-)

diff --git a/drivers/crypto/inside-secure/safexcel.c b/drivers/crypto/inside-secure/safexcel.c
index fdce3243c808..09077e0950bd 100644
--- a/drivers/crypto/inside-secure/safexcel.c
+++ b/drivers/crypto/inside-secure/safexcel.c
@@ -23,9 +23,11 @@
 
 #include "safexcel.h"
 
-static u32 max_rings = EIP197_MAX_RINGS;
-module_param(max_rings, uint, 0644);
-MODULE_PARM_DESC(max_rings, "Maximum number of rings to use.");
+/* eip_in_use holds the active engine id */
+static int eip_in_use = -1;
+
+/* Module param to save the assigned rings to the Kernel */
+static uint rings[MAX_EIP_DEVICE] = {RINGS_UNINITIALIZED, RINGS_UNINITIALIZED};
 
 static void eip197_trc_cache_init(struct safexcel_crypto_priv *priv)
 {
@@ -412,7 +414,7 @@ static int safexcel_hw_init(struct safexcel_crypto_priv *priv)
 	}
 
 	/* Command Descriptor Rings prepare */
-	for (i = 0; i < priv->config.rings; i++) {
+	for (i = 0; i < priv->config.hw_rings; i++) {
 		/* Clear interrupts for this ring */
 		writel(GENMASK(31, 0),
 		       EIP197_HIA_AIC_R(priv) + EIP197_HIA_AIC_R_ENABLE_CLR(i));
@@ -438,7 +440,7 @@ static int safexcel_hw_init(struct safexcel_crypto_priv *priv)
 	}
 
 	/* Result Descriptor Ring prepare */
-	for (i = 0; i < priv->config.rings; i++) {
+	for (i = 0; i < priv->config.hw_rings; i++) {
 		/* Disable external triggering*/
 		writel(0, EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_CFG);
 
@@ -462,11 +464,11 @@ static int safexcel_hw_init(struct safexcel_crypto_priv *priv)
 
 	for (pe = 0; pe < priv->config.pes; pe++) {
 		/* Enable command descriptor rings */
-		writel(EIP197_DxE_THR_CTRL_EN | GENMASK(priv->config.rings - 1, 0),
+		writel(EIP197_DxE_THR_CTRL_EN | GENMASK(priv->config.hw_rings - 1, 0),
 		       EIP197_HIA_DFE_THR(priv) + EIP197_HIA_DFE_THR_CTRL(pe));
 
 		/* Enable result descriptor rings */
-		writel(EIP197_DxE_THR_CTRL_EN | GENMASK(priv->config.rings - 1, 0),
+		writel(EIP197_DxE_THR_CTRL_EN | GENMASK(priv->config.hw_rings - 1, 0),
 		       EIP197_HIA_DSE_THR(priv) + EIP197_HIA_DSE_THR_CTRL(pe));
 	}
 
@@ -930,11 +932,27 @@ static void safexcel_configure(struct safexcel_crypto_priv *priv)
 	}
 	priv->config.pes = (val >> EIP197_N_PES_OFFSET) & mask;
 
+	/* Read number of rings from the engine */
+	priv->config.hw_rings = val & EIP197_N_RINGS_MASK;
+
 	val = (val & GENMASK(27, 25)) >> 25;
 	mask = BIT(val) - 1;
 
-	val = readl(EIP197_HIA_AIC_G(priv) + EIP197_HIA_OPTIONS);
-	priv->config.rings = min_t(u32, val & GENMASK(3, 0), max_rings);
+	/* Check the requested number of rings given in the module param.
+	 * If the module param is uninitialized, use all available rings
+	 */
+	if (rings[priv->id] == RINGS_UNINITIALIZED)
+		rings[priv->id] = priv->config.hw_rings;
+
+	/* Check if the number of requested rings in module param is valid */
+	if (rings[priv->id] > priv->config.hw_rings) {
+		/* Invalid, use all available rings */
+		priv->config.rings = priv->config.hw_rings;
+		dev_warn(priv->dev, "requested %d rings, given only %d rings\n",
+			 rings[priv->id], priv->config.hw_rings);
+	} else  {
+		priv->config.rings = rings[priv->id];
+	}
 
 	priv->config.cd_size = (sizeof(struct safexcel_command_desc) / sizeof(u32));
 	priv->config.cd_offset = (priv->config.cd_size + mask) & ~mask;
@@ -1125,10 +1143,22 @@ static int safexcel_probe(struct platform_device *pdev)
 		goto err_reg_clk;
 	}
 
-	ret = safexcel_register_algorithms(priv);
-	if (ret) {
-		dev_err(dev, "Failed to register algorithms (%d)\n", ret);
-		goto err_reg_clk;
+	/*
+	 * Kernel crypto API doesn't allow to register 2 engines.
+	 * Allowing working with 2 engines requires additional modification
+	 * which are planned as future work (Modify the Kernel crypto API or
+	 * implement load balance in EIP driver to handle 2 engines).
+	 *
+	 * Currently we want to register the first probed engine.
+	 */
+	if (eip_in_use == -1 && priv->config.rings) {
+		eip_in_use = priv->id;
+		ret = safexcel_register_algorithms(priv);
+		if (ret) {
+			dev_err(dev, "Failed to register algorithms (%d)\n",
+				ret);
+			goto err_reg_clk;
+		}
 	}
 
 	return 0;
@@ -1164,8 +1194,10 @@ static int safexcel_remove(struct platform_device *pdev)
 	struct safexcel_crypto_priv *priv = platform_get_drvdata(pdev);
 	int i;
 
-	safexcel_unregister_algorithms(priv);
-	safexcel_hw_reset_rings(priv);
+	if (priv->id == eip_in_use) {
+		safexcel_unregister_algorithms(priv);
+		safexcel_hw_reset_rings(priv);
+	}
 
 	clk_disable_unprepare(priv->clk);
 
@@ -1211,6 +1243,8 @@ static struct platform_driver  crypto_safexcel = {
 	},
 };
 module_platform_driver(crypto_safexcel);
+module_param_array(rings, uint, NULL, 0644);
+MODULE_PARM_DESC(rings, "number of rings to be used by the driver");
 
 MODULE_AUTHOR("Antoine Tenart <antoine.tenart@free-electrons.com>");
 MODULE_AUTHOR("Ofer Heifetz <oferh@marvell.com>");
diff --git a/drivers/crypto/inside-secure/safexcel.h b/drivers/crypto/inside-secure/safexcel.h
index 7d10bac2f895..29bbba8112f0 100644
--- a/drivers/crypto/inside-secure/safexcel.h
+++ b/drivers/crypto/inside-secure/safexcel.h
@@ -17,6 +17,11 @@
 #define EIP197_HIA_VERSION_LE			0xca35
 #define EIP197_HIA_VERSION_BE			0x35ca
 
+/* Number of eip devices */
+#define MAX_EIP_DEVICE					2
+
+#define RINGS_UNINITIALIZED				0xff
+
 /* Static configuration */
 #define EIP197_DEFAULT_RING_SIZE		400
 #define EIP197_MAX_TOKENS			8
@@ -184,6 +189,7 @@
 /* EIP197_HIA_OPTIONS */
 #define EIP197_N_PES_OFFSET			4
 #define EIP197_N_PES_MASK			GENMASK(4, 0)
+#define EIP197_N_RINGS_MASK			GENMASK(3, 0)
 #define EIP97_N_PES_MASK			GENMASK(2, 0)
 
 /* EIP197_HIA_AIC_R_ENABLE_CTRL */
@@ -522,6 +528,7 @@ enum safexcel_alg_type {
 struct safexcel_config {
 	u32 pes;
 	u32 rings;
+	u32 hw_rings;
 
 	u32 cd_size;
 	u32 cd_offset;
-- 
2.17.1

