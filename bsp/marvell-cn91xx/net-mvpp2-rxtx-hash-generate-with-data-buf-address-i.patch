From 414dba539fae2aee511fd169136ea16598d5b516 Mon Sep 17 00:00:00 2001
From: Yan Markman <ymarkman@marvell.com>
Date: Thu, 2 Aug 2018 18:00:15 +0300
Subject: [PATCH 0563/1051] net: mvpp2: rxtx hash generate with data buf
 address inside

Extend the Rx-hash with skb->head address inside.
Generate the hash (and check) next way:
 HashBits[31..16] contain skb->head[22..7],
 where the head is skb's data-buffer address aligned [6..0]=0
This hash permits to detect 2 non-recyclable cases:
- new skb with old hash inside
- same skb but NET-stack has replaced the data-buffer with another one

Change-Id: I5195e831a21cfab7903038d9fdc7df238c898708
Signed-off-by: Yan Markman <ymarkman@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/58675
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/59494
Tested-by: Stefan Chulski <stefanc@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c | 16 +++++++++++++---
 1 file changed, 13 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
index 39c1ee1696af..554fc4ef5ff6 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
@@ -58,7 +58,17 @@ static struct {
 
 /* RX-TX fast-forwarding path optimization */
 #define MVPP2_RXTX_HASH			0xbac0
+#define MVPP2_RXTX_HASH_CONST_MASK	0xfff0
 #define MVPP2_RXTX_HASH_BMID_MASK	0xf
+/* HashBits[31..16] contain skb->head[22..7], the head is aligned and [6..0]=0
+ * This hash permits to detect 2 non-recyclable cases:
+ * - new skb with old hash inside
+ * - same skb but NET-stack has replaced the data-buffer with another one
+ */
+#define MVPP2_RXTX_HASH_GENER(skb, bm_pool_id) \
+	(((u32)(phys_addr_t)skb->head << 9) | MVPP2_RXTX_HASH | bm_pool_id)
+#define MVPP2_RXTX_HASH_IS_OK(skb, hash) \
+	(MVPP2_RXTX_HASH_GENER(skb, 0) == (hash & ~MVPP2_RXTX_HASH_BMID_MASK))
 
 /* The recycle pool size should be "effectively big" but limited (to eliminate
  * memory-wasting on TX-pick). It should be >8 (Net-stack-forwarding-buffer)
@@ -2970,13 +2980,13 @@ static int mvpp2_recycle_get_bm_id(struct sk_buff *skb)
 	/* Keep checking ordering for performance */
 	hash = skb_get_hash_raw(skb);
 	/* Check hash */
-	if ((hash & ~MVPP2_RXTX_HASH_BMID_MASK) != MVPP2_RXTX_HASH)
+	if (!MVPP2_RXTX_HASH_IS_OK(skb, hash))
 		return -1;
 	/* Check if skb could be free */
 	if (skb_shared(skb) || skb_cloned(skb))
 		return -1;
 	/* Get bm-pool-id */
-	hash &= ~MVPP2_RXTX_HASH;
+	hash &= MVPP2_RXTX_HASH_BMID_MASK;
 	if (hash >= MVPP2_BM_POOLS_NUM)
 		return -1;
 
@@ -3089,7 +3099,7 @@ static inline void mvpp2_skb_set_extra(struct sk_buff *skb,
 	enum pkt_hash_types hash_type;
 
 	/* Improve performance and set identification for RX-TX fast-forward */
-	hash = MVPP2_RXTX_HASH | bm_pool->id;
+	hash = MVPP2_RXTX_HASH_GENER(skb, bm_pool->id);
 	hash_type = (status & (MVPP2_RXD_L4_UDP | MVPP2_RXD_L4_TCP)) ?
 		PKT_HASH_TYPE_L4 : PKT_HASH_TYPE_L3;
 	skb_set_hash(skb, hash, hash_type);
-- 
2.17.1

