From 53fd00d6606f4c20f87a7b8971a9abd123d07e3a Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Fri, 17 Aug 2018 11:37:28 +0530
Subject: [PATCH 0111/1051] net: octeontx2: Enable CGX interface's packet IO

Admin function maps each of the RVU PF to a CGX interface.
Enable ingress and egress of this interface after all nic
initialization is done and disable at the start of teardown.

Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/otx2_common.c  |  4 ++--
 .../ethernet/marvell/octeontx2/otx2_common.h  |  2 ++
 .../net/ethernet/marvell/octeontx2/otx2_pf.c  | 15 +++++++++++++
 .../ethernet/marvell/octeontx2/otx2_txrx.c    | 22 +++++++++++++++++++
 .../ethernet/marvell/octeontx2/otx2_txrx.h    |  4 ++++
 5 files changed, 45 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
index 8347ad899d89..5d5816ed18a8 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
@@ -54,12 +54,12 @@ static int otx2_get_link(struct otx2_nic *pfvf)
 	u16 map;
 
 	/* cgx lmac link */
-	if (pfvf->tx_chan_base >= 0x800) {
+	if (pfvf->tx_chan_base >= CGX_CHAN_BASE) {
 		map = pfvf->tx_chan_base & 0x7FF;
 		link = 4 * ((map >> 8) & 0xF) + ((map >> 4) & 0xF);
 	}
 	/* LBK channel */
-	if (pfvf->tx_chan_base >= 0 && pfvf->tx_chan_base < 0x700)
+	if (pfvf->tx_chan_base < SDP_CHAN_BASE)
 		link = 12;
 
 	return link;
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
index 2438b134930e..f20eb1bfa8a5 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
@@ -74,6 +74,7 @@ struct otx2_nic {
 	struct otx2_hw		hw;
 	struct mbox		mbox;
 	struct workqueue_struct *mbox_wq;
+	bool			intf_down;
 	u16			pcifunc;
 	u16			rx_chan_base;
 	u16			tx_chan_base;
@@ -204,6 +205,7 @@ int otx2_config_nix_queues(struct otx2_nic *pfvf);
 int otx2_txschq_config(struct otx2_nic *pfvf, int lvl);
 int otx2_txsch_alloc(struct otx2_nic *pfvf);
 dma_addr_t otx2_alloc_rbuf(struct otx2_nic *pfvf, struct otx2_pool *pool);
+int otx2_rxtx_enable(struct otx2_nic *pfvf, bool enable);
 
 /* Mbox handlers */
 void mbox_handler_MSIX_OFFSET(struct otx2_nic *pfvf,
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
index 3598fe2a1209..7ef29a6c0953 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
@@ -455,6 +455,14 @@ static int otx2_open(struct net_device *netdev)
 		otx2_write64(pf, NIX_LF_CINTX_ENA_W1S(qidx), BIT_ULL(0));
 	}
 
+	err = otx2_rxtx_enable(pf, true);
+	if (err)
+		goto cleanup;
+
+	pf->intf_down = false;
+	netif_carrier_on(netdev);
+	netif_tx_start_all_queues(netdev);
+
 	return 0;
 
 cleanup:
@@ -474,6 +482,13 @@ static int otx2_stop(struct net_device *netdev)
 	struct otx2_qset *qset = &pf->qset;
 	int qidx, vec;
 
+	/* First stop packet Rx/Tx at CGX */
+	otx2_rxtx_enable(pf, false);
+
+	pf->intf_down = true;
+	/* 'intf_down' may be checked on any cpu */
+	smp_wmb();
+
 	netif_carrier_off(netdev);
 	netif_tx_stop_all_queues(netdev);
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c b/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c
index 8fcde319040f..6dca0b685039 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c
@@ -319,6 +319,10 @@ int otx2_poll(struct napi_struct *napi, int budget)
 		/* Exit polling */
 		napi_complete(napi);
 
+		/* If interface is going down, don't re-enable IRQ */
+		if (pfvf->intf_down)
+			return workdone;
+
 		/* Re-enable interrupts */
 		otx2_write64(pfvf, NIX_LF_CINTX_ENA_W1S(cq_poll->cint_idx),
 			     BIT_ULL(0));
@@ -446,3 +450,21 @@ bool otx2_sq_append_skb(struct net_device *netdev, struct otx2_snd_queue *sq,
 		    qidx, sq->num_sqbs, *sq->aura_fc_addr);
 	return false;
 }
+
+int otx2_rxtx_enable(struct otx2_nic *pfvf, bool enable)
+{
+	struct msg_req *msg;
+
+	if (pfvf->tx_chan_base < CGX_CHAN_BASE)
+		return 0;
+
+	if (enable)
+		msg = otx2_mbox_alloc_msg_CGX_START_RXTX(&pfvf->mbox);
+	else
+		msg = otx2_mbox_alloc_msg_CGX_STOP_RXTX(&pfvf->mbox);
+
+	if (!msg)
+		return -ENOMEM;
+
+	return otx2_sync_mbox_msg(&pfvf->mbox);
+}
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.h b/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.h
index 4d0a2fcdd4be..aa272d6df1fe 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.h
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.h
@@ -14,6 +14,10 @@
 #include <linux/etherdevice.h>
 #include <linux/iommu.h>
 
+#define LBK_CHAN_BASE	0x000
+#define SDP_CHAN_BASE	0x700
+#define CGX_CHAN_BASE	0x800
+
 #define RQ_QLEN		1024
 #define SQ_QLEN		1024
 #define DMA_BUFFER_LEN	1536 /* In multiples of 128bytes */
-- 
2.17.1

