From 92d212afd053f9c00a0c701ebdfd2ce8bddfcc48 Mon Sep 17 00:00:00 2001
From: Christina Jacob <cjacob@marvell.com>
Date: Fri, 15 Feb 2019 13:07:06 +0530
Subject: [PATCH 1017/1051] octeontx2-pf: Fix checkpatch issue reported by 4.20
 script

Fix checkpatch issues reported by 4.20 script
and also remove grabage code.

Change-Id: I7d858c0b662a645210f48f855e38cd26c89bf65b
Signed-off-by: Christina Jacob <cjacob@marvell.com>
Signed-off-by: Geetha sowjanya <gakula@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/4358
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.c       | 227 +++++++++---------
 .../marvell/octeontx2/nic/otx2_common.h       |  76 +++---
 .../marvell/octeontx2/nic/otx2_ethtool.c      |   1 -
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  |  17 +-
 .../ethernet/marvell/octeontx2/nic/otx2_reg.h |   4 +-
 .../marvell/octeontx2/nic/otx2_struct.h       |   6 +-
 .../marvell/octeontx2/nic/otx2_txrx.h         |   6 +-
 7 files changed, 167 insertions(+), 170 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
index e309142c9005..223b6366c649 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
@@ -16,13 +16,94 @@
 #include "otx2_reg.h"
 #include "otx2_common.h"
 #include "otx2_struct.h"
-#include "otx2_struct.h"
 
 static inline void otx2_nix_rq_op_stats(struct queue_stats *stats,
 					struct otx2_nic *pfvf, int qidx);
 static inline void otx2_nix_sq_op_stats(struct queue_stats *stats,
 					struct otx2_nic *pfvf, int qidx);
 
+void otx2_update_lmac_stats(struct otx2_nic *pfvf)
+{
+	struct msg_req *req;
+
+	if (!netif_running(pfvf->netdev))
+		return;
+	req = otx2_mbox_alloc_msg_cgx_stats(&pfvf->mbox);
+	if (!req)
+		return;
+
+	otx2_sync_mbox_msg(&pfvf->mbox);
+}
+
+int otx2_update_rq_stats(struct otx2_nic *pfvf, int qidx)
+{
+	struct otx2_rcv_queue *rq = &pfvf->qset.rq[qidx];
+
+	if (!pfvf->qset.rq)
+		return 0;
+
+	otx2_nix_rq_op_stats(&rq->stats, pfvf, qidx);
+	return 1;
+}
+
+int otx2_update_sq_stats(struct otx2_nic *pfvf, int qidx)
+{
+	struct otx2_snd_queue *sq = &pfvf->qset.sq[qidx];
+
+	if (!pfvf->qset.sq)
+		return 0;
+
+	otx2_nix_sq_op_stats(&sq->stats, pfvf, qidx);
+	return 1;
+}
+
+void otx2_get_dev_stats(struct otx2_nic *pfvf)
+{
+	struct otx2_dev_stats *dev_stats = &pfvf->hw.dev_stats;
+
+#define OTX2_GET_RX_STATS(reg) \
+	 otx2_read64(pfvf, NIX_LF_RX_STATX(reg))
+#define OTX2_GET_TX_STATS(reg) \
+	 otx2_read64(pfvf, NIX_LF_TX_STATX(reg))
+
+	dev_stats->rx_bytes = OTX2_GET_RX_STATS(RX_OCTS);
+	dev_stats->rx_drops = OTX2_GET_RX_STATS(RX_DROP);
+	dev_stats->rx_bcast_frames = OTX2_GET_RX_STATS(RX_BCAST);
+	dev_stats->rx_mcast_frames = OTX2_GET_RX_STATS(RX_MCAST);
+	dev_stats->rx_ucast_frames = OTX2_GET_RX_STATS(RX_UCAST);
+	dev_stats->rx_frames = dev_stats->rx_bcast_frames +
+			       dev_stats->rx_mcast_frames +
+			       dev_stats->rx_ucast_frames;
+
+	dev_stats->tx_bytes = OTX2_GET_TX_STATS(TX_OCTS);
+	dev_stats->tx_drops = OTX2_GET_TX_STATS(TX_DROP);
+	dev_stats->tx_bcast_frames = OTX2_GET_TX_STATS(TX_BCAST);
+	dev_stats->tx_mcast_frames = OTX2_GET_TX_STATS(TX_MCAST);
+	dev_stats->tx_ucast_frames = OTX2_GET_TX_STATS(TX_UCAST);
+	dev_stats->tx_frames = dev_stats->tx_bcast_frames +
+			       dev_stats->tx_mcast_frames +
+			       dev_stats->tx_ucast_frames;
+}
+
+void otx2_get_stats64(struct net_device *netdev,
+		      struct rtnl_link_stats64 *stats)
+{
+	struct otx2_nic *pfvf = netdev_priv(netdev);
+	struct otx2_dev_stats *dev_stats = &pfvf->hw.dev_stats;
+
+	otx2_get_dev_stats(pfvf);
+
+	stats->rx_bytes = dev_stats->rx_bytes;
+	stats->rx_packets = dev_stats->rx_frames;
+	stats->rx_dropped = dev_stats->rx_drops;
+	stats->multicast = dev_stats->rx_mcast_frames;
+
+	stats->tx_bytes = dev_stats->tx_bytes;
+	stats->tx_packets = dev_stats->tx_frames;
+	stats->tx_dropped = dev_stats->tx_drops;
+}
+EXPORT_SYMBOL(otx2_get_stats64);
+
 /* Sync MAC address with RVU */
 int otx2_hw_set_mac_addr(struct otx2_nic *pfvf, struct net_device *netdev)
 {
@@ -183,112 +264,6 @@ int otx2_rss_init(struct otx2_nic *pfvf)
 	return otx2_set_flowkey_cfg(pfvf);
 }
 
-void otx2_update_lmac_stats(struct otx2_nic *pfvf)
-{
-	struct msg_req *req;
-
-	if (!netif_running(pfvf->netdev))
-		return;
-	req = otx2_mbox_alloc_msg_cgx_stats(&pfvf->mbox);
-	if (!req)
-		return;
-
-	otx2_sync_mbox_msg(&pfvf->mbox);
-}
-
-int otx2_update_rq_stats(struct otx2_nic *pfvf, int qidx)
-{
-	struct otx2_rcv_queue *rq = &pfvf->qset.rq[qidx];
-
-	if (!pfvf->qset.rq)
-		return 0;
-
-	otx2_nix_rq_op_stats(&rq->stats, pfvf, qidx);
-	return 1;
-}
-
-int otx2_update_sq_stats(struct otx2_nic *pfvf, int qidx)
-{
-	struct otx2_snd_queue *sq = &pfvf->qset.sq[qidx];
-
-	if (!pfvf->qset.sq)
-		return 0;
-
-	otx2_nix_sq_op_stats(&sq->stats, pfvf, qidx);
-	return 1;
-}
-
-void otx2_get_dev_stats(struct otx2_nic *pfvf)
-{
-	struct otx2_dev_stats *dev_stats = &pfvf->hw.dev_stats;
-
-#define OTX2_GET_RX_STATS(reg) \
-	 otx2_read64(pfvf, NIX_LF_RX_STATX(reg))
-#define OTX2_GET_TX_STATS(reg) \
-	 otx2_read64(pfvf, NIX_LF_TX_STATX(reg))
-
-	dev_stats->rx_bytes = OTX2_GET_RX_STATS(RX_OCTS);
-	dev_stats->rx_drops = OTX2_GET_RX_STATS(RX_DROP);
-	dev_stats->rx_bcast_frames = OTX2_GET_RX_STATS(RX_BCAST);
-	dev_stats->rx_mcast_frames = OTX2_GET_RX_STATS(RX_MCAST);
-	dev_stats->rx_ucast_frames = OTX2_GET_RX_STATS(RX_UCAST);
-	dev_stats->rx_frames = dev_stats->rx_bcast_frames +
-			       dev_stats->rx_mcast_frames +
-			       dev_stats->rx_ucast_frames;
-
-	dev_stats->tx_bytes = OTX2_GET_TX_STATS(TX_OCTS);
-	dev_stats->tx_drops = OTX2_GET_TX_STATS(TX_DROP);
-	dev_stats->tx_bcast_frames = OTX2_GET_TX_STATS(TX_BCAST);
-	dev_stats->tx_mcast_frames = OTX2_GET_TX_STATS(TX_MCAST);
-	dev_stats->tx_ucast_frames = OTX2_GET_TX_STATS(TX_UCAST);
-	dev_stats->tx_frames = dev_stats->tx_bcast_frames +
-			       dev_stats->tx_mcast_frames +
-			       dev_stats->tx_ucast_frames;
-}
-
-void otx2_get_stats64(struct net_device *netdev,
-		      struct rtnl_link_stats64 *stats)
-{
-	struct otx2_nic *pfvf = netdev_priv(netdev);
-	struct otx2_dev_stats *dev_stats = &pfvf->hw.dev_stats;
-
-	otx2_get_dev_stats(pfvf);
-
-	stats->rx_bytes = dev_stats->rx_bytes;
-	stats->rx_packets = dev_stats->rx_frames;
-	stats->rx_dropped = dev_stats->rx_drops;
-	stats->multicast = dev_stats->rx_mcast_frames;
-
-	stats->tx_bytes = dev_stats->tx_bytes;
-	stats->tx_packets = dev_stats->tx_frames;
-	stats->tx_dropped = dev_stats->tx_drops;
-}
-EXPORT_SYMBOL(otx2_get_stats64);
-
-void otx2_set_cints_affinity(struct otx2_nic *pfvf)
-{
-	struct otx2_hw *hw = &pfvf->hw;
-	int vec, cpu, irq, cint;
-
-	vec = hw->nix_msixoff + NIX_LF_CINT_VEC_START;
-	cpu = cpumask_first(cpu_online_mask);
-
-	/* CQ interrupts */
-	for (cint = 0; cint < pfvf->hw.cint_cnt; cint++, vec++) {
-		if (!alloc_cpumask_var(&hw->affinity_mask[vec], GFP_KERNEL))
-			return;
-
-		cpumask_set_cpu(cpu, hw->affinity_mask[vec]);
-
-		irq = pci_irq_vector(pfvf->pdev, vec);
-		irq_set_affinity_hint(irq, hw->affinity_mask[vec]);
-
-		cpu = cpumask_next(cpu, cpu_online_mask);
-		if (unlikely(cpu >= nr_cpu_ids))
-			cpu = 0;
-	}
-}
-
 dma_addr_t otx2_alloc_rbuf(struct otx2_nic *pfvf, struct otx2_pool *pool,
 			   gfp_t gfp)
 {
@@ -614,9 +589,9 @@ static int otx2_cq_init(struct otx2_nic *pfvf, u16 qidx)
 	struct otx2_cq_queue *cq;
 
 	cq = &qset->cq[qidx];
-	cq->cqe_size = pfvf->qset.xqe_size;
 	cq->cqe_cnt = (qidx < pfvf->hw.rx_queues) ? qset->rqe_cnt
-				: qset->sqe_cnt;
+			: qset->sqe_cnt;
+	cq->cqe_size = pfvf->qset.xqe_size;
 
 	/* Allocate memory for CQEs */
 	err = qmem_alloc(pfvf->dev, &cq->cqe, cq->cqe_cnt, cq->cqe_size);
@@ -625,13 +600,13 @@ static int otx2_cq_init(struct otx2_nic *pfvf, u16 qidx)
 
 	/* Save CQE CPU base for faster reference */
 	cq->cqe_base = cq->cqe->base;
-
 	/* In case where all RQs auras point to single pool,
 	 * all CQs receive buffer pool also point to same pool.
 	 */
 	pool_id = ((qidx < pfvf->hw.rx_queues) &&
 		   (pfvf->hw.rqpool_cnt != pfvf->hw.rx_queues)) ? 0 : qidx;
 	cq->rbpool = &qset->pool[pool_id];
+
 	cq->cq_idx = qidx;
 
 	/* Get memory to put this msg */
@@ -698,7 +673,7 @@ int otx2_config_nix_queues(struct otx2_nic *pfvf)
 
 int otx2_config_nix(struct otx2_nic *pfvf)
 {
-	struct nix_lf_alloc_req *nixlf;
+	struct nix_lf_alloc_req  *nixlf;
 	struct nix_lf_alloc_rsp *rsp;
 	int err;
 
@@ -744,12 +719,11 @@ int otx2_config_nix(struct otx2_nic *pfvf)
 void otx2_free_aura_ptr(struct otx2_nic *pfvf, int type)
 {
 	int pool_id, pool_start = 0, pool_end = 0, size = 0;
-	struct otx2_pool *pool;
 	u64 iova, pa;
 
 	if (type == AURA_NIX_SQ) {
 		pool_start = otx2_get_pool_idx(pfvf, type, 0);
-		pool_end = pool_start + pfvf->hw.sqpool_cnt;
+		pool_end =  pool_start + pfvf->hw.sqpool_cnt;
 		size = pfvf->hw.sqb_size;
 	}
 	if (type == AURA_NIX_RQ) {
@@ -760,7 +734,6 @@ void otx2_free_aura_ptr(struct otx2_nic *pfvf, int type)
 
 	/* Free SQB and RQB pointers from the aura pool */
 	for (pool_id = pool_start; pool_id < pool_end; pool_id++) {
-		pool = &pfvf->qset.pool[pool_id];
 		iova = otx2_aura_allocptr(pfvf, pool_id);
 		while (iova) {
 			if (type == AURA_NIX_RQ)
@@ -878,7 +851,6 @@ static int otx2_pool_init(struct otx2_nic *pfvf, u16 pool_id,
 	aq->pool.stack_base = pool->stack->iova;
 	aq->pool.stack_caching = 1;
 	aq->pool.ena = 1;
-	aq->aura.avg_level = 255;
 	aq->pool.buf_size = buf_size / 128;
 	aq->pool.stack_max_pages = stack_pages;
 	aq->pool.shift = ilog2(numptrs) - 8;
@@ -971,7 +943,6 @@ int otx2_rq_aura_pool_init(struct otx2_nic *pfvf)
 		if (err)
 			goto fail;
 	}
-
 	for (pool_id = 0; pool_id < hw->rqpool_cnt; pool_id++) {
 		err = otx2_pool_init(pfvf, pool_id, stack_pages,
 				     num_ptrs, RCV_FRAG_LEN);
@@ -1206,6 +1177,30 @@ void otx2_free_cints(struct otx2_nic *pfvf, int n)
 	}
 }
 
+void otx2_set_cints_affinity(struct otx2_nic *pfvf)
+{
+	struct otx2_hw *hw = &pfvf->hw;
+	int vec, cpu, irq, cint;
+
+	vec = hw->nix_msixoff + NIX_LF_CINT_VEC_START;
+	cpu = cpumask_first(cpu_online_mask);
+
+	/* CQ interrupts */
+	for (cint = 0; cint < pfvf->hw.cint_cnt; cint++, vec++) {
+		if (!alloc_cpumask_var(&hw->affinity_mask[vec], GFP_KERNEL))
+			return;
+
+		cpumask_set_cpu(cpu, hw->affinity_mask[vec]);
+
+		irq = pci_irq_vector(pfvf->pdev, vec);
+		irq_set_affinity_hint(irq, hw->affinity_mask[vec]);
+
+		cpu = cpumask_next(cpu, cpu_online_mask);
+		if (unlikely(cpu >= nr_cpu_ids))
+			cpu = 0;
+	}
+}
+
 #define M(_name, _id, _fn_name, _req_type, _rsp_type)			\
 int __weak								\
 otx2_mbox_up_handler_ ## _fn_name(struct otx2_nic *pfvf,		\
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index c4ff21f97227..9a683c1596b2 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: GPL-2.0
-/* Marvell OcteonTx2 RVU Ethernet driver
+/* SPDX-License-Identifier: GPL-2.0
+ * Marvell OcteonTx2 RVU Ethernet driver
  *
  * Copyright (C) 2018 Marvell International Ltd.
  *
@@ -35,11 +35,28 @@ enum arua_mapped_qtypes {
 };
 
 /* NIX LF interrupts range*/
-#define NIX_LF_QINT_VEC_START	0x00
-#define NIX_LF_CINT_VEC_START	0x40
-#define NIX_LF_GINT_VEC		0x80
-#define NIX_LF_ERR_VEC		0x81
-#define NIX_LF_POISON_VEC	0x82
+#define NIX_LF_QINT_VEC_START			0x00
+#define NIX_LF_CINT_VEC_START			0x40
+#define NIX_LF_GINT_VEC				0x80
+#define NIX_LF_ERR_VEC				0x81
+#define NIX_LF_POISON_VEC			0x82
+
+struct  otx2_pcpu_stats {
+	u64 rq_drops;
+	u64 rq_red_drops;
+
+	struct u64_stats_sync syncp;
+};
+
+/* RSS configuration */
+struct otx2_rss_info {
+	u8 enable;
+	u32 flowkey_cfg;
+	u16 rss_size;
+	u8  ind_tbl[MAX_RSS_INDIR_TBL_SIZE];
+#define RSS_HASH_KEY_SIZE	44   /* 352 bit key */
+	u8  key[RSS_HASH_KEY_SIZE];
+};
 
 /* NIX TX stats */
 enum nix_stat_lf_tx {
@@ -84,23 +101,6 @@ struct  otx2_dev_stats {
 	u64 tx_drops;
 };
 
-struct  otx2_pcpu_stats {
-	u64 rq_drops;
-	u64 rq_red_drops;
-
-	struct u64_stats_sync syncp;
-};
-
-/* RSS configuration */
-struct otx2_rss_info {
-	bool enable;
-	u32 flowkey_cfg;
-	u16 rss_size;
-	u8  ind_tbl[MAX_RSS_INDIR_TBL_SIZE];
-#define RSS_HASH_KEY_SIZE	44   /* 352 bit key */
-	u8  key[RSS_HASH_KEY_SIZE];
-};
-
 struct  mbox {
 	struct otx2_mbox	mbox;
 	struct work_struct	mbox_wrk;
@@ -112,9 +112,9 @@ struct  mbox {
 
 struct otx2_hw {
 	struct pci_dev		*pdev;
+	struct otx2_rss_info	rss_info;
 	struct otx2_dev_stats	dev_stats;
 	struct otx2_pcpu_stats  __percpu *pcpu_stats;
-	struct otx2_rss_info	rss_info;
 	u16                     rx_queues;
 	u16                     tx_queues;
 	u16			max_queues;
@@ -158,7 +158,8 @@ struct otx2_nic {
 	struct otx2_hw		hw;
 	struct mbox		mbox;
 	struct workqueue_struct *mbox_wq;
-	bool			intf_down;
+	u8			intf_down;
+
 	u16			pcifunc;
 	u16			rx_chan_base;
 	u16			tx_chan_base;
@@ -265,7 +266,7 @@ static inline int otx2_get_pool_idx(struct otx2_nic *pfvf, int type, int idx)
 	if (type == AURA_NIX_SQ)
 		return pfvf->hw.rqpool_cnt + idx;
 
-	/* AURA_NIX_RQ */
+	 /* AURA_NIX_RQ */
 	return idx;
 }
 
@@ -301,9 +302,9 @@ static inline int otx2_sync_mbox_msg_busy_poll(struct mbox *mbox)
 	return otx2_mbox_check_rsp_msgs(&mbox->mbox, 0);
 }
 
-#define M(_name, _id, _fn_name, _req_type, _rsp_type)			\
+#define M(_name, _id, _fn_name, _req_type, _rsp_type)                   \
 static struct _req_type __maybe_unused					\
-*otx2_mbox_alloc_msg_ ## _fn_name(struct mbox *mbox)			\
+*otx2_mbox_alloc_msg_ ## _fn_name(struct mbox *mbox)                    \
 {									\
 	struct _req_type *req;						\
 									\
@@ -396,6 +397,12 @@ static inline int rvu_get_pf(u16 pcifunc)
 void otx2_free_cints(struct otx2_nic *pfvf, int n);
 void otx2_set_cints_affinity(struct otx2_nic *pfvf);
 
+int otx2_hw_set_mac_addr(struct otx2_nic *pfvf, struct net_device *netdev);
+int otx2_set_mac_address(struct net_device *netdev, void *p);
+int otx2_change_mtu(struct net_device *netdev, int new_mtu);
+int otx2_hw_set_mtu(struct otx2_nic *pfvf, int mtu);
+void otx2_tx_timeout(struct net_device *netdev);
+
 /* RVU block related APIs */
 int otx2_attach_npa_nix(struct otx2_nic *pfvf);
 int otx2_detach_resources(struct mbox *mbox);
@@ -416,14 +423,6 @@ void otx2_ctx_disable(struct mbox *mbox, int type, bool npa);
 
 int otx2_napi_handler(struct otx2_cq_queue *cq,
 		      struct otx2_nic *pfvf, int budget);
-void otx2_get_dev_stats(struct otx2_nic *pfvf);
-void otx2_get_stats64(struct net_device *netdev,
-		      struct rtnl_link_stats64 *stats);
-int otx2_hw_set_mac_addr(struct otx2_nic *pfvf, struct net_device *netdev);
-int otx2_set_mac_address(struct net_device *netdev, void *p);
-int otx2_change_mtu(struct net_device *netdev, int new_mtu);
-int otx2_hw_set_mtu(struct otx2_nic *pfvf, int mtu);
-void otx2_tx_timeout(struct net_device *netdev);
 
 /* RSS configuration APIs*/
 int otx2_rss_init(struct otx2_nic *pfvf);
@@ -444,6 +443,9 @@ void mbox_handler_cgx_stats(struct otx2_nic *pfvf,
 			    struct cgx_stats_rsp *rsp);
 
 /* Device stats APIs */
+void otx2_get_dev_stats(struct otx2_nic *pfvf);
+void otx2_get_stats64(struct net_device *netdev,
+		      struct rtnl_link_stats64 *stats);
 void otx2_update_lmac_stats(struct otx2_nic *pfvf);
 int otx2_update_rq_stats(struct otx2_nic *pfvf, int qidx);
 int otx2_update_sq_stats(struct otx2_nic *pfvf, int qidx);
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
index e117dbe67266..6f8a4292c96f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
@@ -128,7 +128,6 @@ static void otx2_get_strings(struct net_device *netdev, u32 sset, u8 *data)
 		sprintf(data, "cgx_txstat%d: ", stats);
 		data += ETH_GSTRING_LEN;
 	}
-
 	strcpy(data, "reset_count");
 }
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index 96c63657739b..9a7a631ddc4f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -280,7 +280,6 @@ static int otx2_register_mbox_intr(struct otx2_nic *pf)
 		otx2_disable_mbox_intr(pf);
 		return -ENOMEM;
 	}
-
 	err = otx2_sync_mbox_msg(&pf->mbox);
 	if (err) {
 		dev_warn(pf->dev,
@@ -288,6 +287,7 @@ static int otx2_register_mbox_intr(struct otx2_nic *pf)
 		otx2_disable_mbox_intr(pf);
 		return -EPROBE_DEFER;
 	}
+
 	return 0;
 }
 
@@ -958,9 +958,9 @@ int otx2_stop(struct net_device *netdev)
 	}
 
 	netif_tx_disable(netdev);
+
 	otx2_free_hw_resources(pf);
 	otx2_free_cints(pf, pf->hw.cint_cnt);
-
 	otx2_disable_napi(pf);
 
 	for (qidx = 0; qidx < netdev->num_tx_queues; qidx++)
@@ -1157,11 +1157,11 @@ static const struct net_device_ops otx2_netdev_ops = {
 	.ndo_start_xmit		= otx2_xmit,
 	.ndo_fix_features	= otx2_fix_features,
 	.ndo_set_mac_address    = otx2_set_mac_address,
-	.ndo_change_mtu         = otx2_change_mtu,
-	.ndo_set_rx_mode        = otx2_set_rx_mode,
-	.ndo_get_stats64	= otx2_get_stats64,
+	.ndo_change_mtu		= otx2_change_mtu,
+	.ndo_set_rx_mode	= otx2_set_rx_mode,
 	.ndo_set_features	= otx2_set_features,
-	.ndo_tx_timeout         = otx2_tx_timeout,
+	.ndo_tx_timeout		= otx2_tx_timeout,
+	.ndo_get_stats64	= otx2_get_stats64,
 	.ndo_do_ioctl		= otx2_ioctl,
 };
 
@@ -1189,8 +1189,8 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	struct net_device *netdev;
 	struct otx2_nic *pf;
 	struct otx2_hw *hw;
-	int    err, qcount;
-	int    num_vec = pci_msix_vec_count(pdev);
+	int err, qcount;
+	int num_vec;
 
 	err = pcim_enable_device(pdev);
 	if (err) {
@@ -1239,6 +1239,7 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	hw->tx_queues = qcount;
 	hw->max_queues = qcount;
 
+	num_vec = pci_msix_vec_count(pdev);
 	hw->irq_name = devm_kmalloc_array(&hw->pdev->dev, num_vec, NAME_SIZE,
 					  GFP_KERNEL);
 	if (!hw->irq_name)
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_reg.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_reg.h
index be4ab69cf70a..cfdd85cf2b4d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_reg.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_reg.h
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: GPL-2.0
-/* Marvell OcteonTx2 RVU Physcial Function ethernet driver
+/* SPDX-License-Identifier: GPL-2.0
+ * Marvell OcteonTx2 RVU Ethernet driver
  *
  * Copyright (C) 2018 Marvell International Ltd.
  *
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_struct.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_struct.h
index e64cd455e702..6907017f6d56 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_struct.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_struct.h
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: GPL-2.0
-/* Marvell OcteonTx2 RVU Ethernet driver
+/* SPDX-License-Identifier: GPL-2.0
+ * Marvell OcteonTx2 RVU Ethernet driver
  *
  * Copyright (C) 2018 Marvell International Ltd.
  *
@@ -31,7 +31,7 @@ enum nix_send_ldtype {
 /* CSUM offload */
 enum nix_sendl3type {
 	NIX_SENDL3TYPE_NONE = 0x0,
-	NIX_SENDL3TYPE_IP4  = 0x2,
+	NIX_SENDL3TYPE_IP4 = 0x2,
 	NIX_SENDL3TYPE_IP4_CKSUM = 0x3,
 	NIX_SENDL3TYPE_IP6 = 0x4,
 };
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.h
index 3a103014fdd6..ac49ec7f42dc 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.h
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: GPL-2.0
-/* Marvell OcteonTx2 RVU Ethernet driver
+/* SPDX-License-Identifier: GPL-2.0
+ * Marvell OcteonTx2 RVU Ethernet driver
  *
  * Copyright (C) 2018 Marvell International Ltd.
  *
@@ -93,8 +93,8 @@ struct otx2_pool {
 struct otx2_cq_queue {
 	u8			cq_idx;
 	u8			cint_idx; /* CQ interrupt id */
-	u16			cqe_size;
 	u32			cqe_cnt;
+	u16			cqe_size;
 	void			*cqe_base;
 	struct qmem		*cqe;
 	struct otx2_pool	*rbpool;
-- 
2.17.1

