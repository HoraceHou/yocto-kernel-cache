From ea19d28329d3cff531cf3e72422ac04fc0f98f28 Mon Sep 17 00:00:00 2001
From: Hanna Hawa <hannah@marvell.com>
Date: Wed, 26 Jul 2017 13:34:11 +0300
Subject: [PATCH 0575/1051] irqchip/gicv3-its: add workaround for MVEBU ITS
 errata

On Marvell Armada-AP810 SoCs, it include GIC-600.
There's bug in fabric connection to GIC-600, due this bug the ITS
got wrong data in queue command & interrupt translation table.

This commit enables workaround for Marvell SoCs by using GIC
revision r1p0 (The IIDR revision of GIC-ITS allocated for Marvell
release approved by ARM).
The workaround enables cache flush flags to enable flushing the
cache after configuring queue command or interrupt translation tables,
so the ITS would get the correct data instead of the corrupted data.

We use the "ITS_FLAGS_WORKAROUND_MVEBU_ERRATA" define for
this workaround waiting for an errata number.

Change-Id: I4e6d43ce71b336e4bf5d7a643c39bfd303428526
Signed-off-by: Hanna Hawa <hannah@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06.
Just some minor context mods in order to port to wrlinux]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/irqchip/irq-gic-v3-its.c   | 34 ++++++++++++++++++++++++++++++
 include/linux/irqchip/arm-gic-v3.h |  4 ++++
 2 files changed, 38 insertions(+)

diff --git a/drivers/irqchip/irq-gic-v3-its.c b/drivers/irqchip/irq-gic-v3-its.c
index 1784edcdd5bb..24800620a7fe 100644
--- a/drivers/irqchip/irq-gic-v3-its.c
+++ b/drivers/irqchip/irq-gic-v3-its.c
@@ -48,6 +48,7 @@
 #define ITS_FLAGS_WORKAROUND_CAVIUM_22375	(1ULL << 1)
 #define ITS_FLAGS_WORKAROUND_CAVIUM_23144	(1ULL << 2)
 #define ITS_FLAGS_SAVE_SUSPEND_STATE		(1ULL << 3)
+#define ITS_FLAGS_WORKAROUND_MVEBU_ERRATA	(1ULL << 4)
 
 #define RDIST_FLAGS_PROPBASE_NEEDS_FLUSHING	(1 << 0)
 
@@ -3064,6 +3065,18 @@ static bool __maybe_unused its_enable_quirk_hip07_161600802(void *data)
 	return true;
 }
 
+static bool __maybe_unused its_enable_quirk_mvebu(void *data)
+{
+	struct its_node *its = data;
+
+	/*
+	 * Enable MVEBU workaround to flush the command
+	 * queue & ITS translation table
+	 */
+	its->flags |= ITS_FLAGS_WORKAROUND_MVEBU_ERRATA;
+	return true;
+}
+
 static const struct gic_quirk its_quirks[] = {
 #ifdef CONFIG_CAVIUM_ERRATUM_22375
 	{
@@ -3111,6 +3124,10 @@ static const struct gic_quirk its_quirks[] = {
 	},
 #endif
 	{
+		.desc	= "ITS: Marvell workaround errata",
+		.iidr	= 0x0201043B, /* r1p0 revision ID for Marvell release */
+		.mask	= 0xffffffff,
+		.init	= its_enable_quirk_mvebu,
 	}
 };
 
@@ -3441,6 +3458,23 @@ static int __init its_probe_one(struct resource *res,
 		its->flags |= ITS_FLAGS_CMDQ_NEEDS_FLUSHING;
 	}
 
+	/*
+	 * In Marvell case it was architecturally-defined that  GIC
+	 * support Shareability & Cacheability but due to fabric signals
+	 * issue, the HW allows to enable those bits (falsely), which
+	 * will lead to not enabling ITS_FLAGS_CMDQ_NEEDS_FLUSHING.
+	 * but due to that missing fabric signals, Marvell implementation
+	 * requires enabling ITS_FLAGS_CMDQ_NEEDS_FLUSHING.
+	 */
+	if (its->flags & ITS_FLAGS_WORKAROUND_MVEBU_ERRATA) {
+		its->flags |= ITS_FLAGS_CMDQ_NEEDS_FLUSHING;
+
+		baser &= ~(GITS_CBASER_SHAREABILITY_MASK |
+			   GITS_CBASER_CACHEABILITY_MASK);
+		baser |= GITS_CBASER_nCnB | GITS_CBASER_NonShareable;
+		writeq_relaxed(baser, its->base + GITS_CBASER);
+	}
+
 	gits_write_cwriter(0, its->base + GITS_CWRITER);
 	ctlr = readl_relaxed(its->base + GITS_CTLR);
 	ctlr |= GITS_CTLR_ENABLE;
diff --git a/include/linux/irqchip/arm-gic-v3.h b/include/linux/irqchip/arm-gic-v3.h
index 72ed08d9e1b5..01a476e8e346 100644
--- a/include/linux/irqchip/arm-gic-v3.h
+++ b/include/linux/irqchip/arm-gic-v3.h
@@ -336,6 +336,8 @@
 
 #define GITS_CBASER_InnerShareable					\
 	GIC_BASER_SHAREABILITY(GITS_CBASER, InnerShareable)
+#define GITS_CBASER_NonShareable					\
+	GIC_BASER_SHAREABILITY(GITS_CBASER, NonShareable)
 
 #define GITS_CBASER_nCnB	GIC_BASER_CACHEABILITY(GITS_CBASER, INNER, nCnB)
 #define GITS_CBASER_nC		GIC_BASER_CACHEABILITY(GITS_CBASER, INNER, nC)
@@ -380,6 +382,8 @@
 #define GITS_BASER_SHAREABILITY_SHIFT	(10)
 #define GITS_BASER_InnerShareable					\
 	GIC_BASER_SHAREABILITY(GITS_BASER, InnerShareable)
+#define GITS_BASER_NonShareable						\
+	GIC_BASER_SHAREABILITY(GITS_BASER, NonShareable)
 #define GITS_BASER_PAGE_SIZE_SHIFT	(8)
 #define GITS_BASER_PAGE_SIZE_4K		(0ULL << GITS_BASER_PAGE_SIZE_SHIFT)
 #define GITS_BASER_PAGE_SIZE_16K	(1ULL << GITS_BASER_PAGE_SIZE_SHIFT)
-- 
2.17.1

