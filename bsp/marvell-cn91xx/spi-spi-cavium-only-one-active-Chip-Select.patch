From 40d16f3090cc15e05b6c684c163a21c18eacb0d0 Mon Sep 17 00:00:00 2001
From: Peter Swain <peter.swain@cavium.com>
Date: Wed, 22 Aug 2018 14:14:59 -0700
Subject: [PATCH 0148/1051] spi: spi-cavium: only one active Chip-Select

When multiple SPI devices are registered, the CS of old target
was not being cleared when switching to new target.

Now exactly one CSn is active, and if the active device changes
wait 100uS (which should be enuff for anyone)

Signed-off-by: Peter Swain <peter.swain@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/spi/spi-cavium.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/drivers/spi/spi-cavium.c b/drivers/spi/spi-cavium.c
index 5aaf21582cb5..e01852f0ec72 100644
--- a/drivers/spi/spi-cavium.c
+++ b/drivers/spi/spi-cavium.c
@@ -38,6 +38,7 @@ static int octeon_spi_do_transfer(struct octeon_spi *p,
 	bool cpha, cpol;
 	const u8 *tx_buf;
 	u8 *rx_buf;
+	u64 enax = 1ull << (12 + cs);
 	int len;
 	int i;
 
@@ -57,13 +58,15 @@ static int octeon_spi_do_transfer(struct octeon_spi *p,
 	mpi_cfg.s.cslate = cpha ? 1 : 0;
 	mpi_cfg.s.enable = 1;
 
-	if (spi->chip_select < 4)
-		p->cs_enax |= 1ull << (12 + spi->chip_select);
+	if (spi->chip_select < 4 && enax != p->cs_enax)
+		p->cs_enax = enax;
+
 	mpi_cfg.u64 |= p->cs_enax;
 
 	if (mpi_cfg.u64 != p->last_cfg) {
 		p->last_cfg = mpi_cfg.u64;
 		writeq(mpi_cfg.u64, p->register_base + OCTEON_SPI_CFG(p));
+		udelay(100); /* allow CS change to settle */
 	}
 	tx_buf = xfer->tx_buf;
 	rx_buf = xfer->rx_buf;
-- 
2.17.1

