From 746827b7afe5b3d862b7a9de0452749e28654699 Mon Sep 17 00:00:00 2001
From: Angela Czubak <aczubak@caviumnetworks.com>
Date: Mon, 23 Jul 2018 18:04:11 +0200
Subject: [PATCH 0351/1051] octeontx: set domain bgx_count after verfication

Domain bgx count should not be set before setting pkind as this
function may return with error if a user requests more network devices
than available. This in turn may lead to trying to remove more sysfs
files than have been created. Therefore, domain->bgx_count is
incremented with every single full iteratation.
This logic is modified as well for SDP and LBK interfaces, in case
sysfs entries are created for them too.

Signed-off-by: Angela Czubak <aczubak@caviumnetworks.com>
Signed-off-by: Yury Norov <ynorov@caviumnetworks.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../cavium/octeontx-83xx/octeontx_main.c      | 25 +++++++++++--------
 1 file changed, 14 insertions(+), 11 deletions(-)

diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
index 1aaf4e32d026..23d66a04e14a 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
@@ -827,8 +827,8 @@ int octeontx_create_domain(const char *name, int type, int sso_count,
 	 * virt1: transferring packets between PKO/PKI and NIC (LBK1 + LBK2).
 	 * NOTE: The domain specification validity should be done here.
 	 */
-	domain->lbk_count = lbk_count;
-	for (i = 0; i < domain->lbk_count; i++) {
+	domain->lbk_count = 0;
+	for (i = 0; i < lbk_count; i++) {
 		if (lbk_port[i] > 1) {
 			dev_err(octtx_device, "LBK invalid port g%ld\n",
 				lbk_port[i]);
@@ -847,9 +847,10 @@ int octeontx_create_domain(const char *name, int type, int sso_count,
 				domain->lbk_port[i].glb_port_idx);
 			goto error;
 		}
+		domain->lbk_count++;
 	}
 
-	if (domain->lbk_count) {
+	if (lbk_count) {
 		ret = lbk->create_domain(node, domain_id, domain->lbk_port, i,
 					 &octtx_master_com, domain,
 					 domain->ports_kobj);
@@ -871,9 +872,9 @@ int octeontx_create_domain(const char *name, int type, int sso_count,
 	 * In this, default configuraiton, all available ports are
 	 * given to this domain.
 	 */
-	domain->bgx_count = bgx_count;
-	if (domain->bgx_count) {
-		for (i = 0; i < domain->bgx_count; i++) {
+	domain->bgx_count = 0;
+	if (bgx_count) {
+		for (i = 0; i < bgx_count; i++) {
 			domain->bgx_port[i].domain_id = domain_id;
 			domain->bgx_port[i].dom_port_idx = i;
 			domain->bgx_port[i].glb_port_idx = bgx_port[i];
@@ -888,7 +889,7 @@ int octeontx_create_domain(const char *name, int type, int sso_count,
 		domain->bgx_domain_created = true;
 	}
 	/* Now that we know which exact ports we have, set pkinds for them. */
-	for (i = 0; i < domain->bgx_count; i++) {
+	for (i = 0; i < bgx_count; i++) {
 		ret = pki->add_bgx_port(node, domain_id, &domain->bgx_port[i]);
 		if (ret < 0) {
 			dev_err(octtx_device,
@@ -923,11 +924,12 @@ int octeontx_create_domain(const char *name, int type, int sso_count,
 					&kattr->attr);
 		if (ret < 0)
 			goto error;
+		domain->bgx_count++;
 	}
 
-	domain->sdp_count = sdp_count;
-	if (domain->sdp_count) {
-		for (i = 0; i < domain->sdp_count; i++) {
+	domain->sdp_count = 0;
+	if (sdp_count) {
+		for (i = 0; i < sdp_count; i++) {
 			domain->sdp_port[i].domain_id = domain_id;
 			domain->sdp_port[i].dom_port_idx = i;
 			domain->sdp_port[i].glb_port_idx = sdp_port[i];
@@ -942,7 +944,7 @@ int octeontx_create_domain(const char *name, int type, int sso_count,
 	}
 
 	/* Now that we know which exact ports we have, set pkinds for them. */
-	for (i = 0; i < domain->sdp_count; i++) {
+	for (i = 0; i < sdp_count; i++) {
 		ret = pki->add_sdp_port(node, domain_id, &domain->sdp_port[i]);
 		if (ret < 0) {
 			dev_err(octtx_device,
@@ -964,6 +966,7 @@ int octeontx_create_domain(const char *name, int type, int sso_count,
 			goto error;
 		}
 		/* TODO: setup sysfs entry for sdp port*/
+		domain->sdp_count++;
 	}
 	if (ret) {
 		dev_err(octtx_device, "Failed to create SDP domain\n");
-- 
2.17.1

