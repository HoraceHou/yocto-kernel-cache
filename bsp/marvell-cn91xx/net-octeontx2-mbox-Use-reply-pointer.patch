From be8b092ac379ddb2e78f69bf309f7ab1579c63d0 Mon Sep 17 00:00:00 2001
From: Aleksey Makarov <amakarov@marvell.com>
Date: Fri, 24 Aug 2018 17:10:46 +0300
Subject: [PATCH 0168/1051] net: octeontx2: mbox: Use reply pointer

Check status value of mbox calls.

Signed-off-by: Aleksey Makarov <amakarov@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/otx2_common.c  | 45 +++++++++++++++++--
 .../net/ethernet/marvell/octeontx2/otx2_pf.c  | 14 +++++-
 .../net/ethernet/marvell/octeontx2/otx2_vf.c  | 13 +++++-
 3 files changed, 64 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
index b572581a94de..8db53eee0706 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
@@ -434,7 +434,9 @@ int otx2_txschq_config(struct otx2_nic *pfvf, int lvl)
 int otx2_txsch_alloc(struct otx2_nic *pfvf)
 {
 	struct nix_txsch_alloc_req *req;
+	struct mbox_msghdr *rsp_hdr;
 	int lvl;
+	int err;
 
 	/* Get memory to put this msg */
 	req = otx2_mbox_alloc_msg_NIX_TXSCH_ALLOC(&pfvf->mbox);
@@ -445,7 +447,15 @@ int otx2_txsch_alloc(struct otx2_nic *pfvf)
 	for (lvl = 0; lvl < NIX_TXSCH_LVL_CNT; lvl++)
 		req->schq[lvl] = 1;
 
-	return otx2_sync_mbox_msg(&pfvf->mbox);
+	err = otx2_sync_mbox_msg(&pfvf->mbox);
+	if (err)
+		return err;
+
+	rsp_hdr = otx2_mbox_get_rsp(&pfvf->mbox.mbox, 0, &req->hdr);
+	if (IS_ERR(rsp_hdr))
+		return PTR_ERR(rsp_hdr);
+
+	return rsp_hdr->rc;
 }
 
 int otx2_txschq_stop(struct otx2_nic *pfvf)
@@ -631,6 +641,8 @@ int otx2_config_nix_queues(struct otx2_nic *pfvf)
 int otx2_config_nix(struct otx2_nic *pfvf)
 {
 	struct nix_lf_alloc_req  *nixlf;
+	struct mbox_msghdr *rsp_hdr;
+	int err;
 
 	pfvf->qset.xqe_size = NIX_XQESZ_W16 ? 128 : 512;
 
@@ -656,7 +668,15 @@ int otx2_config_nix(struct otx2_nic *pfvf)
 	 */
 	nixlf->rx_cfg = BIT_ULL(33) | BIT_ULL(35) | BIT_ULL(37);
 
-	return otx2_sync_mbox_msg(&pfvf->mbox);
+	err = otx2_sync_mbox_msg(&pfvf->mbox);
+	if (err)
+		return err;
+
+	rsp_hdr = otx2_mbox_get_rsp(&pfvf->mbox.mbox, 0, &nixlf->hdr);
+	if (IS_ERR(rsp_hdr))
+		return PTR_ERR(rsp_hdr);
+
+	return rsp_hdr->rc;
 }
 
 void otx2_free_aura_ptr(struct otx2_nic *pfvf, int type)
@@ -918,8 +938,9 @@ int otx2_config_npa(struct otx2_nic *pfvf)
 {
 	struct otx2_qset *qset = &pfvf->qset;
 	struct npa_lf_alloc_req  *npalf;
+	struct mbox_msghdr *rsp_hdr;
 	struct otx2_hw *hw = &pfvf->hw;
-	int aura_cnt;
+	int aura_cnt, err;
 
 	/* Pool - Stack of free buffer pointers
 	 * Aura - Alloc/frees pointers from/to pool for NIX DMA.
@@ -943,7 +964,15 @@ int otx2_config_npa(struct otx2_nic *pfvf)
 	aura_cnt = ilog2(roundup_pow_of_two(hw->pool_cnt));
 	npalf->aura_sz = (aura_cnt >= ilog2(128)) ? (aura_cnt - 6) : 1;
 
-	return otx2_sync_mbox_msg(&pfvf->mbox);
+	err = otx2_sync_mbox_msg(&pfvf->mbox);
+	if (err)
+		return err;
+
+	rsp_hdr = otx2_mbox_get_rsp(&pfvf->mbox.mbox, 0, &npalf->hdr);
+	if (IS_ERR(rsp_hdr))
+		return PTR_ERR(rsp_hdr);
+
+	return rsp_hdr->rc;
 }
 
 int otx2_detach_resources(struct mbox *mbox)
@@ -967,6 +996,7 @@ int otx2_attach_npa_nix(struct otx2_nic *pfvf)
 {
 	struct rsrc_attach *attach;
 	struct msg_req *msix;
+	struct mbox_msghdr *rsp_hdr;
 	int err;
 
 	/* Get memory to put this msg */
@@ -991,6 +1021,13 @@ int otx2_attach_npa_nix(struct otx2_nic *pfvf)
 	if (err)
 		return err;
 
+	rsp_hdr = otx2_mbox_get_rsp(&pfvf->mbox.mbox, 0, &msix->hdr);
+	if (IS_ERR(rsp_hdr))
+		return PTR_ERR(rsp_hdr);
+
+	if (rsp_hdr->rc)
+		return rsp_hdr->rc;
+
 	if (pfvf->hw.npa_msixoff == MSIX_VECTOR_INVALID ||
 	    pfvf->hw.nix_msixoff == MSIX_VECTOR_INVALID) {
 		dev_err(pfvf->dev,
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
index 5ca9bfaa35d0..cbe01199879c 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
@@ -236,6 +236,8 @@ static irqreturn_t otx2_pfaf_mbox_intr_handler(int irq, void *pf_irq)
 static int otx2_register_mbox_intr(struct otx2_nic *pf)
 {
 	struct otx2_hw *hw = &pf->hw;
+	struct msg_req *req;
+	struct mbox_msghdr *rsp_hdr;
 	int err;
 
 	/* Skip if MSIX is already initialized */
@@ -269,14 +271,22 @@ static int otx2_register_mbox_intr(struct otx2_nic *pf)
 	otx2_write64(pf, RVU_PF_INT_ENA_W1S, BIT_ULL(0));
 
 	/* Check mailbox communication with AF */
-	otx2_mbox_alloc_msg_READY(&pf->mbox);
+	req = otx2_mbox_alloc_msg_READY(&pf->mbox);
+	if (!req)
+		return -ENOMEM;
+
 	err = otx2_sync_mbox_msg(&pf->mbox);
 	if (err) {
 		dev_warn(pf->dev,
 			 "AF not responding to mailbox, deferring probe\n");
 		return -EPROBE_DEFER;
 	}
-	return 0;
+
+	rsp_hdr = otx2_mbox_get_rsp(&pf->mbox.mbox, 0, &req->hdr);
+	if (IS_ERR(rsp_hdr))
+		return PTR_ERR(rsp_hdr);
+
+	return rsp_hdr->rc;
 }
 
 static void otx2_disable_mbox_intr(struct otx2_nic *pf)
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
index 620b92fa743a..c62c4308c10c 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
@@ -146,6 +146,8 @@ static irqreturn_t otx2vf_vfaf_mbox_intr_handler(int irq, void *vf_irq)
 static int otx2vf_register_mbox_intr(struct otx2_nic *vf)
 {
 	struct otx2_hw *hw = &vf->hw;
+	struct msg_req *req;
+	struct mbox_msghdr *rsp_hdr;
 	char *irq_name;
 	int err;
 
@@ -178,7 +180,10 @@ static int otx2vf_register_mbox_intr(struct otx2_nic *vf)
 	otx2_write64(vf, RVU_VF_INT_ENA_W1S, BIT_ULL(0));
 
 	/* Check mailbox communication with PF */
-	otx2_mbox_alloc_msg_READY(&vf->mbox);
+	req = otx2_mbox_alloc_msg_READY(&vf->mbox);
+	if (!req)
+		return -ENOMEM;
+
 	err = otx2_sync_mbox_msg(&vf->mbox);
 	if (err) {
 		dev_warn(vf->dev,
@@ -186,7 +191,11 @@ static int otx2vf_register_mbox_intr(struct otx2_nic *vf)
 		return -EPROBE_DEFER;
 	}
 
-	return 0;
+	rsp_hdr = otx2_mbox_get_rsp(&vf->mbox.mbox, 0, &req->hdr);
+	if (IS_ERR(rsp_hdr))
+		return PTR_ERR(rsp_hdr);
+
+	return rsp_hdr->rc;
 }
 
 static void otx2vf_disable_mbox_intr(struct otx2_nic *vf)
-- 
2.17.1

