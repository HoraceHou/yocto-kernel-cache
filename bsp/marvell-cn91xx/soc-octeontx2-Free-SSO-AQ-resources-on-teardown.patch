From 08c7e4422dccab936543dd0592d7b6a249b6ca71 Mon Sep 17 00:00:00 2001
From: Pavan Nikhilesh <pbhagavatula@marvell.com>
Date: Fri, 7 Sep 2018 14:10:32 +0530
Subject: [PATCH 0180/1051] soc: octeontx2: Free SSO AQ resources on teardown

During teardown sequence when default values are written to the TAQ and
IAQ thresholds, the delta between the current and default thresholds needs
to be returned to SSO.

Signed-off-by: Pavan Nikhilesh <pbhagavatula@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/soc/marvell/octeontx2/rvu_reg.h |  2 ++
 drivers/soc/marvell/octeontx2/rvu_sso.c | 29 +++++++++++++++++++------
 2 files changed, 24 insertions(+), 7 deletions(-)

diff --git a/drivers/soc/marvell/octeontx2/rvu_reg.h b/drivers/soc/marvell/octeontx2/rvu_reg.h
index ed3b5ce91443..b8f62fc89cb8 100644
--- a/drivers/soc/marvell/octeontx2/rvu_reg.h
+++ b/drivers/soc/marvell/octeontx2/rvu_reg.h
@@ -456,6 +456,7 @@
 #define SSO_HWGRP_IAQ_MAX_THR_MASK	0x3FFFull
 #define SSO_HWGRP_IAQ_RSVD_THR_MASK	0x3FFFull
 #define SSO_HWGRP_IAQ_MAX_THR_SHIFT	32
+#define SSO_HWGRP_IAQ_RSVD_THR		0x2
 
 #define SSO_AF_TAQ_FREE_CNT_MASK	0x7FFull
 #define SSO_AF_TAQ_RSVD_FREE_MASK	0x7FFull
@@ -466,6 +467,7 @@
 #define SSO_HWGRP_TAQ_MAX_THR_MASK	0x7FFull
 #define SSO_HWGRP_TAQ_RSVD_THR_MASK	0x7FFull
 #define SSO_HWGRP_TAQ_MAX_THR_SHIFT	32
+#define SSO_HWGRP_TAQ_RSVD_THR		0x3
 
 #define SSO_HWGRP_PRI_AFF_MASK		0xFull
 #define SSO_HWGRP_PRI_AFF_SHIFT		8
diff --git a/drivers/soc/marvell/octeontx2/rvu_sso.c b/drivers/soc/marvell/octeontx2/rvu_sso.c
index 8dcfdb91c6a8..76b1acc23ac8 100644
--- a/drivers/soc/marvell/octeontx2/rvu_sso.c
+++ b/drivers/soc/marvell/octeontx2/rvu_sso.c
@@ -51,15 +51,15 @@ static void rvu_sso_hwgrp_config_thresh(struct rvu *rvu, int blkaddr, int lf)
 	rvu_write64(rvu, blkaddr, SSO_AF_HWGRPX_TAQ_THR(lf), grp_thr);
 
 	if (add)
-		rvu_write64(rvu, blkaddr, SSO_AF_AW_ADD,
-			    (add & SSO_AF_AW_ADD_RSVD_FREE_MASK) <<
-			    SSO_AF_AW_ADD_RSVD_FREE_SHIFT);
+		rvu_write64(rvu, blkaddr, SSO_AF_TAQ_ADD,
+			    (add & SSO_AF_TAQ_RSVD_FREE_MASK) <<
+			    SSO_AF_TAQ_ADD_RSVD_FREE_SHIFT);
 }
 
 int rvu_sso_lf_teardown(struct rvu *rvu, int lf)
 {
 	int blkaddr, err;
-	u64 reg;
+	u64 reg, add;
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_SSO, 0);
 	if (blkaddr < 0)
@@ -118,18 +118,33 @@ int rvu_sso_lf_teardown(struct rvu *rvu, int lf)
 	rvu_write64(rvu, blkaddr, SSO_AF_HWGRPX_DS_PC(lf), 0x0);
 	rvu_write64(rvu, blkaddr, SSO_AF_HWGRPX_XAQ_LIMIT(lf), 0x0);
 	rvu_write64(rvu, blkaddr, SSO_AF_HWGRPX_IU_ACCNT(lf), 0x0);
+
+	reg = rvu_read64(rvu, blkaddr, SSO_AF_HWGRPX_IAQ_THR(lf)) &
+		SSO_HWGRP_IAQ_RSVD_THR_MASK;
+	add = SSO_HWGRP_IAQ_RSVD_THR - reg;
 	reg = (SSO_HWGRP_IAQ_MAX_THR_MASK << SSO_HWGRP_IAQ_MAX_THR_SHIFT) |
-	      0x2;
+	      SSO_HWGRP_IAQ_RSVD_THR;
 	rvu_write64(rvu, blkaddr, SSO_AF_HWGRPX_IAQ_THR(lf), reg);
+	if (add)
+		rvu_write64(rvu, blkaddr, SSO_AF_AW_ADD,
+			    (add & SSO_AF_AW_ADD_RSVD_FREE_MASK) <<
+			    SSO_AF_AW_ADD_RSVD_FREE_SHIFT);
+
+	reg = rvu_read64(rvu, blkaddr, SSO_AF_HWGRPX_TAQ_THR(lf)) &
+		SSO_HWGRP_TAQ_RSVD_THR_MASK;
+	add = SSO_HWGRP_TAQ_RSVD_THR - reg;
 	reg = (SSO_HWGRP_TAQ_MAX_THR_MASK << SSO_HWGRP_TAQ_MAX_THR_SHIFT) |
-	      0x3;
+	      SSO_HWGRP_TAQ_RSVD_THR;
 	rvu_write64(rvu, blkaddr, SSO_AF_HWGRPX_TAQ_THR(lf), reg);
+	if (add)
+		rvu_write64(rvu, blkaddr, SSO_AF_TAQ_ADD,
+			    (add & SSO_AF_TAQ_RSVD_FREE_MASK) <<
+			    SSO_AF_TAQ_ADD_RSVD_FREE_SHIFT);
 
 	rvu_write64(rvu, blkaddr, SSO_AF_XAQX_HEAD_PTR(lf), 0x0);
 	rvu_write64(rvu, blkaddr, SSO_AF_XAQX_TAIL_PTR(lf), 0x0);
 	rvu_write64(rvu, blkaddr, SSO_AF_XAQX_HEAD_NEXT(lf), 0x0);
 	rvu_write64(rvu, blkaddr, SSO_AF_XAQX_TAIL_NEXT(lf), 0x0);
-
 	return 0;
 }
 
-- 
2.17.1

