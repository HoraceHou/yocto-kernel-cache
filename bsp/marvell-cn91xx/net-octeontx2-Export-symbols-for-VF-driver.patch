From bac3b53b6560182173e542eb1f04d6ccfd879d58 Mon Sep 17 00:00:00 2001
From: Tomasz Duszynski <tduszynski@marvell.com>
Date: Thu, 16 Aug 2018 18:36:08 +0530
Subject: [PATCH 0131/1051] net: octeontx2: Export symbols for VF driver

VF driver shares majority of code with PF driver.
For building VF driver as a module export missing symbols.

Signed-off-by: Tomasz Duszynski <tduszynski@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/otx2_common.c | 12 ++++++++++++
 drivers/net/ethernet/marvell/octeontx2/otx2_pf.c     |  3 +++
 drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c   |  1 +
 3 files changed, 16 insertions(+)

diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
index e097a8e4d530..2a9e9df83dc2 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
@@ -58,6 +58,7 @@ int otx2_set_mac_address(struct net_device *netdev, void *p)
 
 	return 0;
 }
+EXPORT_SYMBOL(otx2_set_mac_address);
 
 int otx2_hw_set_mtu(struct otx2_nic *pfvf, int mtu)
 {
@@ -90,6 +91,7 @@ int otx2_change_mtu(struct net_device *netdev, int new_mtu)
 	netdev->mtu = new_mtu;
 	return 0;
 }
+EXPORT_SYMBOL(otx2_change_mtu);
 
 int otx2_set_flowkey_cfg(struct otx2_nic *pfvf)
 {
@@ -271,6 +273,7 @@ void otx2_get_stats64(struct net_device *netdev,
 	stats->tx_packets = dev_stats->tx_frames;
 	stats->tx_dropped = dev_stats->tx_drops;
 }
+EXPORT_SYMBOL(otx2_get_stats64);
 
 void otx2_set_irq_affinity(struct otx2_nic *pfvf)
 {
@@ -338,6 +341,7 @@ void otx2_tx_timeout(struct net_device *netdev)
 
 	schedule_work(&pfvf->reset_task);
 }
+EXPORT_SYMBOL(otx2_tx_timeout);
 
 static int otx2_get_link(struct otx2_nic *pfvf)
 {
@@ -940,6 +944,7 @@ int otx2_detach_resources(struct mbox *mbox)
 	otx2_mbox_msg_send(&mbox->mbox, 0);
 	return 0;
 }
+EXPORT_SYMBOL(otx2_detach_resources);
 
 int otx2_attach_npa_nix(struct otx2_nic *pfvf)
 {
@@ -977,6 +982,7 @@ int otx2_attach_npa_nix(struct otx2_nic *pfvf)
 	}
 	return 0;
 }
+EXPORT_SYMBOL(otx2_attach_npa_nix);
 
 void otx2_ctx_disable(struct mbox *mbox, int type, bool npa)
 {
@@ -1045,6 +1051,7 @@ void mbox_handler_NIX_TXSCH_ALLOC(struct otx2_nic *pf,
 			pf->hw.txschq_list[lvl][schq] =
 				rsp->schq_list[lvl][schq];
 }
+EXPORT_SYMBOL(mbox_handler_NIX_TXSCH_ALLOC);
 
 void mbox_handler_NPA_LF_ALLOC(struct otx2_nic *pfvf,
 			       struct npa_lf_alloc_rsp *rsp)
@@ -1052,6 +1059,7 @@ void mbox_handler_NPA_LF_ALLOC(struct otx2_nic *pfvf,
 	pfvf->hw.stack_pg_ptrs = rsp->stack_pg_ptrs;
 	pfvf->hw.stack_pg_bytes = rsp->stack_pg_bytes;
 }
+EXPORT_SYMBOL(mbox_handler_NPA_LF_ALLOC);
 
 void mbox_handler_NIX_LF_ALLOC(struct otx2_nic *pfvf,
 			       struct nix_lf_alloc_rsp *rsp)
@@ -1067,6 +1075,7 @@ void mbox_handler_NIX_LF_ALLOC(struct otx2_nic *pfvf,
 	pfvf->hw.lso_tsov4_idx = rsp->lso_tsov4_idx;
 	pfvf->hw.lso_tsov6_idx = rsp->lso_tsov6_idx;
 }
+EXPORT_SYMBOL(mbox_handler_NIX_LF_ALLOC);
 
 void mbox_handler_MSIX_OFFSET(struct otx2_nic *pfvf,
 			      struct msix_offset_rsp *rsp)
@@ -1074,6 +1083,7 @@ void mbox_handler_MSIX_OFFSET(struct otx2_nic *pfvf,
 	pfvf->hw.npa_msixoff = rsp->npa_msixoff;
 	pfvf->hw.nix_msixoff = rsp->nix_msixoff;
 }
+EXPORT_SYMBOL(mbox_handler_MSIX_OFFSET);
 
 void otx2_disable_msix(struct otx2_nic *pfvf)
 {
@@ -1109,6 +1119,7 @@ void otx2_disable_msix(struct otx2_nic *pfvf)
 	hw->irq_allocated = NULL;
 	hw->irq_name = NULL;
 }
+EXPORT_SYMBOL(otx2_disable_msix);
 
 int otx2_enable_msix(struct otx2_hw *hw)
 {
@@ -1146,3 +1157,4 @@ int otx2_enable_msix(struct otx2_hw *hw)
 	kfree(hw->irq_name);
 	return ret;
 }
+EXPORT_SYMBOL(otx2_enable_msix);
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
index 3af6cd882304..0e35223abde9 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
@@ -394,6 +394,7 @@ int otx2_set_real_num_queues(struct net_device *netdev,
 			   "Failed to set no of Rx queues: %d\n", rx_queues);
 	return err;
 }
+EXPORT_SYMBOL(otx2_set_real_num_queues);
 
 static irqreturn_t otx2_cq_intr_handler(int irq, void *cq_irq)
 {
@@ -705,6 +706,7 @@ int otx2_open(struct net_device *netdev)
 	kfree(qset->napi);
 	return err;
 }
+EXPORT_SYMBOL(otx2_open);
 
 int otx2_stop(struct net_device *netdev)
 {
@@ -754,6 +756,7 @@ int otx2_stop(struct net_device *netdev)
 	memset(qset, 0, sizeof(*qset));
 	return 0;
 }
+EXPORT_SYMBOL(otx2_stop);
 
 static void otx2_set_rx_mode(struct net_device *netdev)
 {
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c b/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c
index ee1b3d2b95d4..4bce1634071d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c
@@ -554,6 +554,7 @@ bool otx2_sq_append_skb(struct net_device *netdev, struct otx2_snd_queue *sq,
 		    qidx, sq->num_sqbs, *sq->aura_fc_addr);
 	return false;
 }
+EXPORT_SYMBOL(otx2_sq_append_skb);
 
 int otx2_rxtx_enable(struct otx2_nic *pfvf, bool enable)
 {
-- 
2.17.1

