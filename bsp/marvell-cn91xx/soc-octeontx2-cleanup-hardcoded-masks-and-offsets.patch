From d8d041f80315f3bbb0bcaf3b7a1545afb64ceb12 Mon Sep 17 00:00:00 2001
From: Pavan Nikhilesh <pbhagavatula@marvell.com>
Date: Tue, 11 Dec 2018 16:40:46 +0300
Subject: [PATCH 0864/1051] soc: octeontx2: cleanup hardcoded masks and offsets

Replace arbitrary shifts and masks with understandable defines, explain
arbitrary shifts with comments where ever applicable.

Change-Id: I503a7e0e2ab5bf39256514ade683962d7a109d8a
Signed-off-by: Pavan Nikhilesh <pbhagavatula@marvell.com>
Reviewed-by: Jerin Jacob <jerinj@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/1771
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/soc/marvell/octeontx2/rvu_reg.h |  4 ++++
 drivers/soc/marvell/octeontx2/rvu_sso.c | 32 +++++++++++++++----------
 2 files changed, 23 insertions(+), 13 deletions(-)

diff --git a/drivers/soc/marvell/octeontx2/rvu_reg.h b/drivers/soc/marvell/octeontx2/rvu_reg.h
index 18cd774d55c0..c99f3c99bba2 100644
--- a/drivers/soc/marvell/octeontx2/rvu_reg.h
+++ b/drivers/soc/marvell/octeontx2/rvu_reg.h
@@ -495,12 +495,14 @@
 #define SSO_HWGRP_IAQ_RSVD_THR_MASK	0x3FFFull
 #define SSO_HWGRP_IAQ_MAX_THR_SHIFT	32
 #define SSO_HWGRP_IAQ_RSVD_THR		0x2
+#define SSO_HWGRP_IAQ_MAX_THR_STRM_PERF 0xD0
 #define SSO_HWGRP_IAQ_GRP_CNT_SHIFT	48
 #define SSO_HWGRP_IAQ_GRP_CNT_MASK	0x3FFFull
 #define SSO_AF_HWGRPX_IUEX_NOSCHED(a, b)\
 		((((b >> 48) & 0x3FF) == a) && (b & BIT_ULL(60)))
 #define SSO_AF_HWGRP_PAGE_CNT_MASK	(BIT_ULL(32) - 1)
 #define SSO_AF_HWGRP_PAGE_CNT_MASK	(BIT_ULL(32) - 1)
+#define SSO_AF_HWGRP_IU_ACCNT_MAX_THR	0x7FFFull
 
 #define SSO_AF_TAQ_FREE_CNT_MASK	0x7FFull
 #define SSO_AF_TAQ_RSVD_FREE_MASK	0x7FFull
@@ -512,9 +514,11 @@
 #define SSO_HWGRP_TAQ_RSVD_THR_MASK	0x7FFull
 #define SSO_HWGRP_TAQ_MAX_THR_SHIFT	32
 #define SSO_HWGRP_TAQ_RSVD_THR		0x3
+#define SSO_HWGRP_TAQ_MAX_THR_STRM_PERF 0x10
 #define SSO_AF_ERR0_MASK		0xFFEull
 #define SSO_AF_ERR2_MASK		0xF001F000ull
 
+#define SSO_HWGRP_PRI_MASK		0x7ull
 #define SSO_HWGRP_PRI_AFF_MASK		0xFull
 #define SSO_HWGRP_PRI_AFF_SHIFT		8
 #define SSO_HWGRP_PRI_WGT_MASK		0x3Full
diff --git a/drivers/soc/marvell/octeontx2/rvu_sso.c b/drivers/soc/marvell/octeontx2/rvu_sso.c
index 7b76fc106d41..a553dc447b67 100644
--- a/drivers/soc/marvell/octeontx2/rvu_sso.c
+++ b/drivers/soc/marvell/octeontx2/rvu_sso.c
@@ -634,9 +634,11 @@ int rvu_mbox_handler_sso_grp_set_priority(struct rvu *rvu,
 	if (blkaddr < 0)
 		return SSO_AF_ERR_LF_INVALID;
 
-	regval = (((u64)(req->weight & 0x3f) << 16) |
-			((u64)(req->affinity & 0xf) << 8) |
-			(req->priority & 0x7));
+	regval = (((u64)(req->weight & SSO_HWGRP_PRI_WGT_MASK)
+				<< SSO_HWGRP_PRI_WGT_SHIFT) |
+			((u64)(req->affinity & SSO_HWGRP_PRI_AFF_MASK)
+				<< SSO_HWGRP_PRI_AFF_SHIFT) |
+			(req->priority & SSO_HWGRP_PRI_MASK));
 
 	lf = rvu_get_lf(rvu, &hw->block[blkaddr], pcifunc, req->grp);
 	if (lf < 0)
@@ -666,9 +668,11 @@ int rvu_mbox_handler_sso_grp_get_priority(struct rvu *rvu,
 
 	regval = rvu_read64(rvu, blkaddr, SSO_AF_HWGRPX_PRI(lf));
 
-	rsp->weight = (regval >> 16) & 0x3f;
-	rsp->affinity = (regval >> 8) & 0xf;
-	rsp->priority = regval & 0x7;
+	rsp->weight = (regval >> SSO_HWGRP_PRI_WGT_SHIFT)
+			& SSO_HWGRP_PRI_WGT_MASK;
+	rsp->affinity = (regval >> SSO_HWGRP_PRI_AFF_SHIFT)
+			& SSO_HWGRP_PRI_AFF_MASK;
+	rsp->priority = regval & SSO_HWGRP_PRI_MASK;
 
 	return 0;
 }
@@ -801,7 +805,7 @@ int rvu_mbox_handler_sso_lf_alloc(struct rvu *rvu, struct sso_lf_alloc_req *req,
 
 	/* Set threshold for the In-Unit Accounting Index*/
 	rvu_write64(rvu, blkaddr, SSO_AF_IU_ACCNTX_CFG(uniq_ident),
-		    0xFFF << 16);
+		    SSO_AF_HWGRP_IU_ACCNT_MAX_THR << 16);
 
 	for (hwgrp = 0; hwgrp < req->hwgrps; hwgrp++) {
 		ssolf = rvu_get_lf(rvu, &hw->block[blkaddr], pcifunc, hwgrp);
@@ -979,9 +983,10 @@ int rvu_sso_init(struct rvu *rvu)
 	iaq_rsvd = iaq_free_cnt / sso->sso_hwgrps / 2;
 
 	/* Enforce minimum per hardware requirements */
-	if (iaq_rsvd < 2)
-		iaq_rsvd = 2;
-	iaq_max = iaq_rsvd << 7;
+	if (iaq_rsvd < SSO_HWGRP_IAQ_RSVD_THR)
+		iaq_rsvd = SSO_HWGRP_IAQ_RSVD_THR;
+	/* To ensure full streaming performance should be at least 208. */
+	iaq_max = iaq_rsvd + SSO_HWGRP_IAQ_MAX_THR_STRM_PERF;
 	if (iaq_max >= (SSO_AF_IAQ_FREE_CNT_MAX + 1))
 		iaq_max = SSO_AF_IAQ_FREE_CNT_MAX;
 
@@ -993,10 +998,11 @@ int rvu_sso_init(struct rvu *rvu)
 	taq_rsvd = taq_free_cnt / sso->sso_hwgrps / 2;
 
 	/* Enforce minimum per hardware requirements */
-	if (taq_rsvd < 3)
-		taq_rsvd = 3;
+	if (taq_rsvd < SSO_HWGRP_TAQ_RSVD_THR)
+		taq_rsvd = SSO_HWGRP_TAQ_RSVD_THR;
 
-	taq_max = taq_rsvd << 3;
+	/* To ensure full streaming performance should be at least 16. */
+	taq_max = taq_rsvd + SSO_HWGRP_TAQ_MAX_THR_STRM_PERF;
 	if (taq_max >= (SSO_AF_TAQ_FREE_CNT_MAX + 1))
 		taq_max = SSO_AF_TAQ_FREE_CNT_MAX;
 
-- 
2.17.1

