From fed228eb85f20a95d708d44c92c9a3e566bb3639 Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Mon, 29 Oct 2018 11:25:40 +0530
Subject: [PATCH 0359/1051] soc: octeontx2: Fix build warnings

Fixed build warnings observed with -Werror=unused-function,
-Wunused-but-set-variable etc options enabled.

Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/soc/marvell/octeontx2/rvu.c         | 25 +++------------------
 drivers/soc/marvell/octeontx2/rvu_debugfs.c |  5 ++---
 drivers/soc/marvell/octeontx2/rvu_nix.c     | 10 +--------
 drivers/soc/marvell/octeontx2/rvu_npa.c     |  3 ---
 drivers/soc/marvell/octeontx2/rvu_npc.c     |  4 ++++
 5 files changed, 10 insertions(+), 37 deletions(-)

diff --git a/drivers/soc/marvell/octeontx2/rvu.c b/drivers/soc/marvell/octeontx2/rvu.c
index c8ed6e5b5766..25d807faf698 100644
--- a/drivers/soc/marvell/octeontx2/rvu.c
+++ b/drivers/soc/marvell/octeontx2/rvu.c
@@ -1013,18 +1013,9 @@ static int rvu_detach_rsrcs(struct rvu *rvu, struct rsrc_detach *detach,
 			    u16 pcifunc)
 {
 	struct rvu_hwinfo *hw = rvu->hw;
-	bool is_pf, detach_all = true;
 	struct rvu_block *block;
-	int devnum, blkid;
-
-	/* Check if this is for a RVU PF or VF */
-	if (pcifunc & RVU_PFVF_FUNC_MASK) {
-		is_pf = false;
-		devnum = rvu_get_hwvf(rvu, pcifunc);
-	} else {
-		is_pf = true;
-		devnum = rvu_get_pf(pcifunc);
-	}
+	bool detach_all = true;
+	int blkid;
 
 	mutex_lock(&rvu->rsrc_lock);
 
@@ -1219,22 +1210,12 @@ static int rvu_mbox_handler_ATTACH_RESOURCES(struct rvu *rvu,
 					     struct msg_rsp *rsp)
 {
 	u16 pcifunc = attach->hdr.pcifunc;
-	int devnum, err;
-	bool is_pf;
+	int err;
 
 	/* If first request, detach all existing attached resources */
 	if (!attach->modify)
 		rvu_detach_rsrcs(rvu, NULL, pcifunc);
 
-	/* Check if this is for a RVU PF or VF */
-	if (pcifunc & RVU_PFVF_FUNC_MASK) {
-		is_pf = false;
-		devnum = rvu_get_hwvf(rvu, pcifunc);
-	} else {
-		is_pf = true;
-		devnum = rvu_get_pf(pcifunc);
-	}
-
 	mutex_lock(&rvu->rsrc_lock);
 
 	/* Check if the request can be accommodated */
diff --git a/drivers/soc/marvell/octeontx2/rvu_debugfs.c b/drivers/soc/marvell/octeontx2/rvu_debugfs.c
index 1bed8d9c7486..1ed0960ce5d4 100644
--- a/drivers/soc/marvell/octeontx2/rvu_debugfs.c
+++ b/drivers/soc/marvell/octeontx2/rvu_debugfs.c
@@ -659,7 +659,7 @@ static ssize_t rvu_dbg_cgx_stat_display(struct file *filp,
 	void *data = filp->private_data;
 	struct dentry *current_dir;
 	int err = 0, lmac_id = 0;
-	char *subtoken, *buf;
+	char *buf;
 
 	current_dir = filp->f_path.dentry->d_parent;
 	buf = kzalloc(strlen(current_dir->d_name.name), GFP_KERNEL);
@@ -669,7 +669,6 @@ static ssize_t rvu_dbg_cgx_stat_display(struct file *filp,
 	memcpy(buf, current_dir->d_name.name,
 	       strlen(current_dir->d_name.name));
 
-	subtoken = strsep(&buf, "c");
 	if (kstrtoint(buf, 10, &lmac_id) >= 0) {
 		err = cgx_print_stats(data, lmac_id);
 		if (err)
@@ -1828,7 +1827,7 @@ RVU_DEBUG_FOPS(sso_hwgrp_ient_wlk, sso_hwgrp_ient_wlk_display, NULL);
 RVU_DEBUG_FOPS(sso_hwgrp_fl_wlk, sso_hwgrp_fl_wlk_display, NULL);
 RVU_DEBUG_FOPS(sso_hws_info, NULL, sso_hws_info_display);
 
-void rvu_dbg_sso_init(struct rvu *rvu)
+static void rvu_dbg_sso_init(struct rvu *rvu)
 {
 	const struct device *dev = &rvu->pdev->dev;
 	struct dentry *pfile;
diff --git a/drivers/soc/marvell/octeontx2/rvu_nix.c b/drivers/soc/marvell/octeontx2/rvu_nix.c
index f1e29b79855d..457917a61576 100644
--- a/drivers/soc/marvell/octeontx2/rvu_nix.c
+++ b/drivers/soc/marvell/octeontx2/rvu_nix.c
@@ -961,9 +961,7 @@ int rvu_mbox_handler_NIX_MARK_FORMAT_CFG(struct rvu *rvu,
 					 struct nix_mark_format_cfg  *req,
 					 struct nix_mark_format_cfg_rsp *rsp)
 {
-	struct rvu_hwinfo *hw = rvu->hw;
 	u16 pcifunc = req->hdr.pcifunc;
-	struct rvu_block *block;
 	struct nix_hw *nix_hw;
 	struct rvu_pfvf *pfvf;
 	int blkaddr, rc;
@@ -978,8 +976,6 @@ int rvu_mbox_handler_NIX_MARK_FORMAT_CFG(struct rvu *rvu,
 	if (!nix_hw)
 		return -EINVAL;
 
-	block = &hw->block[blkaddr];
-
 	cfg = (((u32) req->offset & 0x7) << 16) |
 	      (((u32) req->y_mask & 0xF) << 12) |
 	      (((u32) req->y_val & 0xF) << 8) |
@@ -2397,9 +2393,7 @@ int rvu_mbox_handler_NIX_SET_HW_FRS(struct rvu *rvu, struct nix_frs_cfg *req,
 	if (!nix_hw)
 		return -EINVAL;
 
-	if (req->sdp_link && (req->maxlen > SDP_HW_MAX_FRS))
-		return NIX_AF_ERR_FRS_INVALID;
-	else if (req->maxlen > NIC_HW_MAX_FRS)
+	if (!req->sdp_link && req->maxlen > NIC_HW_MAX_FRS)
 		return NIX_AF_ERR_FRS_INVALID;
 
 	if (req->update_minlen && (req->minlen < NIC_HW_MIN_FRS))
@@ -2779,11 +2773,9 @@ void rvu_nix_lf_teardown(struct rvu *rvu, u16 pcifunc, int blkaddr, int nixlf)
 {
 	struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu, pcifunc);
 	struct hwctx_disable_req ctx_req;
-	struct msg_req req;
 	int err;
 
 	ctx_req.hdr.pcifunc = pcifunc;
-	req.hdr.pcifunc = pcifunc;
 
 	/* Cleanup NPC MCAM entries, free Tx scheduler queues being used */
 	nix_interface_deinit(rvu, pcifunc, nixlf);
diff --git a/drivers/soc/marvell/octeontx2/rvu_npa.c b/drivers/soc/marvell/octeontx2/rvu_npa.c
index eb18ca636d22..b663fa81c666 100644
--- a/drivers/soc/marvell/octeontx2/rvu_npa.c
+++ b/drivers/soc/marvell/octeontx2/rvu_npa.c
@@ -443,15 +443,12 @@ static int npa_aq_init(struct rvu *rvu, struct rvu_block *block)
 int rvu_npa_init(struct rvu *rvu)
 {
 	struct rvu_hwinfo *hw = rvu->hw;
-	struct rvu_block *block;
 	int blkaddr, err;
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NPA, 0);
 	if (blkaddr < 0)
 		return 0;
 
-	block = &hw->block[blkaddr];
-
 	/* Initialize admin queue */
 	err = npa_aq_init(rvu, &hw->block[blkaddr]);
 	if (err)
diff --git a/drivers/soc/marvell/octeontx2/rvu_npc.c b/drivers/soc/marvell/octeontx2/rvu_npc.c
index d874bf79a787..765815db4ac0 100644
--- a/drivers/soc/marvell/octeontx2/rvu_npc.c
+++ b/drivers/soc/marvell/octeontx2/rvu_npc.c
@@ -435,7 +435,9 @@ void rvu_npc_install_bcast_match_entry(struct rvu *rvu, u16 pcifunc,
 	struct npc_mcam *mcam = &rvu->hw->mcam;
 	struct mcam_entry entry = { {0} };
 	struct nix_rx_action action;
+#ifdef MCAST_MCE
 	struct rvu_pfvf *pfvf;
+#endif
 	int blkaddr, index;
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NPC, 0);
@@ -445,7 +447,9 @@ void rvu_npc_install_bcast_match_entry(struct rvu *rvu, u16 pcifunc,
 	/* Only PF can add a bcast match entry */
 	if (pcifunc & RVU_PFVF_FUNC_MASK)
 		return;
+#ifdef MCAST_MCE
 	pfvf = rvu_get_pfvf(rvu, pcifunc & ~RVU_PFVF_FUNC_MASK);
+#endif
 
 	index = npc_get_nixlf_mcam_index(mcam, pcifunc,
 					 nixlf, NIXLF_BCAST_ENTRY);
-- 
2.17.1

