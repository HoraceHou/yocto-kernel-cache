From cf5d72dc029632d007be295b42a3ed178bd90950 Mon Sep 17 00:00:00 2001
From: Tirumalesh Chalamarla <tchalamarla@caviumnetworks.com>
Date: Tue, 9 Oct 2018 00:42:04 +0300
Subject: [PATCH 0257/1051] octeontx: create_domain lock fix

Release spin_lock before creating sysfs entries

Signed-off-by: Tirumalesh Chalamarla <tchalamarla@caviumnetworks.com>
Signed-off-by: Yury Norov <ynorov@caviumnetworks.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../net/ethernet/cavium/octeontx-83xx/fpapf_main.c    | 11 +++--------
 drivers/net/ethernet/cavium/octeontx-83xx/pki_main.c  |  7 ++-----
 .../net/ethernet/cavium/octeontx-83xx/pkopf_main.c    |  7 ++-----
 .../net/ethernet/cavium/octeontx-83xx/ssopf_main.c    |  7 ++-----
 .../net/ethernet/cavium/octeontx-83xx/ssowpf_main.c   |  2 +-
 .../net/ethernet/cavium/octeontx-83xx/timpf_main.c    |  2 --
 6 files changed, 10 insertions(+), 26 deletions(-)

diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/fpapf_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/fpapf_main.c
index ac8366a1bb99..b499c497c8e9 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/fpapf_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/fpapf_main.c
@@ -300,16 +300,13 @@ static u64 fpa_pf_create_domain(u32 id, u16 domain_id,
 			break;
 		}
 	}
+	spin_unlock(&octeontx_fpa_devices_lock);
 
-	if (!fpa) {
-		spin_unlock(&octeontx_fpa_devices_lock);
+	if (!fpa)
 		return -ENODEV;
-	}
 
-	if ((fpa->total_vfs - fpa->vfs_in_use) < num_vfs) {
-		spin_unlock(&octeontx_fpa_devices_lock);
+	if ((fpa->total_vfs - fpa->vfs_in_use) < num_vfs)
 		return -ENODEV;
-	}
 
 	for (i = 0; i < fpa->total_vfs; i++) {
 		if (fpa->vf[i].domain.in_use) {
@@ -385,8 +382,6 @@ static u64 fpa_pf_create_domain(u32 id, u16 domain_id,
 		}
 	}
 
-	spin_unlock(&octeontx_fpa_devices_lock);
-
 	if (vf_idx != num_vfs) {
 		fpa_pf_remove_domain(id, domain_id);
 		return 0;
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/pki_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/pki_main.c
index 39959108625d..1336ba39dd20 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/pki_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/pki_main.c
@@ -299,10 +299,9 @@ static int pki_create_domain(u32 id, u16 domain_id,
 			break;
 		}
 	}
-	if (!pki) {
-		spin_unlock(&octeontx_pki_devices_lock);
+	spin_unlock(&octeontx_pki_devices_lock);
+	if (!pki)
 		return -ENODEV;
-	}
 
 	for (i = 0; i < PKI_MAX_VF; i++) {
 		if (pki->vf[i].domain.in_use) {/* pki port config */
@@ -344,8 +343,6 @@ static int pki_create_domain(u32 id, u16 domain_id,
 			break;
 		}
 	}
-	spin_unlock(&octeontx_pki_devices_lock);
-
 	if (!found)
 		return -ENODEV;
 
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/pkopf_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/pkopf_main.c
index b5a5d5340f59..10d3fee85bb5 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/pkopf_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/pkopf_main.c
@@ -297,11 +297,10 @@ static int pko_pf_create_domain(u32 id, u16 domain_id, u32 num_dqs,
 			break;
 		}
 	}
+	spin_unlock(&octeontx_pko_devices_lock);
 
-	if (!pko) {
-		spin_unlock(&octeontx_pko_devices_lock);
+	if (!pko)
 		return -ENODEV;
-	}
 
 	for (i = 0; i < pko->total_vfs; i++) {
 		if (pko->vf[i].domain.in_use) {
@@ -362,8 +361,6 @@ static int pko_pf_create_domain(u32 id, u16 domain_id, u32 num_dqs,
 		}
 	}
 
-	spin_unlock(&octeontx_pko_devices_lock);
-
 	if (vf_idx != num_dqs) {
 		pko_pf_remove_domain(id, domain_id);
 		return -ENODEV;
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/ssopf_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/ssopf_main.c
index 059b16396fbe..cf1fcfb7d889 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/ssopf_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/ssopf_main.c
@@ -267,11 +267,10 @@ static u64 sso_pf_create_domain(u32 id, u16 domain_id,
 			break;
 		}
 	}
+	spin_unlock(&octeontx_sso_devices_lock);
 
-	if (!sso) {
-		spin_unlock(&octeontx_sso_devices_lock);
+	if (!sso)
 		return 0;
-	}
 
 	for (i = 0; i < sso->total_vfs; i++) {
 		if (sso->vf[i].domain.in_use) {
@@ -339,8 +338,6 @@ static u64 sso_pf_create_domain(u32 id, u16 domain_id,
 		}
 	}
 
-	spin_unlock(&octeontx_sso_devices_lock);
-
 	if (vf_idx != num_grps) {
 		sso_pf_remove_domain(id, domain_id);
 		return 0;
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/ssowpf_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/ssowpf_main.c
index e0f0605c9ef7..f867bba0e5bb 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/ssowpf_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/ssowpf_main.c
@@ -101,6 +101,7 @@ static int ssow_pf_create_domain(u32 id, u16 domain_id, u32 vf_count,
 			break;
 		}
 	}
+	spin_unlock(&octeontx_ssow_devices_lock);
 
 	if (!ssow) {
 		ret = -ENODEV;
@@ -182,7 +183,6 @@ static int ssow_pf_create_domain(u32 id, u16 domain_id, u32 vf_count,
 	}
 
 unlock:
-	spin_unlock(&octeontx_ssow_devices_lock);
 	return ret;
 }
 
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/timpf_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/timpf_main.c
index 14b401eb109e..a79dcc032807 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/timpf_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/timpf_main.c
@@ -274,7 +274,6 @@ static int tim_pf_create_domain(u32 id, u16 domain_id, u32 num_vfs,
 
 	gmid = get_gmid(domain_id);
 
-	spin_lock(&octeontx_tim_dev_lock);
 	list_for_each_entry(tim, &octeontx_tim_devices, list) {
 		for (i = 0; i < tim->total_vfs; i++) {
 			vf = &tim->vf[i];
@@ -316,7 +315,6 @@ static int tim_pf_create_domain(u32 id, u16 domain_id, u32 num_vfs,
 			}
 		}
 	}
-	spin_unlock(&octeontx_tim_dev_lock);
 	return 0;
 }
 
-- 
2.17.1

