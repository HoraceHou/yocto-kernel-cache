From 8a7ccb3163356fc7b9a6de690ce08c21b55d7007 Mon Sep 17 00:00:00 2001
From: Omri Itach <omrii@marvell.com>
Date: Tue, 27 Dec 2016 18:11:33 +0200
Subject: [PATCH 0625/1051] misc: mvebu: add soc info driver for package
 revision

Some drivers require differentiation between SoC revision A0,A1,B0, etc.
SATA AHCI driver reads SoC revision directly from AHCI mvebu wrapper.

Other drivers also require this information to differentiate SoC revisions.
In order to avoid code duplication across drivers, add a dedicated driver
to read the SoC revision information.

Change-Id: Ia0cd97dc57f68a71480dacc339bfe3e49b300317
Signed-off-by: Omri Itach <omrii@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06.
Just some minor context mods in order to port to wrlinux]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/misc/Kconfig        |  7 ++++
 drivers/misc/Makefile       |  1 +
 drivers/misc/mv_soc_info.c  | 78 +++++++++++++++++++++++++++++++++++++
 include/linux/mv_soc_info.h | 23 +++++++++++
 4 files changed, 109 insertions(+)
 create mode 100644 drivers/misc/mv_soc_info.c
 create mode 100644 include/linux/mv_soc_info.h

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 9d6d66517a47..310163084d9c 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -566,6 +566,13 @@ config MARVELL_OTX_BPHY_CTR
 	  The purpose of this is to handle some BPHY Interrupts in
 	  user space directly without kernel's intervention.
 
+config MVEBU_SOC_INFO
+	bool "Marvell Aramda-8K SoC information driver"
+	depends on ARCH_MVEBU
+	default y
+	help
+	  Marvell A8K SoC information driver
+
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 5d55cab60bd1..e62417a14536 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -60,3 +60,4 @@ obj-$(CONFIG_OCXL)		+= ocxl/
 obj-$(CONFIG_MISC_RTSX)		+= cardreader/
 obj-$(CONFIG_CAVIUM_TDM)	+= cavium-tdm.o
 obj-$(CONFIG_MARVELL_OTX_BPHY_CTR)	+= otx_bphy_ctr.o
+obj-$(CONFIG_MVEBU_SOC_INFO)	+= mv_soc_info.o
diff --git a/drivers/misc/mv_soc_info.c b/drivers/misc/mv_soc_info.c
new file mode 100644
index 000000000000..6d2779bc16ba
--- /dev/null
+++ b/drivers/misc/mv_soc_info.c
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2015-2018 Marvell International Ltd.
+
+ * This program is free software: you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation, either version 2 of the
+ * License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+
+#include <linux/mv_soc_info.h>
+#include <linux/of_address.h>
+
+int soc_revision_id = -1;
+
+/* Get SoC revision ID */
+int mv_soc_info_get_ap_revision(void)
+{
+	void __iomem *ap_rev_info_reg;
+	const unsigned int *reg;
+	struct device_node *node;
+	phys_addr_t paddr;
+
+	/* if soc_revision_id was already initialized,
+	 * no need to read it again
+	 */
+	if (soc_revision_id != -1)
+		return soc_revision_id;
+
+	/* TODO add support for CP110, CP115, AP807 and AP810 revisions */
+	node = of_find_compatible_node(NULL, NULL, "marvell,ap806-rev-info");
+	if (!node) {
+		pr_err("Read soc-rev-info node failed\n");
+		goto free_node;
+	}
+
+	/* Read the offset of the register */
+	reg = of_get_property(node, "reg", NULL);
+	if (!reg) {
+		pr_err("Read reg property failed from soc-rev-info node\n");
+		goto free_node;
+	}
+
+	/* Translate the offset to physical address */
+	paddr = of_translate_address(node, reg);
+	if (paddr == OF_BAD_ADDR) {
+		pr_err("of_translate_address failed for soc-rev-info\n");
+		goto free_node;
+	}
+
+	ap_rev_info_reg = ioremap(paddr, reg[1]);
+	if (!ap_rev_info_reg) {
+		pr_err("ioremap() failed for soc-rev-info register\n");
+		goto free_node;
+	}
+
+	/* read gwd_iidr2 register and set the revision global*/
+	soc_revision_id = (readl(ap_rev_info_reg) >>
+			   GWD_IIDR2_REV_ID_OFFSET) &
+			   GWD_IIDR2_REV_ID_MASK;
+
+	pr_debug("%s: Detected SoC revision A%d\n",
+		 __func__, soc_revision_id == APN806_REV_ID_A0 ? 0 : 1);
+
+	/* Release resources */
+	iounmap(ap_rev_info_reg);
+	of_node_put(node);
+
+	return soc_revision_id;
+
+free_node:
+	of_node_put(node);
+	return -EINVAL;
+}
diff --git a/include/linux/mv_soc_info.h b/include/linux/mv_soc_info.h
new file mode 100644
index 000000000000..3befa8c096e0
--- /dev/null
+++ b/include/linux/mv_soc_info.h
@@ -0,0 +1,23 @@
+/*
+ * Marvell A8K SoC info definitions.
+ *
+ * Copyright (C) 2018 Marvell Semiconductor
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#ifndef MV_SOC_INFO_H
+#define MV_SOC_INFO_H
+
+#define GWD_IIDR2_REV_ID_OFFSET	12
+#define GWD_IIDR2_REV_ID_MASK	0xF
+#define APN806_REV_ID_A0	0
+#define APN806_REV_ID_A1	1
+#define APN806_REV_ID_B0	2
+
+int mv_soc_info_get_ap_revision(void);
+
+
+#endif /* MV_SOC_INFO_H */
-- 
2.17.1

