From cd6321c39bc001df44fe11068b5f2e4742dbda75 Mon Sep 17 00:00:00 2001
From: Geetha sowjanya <gakula@marvell.com>
Date: Wed, 6 Feb 2019 11:20:45 +0530
Subject: [PATCH 0954/1051] net: octeontx2: Check for minimum free SQBs

When transmitting traffic at high rates it's been observed that current
SQE free count checking while submitting a new SQE is insufficient and
leads to SQ overflow. Could be because the rate at which new SQEs are
posted by software is higher than the rate of HW updating SQB count
at FC addr.

This patch checks for free SQB count reaching a threshold of 10% and stops
submitting new SQEs. Also made SQ structure cache aligned for performance
reasons.

Change-Id: Iff906c342e1e20e30208c0f7ad5050f728a5eaf2
Signed-off-by: Geetha sowjanya <gakula@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/3571
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c | 2 ++
 drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c   | 8 +++++---
 drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.h   | 3 ++-
 3 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
index 20dbe7b41191..a65e47866e4d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
@@ -565,6 +565,8 @@ static int otx2_sq_init(struct otx2_nic *pfvf, u16 qidx, u16 sqb_aura)
 	sq->head = 0;
 	sq->sqe_per_sqb = (pfvf->hw.sqb_size / sq->sqe_size) - 1;
 	sq->num_sqbs = (qset->sqe_cnt + sq->sqe_per_sqb) / sq->sqe_per_sqb;
+	/* Set SQE threshold to 10% of total SQEs */
+	sq->sqe_thresh = ((sq->num_sqbs * sq->sqe_per_sqb) * 10) / 100;
 	sq->aura_id = sqb_aura;
 	sq->aura_fc_addr = pool->fc_addr->base;
 	sq->lmt_addr = (__force u64 *)(pfvf->reg_base + LMT_LF_LMTLINEX(qidx));
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
index 5fd8d434540e..03241e9d5614 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
@@ -783,15 +783,17 @@ bool otx2_sq_append_skb(struct net_device *netdev, struct otx2_snd_queue *sq,
 {
 	struct netdev_queue *txq = netdev_get_tx_queue(netdev, qidx);
 	struct otx2_nic *pfvf = netdev_priv(netdev);
+	int offset, num_segs, free_sqe;
 	struct nix_sqe_hdr_s *sqe_hdr;
-	int offset, num_segs;
 
 	/* Check if there is room for new SQE.
 	 * 'Num of SQBs freed to SQ's pool - SQ's Aura count'
 	 * will give free SQE count.
 	 */
-	if (((sq->num_sqbs - *sq->aura_fc_addr) * sq->sqe_per_sqb) <
-	    otx2_get_sqe_count(pfvf, skb))
+	free_sqe = (sq->num_sqbs - *sq->aura_fc_addr) * sq->sqe_per_sqb;
+
+	if (free_sqe < sq->sqe_thresh ||
+	    free_sqe < otx2_get_sqe_count(pfvf, skb))
 		goto fail;
 
 	num_segs = skb_shinfo(skb)->nr_frags + 1;
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.h
index 9890f99544b6..3a103014fdd6 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.h
@@ -59,6 +59,7 @@ struct otx2_snd_queue {
 	u16			sqe_size;
 	u32			sqe_cnt;
 	u16			num_sqbs;
+	u16			sqe_thresh;
 	u8			sqe_per_sqb;
 	u64			 io_addr;
 	u64			*aura_fc_addr;
@@ -69,7 +70,7 @@ struct otx2_snd_queue {
 	struct sg_list		*sg;
 	struct qmem		*timestamps;
 	struct queue_stats	stats;
-};
+} ____cacheline_aligned_in_smp;
 
 struct otx2_cq_poll {
 	void			*dev;
-- 
2.17.1

