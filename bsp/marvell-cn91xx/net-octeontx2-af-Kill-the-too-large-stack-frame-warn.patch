From 7d61062277c73b55d4bdb96e8639dfe50bc59a28 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Tue, 16 Apr 2019 14:02:18 +0800
Subject: [PATCH 1049/1051] net: octeontx2-af: Kill the too large stack frame
 warning

A too large stack frame warning is triggered by an usage of 2048 chars
buffer on stack in rvu_nix_get_tx_stall_counters(). Since this function
in not in hot path, we can easily fix this issue by using the kmalloc()
to allocate the buffer.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/af/rvu_fixes.c | 20 +++++++++++++------
 1 file changed, 14 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
index 2045789f5ec3..7c89e0b94e6a 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
@@ -806,7 +806,8 @@ ssize_t rvu_nix_get_tx_stall_counters(struct rvu *rvu,
 	struct rvu_block *block;
 	struct nix_hw *nix_hw;
 	int blkaddr, len, lf;
-	char kbuf[2048];
+	char *kbuf;
+	int bsize = 2048;
 
 	if (*ppos)
 		return 0;
@@ -823,10 +824,14 @@ ssize_t rvu_nix_get_tx_stall_counters(struct rvu *rvu,
 	if (!tx_stall)
 		return -EFAULT;
 
-	len = snprintf(kbuf, sizeof(kbuf), "\n  NIX transmit stall stats\n");
-	len += snprintf(kbuf + len, sizeof(kbuf),
+	kbuf = kmalloc(bsize, GFP_KERNEL);
+	if (!kbuf)
+		return -ENOMEM;
+
+	len = snprintf(kbuf, bsize, "\n  NIX transmit stall stats\n");
+	len += snprintf(kbuf + len, bsize - len,
 			"\t\tPolled: \t\t%lld\n", tx_stall->poll_cntr);
-	len += snprintf(kbuf + len, sizeof(kbuf),
+	len += snprintf(kbuf + len, bsize - len,
 			"\t\tTx stall detected: \t%lld\n\n",
 			tx_stall->stalled_cntr);
 
@@ -835,7 +840,7 @@ ssize_t rvu_nix_get_tx_stall_counters(struct rvu *rvu,
 	for (lf = 0; lf < block->lf.max; lf++) {
 		if (!test_bit(lf, block->lf.bmap))
 			continue;
-		len += snprintf(kbuf + len, sizeof(kbuf),
+		len += snprintf(kbuf + len, bsize - len,
 				"\t\tNIXLF%d   Polled: %lld \tStalled: %lld\n",
 				lf, tx_stall->nixlf_poll_count[lf],
 				tx_stall->nixlf_stall_count[lf]);
@@ -843,10 +848,13 @@ ssize_t rvu_nix_get_tx_stall_counters(struct rvu *rvu,
 	mutex_unlock(&rvu->rsrc_lock);
 
 	if (len > 0) {
-		if (copy_to_user(buffer, kbuf, len))
+		if (copy_to_user(buffer, kbuf, len)) {
+			kfree(kbuf);
 			return -EFAULT;
+		}
 	}
 
+	kfree(kbuf);
 	*ppos += len;
 	return len;
 }
-- 
2.17.1

