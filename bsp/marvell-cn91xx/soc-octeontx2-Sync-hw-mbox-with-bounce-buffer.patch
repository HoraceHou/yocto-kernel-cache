From c48f556c11beed64d1f05616a1bc0e269b19b48b Mon Sep 17 00:00:00 2001
From: Geetha sowjanya <gakula@marvell.com>
Date: Tue, 4 Dec 2018 10:53:01 +0530
Subject: [PATCH 0856/1051] soc: octeontx2: Sync hw mbox with bounce buffer.

This patch is based on bounce buffer implemented by PF/VF.

This patch adds msg_size field to mbox header to copy only required
amount of memory to bounce buffer.

If the bounce buffer is implemented by PF/VF, copy mbox messages from
the bounce buffer to hw mbox memory.

Change-Id: Id6a3804e67a0a5d6bcfdcd5fcdca567b3595a77d
Signed-off-by: Geetha sowjanya <gakula@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/1763
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/soc/marvell/octeontx2/mbox.c | 25 ++++++++++++++++++++-----
 drivers/soc/marvell/octeontx2/mbox.h |  1 +
 2 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/drivers/soc/marvell/octeontx2/mbox.c b/drivers/soc/marvell/octeontx2/mbox.c
index a1ad31b3dddc..61bac091c9e4 100644
--- a/drivers/soc/marvell/octeontx2/mbox.c
+++ b/drivers/soc/marvell/octeontx2/mbox.c
@@ -19,15 +19,18 @@ static const u16 msgs_offset = ALIGN(sizeof(struct mbox_hdr), MBOX_MSG_ALIGN);
 
 void otx2_mbox_reset(struct otx2_mbox *mbox, int devid)
 {
+	void *mbase = mbox->hwbase + (devid * MBOX_SIZE);
 	struct otx2_mbox_dev *mdev = &mbox->dev[devid];
-	struct mbox_hdr *tx_hdr = mdev->mbase  + mbox->tx_start;
-	struct mbox_hdr *rx_hdr = mdev->mbase  + mbox->rx_start;
+	struct mbox_hdr *tx_hdr = mbase  + mbox->tx_start;
+	struct mbox_hdr *rx_hdr = mbase  + mbox->rx_start;
 
 	spin_lock(&mdev->mbox_lock);
 	mdev->msg_size = 0;
 	mdev->rsp_size = 0;
 	tx_hdr->num_msgs = 0;
+	tx_hdr->msg_size = 0;
 	rx_hdr->num_msgs = 0;
+	rx_hdr->msg_size = 0;
 	spin_unlock(&mdev->mbox_lock);
 }
 EXPORT_SYMBOL(otx2_mbox_reset);
@@ -160,11 +163,23 @@ EXPORT_SYMBOL(otx2_mbox_busy_poll_for_rsp);
 
 void otx2_mbox_msg_send(struct otx2_mbox *mbox, int devid)
 {
+	void *hw_mbase = mbox->hwbase + (devid * MBOX_SIZE);
 	struct otx2_mbox_dev *mdev = &mbox->dev[devid];
-	struct mbox_hdr *tx_hdr = mdev->mbase  + mbox->tx_start;
-	struct mbox_hdr *rx_hdr = mdev->mbase  + mbox->rx_start;
+	struct mbox_hdr *tx_hdr = hw_mbase  + mbox->tx_start;
+	struct mbox_hdr *rx_hdr = hw_mbase  + mbox->rx_start;
+
+	/* If bounce buffer is implemented copy mbox messages from
+	 * bounce buffer to hw mbox memory.
+	 */
+	if (mdev->mbase != hw_mbase)
+		memcpy(hw_mbase + mbox->tx_start + msgs_offset,
+		       mdev->mbase + mbox->tx_start + msgs_offset,
+		       mdev->msg_size);
 
 	spin_lock(&mdev->mbox_lock);
+
+	tx_hdr->msg_size = mdev->msg_size;
+
 	/* Reset header for next messages */
 	mdev->msg_size = 0;
 	mdev->rsp_size = 0;
@@ -211,7 +226,7 @@ struct mbox_msghdr *otx2_mbox_alloc_msg_rsp(struct otx2_mbox *mbox, int devid,
 	msghdr = (struct mbox_msghdr *)(mdev->mbase + mbox->tx_start +
 					msgs_offset + mdev->msg_size);
 	/* Clear the whole msg region */
-	memset(msghdr, 0, sizeof(*msghdr) + size);
+	memset(msghdr, 0, size);
 	/* Init message header with reset values */
 	msghdr->ver = OTX2_MBOX_VERSION;
 	mdev->msg_size += size;
diff --git a/drivers/soc/marvell/octeontx2/mbox.h b/drivers/soc/marvell/octeontx2/mbox.h
index 003f6a28571d..e77fe643f5b5 100644
--- a/drivers/soc/marvell/octeontx2/mbox.h
+++ b/drivers/soc/marvell/octeontx2/mbox.h
@@ -75,6 +75,7 @@ struct otx2_mbox {
 
 /* Header which preceeds all mbox messages */
 struct mbox_hdr {
+	u64  msg_size;	/* Total msgs size embedded */
 	u16  num_msgs;   /* No of msgs embedded */
 };
 
-- 
2.17.1

