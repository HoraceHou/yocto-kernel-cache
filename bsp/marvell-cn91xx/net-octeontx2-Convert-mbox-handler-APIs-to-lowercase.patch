From 430e5fa57053ba07cd33fd2875b8492699a6592d Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Fri, 16 Nov 2018 15:46:56 +0530
Subject: [PATCH 0756/1051] net: octeontx2: Convert mbox handler APIs to
 lowercase

This patch converts all mbox handler APIs names to
lowercase. Done as per suggestion from netdev maintainer.

Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/otx2_common.c  | 64 +++++++++----------
 .../ethernet/marvell/octeontx2/otx2_common.h  | 14 ++--
 .../net/ethernet/marvell/octeontx2/otx2_pf.c  | 36 +++++------
 .../ethernet/marvell/octeontx2/otx2_txrx.c    |  4 +-
 .../net/ethernet/marvell/octeontx2/otx2_vf.c  | 10 +--
 5 files changed, 64 insertions(+), 64 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
index c3ee35e96d69..7bc1110a99ae 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_common.c
@@ -28,7 +28,7 @@ int otx2_hw_set_mac_addr(struct otx2_nic *pfvf, struct net_device *netdev)
 {
 	struct nix_set_mac_addr *req;
 
-	req = otx2_mbox_alloc_msg_NIX_SET_MAC_ADDR(&pfvf->mbox);
+	req = otx2_mbox_alloc_msg_nix_set_mac_addr(&pfvf->mbox);
 	if (!req)
 		return -ENOMEM;
 
@@ -57,7 +57,7 @@ int otx2_hw_set_mtu(struct otx2_nic *pfvf, int mtu)
 {
 	struct nix_frs_cfg *req;
 
-	req = otx2_mbox_alloc_msg_NIX_SET_HW_FRS(&pfvf->mbox);
+	req = otx2_mbox_alloc_msg_nix_set_hw_frs(&pfvf->mbox);
 	if (!req)
 		return -ENOMEM;
 
@@ -88,7 +88,7 @@ int otx2_set_flowkey_cfg(struct otx2_nic *pfvf)
 	struct otx2_rss_info *rss = &pfvf->hw.rss_info;
 	struct nix_rss_flowkey_cfg *req;
 
-	req = otx2_mbox_alloc_msg_NIX_RSS_FLOWKEY_CFG(&pfvf->mbox);
+	req = otx2_mbox_alloc_msg_nix_rss_flowkey_cfg(&pfvf->mbox);
 	if (!req)
 		return -ENOMEM;
 	req->mcam_index = -1; /* Default or reserved index */
@@ -107,7 +107,7 @@ int otx2_set_rss_table(struct otx2_nic *pfvf)
 
 	/* Get memory to put this msg */
 	for (idx = 0; idx < rss->rss_size; idx++) {
-		aq = otx2_mbox_alloc_msg_NIX_AQ_ENQ(mbox);
+		aq = otx2_mbox_alloc_msg_nix_aq_enq(mbox);
 		if (!aq) {
 			/* The shared memory buffer can be full.
 			 * Flush it and retry
@@ -115,7 +115,7 @@ int otx2_set_rss_table(struct otx2_nic *pfvf)
 			err = otx2_sync_mbox_msg(mbox);
 			if (err)
 				return err;
-			aq = otx2_mbox_alloc_msg_NIX_AQ_ENQ(mbox);
+			aq = otx2_mbox_alloc_msg_nix_aq_enq(mbox);
 			if (!aq)
 				return -ENOMEM;
 		}
@@ -189,7 +189,7 @@ void otx2_update_lmac_stats(struct otx2_nic *pfvf)
 
 	if (!netif_running(pfvf->netdev))
 		return;
-	req = otx2_mbox_alloc_msg_CGX_STATS(&pfvf->mbox);
+	req = otx2_mbox_alloc_msg_cgx_stats(&pfvf->mbox);
 	if (!req)
 		return;
 
@@ -353,7 +353,7 @@ int otx2_txschq_config(struct otx2_nic *pfvf, int lvl)
 	struct otx2_hw *hw = &pfvf->hw;
 	u64 schq, parent;
 
-	req = otx2_mbox_alloc_msg_NIX_TXSCHQ_CFG(&pfvf->mbox);
+	req = otx2_mbox_alloc_msg_nix_txschq_cfg(&pfvf->mbox);
 	if (!req)
 		return -ENOMEM;
 
@@ -426,7 +426,7 @@ int otx2_txsch_alloc(struct otx2_nic *pfvf)
 	int lvl, err;
 
 	/* Get memory to put this msg */
-	req = otx2_mbox_alloc_msg_NIX_TXSCH_ALLOC(&pfvf->mbox);
+	req = otx2_mbox_alloc_msg_nix_txsch_alloc(&pfvf->mbox);
 	if (!req)
 		return -ENOMEM;
 
@@ -446,7 +446,7 @@ int otx2_txschq_stop(struct otx2_nic *pfvf)
 	int lvl, schq;
 
 	/* Free the transmit schedulers */
-	free_req = otx2_mbox_alloc_msg_NIX_TXSCH_FREE(&pfvf->mbox);
+	free_req = otx2_mbox_alloc_msg_nix_txsch_free(&pfvf->mbox);
 	if (!free_req)
 		return -ENOMEM;
 
@@ -489,7 +489,7 @@ static int otx2_rq_init(struct otx2_nic *pfvf, u16 qidx, u16 lpb_aura)
 	int skid = 0;
 
 	/* Get memory to put this msg */
-	aq = otx2_mbox_alloc_msg_NIX_AQ_ENQ(&pfvf->mbox);
+	aq = otx2_mbox_alloc_msg_nix_aq_enq(&pfvf->mbox);
 	if (!aq)
 		return -ENOMEM;
 
@@ -567,7 +567,7 @@ static int otx2_sq_init(struct otx2_nic *pfvf, u16 qidx, u16 sqb_aura)
 	sq->stats.pkts = 0;
 
 	/* Get memory to put this msg */
-	aq = otx2_mbox_alloc_msg_NIX_AQ_ENQ(&pfvf->mbox);
+	aq = otx2_mbox_alloc_msg_nix_aq_enq(&pfvf->mbox);
 	if (!aq)
 		return -ENOMEM;
 
@@ -625,7 +625,7 @@ static int otx2_cq_init(struct otx2_nic *pfvf, u16 qidx)
 	cq->cq_idx = qidx;
 
 	/* Get memory to put this msg */
-	aq = otx2_mbox_alloc_msg_NIX_AQ_ENQ(&pfvf->mbox);
+	aq = otx2_mbox_alloc_msg_nix_aq_enq(&pfvf->mbox);
 	if (!aq)
 		return -ENOMEM;
 
@@ -689,7 +689,7 @@ int otx2_config_nix(struct otx2_nic *pfvf)
 	pfvf->qset.xqe_size = NIX_XQESZ_W16 ? 128 : 512;
 
 	/* Get memory to put this msg */
-	nixlf = otx2_mbox_alloc_msg_NIX_LF_ALLOC(&pfvf->mbox);
+	nixlf = otx2_mbox_alloc_msg_nix_lf_alloc(&pfvf->mbox);
 	if (!nixlf)
 		return -ENOMEM;
 
@@ -795,13 +795,13 @@ static int otx2_aura_init(struct otx2_nic *pfvf, int aura_id,
 	}
 
 	/* Initialize this aura's context via AF */
-	aq = otx2_mbox_alloc_msg_NPA_AQ_ENQ(&pfvf->mbox);
+	aq = otx2_mbox_alloc_msg_npa_aq_enq(&pfvf->mbox);
 	if (!aq) {
 		/* Shared mbox memory buffer is full, flush it and retry */
 		err = otx2_sync_mbox_msg(&pfvf->mbox);
 		if (err)
 			return err;
-		aq = otx2_mbox_alloc_msg_NPA_AQ_ENQ(&pfvf->mbox);
+		aq = otx2_mbox_alloc_msg_npa_aq_enq(&pfvf->mbox);
 		if (!aq)
 			return -ENOMEM;
 	}
@@ -842,7 +842,7 @@ static int otx2_pool_init(struct otx2_nic *pfvf, u16 pool_id,
 	pool->rbsize = buf_size;
 
 	/* Initialize this pool's context via AF */
-	aq = otx2_mbox_alloc_msg_NPA_AQ_ENQ(&pfvf->mbox);
+	aq = otx2_mbox_alloc_msg_npa_aq_enq(&pfvf->mbox);
 	if (!aq) {
 		/* Shared mbox memory buffer is full, flush it and retry */
 		err = otx2_sync_mbox_msg(&pfvf->mbox);
@@ -850,7 +850,7 @@ static int otx2_pool_init(struct otx2_nic *pfvf, u16 pool_id,
 			qmem_free(pfvf->dev, pool->stack);
 			return err;
 		}
-		aq = otx2_mbox_alloc_msg_NPA_AQ_ENQ(&pfvf->mbox);
+		aq = otx2_mbox_alloc_msg_npa_aq_enq(&pfvf->mbox);
 		if (!aq) {
 			qmem_free(pfvf->dev, pool->stack);
 			return -ENOMEM;
@@ -1004,7 +1004,7 @@ int otx2_config_npa(struct otx2_nic *pfvf)
 		return -ENOMEM;
 
 	/* Get memory to put this msg */
-	npalf = otx2_mbox_alloc_msg_NPA_LF_ALLOC(&pfvf->mbox);
+	npalf = otx2_mbox_alloc_msg_npa_lf_alloc(&pfvf->mbox);
 	if (!npalf)
 		return -ENOMEM;
 
@@ -1023,7 +1023,7 @@ int otx2_detach_resources(struct mbox *mbox)
 {
 	struct rsrc_detach *detach;
 
-	detach = otx2_mbox_alloc_msg_DETACH_RESOURCES(mbox);
+	detach = otx2_mbox_alloc_msg_detach_resources(mbox);
 	if (!detach)
 		return -ENOMEM;
 
@@ -1043,7 +1043,7 @@ int otx2_attach_npa_nix(struct otx2_nic *pfvf)
 	int err;
 
 	/* Get memory to put this msg */
-	attach = otx2_mbox_alloc_msg_ATTACH_RESOURCES(&pfvf->mbox);
+	attach = otx2_mbox_alloc_msg_attach_resources(&pfvf->mbox);
 	if (!attach)
 		return -ENOMEM;
 
@@ -1056,7 +1056,7 @@ int otx2_attach_npa_nix(struct otx2_nic *pfvf)
 		return err;
 
 	/* Get NPA and NIX MSIX vector offsets */
-	msix = otx2_mbox_alloc_msg_MSIX_OFFSET(&pfvf->mbox);
+	msix = otx2_mbox_alloc_msg_msix_offset(&pfvf->mbox);
 	if (!msix)
 		return -ENOMEM;
 
@@ -1080,9 +1080,9 @@ void otx2_ctx_disable(struct mbox *mbox, int type, bool npa)
 
 	/* Request AQ to disable this context */
 	if (npa)
-		req = otx2_mbox_alloc_msg_NPA_HWCTX_DISABLE(mbox);
+		req = otx2_mbox_alloc_msg_npa_hwctx_disable(mbox);
 	else
-		req = otx2_mbox_alloc_msg_NIX_HWCTX_DISABLE(mbox);
+		req = otx2_mbox_alloc_msg_nix_hwctx_disable(mbox);
 
 	if (!req)
 		return;
@@ -1119,7 +1119,7 @@ static inline void otx2_nix_sq_op_stats(struct queue_stats *stats,
 }
 
 /* Mbox message handlers */
-void mbox_handler_CGX_STATS(struct otx2_nic *pfvf,
+void mbox_handler_cgx_stats(struct otx2_nic *pfvf,
 			    struct cgx_stats_rsp *rsp)
 {
 	int id;
@@ -1130,7 +1130,7 @@ void mbox_handler_CGX_STATS(struct otx2_nic *pfvf,
 		pfvf->hw.cgx_tx_stats[id] = rsp->tx_stats[id];
 }
 
-void mbox_handler_NIX_TXSCH_ALLOC(struct otx2_nic *pf,
+void mbox_handler_nix_txsch_alloc(struct otx2_nic *pf,
 				  struct nix_txsch_alloc_rsp *rsp)
 {
 	int lvl, schq;
@@ -1141,17 +1141,17 @@ void mbox_handler_NIX_TXSCH_ALLOC(struct otx2_nic *pf,
 			pf->hw.txschq_list[lvl][schq] =
 				rsp->schq_list[lvl][schq];
 }
-EXPORT_SYMBOL(mbox_handler_NIX_TXSCH_ALLOC);
+EXPORT_SYMBOL(mbox_handler_nix_txsch_alloc);
 
-void mbox_handler_NPA_LF_ALLOC(struct otx2_nic *pfvf,
+void mbox_handler_npa_lf_alloc(struct otx2_nic *pfvf,
 			       struct npa_lf_alloc_rsp *rsp)
 {
 	pfvf->hw.stack_pg_ptrs = rsp->stack_pg_ptrs;
 	pfvf->hw.stack_pg_bytes = rsp->stack_pg_bytes;
 }
-EXPORT_SYMBOL(mbox_handler_NPA_LF_ALLOC);
+EXPORT_SYMBOL(mbox_handler_npa_lf_alloc);
 
-void mbox_handler_NIX_LF_ALLOC(struct otx2_nic *pfvf,
+void mbox_handler_nix_lf_alloc(struct otx2_nic *pfvf,
 			       struct nix_lf_alloc_rsp *rsp)
 {
 	pfvf->hw.sqb_size = rsp->sqb_size;
@@ -1161,15 +1161,15 @@ void mbox_handler_NIX_LF_ALLOC(struct otx2_nic *pfvf,
 	pfvf->hw.lso_tsov4_idx = rsp->lso_tsov4_idx;
 	pfvf->hw.lso_tsov6_idx = rsp->lso_tsov6_idx;
 }
-EXPORT_SYMBOL(mbox_handler_NIX_LF_ALLOC);
+EXPORT_SYMBOL(mbox_handler_nix_lf_alloc);
 
-void mbox_handler_MSIX_OFFSET(struct otx2_nic *pfvf,
+void mbox_handler_msix_offset(struct otx2_nic *pfvf,
 			      struct msix_offset_rsp *rsp)
 {
 	pfvf->hw.npa_msixoff = rsp->npa_msixoff;
 	pfvf->hw.nix_msixoff = rsp->nix_msixoff;
 }
-EXPORT_SYMBOL(mbox_handler_MSIX_OFFSET);
+EXPORT_SYMBOL(mbox_handler_msix_offset);
 
 void otx2_free_cints(struct otx2_nic *pfvf, int n)
 {
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
index 634ec9fefa3c..0626f8c6c610 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
@@ -294,9 +294,9 @@ static inline int otx2_sync_mbox_msg_busy_poll(struct mbox *mbox)
 	return otx2_mbox_check_rsp_msgs(&mbox->mbox, 0);
 }
 
-#define M(_name, _id, _req_type, _rsp_type)				\
+#define M(_name, _id, _fn_name, _req_type, _rsp_type)			\
 static struct _req_type __maybe_unused					\
-*otx2_mbox_alloc_msg_ ## _name(struct mbox *mbox)			\
+*otx2_mbox_alloc_msg_ ## _fn_name(struct mbox *mbox)			\
 {									\
 	struct _req_type *req;						\
 									\
@@ -362,15 +362,15 @@ void otx2_set_rss_key(struct otx2_nic *pfvf);
 int otx2_set_rss_table(struct otx2_nic *pfvf);
 
 /* Mbox handlers */
-void mbox_handler_MSIX_OFFSET(struct otx2_nic *pfvf,
+void mbox_handler_msix_offset(struct otx2_nic *pfvf,
 			      struct msix_offset_rsp *rsp);
-void mbox_handler_NPA_LF_ALLOC(struct otx2_nic *pfvf,
+void mbox_handler_npa_lf_alloc(struct otx2_nic *pfvf,
 			       struct npa_lf_alloc_rsp *rsp);
-void mbox_handler_NIX_LF_ALLOC(struct otx2_nic *pfvf,
+void mbox_handler_nix_lf_alloc(struct otx2_nic *pfvf,
 			       struct nix_lf_alloc_rsp *rsp);
-void mbox_handler_NIX_TXSCH_ALLOC(struct otx2_nic *pf,
+void mbox_handler_nix_txsch_alloc(struct otx2_nic *pf,
 				  struct nix_txsch_alloc_rsp *rsp);
-void mbox_handler_CGX_STATS(struct otx2_nic *pfvf,
+void mbox_handler_cgx_stats(struct otx2_nic *pfvf,
 			    struct cgx_stats_rsp *rsp);
 
 /* Device stats APIs */
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
index 66cd5967d824..22134a61e5a6 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
@@ -59,20 +59,20 @@ static void otx2_process_pfaf_mbox_msg(struct otx2_nic *pf,
 		pf->pcifunc = msg->pcifunc;
 		break;
 	case MBOX_MSG_MSIX_OFFSET:
-		mbox_handler_MSIX_OFFSET(pf, (struct msix_offset_rsp *)msg);
+		mbox_handler_msix_offset(pf, (struct msix_offset_rsp *)msg);
 		break;
 	case MBOX_MSG_NPA_LF_ALLOC:
-		mbox_handler_NPA_LF_ALLOC(pf, (struct npa_lf_alloc_rsp *)msg);
+		mbox_handler_npa_lf_alloc(pf, (struct npa_lf_alloc_rsp *)msg);
 		break;
 	case MBOX_MSG_NIX_LF_ALLOC:
-		mbox_handler_NIX_LF_ALLOC(pf, (struct nix_lf_alloc_rsp *)msg);
+		mbox_handler_nix_lf_alloc(pf, (struct nix_lf_alloc_rsp *)msg);
 		break;
 	case MBOX_MSG_NIX_TXSCH_ALLOC:
-		mbox_handler_NIX_TXSCH_ALLOC(pf,
+		mbox_handler_nix_txsch_alloc(pf,
 					     (struct nix_txsch_alloc_rsp *)msg);
 		break;
 	case MBOX_MSG_CGX_STATS:
-		mbox_handler_CGX_STATS(pf, (struct cgx_stats_rsp *)msg);
+		mbox_handler_cgx_stats(pf, (struct cgx_stats_rsp *)msg);
 		break;
 	default:
 		if (msg->rc)
@@ -114,7 +114,7 @@ static void otx2_pfaf_mbox_handler(struct work_struct *work)
 	otx2_write64(af_mbox->pfvf, RVU_PF_INT, BIT_ULL(0));
 }
 
-static int otx2_mbox_up_handler_CGX_LINK_EVENT(struct otx2_nic *pf,
+static int otx2_mbox_up_handler_cgx_link_event(struct otx2_nic *pf,
 					       struct cgx_link_info_msg *msg,
 					       struct msg_rsp *rsp)
 {
@@ -143,7 +143,7 @@ static int otx2_process_mbox_msg_up(struct otx2_nic *pf,
 	}
 
 	switch (req->id) {
-#define M(_name, _id, _req_type, _rsp_type)				\
+#define M(_name, _id, _fn_name, _req_type, _rsp_type)			\
 	case _id: {							\
 		struct _rsp_type *rsp;					\
 		int err;						\
@@ -159,7 +159,7 @@ static int otx2_process_mbox_msg_up(struct otx2_nic *pf,
 		rsp->hdr.pcifunc = 0;					\
 		rsp->hdr.rc = 0;					\
 									\
-		err = otx2_mbox_up_handler_ ## _name(			\
+		err = otx2_mbox_up_handler_ ## _fn_name(		\
 			pf, (struct _req_type *)req, rsp);		\
 		return err;						\
 	}
@@ -259,7 +259,7 @@ static int otx2_register_mbox_intr(struct otx2_nic *pf)
 	otx2_write64(pf, RVU_PF_INT_ENA_W1S, BIT_ULL(0));
 
 	/* Check mailbox communication with AF */
-	req = otx2_mbox_alloc_msg_READY(&pf->mbox);
+	req = otx2_mbox_alloc_msg_ready(&pf->mbox);
 	if (!req)
 		return -ENOMEM;
 
@@ -347,9 +347,9 @@ static int otx2_cgx_config_linkevents(struct otx2_nic *pf, bool enable)
 	struct msg_req *msg;
 
 	if (enable)
-		msg = otx2_mbox_alloc_msg_CGX_START_LINKEVENTS(&pf->mbox);
+		msg = otx2_mbox_alloc_msg_cgx_start_linkevents(&pf->mbox);
 	else
-		msg = otx2_mbox_alloc_msg_CGX_STOP_LINKEVENTS(&pf->mbox);
+		msg = otx2_mbox_alloc_msg_cgx_stop_linkevents(&pf->mbox);
 
 	if (!msg)
 		return -ENOMEM;
@@ -362,9 +362,9 @@ static int otx2_cgx_config_loopback(struct otx2_nic *pf, bool enable)
 	struct msg_req *msg;
 
 	if (enable)
-		msg = otx2_mbox_alloc_msg_CGX_INTLBK_ENABLE(&pf->mbox);
+		msg = otx2_mbox_alloc_msg_cgx_intlbk_enable(&pf->mbox);
 	else
-		msg = otx2_mbox_alloc_msg_CGX_INTLBK_DISABLE(&pf->mbox);
+		msg = otx2_mbox_alloc_msg_cgx_intlbk_disable(&pf->mbox);
 
 	if (!msg)
 		return -ENOMEM;
@@ -378,7 +378,7 @@ static int otx2_enable_rxvlan(struct otx2_nic *pf, bool enable)
 	struct mbox_msghdr *rsp_hdr;
 	int err;
 
-	req = otx2_mbox_alloc_msg_NIX_VTAG_CFG(&pf->mbox);
+	req = otx2_mbox_alloc_msg_nix_vtag_cfg(&pf->mbox);
 	if (!req)
 		return -ENOMEM;
 
@@ -428,7 +428,7 @@ static void otx2_alloc_rxvlan(struct otx2_nic *pf)
 	struct msg_req *req;
 	int err;
 
-	req = otx2_mbox_alloc_msg_NIX_RXVLAN_ALLOC(&pf->mbox);
+	req = otx2_mbox_alloc_msg_nix_rxvlan_alloc(&pf->mbox);
 	if (!req)
 		return;
 
@@ -685,7 +685,7 @@ static void otx2_free_hw_resources(struct otx2_nic *pf)
 	}
 
 	/* Reset NIX LF */
-	req = otx2_mbox_alloc_msg_NIX_LF_FREE(mbox);
+	req = otx2_mbox_alloc_msg_nix_lf_free(mbox);
 	if (req)
 		WARN_ON(otx2_sync_mbox_msg(mbox));
 
@@ -695,7 +695,7 @@ static void otx2_free_hw_resources(struct otx2_nic *pf)
 	otx2_aura_pool_free(pf);
 
 	/* Reset NPA LF */
-	req = otx2_mbox_alloc_msg_NPA_LF_FREE(mbox);
+	req = otx2_mbox_alloc_msg_npa_lf_free(mbox);
 	if (req)
 		WARN_ON(otx2_sync_mbox_msg(mbox));
 }
@@ -978,7 +978,7 @@ static void otx2_set_rx_mode(struct net_device *netdev)
 	if (!(netdev->flags & IFF_UP))
 		return;
 
-	req = otx2_mbox_alloc_msg_NIX_SET_RX_MODE(&pf->mbox);
+	req = otx2_mbox_alloc_msg_nix_set_rx_mode(&pf->mbox);
 	if (!req)
 		return;
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c b/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c
index 8cca5ca47533..0625b35614c9 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_txrx.c
@@ -770,9 +770,9 @@ int otx2_rxtx_enable(struct otx2_nic *pfvf, bool enable)
 	struct msg_req *msg;
 
 	if (enable)
-		msg = otx2_mbox_alloc_msg_NIX_LF_START_RX(&pfvf->mbox);
+		msg = otx2_mbox_alloc_msg_nix_lf_start_rx(&pfvf->mbox);
 	else
-		msg = otx2_mbox_alloc_msg_NIX_LF_STOP_RX(&pfvf->mbox);
+		msg = otx2_mbox_alloc_msg_nix_lf_stop_rx(&pfvf->mbox);
 
 	if (!msg)
 		return -ENOMEM;
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
index 69756efb9c17..5b1ba3995ca3 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
@@ -58,16 +58,16 @@ static void otx2vf_process_vfaf_mbox_msg(struct otx2_nic *vf,
 		vf->pcifunc = msg->pcifunc;
 		break;
 	case MBOX_MSG_MSIX_OFFSET:
-		mbox_handler_MSIX_OFFSET(vf, (struct msix_offset_rsp *)msg);
+		mbox_handler_msix_offset(vf, (struct msix_offset_rsp *)msg);
 		break;
 	case MBOX_MSG_NPA_LF_ALLOC:
-		mbox_handler_NPA_LF_ALLOC(vf, (struct npa_lf_alloc_rsp *)msg);
+		mbox_handler_npa_lf_alloc(vf, (struct npa_lf_alloc_rsp *)msg);
 		break;
 	case MBOX_MSG_NIX_LF_ALLOC:
-		mbox_handler_NIX_LF_ALLOC(vf, (struct nix_lf_alloc_rsp *)msg);
+		mbox_handler_nix_lf_alloc(vf, (struct nix_lf_alloc_rsp *)msg);
 		break;
 	case MBOX_MSG_NIX_TXSCH_ALLOC:
-		mbox_handler_NIX_TXSCH_ALLOC(vf,
+		mbox_handler_nix_txsch_alloc(vf,
 					     (struct nix_txsch_alloc_rsp *)msg);
 		break;
 	default:
@@ -168,7 +168,7 @@ static int otx2vf_register_mbox_intr(struct otx2_nic *vf)
 	otx2_write64(vf, RVU_VF_INT_ENA_W1S, BIT_ULL(0));
 
 	/* Check mailbox communication with PF */
-	req = otx2_mbox_alloc_msg_READY(&vf->mbox);
+	req = otx2_mbox_alloc_msg_ready(&vf->mbox);
 	if (!req)
 		return -ENOMEM;
 
-- 
2.17.1

