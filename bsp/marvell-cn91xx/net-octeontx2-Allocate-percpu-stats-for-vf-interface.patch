From 5f64f2ff9872a8e2f257111a41eacffcee82bdfb Mon Sep 17 00:00:00 2001
From: Prakash Brahmajyosyula <bprakash@marvell.com>
Date: Wed, 24 Oct 2018 15:12:17 +0300
Subject: [PATCH 0357/1051] net: octeontx2: Allocate percpu stats for vf
 interfaces

This patch fixes segmentation fault issue during interface
initialization.

Signed-off-by: Aleksey Makarov <amakarov@marvell.com>
Signed-off-by: Prakash Brahmajyosyula <bprakash@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/otx2_vf.c | 16 +++++++++++++---
 1 file changed, 13 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
index 5d6cbd6d2bf9..72144deb9e92 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_vf.c
@@ -416,17 +416,23 @@ static int otx2vf_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	if (err < 0)
 		goto err_free_netdev;
 
+	hw->pcpu_stats = netdev_alloc_pcpu_stats(struct otx2_pcpu_stats);
+	if (!hw->pcpu_stats) {
+		err = -ENOMEM;
+		goto err_free_irq_vectors;
+	}
+
 	vf->reg_base = pcim_iomap(pdev, PCI_CFG_REG_BAR_NUM, 0);
 	if (!vf->reg_base) {
 		dev_err(dev, "Unable to map physical function CSRs, aborting\n");
 		err = -ENOMEM;
-		goto err_free_irq_vectors;
+		goto err_free_pcpu_stats;
 	}
 
 	/* Init VF <=> PF mailbox stuff */
 	err = otx2vf_vfaf_mbox_init(vf);
 	if (err)
-		goto err_free_irq_vectors;
+		goto err_free_pcpu_stats;
 
 	/* Register mailbox interrupt */
 	err = otx2vf_register_mbox_intr(vf);
@@ -478,6 +484,8 @@ static int otx2vf_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	otx2vf_disable_mbox_intr(vf);
 err_mbox_destroy:
 	otx2vf_vfaf_mbox_destroy(vf);
+err_free_pcpu_stats:
+	free_percpu(hw->pcpu_stats);
 err_free_irq_vectors:
 	pci_free_irq_vectors(hw->pdev);
 err_free_netdev:
@@ -492,18 +500,20 @@ static void otx2vf_remove(struct pci_dev *pdev)
 {
 	struct net_device *netdev = pci_get_drvdata(pdev);
 	struct otx2_nic *vf;
+	struct otx2_hw *hw;
 
 	if (!netdev)
 		return;
 
 	vf = netdev_priv(netdev);
+	hw = &vf->hw;
 	unregister_netdev(netdev);
 
 	otx2vf_disable_mbox_intr(vf);
 
 	otx2_detach_resources(&vf->mbox);
 	otx2vf_vfaf_mbox_destroy(vf);
-
+	free_percpu(hw->pcpu_stats);
 	pci_free_irq_vectors(vf->pdev);
 	pci_set_drvdata(pdev, NULL);
 	free_netdev(netdev);
-- 
2.17.1

