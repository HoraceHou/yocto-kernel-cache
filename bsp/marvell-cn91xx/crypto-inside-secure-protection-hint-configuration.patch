From e154affed1e399a3ae374aecc096b2f45afbcfb6 Mon Sep 17 00:00:00 2001
From: Ofer Heifetz <oferh@marvell.com>
Date: Wed, 9 May 2018 15:45:04 +0300
Subject: [PATCH 0612/1051] crypto: inside-secure: protection hint
 configuration

The eip197b security level configuration is done via ATF by
setting the Audio_EIP197_AXI_PROT Register value. On the ap810
this CPU register was removed and is configured using the eip197d
CDR_y_DMA_CFG, RDR_y_DMA_CFG and HIA_MST registers.

Change-Id: I09a1220f1fd5d23d953b6a35bed57f07bb6f149f
Signed-off-by: Ofer Heifetz <oferh@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/crypto/inside-secure/safexcel.c | 25 ++++++++++++++++++++++---
 drivers/crypto/inside-secure/safexcel.h |  7 +++++++
 2 files changed, 29 insertions(+), 3 deletions(-)

diff --git a/drivers/crypto/inside-secure/safexcel.c b/drivers/crypto/inside-secure/safexcel.c
index bc46489f17d1..b20237a2cb81 100644
--- a/drivers/crypto/inside-secure/safexcel.c
+++ b/drivers/crypto/inside-secure/safexcel.c
@@ -220,6 +220,8 @@ static int safexcel_hw_setup_cdesc_rings(struct safexcel_crypto_priv *priv)
 	cd_size_rnd = (priv->config.cd_size + (BIT(hdw) - 1)) >> hdw;
 
 	for (i = 0; i < priv->config.rings; i++) {
+		int axi_access = AXI_NONE_SECURE_ACCESS;
+
 		/* ring base address */
 		writel(lower_32_bits(priv->ring[i].cdr.base_dma),
 		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_RING_BASE_ADDR_LO);
@@ -236,6 +238,12 @@ static int safexcel_hw_setup_cdesc_rings(struct safexcel_crypto_priv *priv)
 		/* Configure DMA tx control */
 		val = EIP197_HIA_xDR_CFG_WR_CACHE(WR_CACHE_3BITS);
 		val |= EIP197_HIA_xDR_CFG_RD_CACHE(RD_CACHE_3BITS);
+
+		if (priv->version == EIP197D) {
+			val |= EIP197_HIA_xDR_CFG_xD_PROT(axi_access);
+			val |= EIP197_HIA_xDR_CFG_DATA_PROT(axi_access);
+			val |= EIP197_HIA_xDR_CFG_ACD_PROT(axi_access);
+		}
 		writel(val, EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_DMA_CFG);
 
 		/* clear any pending interrupt */
@@ -258,6 +266,8 @@ static int safexcel_hw_setup_rdesc_rings(struct safexcel_crypto_priv *priv)
 	rd_size_rnd = (priv->config.rd_size + (BIT(hdw) - 1)) >> hdw;
 
 	for (i = 0; i < priv->config.rings; i++) {
+		int axi_access = AXI_NONE_SECURE_ACCESS;
+
 		/* ring base address */
 		writel(lower_32_bits(priv->ring[i].rdr.base_dma),
 		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_RING_BASE_ADDR_LO);
@@ -276,6 +286,12 @@ static int safexcel_hw_setup_rdesc_rings(struct safexcel_crypto_priv *priv)
 		val = EIP197_HIA_xDR_CFG_WR_CACHE(WR_CACHE_3BITS);
 		val |= EIP197_HIA_xDR_CFG_RD_CACHE(RD_CACHE_3BITS);
 		val |= EIP197_HIA_xDR_WR_RES_BUF | EIP197_HIA_xDR_WR_CTRL_BUF;
+
+		if (priv->version == EIP197D) {
+			val |= EIP197_HIA_xDR_CFG_xD_PROT(axi_access);
+			val |= EIP197_HIA_xDR_CFG_DATA_PROT(axi_access);
+		}
+
 		writel(val,
 		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_DMA_CFG);
 
@@ -313,9 +329,12 @@ static int safexcel_hw_init(struct safexcel_crypto_priv *priv)
 	writel(val, EIP197_HIA_AIC(priv) + EIP197_HIA_MST_CTRL);
 
 	/* Configure wr/rd cache values */
-	writel(EIP197_MST_CTRL_RD_CACHE(RD_CACHE_4BITS) |
-	       EIP197_MST_CTRL_WD_CACHE(WR_CACHE_4BITS),
-	       EIP197_HIA_GEN_CFG(priv) + EIP197_MST_CTRL);
+	val = EIP197_MST_CTRL_RD_CACHE(RD_CACHE_4BITS) |
+		EIP197_MST_CTRL_WD_CACHE(WR_CACHE_4BITS);
+
+	if (priv->version == EIP197D)
+		val |= EIP197_MST_CTRL_SUPPORT_PROT(AXI_NONE_SECURE_ACCESS);
+	writel(val, EIP197_HIA_GEN_CFG(priv) + EIP197_MST_CTRL);
 
 	/* Interrupts reset */
 
diff --git a/drivers/crypto/inside-secure/safexcel.h b/drivers/crypto/inside-secure/safexcel.h
index 29bbba8112f0..7fa0d9f9a251 100644
--- a/drivers/crypto/inside-secure/safexcel.h
+++ b/drivers/crypto/inside-secure/safexcel.h
@@ -130,6 +130,9 @@
 #define EIP197_PE_OUT_TBUF_THRES(n)		(0x1d00 + (0x2000 * (n)))
 #define EIP197_MST_CTRL				0xfff4
 
+/* AXI protection fields */
+#define AXI_NONE_SECURE_ACCESS				BIT(1)
+
 /* EIP197-specific registers, no indirection */
 #define EIP197_CLASSIFICATION_RAMS		0xe0000
 #define EIP197_TRC_CTRL				0xf0800
@@ -152,6 +155,9 @@
 #define EIP197_HIA_xDR_WR_RES_BUF		BIT(22)
 #define EIP197_HIA_xDR_WR_CTRL_BUF		BIT(23)
 #define EIP197_HIA_xDR_WR_OWN_BUF		BIT(24)
+#define EIP197_HIA_xDR_CFG_xD_PROT(n)		(((n) & 0xf) << 4)
+#define EIP197_HIA_xDR_CFG_DATA_PROT(n)		(((n) & 0xf) << 12)
+#define EIP197_HIA_xDR_CFG_ACD_PROT(n)		(((n) & 0xf) << 20)
 #define EIP197_HIA_xDR_CFG_WR_CACHE(n)		(((n) & 0x7) << 25)
 #define EIP197_HIA_xDR_CFG_RD_CACHE(n)		(((n) & 0x7) << 29)
 
@@ -225,6 +231,7 @@
 #define WR_CACHE_4BITS				(WR_CACHE_3BITS << 1 | BIT(0))
 #define EIP197_MST_CTRL_RD_CACHE(n)		(((n) & 0xf) << 0)
 #define EIP197_MST_CTRL_WD_CACHE(n)		(((n) & 0xf) << 4)
+#define EIP197_MST_CTRL_SUPPORT_PROT(n)		(((n) & 0xf) << 12)
 #define EIP197_MST_CTRL_TX_MAX_CMD(n)		(((n) & 0xf) << 20)
 #define EIP197_MST_CTRL_BYTE_SWAP		BIT(24)
 #define EIP197_MST_CTRL_NO_BYTE_SWAP		BIT(25)
-- 
2.17.1

