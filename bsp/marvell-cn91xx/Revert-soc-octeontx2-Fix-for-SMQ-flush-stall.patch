From b31dbd2c9d4666e87a493820f199ec5dd2d51282 Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Sat, 9 Feb 2019 23:22:01 +0530
Subject: [PATCH 0969/1051] Revert "soc: octeontx2: Fix for SMQ flush stall"

This reverts commit 1578b1fdd4ecdbac39cc17247dc45587696891ed.

This patch doesn't fix SMQ flush in all places, will recommit
proper one.

Change-Id: I6e373a33ebabceef971f31a292dccc9fd34340d8
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/3735
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/cgx.c   | 28 -------------------
 .../net/ethernet/marvell/octeontx2/af/cgx.h   |  3 --
 .../net/ethernet/marvell/octeontx2/af/rvu.h   |  1 -
 .../ethernet/marvell/octeontx2/af/rvu_cgx.c   | 13 ---------
 .../ethernet/marvell/octeontx2/af/rvu_nix.c   | 23 ---------------
 5 files changed, 68 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
index 8983dcffbb48..efba64894cde 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
@@ -294,34 +294,6 @@ void cgx_lmac_promisc_config(int cgx_id, int lmac_id, bool enable)
 }
 EXPORT_SYMBOL(cgx_lmac_promisc_config);
 
-void cgx_lmac_bp_config(void *cgxd, int lmac_id, bool enable)
-{
-	struct cgx *cgx = cgxd;
-	u64 cfg;
-
-	if (!cgx)
-		return;
-
-	if (enable) {
-		cfg = cgx_read(cgx, lmac_id, CGXX_GMP_GMI_RXX_FRM_CTL);
-		cfg |= CGX_GMP_GMI_RXX_FRM_CTL_CTL_BCK;
-		cgx_write(cgx, lmac_id, CGXX_GMP_GMI_RXX_FRM_CTL, cfg);
-
-		cfg = cgx_read(cgx, lmac_id, CGXX_SMUX_RX_FRM_CTL);
-		cfg |= CGX_SMUX_RX_FRM_CTL_CTL_BCK;
-		cgx_write(cgx, lmac_id,	CGXX_SMUX_RX_FRM_CTL, cfg);
-	} else {
-		cfg = cgx_read(cgx, lmac_id, CGXX_GMP_GMI_RXX_FRM_CTL);
-		cfg &= ~CGX_GMP_GMI_RXX_FRM_CTL_CTL_BCK;
-		cgx_write(cgx, lmac_id, CGXX_GMP_GMI_RXX_FRM_CTL, cfg);
-
-		cfg = cgx_read(cgx, lmac_id, CGXX_SMUX_RX_FRM_CTL);
-		cfg &= ~CGX_SMUX_RX_FRM_CTL_CTL_BCK;
-		cgx_write(cgx, lmac_id,	CGXX_SMUX_RX_FRM_CTL, cfg);
-	}
-}
-EXPORT_SYMBOL(cgx_lmac_bp_config);
-
 void cgx_lmac_ptp_config(void *cgxd, int lmac_id, bool enable)
 {
 	struct cgx *cgx = cgxd;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/cgx.h b/drivers/net/ethernet/marvell/octeontx2/af/cgx.h
index c70ee80e2aac..f66cee6e0bb0 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/cgx.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/cgx.h
@@ -58,12 +58,10 @@
 #define CGXX_SPUX_CONTROL1_LBK		BIT_ULL(14)
 #define CGXX_SMUX_RX_FRM_CTL		0x20020
 #define CGX_SMUX_RX_FRM_CTL_PTP_MODE	BIT_ULL(12)
-#define CGX_SMUX_RX_FRM_CTL_CTL_BCK	BIT_ULL(3)
 #define CGXX_GMP_PCS_MRX_CTL		0x30000
 #define CGXX_GMP_PCS_MRX_CTL_LBK	BIT_ULL(14)
 #define CGXX_GMP_GMI_RXX_FRM_CTL		0x38028
 #define CGX_GMP_GMI_RXX_FRM_CTL_PTP_MODE	BIT_ULL(12)
-#define CGX_GMP_GMI_RXX_FRM_CTL_CTL_BCK	BIT_ULL(3)
 
 #define CGX_COMMAND_REG			CGXX_SCRATCH1_REG
 #define CGX_EVENT_REG			CGXX_SCRATCH0_REG
@@ -119,7 +117,6 @@ u64 cgx_lmac_addr_get(u8 cgx_id, u8 lmac_id);
 int cgx_get_pfmacaddr(void *cgxd, u8 lmac_id, u8 *macdst);
 void cgx_lmac_promisc_config(int cgx_id, int lmac_id, bool enable);
 void cgx_lmac_ptp_config(void *cgxd, int lmac_id, bool enable);
-void cgx_lmac_bp_config(void *cgxd, int lmac_id, bool enable);
 int cgx_lmac_internal_loopback(void *cgxd, int lmac_id, bool enable);
 int cgx_get_link_info(void *cgxd, int lmac_id,
 		      struct cgx_link_user_info *linfo);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
index 7d5c967dc2e5..b6431266b35b 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
@@ -394,7 +394,6 @@ static inline void rvu_get_cgx_lmac_id(u8 map, u8 *cgx_id, u8 *lmac_id)
 	*lmac_id = (map & 0xF);
 }
 
-void rvu_cgx_config_bp(struct rvu *rvu, u8 cgx_id, u8 lmac_id, bool enable);
 int rvu_cgx_init(struct rvu *rvu);
 int rvu_cgx_exit(struct rvu *rvu);
 void *rvu_cgx_pdata(u8 cgx_id, struct rvu *rvu);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
index c7e175ecae82..0b37cf703244 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
@@ -481,19 +481,6 @@ int rvu_mbox_handler_cgx_promisc_disable(struct rvu *rvu, struct msg_req *req,
 	return 0;
 }
 
-void rvu_cgx_config_bp(struct rvu *rvu, u8 cgx_id, u8 lmac_id, bool enable)
-{
-	void *cgxd;
-
-	if (enable) {
-		cgxd = rvu_cgx_pdata(cgx_id, rvu);
-		cgx_lmac_bp_config(cgxd, lmac_id, true);
-	} else {
-		cgxd = rvu_cgx_pdata(cgx_id, rvu);
-		cgx_lmac_bp_config(cgxd, lmac_id, false);
-	}
-}
-
 int rvu_mbox_handler_cgx_ptp_rx_enable(struct rvu *rvu, struct msg_req *req,
 				       struct msg_rsp *rsp)
 {
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index 14fb5314c8bc..72754cffbbe8 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -1251,9 +1251,7 @@ static int nix_txschq_free(struct rvu *rvu, u16 pcifunc)
 	struct nix_txsch *txsch;
 	struct nix_hw *nix_hw;
 	u64 cfg;
-	int pf;
 
-	pf = rvu_get_pf(pcifunc);
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NIX, pcifunc);
 	if (blkaddr < 0)
 		return NIX_AF_ERR_AF_LF_INVALID;
@@ -1291,33 +1289,12 @@ static int nix_txschq_free(struct rvu *rvu, u16 pcifunc)
 		rvu_write64(rvu, blkaddr, NIX_AF_SMQX_CFG(schq), cfg);
 
 		/* Wait for flush to complete */
-		err = rvu_poll_reg(rvu, blkaddr,
-				   NIX_AF_SMQX_CFG(schq), BIT_ULL(49), true);
-		if (err) {
-			/* Clear CTL_BCK and try again */
-			if (is_pf_cgxmapped(rvu, pf)) {
-				u8 cgx_id, lmac_id;
-
-				rvu_get_cgx_lmac_id(rvu->pf2cgxlmac_map[pf],
-						&cgx_id, &lmac_id);
-				rvu_cgx_config_bp(rvu, cgx_id, lmac_id, false);
-			}
-		}
-
 		err = rvu_poll_reg(rvu, blkaddr,
 				   NIX_AF_SMQX_CFG(schq), BIT_ULL(49), true);
 		if (err) {
 			dev_err(rvu->dev,
 				"NIXLF%d: SMQ%d flush failed\n", nixlf, schq);
 		}
-		if (is_pf_cgxmapped(rvu, pf)) {
-			u8 cgx_id, lmac_id;
-
-		    rvu_get_cgx_lmac_id(rvu->pf2cgxlmac_map[pf],
-					&cgx_id, &lmac_id);
-			rvu_cgx_config_bp(rvu, cgx_id, lmac_id, true);
-		}
-
 	}
 
 	/* Now free scheduler queues to free pool */
-- 
2.17.1

