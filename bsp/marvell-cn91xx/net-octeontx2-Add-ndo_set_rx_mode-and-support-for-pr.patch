From 5711944654debc63efcb86f7c667f7b37bd23188 Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Sat, 11 Aug 2018 22:59:09 +0530
Subject: [PATCH 0117/1051] net: octeontx2: Add ndo_set_rx_mode and support for
 promisc/allmulti

Adds ndo_set_rx_mode callback to configure RX mode to
PROMISC or ALLMULTI. Filtering support is not added.

Also introduced busy poll mailbox sync API since
ndo_set_rx_mode is called in atomic context.

Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/otx2_common.h  | 11 +++++++++
 .../net/ethernet/marvell/octeontx2/otx2_pf.c  | 24 +++++++++++++++++++
 2 files changed, 35 insertions(+)

diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
index 45bfc8b0895f..fe4231b1a0de 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_common.h
@@ -217,6 +217,17 @@ static inline int otx2_sync_mbox_msg(struct mbox *mbox)
 	return otx2_mbox_wait_for_rsp(&mbox->mbox, 0);
 }
 
+/* Use this API to send mbox msgs in atomic context
+ * where sleeping is not allowed
+ */
+static inline int otx2_sync_mbox_msg_busy_poll(struct mbox *mbox)
+{
+	if (!otx2_mbox_nonempty(&mbox->mbox, 0))
+		return 0;
+	otx2_mbox_msg_send(&mbox->mbox, 0);
+	return otx2_mbox_busy_poll_for_rsp(&mbox->mbox, 0);
+}
+
 #define M(_name, _id, _req_type, _rsp_type)				\
 static struct _req_type __maybe_unused					\
 *otx2_mbox_alloc_msg_ ## _name(struct mbox *mbox)			\
diff --git a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
index 3e716573c90a..6f5ad2816d5f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/otx2_pf.c
@@ -599,12 +599,36 @@ static int otx2_stop(struct net_device *netdev)
 	return 0;
 }
 
+static void otx2_set_rx_mode(struct net_device *netdev)
+{
+	struct otx2_nic *pf = netdev_priv(netdev);
+	struct nix_rx_mode *req;
+
+	if (!(netdev->flags & IFF_UP))
+		return;
+
+	req = otx2_mbox_alloc_msg_NIX_SET_RX_MODE(&pf->mbox);
+	if (!req)
+		return;
+
+	req->mode = NIX_RX_MODE_UCAST;
+
+	/* We don't support MAC address filtering yet */
+	if (netdev->flags & IFF_PROMISC)
+		req->mode |= NIX_RX_MODE_PROMISC;
+	else if (netdev->flags & IFF_ALLMULTI)
+		req->mode |= NIX_RX_MODE_ALLMULTI;
+
+	otx2_sync_mbox_msg_busy_poll(&pf->mbox);
+}
+
 static const struct net_device_ops otx2_netdev_ops = {
 	.ndo_open		= otx2_open,
 	.ndo_stop		= otx2_stop,
 	.ndo_start_xmit		= otx2_xmit,
 	.ndo_set_mac_address    = otx2_set_mac_address,
 	.ndo_change_mtu         = otx2_change_mtu,
+	.ndo_set_rx_mode        = otx2_set_rx_mode,
 	.ndo_get_stats64	= otx2_get_stats64,
 };
 
-- 
2.17.1

