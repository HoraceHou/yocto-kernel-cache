From a35ccbac822f956e04a006502359fa78c944eec3 Mon Sep 17 00:00:00 2001
From: Linu Cherian <lcherian@marvell.com>
Date: Tue, 5 Feb 2019 14:56:59 +0530
Subject: [PATCH 0940/1051] soc: octeontx2: Integrate CGX module with AF

Based on upstream cgx driver, CGX module integrated with AF module.

Change-Id: I5c362e2aefa23f4320c2fa307f825f6293706f21
Signed-off-by: Linu Cherian <lcherian@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/3480
Tested-by: sa_ip-sw-jenkins
Tested-by: Linu Cherian <Linu.Cherian@cavium.com>
Reviewed-by: Linu Cherian <Linu.Cherian@cavium.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/soc/marvell/Kconfig             |  8 --------
 drivers/soc/marvell/octeontx2/Makefile  |  4 +---
 drivers/soc/marvell/octeontx2/cgx.c     | 23 +----------------------
 drivers/soc/marvell/octeontx2/cgx.h     |  2 ++
 drivers/soc/marvell/octeontx2/rvu.c     | 25 ++++++++++++++++---------
 drivers/soc/marvell/octeontx2/rvu.h     |  1 -
 drivers/soc/marvell/octeontx2/rvu_cgx.c | 22 ----------------------
 7 files changed, 20 insertions(+), 65 deletions(-)

diff --git a/drivers/soc/marvell/Kconfig b/drivers/soc/marvell/Kconfig
index 9a88b060e6a9..9abddb3ffb8d 100644
--- a/drivers/soc/marvell/Kconfig
+++ b/drivers/soc/marvell/Kconfig
@@ -11,14 +11,6 @@ config OCTEONTX2_AF
 	  This driver supports Marvell's OcteonTX2 Resource Virtualization
 	  Unit's admin function manager which manages all RVU HW resources.
 
-config OCTEONTX2_CGX
-	tristate "OcteonTX2 MAC interface (CGX) driver"
-	depends on ARM64 && PCI
-	select PHYLIB
-	---help---
-	  This driver supports programming and controlling of MAC
-	  interfaces from RVU Admin Function driver.
-
 config OCTEONTX2_RM
 	tristate "OcteonTX2 RVU Resource Manager driver"
 	depends on OCTEONTX2_AF
diff --git a/drivers/soc/marvell/octeontx2/Makefile b/drivers/soc/marvell/octeontx2/Makefile
index 373667f203bb..e48f3d1e130a 100644
--- a/drivers/soc/marvell/octeontx2/Makefile
+++ b/drivers/soc/marvell/octeontx2/Makefile
@@ -3,10 +3,8 @@
 # Makefile for Marvell's OcteonTX2 RVU Admin Function driver
 #
 
-obj-$(CONFIG_OCTEONTX2_CGX) += octeontx2_cgx.o
 obj-$(CONFIG_OCTEONTX2_AF) += octeontx2_af.o
 
-octeontx2_cgx-y := cgx.o
-octeontx2_af-y := rvu.o mbox.o ptp.o rvu_ptp.o rvu_cgx.o rvu_npa.o rvu_sso.o \
+octeontx2_af-y := cgx.o rvu.o mbox.o ptp.o rvu_ptp.o rvu_cgx.o rvu_npa.o rvu_sso.o \
 		  rvu_nix.o rvu_reg.o rvu_npc.o rvu_ndc.o rvu_debugfs.o \
 		  rvu_validation.o rvu_tim.o rvu_cpt.o
diff --git a/drivers/soc/marvell/octeontx2/cgx.c b/drivers/soc/marvell/octeontx2/cgx.c
index c3e89ce41769..051e27751f89 100644
--- a/drivers/soc/marvell/octeontx2/cgx.c
+++ b/drivers/soc/marvell/octeontx2/cgx.c
@@ -18,13 +18,11 @@
 #include <linux/of.h>
 #include <linux/of_mdio.h>
 #include <linux/of_net.h>
-#include <linux/kthread.h>
 
 #include "cgx.h"
 
 #define DRV_NAME	"octeontx2-cgx"
 #define DRV_STRING      "Marvell OcteonTX2 CGX/MAC Driver"
-#define DRV_VERSION	"1.0"
 
 /**
  * struct lmac
@@ -82,10 +80,6 @@ static const struct pci_device_id cgx_id_table[] = {
 	{ 0, }  /* end of table */
 };
 
-MODULE_AUTHOR("Marvell International Ltd.");
-MODULE_DESCRIPTION(DRV_STRING);
-MODULE_LICENSE("GPL v2");
-MODULE_VERSION(DRV_VERSION);
 MODULE_DEVICE_TABLE(pci, cgx_id_table);
 
 static void cgx_write(struct cgx *cgx, u64 lmac, u64 offset, u64 val)
@@ -954,24 +948,9 @@ static void cgx_remove(struct pci_dev *pdev)
 	pci_set_drvdata(pdev, NULL);
 }
 
-static struct pci_driver cgx_driver = {
+struct pci_driver cgx_driver = {
 	.name = DRV_NAME,
 	.id_table = cgx_id_table,
 	.probe = cgx_probe,
 	.remove = cgx_remove,
 };
-
-static int __init cgx_init_module(void)
-{
-	pr_info("%s: %s\n", DRV_NAME, DRV_STRING);
-
-	return pci_register_driver(&cgx_driver);
-}
-
-static void __exit cgx_cleanup_module(void)
-{
-	pci_unregister_driver(&cgx_driver);
-}
-
-module_init(cgx_init_module);
-module_exit(cgx_cleanup_module);
diff --git a/drivers/soc/marvell/octeontx2/cgx.h b/drivers/soc/marvell/octeontx2/cgx.h
index 73b2c9280a70..b0acc18be6d0 100644
--- a/drivers/soc/marvell/octeontx2/cgx.h
+++ b/drivers/soc/marvell/octeontx2/cgx.h
@@ -99,6 +99,8 @@ struct cgx_event_cb {
 	void *data;
 };
 
+extern struct pci_driver cgx_driver;
+
 int cgx_get_cgxcnt_max(void);
 int cgx_get_lmac_cnt(void *cgxd);
 void *cgx_get_pdata(int cgx_id);
diff --git a/drivers/soc/marvell/octeontx2/rvu.c b/drivers/soc/marvell/octeontx2/rvu.c
index b080ffe183c5..ecfc77948c5c 100644
--- a/drivers/soc/marvell/octeontx2/rvu.c
+++ b/drivers/soc/marvell/octeontx2/rvu.c
@@ -15,6 +15,7 @@
 #include <linux/pci.h>
 #include <linux/sysfs.h>
 
+#include "cgx.h"
 #include "rvu.h"
 #include "rvu_reg.h"
 #include "ptp.h"
@@ -2594,10 +2595,6 @@ static int rvu_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 		goto err_release_regions;
 	}
 
-	err = rvu_check_cgx_driver(rvu);
-	if (err)
-		goto err_release_regions;
-
 	rvu->ptp = ptp_get();
 	if (IS_ERR(rvu->ptp)) {
 		err = PTR_ERR(rvu->ptp);
@@ -2721,13 +2718,22 @@ static int __init rvu_init_module(void)
 
 	pr_info("%s: %s\n", DRV_NAME, DRV_STRING);
 
-	err = pci_register_driver(&ptp_driver);
-	if (err)
+	err = pci_register_driver(&cgx_driver);
+	if (err < 0)
 		return err;
 
-	err = pci_register_driver(&rvu_driver);
-	if (err)
-		pci_unregister_driver(&ptp_driver);
+	err = pci_register_driver(&ptp_driver);
+	if (err < 0)
+		goto ptp_err;
+
+	err =  pci_register_driver(&rvu_driver);
+	if (err < 0)
+		goto rvu_err;
+
+rvu_err:
+	pci_unregister_driver(&ptp_driver);
+ptp_err:
+	pci_unregister_driver(&cgx_driver);
 
 	return err;
 }
@@ -2736,6 +2742,7 @@ static void __exit rvu_cleanup_module(void)
 {
 	pci_unregister_driver(&rvu_driver);
 	pci_unregister_driver(&ptp_driver);
+	pci_unregister_driver(&cgx_driver);
 }
 
 module_init(rvu_init_module);
diff --git a/drivers/soc/marvell/octeontx2/rvu.h b/drivers/soc/marvell/octeontx2/rvu.h
index 7407efcba1e6..6024ab1055c0 100644
--- a/drivers/soc/marvell/octeontx2/rvu.h
+++ b/drivers/soc/marvell/octeontx2/rvu.h
@@ -396,7 +396,6 @@ static inline void rvu_get_cgx_lmac_id(u8 map, u8 *cgx_id, u8 *lmac_id)
 void rvu_cgx_config_bp(struct rvu *rvu, u8 cgx_id, u8 lmac_id, bool enable);
 int rvu_cgx_init(struct rvu *rvu);
 int rvu_cgx_exit(struct rvu *rvu);
-int rvu_check_cgx_driver(struct rvu *rvu);
 void *rvu_cgx_pdata(u8 cgx_id, struct rvu *rvu);
 int rvu_cgx_config_rxtx(struct rvu *rvu, u16 pcifunc, bool start);
 int rvu_mbox_handler_cgx_start_rxtx(struct rvu *rvu, struct msg_req *req,
diff --git a/drivers/soc/marvell/octeontx2/rvu_cgx.c b/drivers/soc/marvell/octeontx2/rvu_cgx.c
index cd32fcfbda82..c7e175ecae82 100644
--- a/drivers/soc/marvell/octeontx2/rvu_cgx.c
+++ b/drivers/soc/marvell/octeontx2/rvu_cgx.c
@@ -339,28 +339,6 @@ int rvu_cgx_exit(struct rvu *rvu)
 	return 0;
 }
 
-int rvu_check_cgx_driver(struct rvu *rvu)
-{
-	struct pci_dev *pdev;
-	void *cgx;
-
-	pdev = pci_get_device(PCI_VENDOR_ID_CAVIUM, PCI_DEVID_OCTEONTX2_CGX,
-			      NULL);
-	if (!pdev)
-		return 0;
-
-	cgx = pci_get_drvdata(pdev);
-	if (!cgx) {
-		dev_warn(rvu->dev,
-			 "CGX driver is not init'ed, deferring RVU AF probe\n");
-		pci_dev_put(pdev);
-		return -EPROBE_DEFER;
-	}
-
-	pci_dev_put(pdev);
-	return 0;
-}
-
 int rvu_cgx_config_rxtx(struct rvu *rvu, u16 pcifunc, bool start)
 {
 	int pf = rvu_get_pf(pcifunc);
-- 
2.17.1

