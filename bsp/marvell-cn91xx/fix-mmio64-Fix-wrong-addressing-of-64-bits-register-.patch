From 809a9d60c105dfa3266f0102847dced59458a25e Mon Sep 17 00:00:00 2001
From: Wilson Ding <dingwei@marvell.com>
Date: Fri, 29 Jun 2018 18:55:48 +0800
Subject: [PATCH 0672/1051] fix: mmio64: Fix wrong addressing of 64-bits
 register access

This patch fixed a CPU endian issue introduced by the
commit 21c65c5d19b5 ("mvebu: io: workaround 64-bit
register access limitation").

The previous patch simulated a single hardware MMIO64
read/write by means of two software MMIO32 read/write.
However, the upper 32-bits register value should be
addressed  with the lower memory address in a big endian
system. Otherwise, it results in the unexpected swapping
between the upper and lower 32-bits for a 64-bits register
value.

Change-Id: Ia57d980b81146d4fef92be9d73842c44b9fb5411
Signed-off-by: Wilson Ding <dingwei@marvell.com>
[Kevin: The original patch got from Marvell sdk10.0_19.06]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/arm64/include/asm/io.h | 20 ++++++++++++++++----
 1 file changed, 16 insertions(+), 4 deletions(-)

diff --git a/arch/arm64/include/asm/io.h b/arch/arm64/include/asm/io.h
index 964912f66133..31999223fac8 100644
--- a/arch/arm64/include/asm/io.h
+++ b/arch/arm64/include/asm/io.h
@@ -63,8 +63,14 @@ static inline void __raw_writeq(u64 val, volatile void __iomem *addr)
 #else
 static inline void __raw_writeq(u64 val, volatile void __iomem *addr)
 {
-	u8 *low = (u8 *)addr;
-	u8 *high = low + 4;
+	u32 *low, *high;
+
+	low = high = (u32 *)addr;
+#ifdef CONFIG_CPU_BIG_ENDIAN
+	low++;
+#else
+	high++;
+#endif
 	asm volatile("str %w0, [%1]" : : "rZ" (val & U32_MAX), "r" (low));
 	asm volatile("str %w0, [%1]" : : "rZ" (val >> 32), "r" (high));
 }
@@ -120,8 +126,14 @@ static inline u64 __raw_readq(const volatile void __iomem *addr)
 {
 	u64 val = 0;
 	u32 temp;
-	u8 *low = (u8 *)addr;
-	u8 *high = low + 4;
+	u32 *low, *high;
+
+	low = high = (u32 *)addr;
+#ifdef CONFIG_CPU_BIG_ENDIAN
+	low++;
+#else
+	high++;
+#endif
 
 	asm volatile(ALTERNATIVE("ldr %w0, [%1]",
 				 "ldar %w0, [%1]",
-- 
2.17.1

