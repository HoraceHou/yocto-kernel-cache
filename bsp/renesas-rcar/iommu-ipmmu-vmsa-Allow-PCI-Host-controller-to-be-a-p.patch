From adf4ae655590a7f67cca80e01b69001ab7d77c1e Mon Sep 17 00:00:00 2001
From: Phil Edworthy <phil.edworthy@renesas.com>
Date: Thu, 18 Aug 2016 16:39:14 +0100
Subject: [PATCH 752/909] iommu/ipmmu-vmsa: Allow PCI Host controller to be a
 proxy for all connected PCI devices

commit a176b24aa5a256f74bdf37bf3fffa1cfde838374 from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

The IOMMU can't distinguish between different PCI Functions.
Use PCI Host controller as a proxy for all connected PCI devices.

Signed-off-by: Phil Edworthy <phil.edworthy@renesas.com>
Signed-off-by: Hai Nguyen Pham <hai.pham.ud@renesas.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/iommu/ipmmu-vmsa.c | 25 +++++++++++++++++++++++++
 1 file changed, 25 insertions(+)

diff --git a/drivers/iommu/ipmmu-vmsa.c b/drivers/iommu/ipmmu-vmsa.c
index e0b832007a1f..1d6be1902f16 100644
--- a/drivers/iommu/ipmmu-vmsa.c
+++ b/drivers/iommu/ipmmu-vmsa.c
@@ -26,6 +26,7 @@
 #include <linux/sizes.h>
 #include <linux/slab.h>
 #include <linux/sys_soc.h>
+#include <linux/pci.h>
 
 #if defined(CONFIG_ARM) && !defined(CONFIG_IOMMU_DMA)
 #include <asm/dma-iommu.h>
@@ -1240,8 +1241,21 @@ static int ipmmu_init_arm_mapping(struct device *dev)
 	return ret;
 }
 
+static struct device *ipmmu_get_pci_host_device(struct device *dev)
+{
+	struct pci_dev *pdev = to_pci_dev(dev);
+	struct pci_bus *bus = pdev->bus;
+
+	/* Walk up to the root bus to look for PCI Host controller */
+	while (!pci_is_root_bus(bus))
+		bus = bus->parent;
+
+	return bus->bridge->parent;
+}
+
 static int ipmmu_add_device(struct device *dev)
 {
+	struct device *root_dev;
 	struct iommu_group *group;
 	struct ipmmu_vmsa_backup *dev_backup;
 	struct iommu_fwspec *fwspec;
@@ -1257,6 +1271,17 @@ static int ipmmu_add_device(struct device *dev)
 	if (IS_ENABLED(CONFIG_ARM) && !IS_ENABLED(CONFIG_IOMMU_DMA))
 		return ipmmu_init_arm_mapping(dev);
 
+	/*
+	 * The IOMMU can't distinguish between different PCI Functions.
+	 * Use PCI Host controller as a proxy for all connected PCI devices
+	 */
+	if (dev_is_pci(dev)) {
+		root_dev = ipmmu_get_pci_host_device(dev);
+
+		if (root_dev->iommu_group)
+			dev->iommu_group = root_dev->iommu_group;
+	}
+
 	group = iommu_group_get_for_dev(dev);
 	if (IS_ERR(group))
 		return PTR_ERR(group);
-- 
2.17.1

