From 5343b37042537b6c72655df7a123064dd154f04e Mon Sep 17 00:00:00 2001
From: Masaharu Hayakawa <masaharu.hayakawa.ry@renesas.com>
Date: Wed, 9 May 2018 11:13:06 +0900
Subject: [PATCH 222/909] mmc: tmio: Add set bit mask definition

commit f2be7fb7bf376567923dfa9ebf70041a757a508c from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

Bit 11 of the CTL_STATUS2 and IRQ_MASK2 registers is a specification
that should always be written 1.
Add a definition of TMIO_STAT_SETBIT_MASK and fix it
so that it always writes 1.

Signed-off-by: Masaharu Hayakawa <masaharu.hayakawa.ry@renesas.com>
Signed-off-by: Takeshi Saito <takeshi.saito.xv@renesas.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/mmc/host/tmio_mmc.h      | 1 +
 drivers/mmc/host/tmio_mmc_core.c | 8 ++++++--
 2 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/drivers/mmc/host/tmio_mmc.h b/drivers/mmc/host/tmio_mmc.h
index 412b1fe3ee87..9a119e09b6dc 100644
--- a/drivers/mmc/host/tmio_mmc.h
+++ b/drivers/mmc/host/tmio_mmc.h
@@ -77,6 +77,7 @@
 #define TMIO_STAT_DAT0		BIT(23)	/* only known on R-Car so far */
 #define TMIO_STAT_RXRDY         BIT(24)
 #define TMIO_STAT_TXRQ          BIT(25)
+#define TMIO_STAT_SETBIT_MASK   BIT(27) /* This bit should always set 1 */
 #define TMIO_STAT_ILL_FUNC      BIT(29) /* only when !TMIO_MMC_HAS_IDLE_WAIT */
 #define TMIO_STAT_SCLKDIVEN     BIT(29) /* only when TMIO_MMC_HAS_IDLE_WAIT */
 #define TMIO_STAT_CMD_BUSY      BIT(30)
diff --git a/drivers/mmc/host/tmio_mmc_core.c b/drivers/mmc/host/tmio_mmc_core.c
index 39982acad1f3..aebb96944a62 100644
--- a/drivers/mmc/host/tmio_mmc_core.c
+++ b/drivers/mmc/host/tmio_mmc_core.c
@@ -101,6 +101,7 @@ static inline void tmio_mmc_dataend_dma(struct tmio_mmc_host *host)
 void tmio_mmc_enable_mmc_irqs(struct tmio_mmc_host *host, u32 i)
 {
 	host->sdcard_irq_mask &= ~(i & TMIO_MASK_IRQ);
+	host->sdcard_irq_mask |= TMIO_STAT_SETBIT_MASK;
 	sd_ctrl_write32_as_16_and_16(host, CTL_IRQ_MASK, host->sdcard_irq_mask);
 }
 EXPORT_SYMBOL_GPL(tmio_mmc_enable_mmc_irqs);
@@ -108,6 +109,7 @@ EXPORT_SYMBOL_GPL(tmio_mmc_enable_mmc_irqs);
 void tmio_mmc_disable_mmc_irqs(struct tmio_mmc_host *host, u32 i)
 {
 	host->sdcard_irq_mask |= (i & TMIO_MASK_IRQ);
+	host->sdcard_irq_mask |= TMIO_STAT_SETBIT_MASK;
 	sd_ctrl_write32_as_16_and_16(host, CTL_IRQ_MASK, host->sdcard_irq_mask);
 }
 EXPORT_SYMBOL_GPL(tmio_mmc_disable_mmc_irqs);
@@ -814,7 +816,8 @@ irqreturn_t tmio_mmc_irq(int irq, void *devid)
 	ireg = status & TMIO_MASK_IRQ & ~host->sdcard_irq_mask;
 
 	/* Clear the status except the interrupt status */
-	sd_ctrl_write32_as_16_and_16(host, CTL_STATUS, TMIO_MASK_IRQ);
+	sd_ctrl_write32_as_16_and_16(host, CTL_STATUS, TMIO_MASK_IRQ |
+				     TMIO_STAT_SETBIT_MASK);
 
 	if (__tmio_mmc_card_detect_irq(host, ireg, status))
 		return IRQ_HANDLED;
@@ -1040,7 +1043,8 @@ static void tmio_mmc_finish_request(struct tmio_mmc_host *host)
 
 	if (mrq->cmd->error || (mrq->data && mrq->data->error)) {
 		/* clear the interrupt flag register */
-		sd_ctrl_write32_as_16_and_16(host, CTL_STATUS, 0);
+		sd_ctrl_write32_as_16_and_16(host, CTL_STATUS,
+					     TMIO_STAT_SETBIT_MASK);
 		tmio_mmc_abort_dma(host);
 	}
 
-- 
2.17.1

