From 0822af1fca6107e7347401a526c68b35abb53d46 Mon Sep 17 00:00:00 2001
From: Takeshi Saito <takeshi.saito.xv@renesas.com>
Date: Fri, 30 Nov 2018 14:38:30 +0900
Subject: [PATCH 227/909] mmc: renesas_sdhi_core: fix card initialization
 failure in high speed mode

commit 5cf2049947bb17a52ae41162e7aa16dd315d8081 from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

This fixes card initialization failure in high speed mode.

If u-boot uses SDR or HS200/400 mode before starting linux,
card initialization fails in high speed mode.
(disabled SDR and HS200/HS400 in device tree).

It is necessary to initialize SCC registers when card initialization phase.
hw reset function is registered only for port with SDR/HS200/HS400
properties in device tree. If SDR/HS200/HS400 properties are disabled,
SCC registers will not be reset.
In SoC that support SCC registers, hw reset function should be registered
regardless of the configuration of device tree.

[Reproduction procedure]
Use u-boot that support MMC HS200/400 mode.
Delete HS200/HS400 properties in device tree.
(Delete mmc-hs200-1_8v and mmc-hs400-1_8v)
MMC port works high speed mode and all commands fail.

Signed-off-by: Takeshi Saito <takeshi.saito.xv@renesas.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/mmc/host/renesas_sdhi_core.c | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/drivers/mmc/host/renesas_sdhi_core.c b/drivers/mmc/host/renesas_sdhi_core.c
index a3f0e670db76..393e36142939 100644
--- a/drivers/mmc/host/renesas_sdhi_core.c
+++ b/drivers/mmc/host/renesas_sdhi_core.c
@@ -870,6 +870,10 @@ int renesas_sdhi_probe(struct platform_device *pdev,
 		host->ops.card_busy = renesas_sdhi_card_busy;
 		host->ops.start_signal_voltage_switch =
 			renesas_sdhi_start_signal_voltage_switch;
+
+		/* SDR and HS200/400 registers requires HW reset */
+		host->mmc->caps |= MMC_CAP_HW_RESET;
+		host->hw_reset = renesas_sdhi_hw_reset;
 	}
 
 	/* Adjust HS400 mode */
@@ -974,8 +978,6 @@ int renesas_sdhi_probe(struct platform_device *pdev,
 		const struct renesas_sdhi_scc *taps = of_data->taps;
 		bool hit = false;
 
-		host->mmc->caps |= MMC_CAP_HW_RESET;
-
 		for (i = 0; i < of_data->taps_num; i++) {
 			if (taps[i].clk_rate == 0 ||
 			    taps[i].clk_rate == host->mmc->f_max) {
@@ -994,7 +996,6 @@ int renesas_sdhi_probe(struct platform_device *pdev,
 		host->compare_scc_data = renesas_sdhi_compare_scc_data;
 		host->select_tuning = renesas_sdhi_select_tuning;
 		host->check_scc_error = renesas_sdhi_check_scc_error;
-		host->hw_reset = renesas_sdhi_hw_reset;
 		host->disable_scc = renesas_sdhi_disable_scc;
 		host->prepare_hs400_tuning = renesas_sdhi_prepare_hs400_tuning;
 		host->reset_hs400_mode = renesas_sdhi_reset_hs400_mode;
-- 
2.17.1

