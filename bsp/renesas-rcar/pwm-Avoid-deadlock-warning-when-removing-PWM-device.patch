From b9f2e9662702e7696abc3f4044e5c8efc18fd3cb Mon Sep 17 00:00:00 2001
From: Phong Hoang <phong.hoang.wz@renesas.com>
Date: Sat, 10 Nov 2018 12:28:54 +0700
Subject: [PATCH 183/909] pwm: Avoid deadlock warning when removing PWM device

commit 70b4a22f220fef943c45a1122fa02d6faa42d2fe from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

This patch fixes deadlock warning if removing PWM device
when CONFIG_PROVE_LOCKING is enabled.

This issue can be reproceduced by these steps:
1. Enable CONFIG_PROVE_LOCKING
2. After kernel starting up, export a PWM chip
3. Unbind above PWM device

The dealock warning will occur

======================================================
WARNING: possible circular locking dependency detected
4.14.75-ltsi #10 Not tainted
Signed-off-by: Meng Li <Meng.Li@windriver.com>
------------------------------------------------------
sh/3355 is trying to acquire lock:
 (kn->count#106){++++}, at: [<ffff0000082de000>] kernfs_remove_by_name_ns+0x50/0xa8

but task is already holding lock:
 (pwm_lock){+.+.}, at: [<ffff0000084ab678>] pwmchip_remove+0x28/0x138

which lock already depends on the new lock.

the existing dependency chain (in reverse order) is:

-> #1 (pwm_lock){+.+.}:
       __mutex_lock+0x78/0x8c0
       mutex_lock_nested+0x1c/0x28
       pwm_request_from_chip.part.1+0x30/0x70
       pwm_request_from_chip+0x2c/0x48
       export_store+0x54/0x1a0
       dev_attr_store+0x18/0x28
       sysfs_kf_write+0x4c/0x78
       kernfs_fop_write+0x138/0x210
       __vfs_write+0x18/0x118
       vfs_write+0xa4/0x1b0
       SyS_write+0x48/0xb0
       __sys_trace_return+0x0/0x4

-> #0 (kn->count#106){++++}:
       lock_acquire+0x6c/0xb0
       __kernfs_remove+0x2a0/0x310
       kernfs_remove_by_name_ns+0x50/0xa8
       remove_files.isra.0+0x38/0x78
       sysfs_remove_group+0x4c/0xa0
       sysfs_remove_groups+0x38/0x60
       device_remove_attrs+0x64/0x78
       device_del+0x1ac/0x308
       device_unregister+0x14/0x30
       pwmchip_sysfs_unexport+0x40/0x50
       pwmchip_remove+0xf0/0x138
       rcar_pwm_remove+0x24/0x30
       platform_drv_remove+0x24/0x50
       device_release_driver_internal+0x184/0x218
       device_release_driver+0x14/0x20
       unbind_store+0x7c/0x120
       drv_attr_store+0x20/0x30
       sysfs_kf_write+0x4c/0x78
       kernfs_fop_write+0x138/0x210
       __vfs_write+0x18/0x118
       vfs_write+0xa4/0x1b0
       SyS_write+0x48/0xb0
       __sys_trace_return+0x0/0x4

other info that might help us debug this:

 Possible unsafe locking scenario:

       CPU0                    CPU1
       ----                    ----
  lock(pwm_lock);
                               lock(kn->count#106);
                               lock(pwm_lock);
  lock(kn->count#106);

 *** DEADLOCK ***

6 locks held by sh/3355:
 #0:  (sb_writers#4){.+.+}, at:  vfs_write+0x198/0x1b0
 #1:  (&of->mutex){+.+.}, at:  kernfs_fop_write+0x108/0x210
 #2:  (kn->count#107){.+.+}, at:  kernfs_fop_write+0x110/0x210
 #3:  (&dev->mutex){....}, at:  unbind_store+0x74/0x120
 #4:  (&dev->mutex){....}, at:  device_release_driver_internal+0x3c/0x218
 #5:  (pwm_lock){+.+.}, at:  pwmchip_remove+0x28/0x138

stack backtrace:
CPU: 1 PID: 3355 Comm: sh Not tainted 4.14.75-ltsi #10
Hardware name: Renesas Salvator-X 2nd version board
               based on r8a7795 ES2.0+ (DT)
Call trace:
[<ffff00000808a868>] dump_backtrace+0x0/0x3d8
[<ffff00000808ac54>] show_stack+0x14/0x20
[<ffff000008b8ec30>] dump_stack+0xbc/0xf4
[<ffff0000081276ec>] print_circular_bug.isra.17+0x1d4/0x2e0
[<ffff00000812a770>] __lock_acquire+0x1890/0x1b68
[<ffff00000812b15c>] lock_acquire+0x6c/0xb0
[<ffff0000082dcf38>] __kernfs_remove+0x2a0/0x310
[<ffff0000082de000>] kernfs_remove_by_name_ns+0x50/0xa8
[<ffff0000082e0f68>] remove_files.isra.0+0x38/0x78
[<ffff0000082e1314>] sysfs_remove_group+0x4c/0xa0
[<ffff0000082e13a0>] sysfs_remove_groups+0x38/0x60
[<ffff0000086abb2c>] device_remove_attrs+0x64/0x78
[<ffff0000086ad21c>] device_del+0x1ac/0x308
[<ffff0000086ad38c>] device_unregister+0x14/0x30
[<ffff0000084acf98>] pwmchip_sysfs_unexport+0x40/0x50
[<ffff0000084ab740>] pwmchip_remove+0xf0/0x138
[<ffff0000084ad63c>] rcar_pwm_remove+0x24/0x30
[<ffff0000086b3224>] platform_drv_remove+0x24/0x50
[<ffff0000086b1944>] device_release_driver_internal+0x184/0x218
[<ffff0000086b19ec>] device_release_driver+0x14/0x20
[<ffff0000086afdac>] unbind_store+0x7c/0x120
<ffff0000086af250>] drv_attr_store+0x20/0x30
<ffff0000082dfcf4>] sysfs_kf_write+0x4c/0x78
<ffff0000082ded10>] kernfs_fop_write+0x138/0x210
<ffff000008252128>] __vfs_write+0x18/0x118
<ffff00000825241c>] vfs_write+0xa4/0x1b0
<ffff0000082526e0>] SyS_write+0x48/0xb0

This warning occurs because pwmchip_remove still keeps pwm_lock
when removing sysfs. That's why it leads to that conflict.
Hence, this patch unlocks pwm_lock before removing sysfs.

Signed-off-by: Phong Hoang <phong.hoang.wz@renesas.com>
---
 drivers/pwm/core.c | 11 +++++------
 1 file changed, 5 insertions(+), 6 deletions(-)

diff --git a/drivers/pwm/core.c b/drivers/pwm/core.c
index 1581f6ab1b1f..d93a87af2573 100644
--- a/drivers/pwm/core.c
+++ b/drivers/pwm/core.c
@@ -346,7 +346,6 @@ EXPORT_SYMBOL_GPL(pwmchip_add);
 int pwmchip_remove(struct pwm_chip *chip)
 {
 	unsigned int i;
-	int ret = 0;
 
 	pwmchip_sysfs_unexport_children(chip);
 
@@ -356,8 +355,8 @@ int pwmchip_remove(struct pwm_chip *chip)
 		struct pwm_device *pwm = &chip->pwms[i];
 
 		if (test_bit(PWMF_REQUESTED, &pwm->flags)) {
-			ret = -EBUSY;
-			goto out;
+			mutex_unlock(&pwm_lock);
+			return -EBUSY;
 		}
 	}
 
@@ -368,11 +367,11 @@ int pwmchip_remove(struct pwm_chip *chip)
 
 	free_pwms(chip);
 
+	mutex_unlock(&pwm_lock);
+
 	pwmchip_sysfs_unexport(chip);
 
-out:
-	mutex_unlock(&pwm_lock);
-	return ret;
+	return 0;
 }
 EXPORT_SYMBOL_GPL(pwmchip_remove);
 
-- 
2.17.1

