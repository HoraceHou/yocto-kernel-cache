From 179afbc88661f7328ea5c711d24a2ff35747e0fa Mon Sep 17 00:00:00 2001
From: Ryo Kodama <ryo.kodama.vz@renesas.com>
Date: Fri, 18 Dec 2015 16:47:13 +0900
Subject: [PATCH 181/909] pwm: rcar: Add a judgment of the period out of range

commit fb813e240cecd77ee4133de5990343c29a0c58f7 from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

Current code does not cover the case that user inputs invalid
value of period.
This patch adds a judgment to output an error when an input period
value is out of the range. As description in hardware manual the
minimum value of period is not smaller than 2 clock cycles.

Signed-off-by: Ryo Kodama <ryo.kodama.vz@renesas.com>
Signed-off-by: Van Do <van.do.xw@renesas.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/pwm/pwm-rcar.c | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/drivers/pwm/pwm-rcar.c b/drivers/pwm/pwm-rcar.c
index 748f614d5375..843421c92efe 100644
--- a/drivers/pwm/pwm-rcar.c
+++ b/drivers/pwm/pwm-rcar.c
@@ -19,6 +19,7 @@
 #include <linux/slab.h>
 
 #define RCAR_PWM_MAX_DIVISION	24
+#define RCAR_PWM_MIN_CYCLE	2
 #define RCAR_PWM_MAX_CYCLE	1023
 
 #define RCAR_PWMCR		0x00
@@ -71,12 +72,17 @@ static void rcar_pwm_update(struct rcar_pwm_chip *rp, u32 mask, u32 data,
 static int rcar_pwm_get_clock_division(struct rcar_pwm_chip *rp, int period_ns)
 {
 	unsigned long clk_rate = clk_get_rate(rp->clk);
-	unsigned long long max; /* max cycle / nanoseconds */
+	unsigned long long min, max; /* min, max cycle / nanoseconds */
 	unsigned int div;
 
 	if (clk_rate == 0)
 		return -EINVAL;
 
+	min = (unsigned long long)NSEC_PER_SEC * RCAR_PWM_MIN_CYCLE;
+	do_div(min, clk_rate);
+	if (period_ns < min)
+		return -ERANGE;
+
 	for (div = 0; div <= RCAR_PWM_MAX_DIVISION; div++) {
 		max = (unsigned long long)NSEC_PER_SEC * RCAR_PWM_MAX_CYCLE *
 			(1 << div);
-- 
2.17.1

