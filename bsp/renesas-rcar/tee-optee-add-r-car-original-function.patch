From fc6007fa1372affa46867361c36a2cb7b07533d6 Mon Sep 17 00:00:00 2001
From: Tsukasa Kawaguchi <tsukasa.kawaguchi.aw@hitachi.com>
Date: Fri, 17 Nov 2017 16:10:40 +0900
Subject: [PATCH 147/909] tee: optee: add r-car original function

commit 62f50d22df2e03990e380e582e718822934c96a5 from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

Add debug log output function and Suspend To RAM suppression function
as r-car original processing.
At the time of optee initialization processing,
register the Suspendcallback function
and address convert the base address of the optee log area.
At the optee end processing, delete the Suspend callback function.
Suspend is suppressed when smc request is being sent to optee upon
Suspend transition.
When receiving the rpc command to output the debug log,
dynamically allocate memory, schedule delay processing,
and output the log with pr_alert.

Fixed checkpatch issues.

Signed-off-by: Tsukasa Kawaguchi <tsukasa.kawaguchi.aw@hitachi.com>
Signed-off-by: Hiroki Negishi <hiroki.negishi.bx@renesas.com>
Signed-off-by: Takeshi Kihara <takeshi.kihara.df@renesas.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/tee/optee/Makefile       |   1 +
 drivers/tee/optee/core.c         |  11 +-
 drivers/tee/optee/optee_rcar.h   |  25 +++++
 drivers/tee/optee/rcar.c         | 183 +++++++++++++++++++++++++++++++
 drivers/tee/optee/rcar_version.h |  11 ++
 drivers/tee/optee/rpc.c          |   6 +
 6 files changed, 236 insertions(+), 1 deletion(-)
 create mode 100644 drivers/tee/optee/optee_rcar.h
 create mode 100644 drivers/tee/optee/rcar.c
 create mode 100644 drivers/tee/optee/rcar_version.h

diff --git a/drivers/tee/optee/Makefile b/drivers/tee/optee/Makefile
index 48d262ae2f04..d13971e7c60e 100644
--- a/drivers/tee/optee/Makefile
+++ b/drivers/tee/optee/Makefile
@@ -5,3 +5,4 @@ optee-objs += call.o
 optee-objs += rpc.o
 optee-objs += supp.o
 optee-objs += shm_pool.o
+optee-objs += rcar.o
diff --git a/drivers/tee/optee/core.c b/drivers/tee/optee/core.c
index e5fd5ed217da..7378e4a5cefe 100644
--- a/drivers/tee/optee/core.c
+++ b/drivers/tee/optee/core.c
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2015, Linaro Limited
+ * Copyright (c) 2017, Renesas Electronics Corporation
  *
  * This software is licensed under the terms of the GNU General Public
  * License version 2, as published by the Free Software Foundation, and
@@ -30,6 +31,8 @@
 #include "optee_smc.h"
 #include "shm_pool.h"
 
+#include "optee_rcar.h"
+
 #define DRIVER_NAME "optee"
 
 #define OPTEE_SHM_NUM_PRIV_PAGES	1
@@ -631,6 +634,10 @@ static struct optee *optee_probe(struct device_node *np)
 
 	optee_enable_shm_cache(optee);
 
+	rc = optee_rcar_probe(optee);
+	if (rc)
+		goto err;
+
 	pr_info("initialized driver\n");
 	return optee;
 err:
@@ -653,6 +660,8 @@ static struct optee *optee_probe(struct device_node *np)
 
 static void optee_remove(struct optee *optee)
 {
+	optee_rcar_remove();
+
 	/*
 	 * Ask OP-TEE to free all cached shared memory objects to decrease
 	 * reference counters and also avoid wild pointers in secure world
@@ -724,5 +733,5 @@ module_exit(optee_driver_exit);
 MODULE_AUTHOR("Linaro");
 MODULE_DESCRIPTION("OP-TEE driver");
 MODULE_SUPPORTED_DEVICE("");
-MODULE_VERSION("1.0");
+MODULE_VERSION(VERSION_OF_RENESAS);
 MODULE_LICENSE("GPL v2");
diff --git a/drivers/tee/optee/optee_rcar.h b/drivers/tee/optee/optee_rcar.h
new file mode 100644
index 000000000000..beb2be9f0355
--- /dev/null
+++ b/drivers/tee/optee/optee_rcar.h
@@ -0,0 +1,25 @@
+/*
+ * Copyright (c) 2015-2017, Renesas Electronics Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License Version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef OPTEE_RCAR_H
+#define OPTEE_RCAR_H
+
+#include "rcar_version.h"
+
+#define OPTEE_MSG_RPC_CMD_DEBUG_LOG	(0x3F000000U)
+
+void handle_rpc_func_cmd_debug_log(struct optee_msg_arg *arg);
+int optee_rcar_probe(struct optee *optee);
+void optee_rcar_remove(void);
+
+#endif /* OPTEE_RCAR_H */
diff --git a/drivers/tee/optee/rcar.c b/drivers/tee/optee/rcar.c
new file mode 100644
index 000000000000..52bbab072716
--- /dev/null
+++ b/drivers/tee/optee/rcar.c
@@ -0,0 +1,183 @@
+/*
+ * Copyright (c) 2015-2017, Renesas Electronics Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License Version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/arm-smccc.h>
+#include <linux/errno.h>
+#include <linux/io.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/string.h>
+#include <linux/tee_drv.h>
+#include <linux/types.h>
+#include <linux/uaccess.h>
+#include "optee_private.h"
+#include "optee_smc.h"
+
+#include <linux/suspend.h>
+#include "optee_rcar.h"
+
+static char *remaped_log_buffer;
+struct optee *rcar_optee;
+
+#define TEE_LOG_NS_BASE		(0x0407FEC000U)
+#define TEE_LOG_NS_SIZE		(81920U)
+#define LOG_NS_CPU_AREA_SIZE	(1024U)
+#define TEE_CORE_NB_CORE	(8U)
+
+static void debug_log_work_handler(struct work_struct *work);
+static int tz_rcar_suspend(void);
+static int tz_rcar_power_event(struct notifier_block *this,
+			       unsigned long event, void *ptr);
+static int rcar_optee_add_suspend_callback(void);
+static void rcar_optee_del_suspend_callback(void);
+static int rcar_optee_init_debug_log(void);
+
+static void debug_log_work_handler(struct work_struct *work)
+{
+	pr_alert("%s", (int8_t *)(&work[1]));
+	kfree(work);
+}
+
+void handle_rpc_func_cmd_debug_log(struct optee_msg_arg *arg)
+{
+	struct optee_msg_param *params;
+	u32 cpu_id;
+	char *p;
+	struct work_struct *work = NULL;
+	size_t logmsg_size;
+
+	if (arg->num_params == 1) {
+		params = arg->params;
+		cpu_id = params[0].u.value.a;
+
+		if (cpu_id < TEE_CORE_NB_CORE) {
+			p = &remaped_log_buffer[cpu_id * LOG_NS_CPU_AREA_SIZE];
+			logmsg_size = strlen(p) + 1;
+			work = kmalloc(sizeof(*work) + logmsg_size, GFP_KERNEL);
+			if (work) {
+				strcpy((int8_t *)(&work[1]), p);
+				INIT_WORK(work, debug_log_work_handler);
+				schedule_work(work);
+			} else {
+				pr_alert("%s", p);
+			}
+			arg->ret = TEEC_SUCCESS;
+		} else {
+			arg->ret = TEEC_ERROR_BAD_PARAMETERS;
+		}
+	} else {
+		arg->ret = TEEC_ERROR_BAD_PARAMETERS;
+	}
+}
+
+/*
+ * It makes no sense to go into suspend while the OP-TEE is running.
+ */
+static int tz_rcar_suspend(void)
+{
+	int empty;
+	int ret;
+	struct optee *optee;
+
+	optee = rcar_optee;
+
+	mutex_lock(&optee->call_queue.mutex);
+	empty = list_empty(&optee->call_queue.waiters);
+	mutex_unlock(&optee->call_queue.mutex);
+
+	if (empty) {
+		ret = NOTIFY_DONE;
+	} else {
+		pr_err("Linux cannot be suspended while the OP-TEE is in use\n");
+		ret = notifier_from_errno(-EBUSY);
+	}
+
+	return ret;
+}
+
+static int tz_rcar_power_event(struct notifier_block *this,
+			       unsigned long event, void *ptr)
+{
+	int ret;
+
+	switch (event) {
+	case PM_SUSPEND_PREPARE:
+		ret = tz_rcar_suspend();
+		break;
+	default:
+		ret = NOTIFY_DONE;
+		break;
+	}
+
+	return ret;
+}
+
+static struct notifier_block tz_rcar_power_notifier = {
+	.notifier_call = tz_rcar_power_event,
+};
+
+static int rcar_optee_add_suspend_callback(void)
+{
+	int ret;
+
+	ret = register_pm_notifier(&tz_rcar_power_notifier);
+	if (ret != 0)
+		pr_err("failed to register the pm_notifier (ret=%d)\n", ret);
+
+	return ret;
+}
+
+static void rcar_optee_del_suspend_callback(void)
+{
+	unregister_pm_notifier(&tz_rcar_power_notifier);
+	pr_info("%s: unregister tz_rcar_power_event function\n", __func__);
+}
+
+static int rcar_optee_init_debug_log(void)
+{
+	int ret = 0;
+
+	remaped_log_buffer = ioremap_nocache(TEE_LOG_NS_BASE, TEE_LOG_NS_SIZE);
+	if (!remaped_log_buffer) {
+		pr_err("failed to ioremap_nocache(TEE_LOG_NS_BASE)\n");
+		ret = -ENOMEM;
+	}
+
+	return ret;
+}
+
+int optee_rcar_probe(struct optee *optee)
+{
+	int ret;
+
+	rcar_optee = optee;
+
+	pr_info("R-Car Rev.%s\n", VERSION_OF_RENESAS);
+
+	ret = rcar_optee_add_suspend_callback();
+	if (ret == 0) {
+		ret = rcar_optee_init_debug_log();
+		if (ret != 0)
+			rcar_optee_del_suspend_callback();
+	}
+
+	return ret;
+}
+
+void optee_rcar_remove(void)
+{
+	rcar_optee_del_suspend_callback();
+}
diff --git a/drivers/tee/optee/rcar_version.h b/drivers/tee/optee/rcar_version.h
new file mode 100644
index 000000000000..fe879d572581
--- /dev/null
+++ b/drivers/tee/optee/rcar_version.h
@@ -0,0 +1,11 @@
+/*
+ * Copyright (c) 2015-2017, Renesas Electronics Corporation
+ * All rights reserved.
+ */
+
+#ifndef RCAR_VERSION_H
+#define RCAR_VERSION_H
+
+#define VERSION_OF_RENESAS	"1.0.8"
+
+#endif /* RCAR_VERSION_H */
diff --git a/drivers/tee/optee/rpc.c b/drivers/tee/optee/rpc.c
index 41aea12e2bcc..ee33bba4f400 100644
--- a/drivers/tee/optee/rpc.c
+++ b/drivers/tee/optee/rpc.c
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2015-2016, Linaro Limited
+ * Copyright (c) 2017, Renesas Electronics Corporation
  *
  * This software is licensed under the terms of the GNU General Public
  * License version 2, as published by the Free Software Foundation, and
@@ -21,6 +22,8 @@
 #include "optee_private.h"
 #include "optee_smc.h"
 
+#include "optee_rcar.h"
+
 struct wq_entry {
 	struct list_head link;
 	struct completion c;
@@ -391,6 +394,9 @@ static void handle_rpc_func_cmd(struct tee_context *ctx, struct optee *optee,
 	case OPTEE_MSG_RPC_CMD_SHM_FREE:
 		handle_rpc_func_cmd_shm_free(ctx, arg);
 		break;
+	case OPTEE_MSG_RPC_CMD_DEBUG_LOG:
+		handle_rpc_func_cmd_debug_log(arg);
+		break;
 	default:
 		handle_rpc_supp_cmd(ctx, arg);
 	}
-- 
2.17.1

