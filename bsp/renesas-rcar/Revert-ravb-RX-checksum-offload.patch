From 8097cb458faa2c30cd6dd02b22bbaedc1ac833c6 Mon Sep 17 00:00:00 2001
From: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
Date: Wed, 14 Nov 2018 17:36:22 +0900
Subject: [PATCH 195/909] Revert "ravb: RX checksum offload"

commit ceec320e6ff56fed6347954ea76622b4b5d6819b from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

This reverts commit 4d86d38186271438ef002c5ae6e04836f01bf8bf.
When Rx checksum is enabled, frame data with Q-Tag VLAN added can not
communicate correctly.

Signed-off-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/renesas/ravb_main.c | 57 +-----------------------
 1 file changed, 1 insertion(+), 56 deletions(-)

diff --git a/drivers/net/ethernet/renesas/ravb_main.c b/drivers/net/ethernet/renesas/ravb_main.c
index 5601329bc0d0..2ac08b2f8aa6 100644
--- a/drivers/net/ethernet/renesas/ravb_main.c
+++ b/drivers/net/ethernet/renesas/ravb_main.c
@@ -412,9 +412,8 @@ static void ravb_emac_init(struct net_device *ndev)
 	/* Receive frame limit set register */
 	ravb_write(ndev, ndev->mtu + ETH_HLEN + VLAN_HLEN + ETH_FCS_LEN, RFLR);
 
-	/* EMAC Mode: PAUSE prohibition; Duplex; RX Checksum; TX; RX */
+	/* PAUSE prohibition */
 	ravb_write(ndev, ECMR_ZPF | (priv->duplex ? ECMR_DM : 0) |
-		   (ndev->features & NETIF_F_RXCSUM ? ECMR_RCSC : 0) |
 		   ECMR_TE | ECMR_RE, ECMR);
 
 	ravb_set_rate(ndev);
@@ -524,21 +523,6 @@ static void ravb_get_tx_tstamp(struct net_device *ndev)
 	}
 }
 
-static void ravb_rx_csum(struct sk_buff *skb)
-{
-	u8 *hw_csum;
-
-	/* The hardware checksum is contained in sizeof(__sum16) (2) bytes
-	 * appended to packet data
-	 */
-	if (unlikely(skb->len < sizeof(__sum16)))
-		return;
-	hw_csum = skb_tail_pointer(skb) - sizeof(__sum16);
-	skb->csum = csum_unfold((__force __sum16)get_unaligned_le16(hw_csum));
-	skb->ip_summed = CHECKSUM_COMPLETE;
-	skb_trim(skb, skb->len - sizeof(__sum16));
-}
-
 /* Packet receive function for Ethernet AVB */
 static bool ravb_rx(struct net_device *ndev, int *quota, int q)
 {
@@ -606,11 +590,8 @@ static bool ravb_rx(struct net_device *ndev, int *quota, int q)
 				ts.tv_nsec = le32_to_cpu(desc->ts_n);
 				shhwtstamps->hwtstamp = timespec64_to_ktime(ts);
 			}
-
 			skb_put(skb, pkt_len);
 			skb->protocol = eth_type_trans(skb, ndev);
-			if (ndev->features & NETIF_F_RXCSUM)
-				ravb_rx_csum(skb);
 			napi_gro_receive(&priv->napi[q], skb);
 			stats->rx_packets++;
 			stats->rx_bytes += pkt_len;
@@ -1801,38 +1782,6 @@ static int ravb_change_mtu(struct net_device *ndev, int new_mtu)
 	return 0;
 }
 
-static void ravb_set_rx_csum(struct net_device *ndev, bool enable)
-{
-	struct ravb_private *priv = netdev_priv(ndev);
-	unsigned long flags;
-
-	spin_lock_irqsave(&priv->lock, flags);
-
-	/* Disable TX and RX */
-	ravb_rcv_snd_disable(ndev);
-
-	/* Modify RX Checksum setting */
-	ravb_modify(ndev, ECMR, ECMR_RCSC, enable ? ECMR_RCSC : 0);
-
-	/* Enable TX and RX */
-	ravb_rcv_snd_enable(ndev);
-
-	spin_unlock_irqrestore(&priv->lock, flags);
-}
-
-static int ravb_set_features(struct net_device *ndev,
-			     netdev_features_t features)
-{
-	netdev_features_t changed = ndev->features ^ features;
-
-	if (changed & NETIF_F_RXCSUM)
-		ravb_set_rx_csum(ndev, features & NETIF_F_RXCSUM);
-
-	ndev->features = features;
-
-	return 0;
-}
-
 static const struct net_device_ops ravb_netdev_ops = {
 	.ndo_open		= ravb_open,
 	.ndo_stop		= ravb_close,
@@ -1845,7 +1794,6 @@ static const struct net_device_ops ravb_netdev_ops = {
 	.ndo_change_mtu		= ravb_change_mtu,
 	.ndo_validate_addr	= eth_validate_addr,
 	.ndo_set_mac_address	= eth_mac_addr,
-	.ndo_set_features	= ravb_set_features,
 };
 
 /* MDIO bus init function */
@@ -1987,9 +1935,6 @@ static int ravb_probe(struct platform_device *pdev)
 	if (!ndev)
 		return -ENOMEM;
 
-	ndev->features = NETIF_F_RXCSUM;
-	ndev->hw_features = NETIF_F_RXCSUM;
-
 	pm_runtime_enable(&pdev->dev);
 	pm_runtime_get_sync(&pdev->dev);
 
-- 
2.17.1

