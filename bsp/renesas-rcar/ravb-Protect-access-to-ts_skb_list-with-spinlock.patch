From 70da43ac677b3a36d8b3aeb251382b9780351138 Mon Sep 17 00:00:00 2001
From: Tho Vu <tho.vu.wh@rvc.renesas.com>
Date: Wed, 23 Jan 2019 17:03:25 +0100
Subject: [PATCH 734/909] ravb: Protect access to ts_skb_list with spinlock.

commit 2e4d341d1cc11c055a336feebed9d1ddaa9097b6 from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

This patch fixes issue PTP Bridge application does not receive tx
timestamp information anymore and stops working when transferring
with large data

How to reproduce:
1) Write an application wich uses these socket options:
SOF_TIMESTAMPING_TX_HARDWARE | SOF_TIMESTAMPING_RAW_HARDWARE
2) Set affinity of application and (all) interrupts to a different
core
3) Transmit a large number of ethernet frames from that socket

The iterator over ts_skb_list was unprotected with regard to list
insertion from the xmit function

Signed-off-by: Tho Vu <tho.vu.wh@rvc.renesas.com>
Signed-off-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/renesas/ravb_main.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/renesas/ravb_main.c b/drivers/net/ethernet/renesas/ravb_main.c
index f1324593ac16..ebe800777c7a 100644
--- a/drivers/net/ethernet/renesas/ravb_main.c
+++ b/drivers/net/ethernet/renesas/ravb_main.c
@@ -902,11 +902,11 @@ static int ravb_poll(struct napi_struct *napi, int budget)
 		}
 		/* Processing TX Descriptor Ring */
 		if (tis & mask) {
+			spin_lock_irqsave(&priv->lock, flags);
 			/* Timestamp updated */
 			if (q == RAVB_NC)
 				ravb_get_tx_tstamp(ndev);
 
-			spin_lock_irqsave(&priv->lock, flags);
 			/* Clear TX interrupt */
 			ravb_write(ndev, ~(mask | TIS_RESERVED), TIS);
 			ravb_tx_free(ndev, q, true);
-- 
2.17.1

