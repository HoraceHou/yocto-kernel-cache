From c78e4b6c43126822319f3d86bb206ac8fdc573c3 Mon Sep 17 00:00:00 2001
From: Hien Dang <hien.dang.eb@renesas.com>
Date: Thu, 7 Dec 2017 18:35:06 +0700
Subject: [PATCH 160/909] soc: renesas: rcar_ems_ctrl: Enable loadable

commit 08841d5d6ab0ea0f601d947a0fbe28df0cfd6a00 from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

Currently, EMS module is implemented as built-in module.
At first thinking, EMS is always necessary to keep
the system running safely (avoid so high temperature.)

But in some cases, customer has high demand to reduce
the kernel binary image size and they request to
build EMS as loadable module.

This patch is implemented for above request.

Signed-off-by: Hien Dang <hien.dang.eb@renesas.com>
Signed-off-by: Dien Pham <dien.pham.ry@renesas.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/soc/renesas/Kconfig         |  3 +-
 drivers/soc/renesas/Makefile        |  4 +--
 drivers/soc/renesas/rcar_ems_ctrl.c | 54 ++++++++++++++++++-----------
 3 files changed, 37 insertions(+), 24 deletions(-)

diff --git a/drivers/soc/renesas/Kconfig b/drivers/soc/renesas/Kconfig
index 720bd06b2d89..8fa062f31214 100644
--- a/drivers/soc/renesas/Kconfig
+++ b/drivers/soc/renesas/Kconfig
@@ -102,9 +102,10 @@ config SYSC_RCAR
 #
 # Renesas SoC drivers
 #
-config RCAR_THERMAL_EMS_ENABLED
+config RCAR_THERMAL_EMS
 	tristate "Renesas R-Car Gen3 Enable Emergency Shutdown"
 	depends on RCAR_GEN3_THERMAL
+	default y
 	help
 	  Enable this option if you want to have support for Emergency Shutdown
 	  in R-Car Gen3.
diff --git a/drivers/soc/renesas/Makefile b/drivers/soc/renesas/Makefile
index 743be3652c73..909514ccb09b 100644
--- a/drivers/soc/renesas/Makefile
+++ b/drivers/soc/renesas/Makefile
@@ -28,6 +28,4 @@ obj-$(CONFIG_SYSC_RCAR)		+= rcar-sysc.o
 obj-$(CONFIG_RCAR_CPU_TOPOLOGY)	+= rcar-topology.o
 
 # EMS for R-Car Gen3
-obj-$(CONFIG_ARCH_R8A7795)	+= rcar_ems_ctrl.o
-obj-$(CONFIG_ARCH_R8A7796)	+= rcar_ems_ctrl.o
-obj-$(CONFIG_ARCH_R8A77965)	+= rcar_ems_ctrl.o
+obj-$(CONFIG_RCAR_THERMAL_EMS)	+= rcar_ems_ctrl.o
diff --git a/drivers/soc/renesas/rcar_ems_ctrl.c b/drivers/soc/renesas/rcar_ems_ctrl.c
index ca9af73da62a..1b5be366ea06 100644
--- a/drivers/soc/renesas/rcar_ems_ctrl.c
+++ b/drivers/soc/renesas/rcar_ems_ctrl.c
@@ -105,17 +105,12 @@ int rcar_ems_get_mode(void)
 }
 EXPORT_SYMBOL(rcar_ems_get_mode);
 
-static int __init rcar_ems_ctrl_init(void)
+static int rcar_ems_ctrl_init(void)
 {
 	struct device_node *np, *c;
 	struct thermal_zone_device *zone;
 	u32 value;
 
-	if (!IS_ENABLED(CONFIG_RCAR_THERMAL_EMS_ENABLED)) {
-		pr_err("thermal emergency: disabled\n");
-		return 0;
-	}
-
 	np = of_find_node_by_name(NULL, "thermal-zones");
 	if (!np)
 		return 0;
@@ -165,17 +160,14 @@ static int __init rcar_ems_ctrl_init(void)
 	return 0;
 }
 
-static void __exit rcar_ems_ctrl_exit(void)
+static void rcar_ems_ctrl_exit(void)
 {
 	cancel_delayed_work_sync(&rcar_ems_monitor_work);
 }
 
-late_initcall(rcar_ems_ctrl_init)
-module_exit(rcar_ems_ctrl_exit)
-
-
 /* emergency cpu shutdown function */
 static struct cpumask target_cpus;
+static struct cpumask runtime_cpus;
 static struct cpumask freq_scaled_cpus;
 
 static int rcar_ems_cpufreq_notifier_call(struct notifier_block *nb,
@@ -215,14 +207,17 @@ static int rcar_ems_thermal_notifier_call(struct notifier_block *nb,
 
 	switch (state) {
 	case RCAR_EMS_MODE_ON:
+		cpumask_clear(&runtime_cpus);
 		for_each_cpu(cpu, &target_cpus) {
-			if (cpu_online(cpu))
+			if (cpu_online(cpu)) {
+				cpumask_set_cpu(cpu, &runtime_cpus);
 				cpu_down(cpu);
+			}
 		}
 		break;
 
 	case RCAR_EMS_MODE_OFF:
-		for_each_cpu(cpu, &target_cpus) {
+		for_each_cpu(cpu, &runtime_cpus) {
 			if  (!cpu_online(cpu))
 				cpu_up(cpu);
 		}
@@ -246,15 +241,12 @@ static struct notifier_block ems_cpufreq_notifier_block = {
 	.notifier_call = rcar_ems_cpufreq_notifier_call,
 };
 
-static int __init rcar_ems_cpu_shutdown_init(void)
+static int rcar_ems_cpu_shutdown_init(void)
 {
 	int cpu;
 	struct device_node *cpu_node, *ems_node, *tmp_node;
 	int total_target_cpu, i;
 
-	if (!IS_ENABLED(CONFIG_RCAR_THERMAL_EMS_ENABLED))
-		return 0;
-
 	cpumask_clear(&target_cpus);
 	cpumask_clear(&freq_scaled_cpus);
 
@@ -299,12 +291,34 @@ static int __init rcar_ems_cpu_shutdown_init(void)
 	return 0;
 }
 
-static void __exit rcar_ems_cpu_shutdown_exit(void)
+static void rcar_ems_cpu_shutdown_exit(void)
 {
+	rcar_ems_notify(RCAR_EMS_MODE_OFF, 0);
 	unregister_rcar_ems_notifier(&ems_thermal_notifier_block);
 	cpufreq_unregister_notifier(&ems_cpufreq_notifier_block,
 				    CPUFREQ_POLICY_NOTIFIER);
 }
 
-late_initcall(rcar_ems_cpu_shutdown_init);
-module_exit(rcar_ems_cpu_shutdown_exit);
+static int __init rcar_ems_init(void)
+{
+	int ret;
+
+	ret = rcar_ems_ctrl_init();
+	if (ret)
+		return ret;
+
+	return rcar_ems_cpu_shutdown_init();
+}
+
+static void __exit rcar_ems_exit(void)
+{
+	rcar_ems_cpu_shutdown_exit();
+	rcar_ems_ctrl_exit();
+}
+
+late_initcall(rcar_ems_init);
+module_exit(rcar_ems_exit);
+
+MODULE_AUTHOR("Gaku Inami <gaku.inami.xw@bp.renesas.com>");
+MODULE_DESCRIPTION("R-Car Gen3 Emergency Shutdown");
+MODULE_LICENSE("GPL v2");
-- 
2.17.1

