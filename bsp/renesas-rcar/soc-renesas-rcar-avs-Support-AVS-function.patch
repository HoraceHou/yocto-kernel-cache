From 3be77492aacec79b8abb2f8e96651b660e0038f0 Mon Sep 17 00:00:00 2001
From: Dien Pham <dien.pham.ry@rvc.renesas.com>
Date: Mon, 30 May 2016 13:33:16 +0700
Subject: [PATCH 151/909] soc: renesas: rcar-avs: Support AVS function

commit 0484d203d9011dd22895c2b75f00eaa6d3540614 from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

[dien.pham.ry: Define AVS node on dts and add document]
[dien.pham.ry: Update for code cleanup]
[George G. Davis: CodingStyle cleanup]
[George G. Davis: Make local functions static]
[George G. Davis: Fix initcall to return pass/fail status]
[George G. Davis: Improve code to remove unnecessary checking]
[dien.pham.ry: Change the reading AVS value method]

  The eFuse value is changed by hardware side.

  The main changed points are:
   - Name of register that contains eFuse value is changed:
     From KSEN_ADJCNTS to ADVADJP
     (Adaptive Dynamic Voltage ADJust Parameter.)

   - The bits are changed from VOLCOND[3:0] to VOLCOND[8:0].

   - There is one more AVS table, so total is 8 AVS tables.
     The eFuse reading method is changed as below:

     If ['X'] bit in VOLCOND[8:0] is set to 1 and other bits are set to 0,
     AVS 'X+1' is selected (X=[0,...,6]).

     Other values, AVS0 is selected as default.

  This patch changes the eFuse reading method to get
    the AVS value as above change of hardware.

[dien.pham.ry: Update to support for r8a77965]
[dien.pham.ry: Improve to proceed for only target cpus]
[George G. Davis ,Eugeniu Rosca, dien.pham.ry: Unmap after using]
[dien.pham.ry: Remove M3N support]
[dien.pham.ry: Improve to build only when enabling RCAR_POWER_AVS]
[dien.pham.ry, van.do.xw: Update for more general usage]

Signed-off-by: Dien Pham <dien.pham.ry@renesas.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../bindings/cpufreq/avs/rcar-avs.txt         |  37 ++++++
 drivers/soc/renesas/Kconfig                   |   7 +
 drivers/soc/renesas/Makefile                  |   3 +
 drivers/soc/renesas/rcar-avs.c                | 125 ++++++++++++++++++
 4 files changed, 172 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/cpufreq/avs/rcar-avs.txt
 create mode 100644 drivers/soc/renesas/rcar-avs.c

diff --git a/Documentation/devicetree/bindings/cpufreq/avs/rcar-avs.txt b/Documentation/devicetree/bindings/cpufreq/avs/rcar-avs.txt
new file mode 100644
index 000000000000..54799cbfe958
--- /dev/null
+++ b/Documentation/devicetree/bindings/cpufreq/avs/rcar-avs.txt
@@ -0,0 +1,37 @@
+R-Car AVS driver
+
+It is a simple driver that checks AVS (Adaptive Voltage Scaling) value of
+chip. It helps to AVS user device select the best opp table (appropriate table with
+avs value) to apply for the chip at runtime.
+
+Required properties:
+ - reg: address and offset for registers of AVS.
+ - target_devices: all target devices (e.g. cpu, gpu...) that will apply avs value.
+    Note: when adding cpu nodes, it needs to list all
+    cpu nodes that are on same cluster together.
+
+Optional properties:
+ - None
+
+Examples:
+ - Below is device tree definition for R-Car H3 and M3:
+
+  For H3:
+	avs: avs@e60a013c {
+		compatible = "renesas,r8a7795-avs", "renesas,rcar-gen3-avs";
+		reg = <0 0xe60a013c 0 0x04>;
+		target_devices = <&a57_0>, <&a57_1>, <&a57_2>, <&a57_3>;
+	};
+
+  For M3:
+	avs: avs@e60a013c {
+		compatible = "renesas,r8a7796-avs", "renesas,rcar-gen3-avs";
+		reg = <0 0xe60a013c 0 0x04>;
+		target_devices = <&a57_0>, <&a57_1>;
+	};
+
+  For M3N:
+	avs: avs@e60a013c {
+		compatible = "renesas,r8a77965-avs", "renesas,rcar-gen3-avs";
+		reg = <0 0xe60a013c 0 0x04>;
+	};
diff --git a/drivers/soc/renesas/Kconfig b/drivers/soc/renesas/Kconfig
index 1450b561601f..56e51476bcb8 100644
--- a/drivers/soc/renesas/Kconfig
+++ b/drivers/soc/renesas/Kconfig
@@ -99,4 +99,11 @@ config RST_RCAR
 config SYSC_RCAR
 	bool "R-Car System Controller support" if COMPILE_TEST
 
+config RCAR_POWER_AVS
+	bool "Renesas R-Car Gen3 AVS (Adaptive Voltage Scaling)"
+	depends on ARCH_R8A7795 || ARCH_R8A7796
+	default y
+	help
+	  Enable this option if you want to have support for AVS on R-Car Gen3.
+
 endif # SOC_RENESAS
diff --git a/drivers/soc/renesas/Makefile b/drivers/soc/renesas/Makefile
index 0508854e48ab..a5f7a991681b 100644
--- a/drivers/soc/renesas/Makefile
+++ b/drivers/soc/renesas/Makefile
@@ -19,6 +19,9 @@ obj-$(CONFIG_SYSC_R8A77980)	+= r8a77980-sysc.o
 obj-$(CONFIG_SYSC_R8A77990)	+= r8a77990-sysc.o
 obj-$(CONFIG_SYSC_R8A77995)	+= r8a77995-sysc.o
 
+# AVS for R-Car Gen3
+obj-$(CONFIG_RCAR_POWER_AVS)     += rcar-avs.o
+
 # Family
 obj-$(CONFIG_RST_RCAR)		+= rcar-rst.o
 obj-$(CONFIG_SYSC_RCAR)		+= rcar-sysc.o
diff --git a/drivers/soc/renesas/rcar-avs.c b/drivers/soc/renesas/rcar-avs.c
new file mode 100644
index 000000000000..2d1aade78872
--- /dev/null
+++ b/drivers/soc/renesas/rcar-avs.c
@@ -0,0 +1,125 @@
+/*
+ * Renesas R-Car AVS Support
+ *
+ *  Copyright (C) 2016 Renesas Electronics Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/io.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/slab.h>
+
+/* Change the default opp_table pattern in device tree.
+ * Set opp_pattern_num is default.
+ */
+
+static int change_default_opp_pattern(struct device_node *avs_node,
+				      unsigned int opp_pattern_num)
+{
+	struct device_node *dev_node = NULL;
+	int dev_nums, i;
+
+	__be32 *list, *pp_val;
+	int size;
+	struct property *pp;
+
+	dev_nums = of_count_phandle_with_args(avs_node, "target_devices", 0);
+
+	for (i = 0; i < dev_nums; i++) {
+		dev_node = of_parse_phandle(avs_node, "target_devices", i);
+		pp = of_find_property(dev_node, "operating-points-v2", &size);
+		if (!pp || !pp->value)
+			return -ENOENT;
+
+		pp_val = pp->value;
+		size = size / sizeof(*pp_val);
+		if (size > opp_pattern_num) {
+			list = kzalloc(sizeof(*pp_val), GFP_KERNEL);
+			if (!list)
+				return -ENOMEM;
+
+			*list = *(pp_val + opp_pattern_num);
+			pp->value = list;
+		}
+		pp->length = sizeof(*list); /* opp fw only accept 1 opp_tb */
+
+		pr_info("rcar-avs: %s is running with: %s\n",
+			of_node_full_name(dev_node),
+			of_node_full_name(of_find_node_by_phandle(
+				be32_to_cpup(pp->value))));
+	}
+
+	return 0;
+}
+
+/* Get AVS value */
+#define VOLCOND_MASK  0x1ff	/* VOLCOND[8:0] bits of ADVADJP register */
+
+#define AVS_MAX_VALUE	7
+
+static const struct of_device_id rcar_avs_matches[] = {
+#if defined(CONFIG_ARCH_R8A7795) || \
+	defined(CONFIG_ARCH_R8A7796)
+	{ .compatible = "renesas,rcar-gen3-avs" },
+#endif
+	{ /* sentinel */ }
+};
+
+static int __init rcar_avs_init(void)
+{
+	u32 avs_val, volcond_val;
+	struct device_node *np;
+	void __iomem *advadjp;
+	int ret = 0, i;
+
+	/* Map and get ADVADJP register */
+	np = of_find_matching_node(NULL, rcar_avs_matches);
+	if (!np) {
+		pr_warn("%s: cannot find compatible dts node\n", __func__);
+		return -ENODEV;
+	}
+
+	advadjp = of_iomap(np, 0); /* ADVADJP register from dts */
+	if (!advadjp) {
+		pr_warn("%s: Cannot map regs\n", np->full_name);
+		return -ENOMEM;
+	}
+
+	/* Get and check avs value */
+	avs_val = 0; /* default avs table value */
+
+	volcond_val = ioread32(advadjp);
+	volcond_val &= VOLCOND_MASK;
+
+	iounmap(advadjp);
+
+	for (i = 0; i < AVS_MAX_VALUE; i++) {
+		if (volcond_val == BIT(i)) {
+			avs_val = i + 1; /* found AVS value */
+			break;
+		}
+	}
+
+	pr_info("rcar-avs: use avs value: %d\n", avs_val);
+
+	/* Apply avs value */
+	ret = change_default_opp_pattern(np, avs_val);
+
+	return ret;
+}
+
+subsys_initcall(rcar_avs_init);
+
+MODULE_AUTHOR("Renesas Electronics Corporation");
+MODULE_DESCRIPTION("R-Car AVS module");
+MODULE_LICENSE("GPL v2");
-- 
2.17.1

