From a1d27f985a8d21d0782a465924bc9a54558588c0 Mon Sep 17 00:00:00 2001
From: Nikita Yushchenko <nikita.yoush@cogentembedded.com>
Date: Sun, 24 Jun 2018 18:04:23 +0300
Subject: [PATCH 800/909] arm64: dma: check parent bus restrictions in
 dma_capable()

commit 98081ba7f59438b1c8f9176b5467b924b9b392f5 from
https://github.com/CogentEmbedded/meta-rcar.git

It may happen that although hardware device is capable of full 64-bit
addressing in DMA operations, way device is connected to the system
imposes addressing limitations. Example: NVMe device connected to PCIe
host sitting on AXI bus with 32-bit addressing (and no iommu configured).

There is no agreement on setting dma_mask in this case. For low level,
dma_mask must be 32-bit - that's what hardware provides for software.
But for higher level, dma_mask must be 64-bit - that's what platform
(hardware + swiotlb) provides for higher levels.

dma_capable() is swiotlb's check if current address is DMAable by device
directly or swiotlb should provide bounce buffer for it. Using dma_mask
in dma_capable() assumes that dma_mask is set for low level - which does
not always match reality.

This patch changes dma_capable() to check additional restrictions.

It is a workaround against ambiguous dma_mask semantics.

Signed-off-by: Nikita Yushchenko <nikita.yoush@cogentembedded.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm64/include/asm/device.h |  1 +
 arch/arm64/mm/dma-mapping.c     | 13 ++++++++++++-
 include/linux/dma-direct.h      |  9 ++++++++-
 3 files changed, 21 insertions(+), 2 deletions(-)

diff --git a/arch/arm64/include/asm/device.h b/arch/arm64/include/asm/device.h
index 5a5fa47a6b18..ac3eb0ca0ddb 100644
--- a/arch/arm64/include/asm/device.h
+++ b/arch/arm64/include/asm/device.h
@@ -24,6 +24,7 @@ struct dev_archdata {
 	const struct dma_map_ops *dev_dma_ops;
 #endif
 	bool dma_coherent;
+	u64 parent_dma_mask;
 };
 
 struct pdev_archdata {
diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c
index 935c7871dc75..3e258723abd9 100644
--- a/arch/arm64/mm/dma-mapping.c
+++ b/arch/arm64/mm/dma-mapping.c
@@ -882,7 +882,18 @@ void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,
 		dev->dma_ops = &arm64_swiotlb_dma_ops;
 
 	dev->archdata.dma_coherent = coherent;
-	__iommu_setup_dma_ops(dev, dma_base, size, iommu);
+
+	if (!iommu) {
+		/*
+		 * we don't yet support buses that have a non-zero mapping.
+		 * Let's hope we won't need it
+		 */
+		WARN_ON(dma_base != 0);
+
+		/* save parent_dma_mask for swiotlb's dma_capable() */
+		dev->archdata.parent_dma_mask = size - 1;
+	} else
+		__iommu_setup_dma_ops(dev, dma_base, size, iommu);
 
 #ifdef CONFIG_XEN
 	if (xen_initial_domain()) {
diff --git a/include/linux/dma-direct.h b/include/linux/dma-direct.h
index 8d9f33febde5..0d1cbf3ae5f7 100644
--- a/include/linux/dma-direct.h
+++ b/include/linux/dma-direct.h
@@ -24,10 +24,17 @@ static inline phys_addr_t __dma_to_phys(struct device *dev, dma_addr_t dev_addr)
 
 static inline bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)
 {
+	u64 mask;
+
 	if (!dev->dma_mask)
 		return false;
 
-	return addr + size - 1 <= *dev->dma_mask;
+	mask = *dev->dma_mask;
+	if (dev->archdata.parent_dma_mask &&
+			mask > dev->archdata.parent_dma_mask)
+		mask = dev->archdata.parent_dma_mask;
+
+	return addr + size - 1 <= mask;
 }
 #endif /* !CONFIG_ARCH_HAS_PHYS_TO_DMA */
 
-- 
2.17.1

