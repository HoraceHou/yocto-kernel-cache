From 24704b24a1ebf71a9c666b02c6d9e8bd1da52a58 Mon Sep 17 00:00:00 2001
From: Masaharu Hayakawa <masaharu.hayakawa.ry@renesas.com>
Date: Wed, 22 Nov 2017 13:19:16 +0900
Subject: [PATCH 211/909] mmc: tmio: Add selecting optimum TAP when all of TAP
 is OK

commit ae58f551411e3e1d3dbc0e718f173f5100335eca from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

In SDHI manual rev.0.14 (Nov.11,2016), SCC_SMPCMP is added.
This patch improves TAP selection by using SCC_SMPCMP.
When all of TAP succeed in tuning, any TAP can be selected.
By referring to SCC_SMPCMP, it is possible to select the
optimum TAP when all of the TAP is OK.

Signed-off-by: Masaharu Hayakawa <masaharu.hayakawa.ry@renesas.com>
[saito: rework commit title and message. original title is
"mmc: tmio: Add detecting a change point of data".]
Signed-off-by: Takeshi Saito <takeshi.saito.xv@renesas.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/mmc/host/tmio_mmc.h      | 4 ++++
 drivers/mmc/host/tmio_mmc_core.c | 4 ++++
 2 files changed, 8 insertions(+)

diff --git a/drivers/mmc/host/tmio_mmc.h b/drivers/mmc/host/tmio_mmc.h
index 30fcd5905293..3e458dc35bc9 100644
--- a/drivers/mmc/host/tmio_mmc.h
+++ b/drivers/mmc/host/tmio_mmc.h
@@ -209,6 +209,10 @@ struct tmio_mmc_host {
 	DECLARE_BITMAP(taps, BITS_PER_BYTE * sizeof(long));
 	unsigned int tap_num;
 
+	/* Sampling data comparison: 1 for match. 0 for mismatch */
+	DECLARE_BITMAP(smpcmp, BITS_PER_BYTE * sizeof(long));
+	unsigned int (*compare_scc_data)(struct tmio_mmc_host *host);
+
 	const struct tmio_mmc_dma_ops *dma_ops;
 };
 
diff --git a/drivers/mmc/host/tmio_mmc_core.c b/drivers/mmc/host/tmio_mmc_core.c
index 3463a742b382..bc91350caa39 100644
--- a/drivers/mmc/host/tmio_mmc_core.c
+++ b/drivers/mmc/host/tmio_mmc_core.c
@@ -859,6 +859,7 @@ static int tmio_mmc_execute_tuning(struct mmc_host *mmc, u32 opcode)
 	}
 
 	bitmap_zero(host->taps, host->tap_num * 2);
+	bitmap_zero(host->smpcmp, host->tap_num * 2);
 
 	/* Issue CMD19 twice for each tap */
 	for (i = 0; i < 2 * host->tap_num; i++) {
@@ -869,6 +870,9 @@ static int tmio_mmc_execute_tuning(struct mmc_host *mmc, u32 opcode)
 		if (ret == 0)
 			set_bit(i, host->taps);
 
+		if (host->compare_scc_data && !host->compare_scc_data(host))
+			set_bit(i, host->smpcmp);
+
 		usleep_range(1000, 1200);
 	}
 
-- 
2.17.1

