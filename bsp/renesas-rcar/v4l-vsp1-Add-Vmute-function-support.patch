From f4c9818dcb761f3eb5fb6ecde7bc526ee612e8a2 Mon Sep 17 00:00:00 2001
From: Koji Matsuoka <koji.matsuoka.xm@renesas.com>
Date: Thu, 23 Aug 2018 17:52:31 +0900
Subject: [PATCH 290/909] v4l: vsp1: Add Vmute function support

commit 94f5d9472c9f0f6b3f781519ea6d6afd946c2352 from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

The mute function of VSPD is supported.

Signed-off-by: Koji Matsuoka <koji.matsuoka.xm@renesas.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/gpu/drm/rcar-du/rcar_du_drv.c   | 13 ++++++++-
 drivers/gpu/drm/rcar-du/rcar_du_kms.c   | 37 +++++++++++++++++++++++++
 drivers/gpu/drm/rcar-du/rcar_du_kms.h   |  3 +-
 drivers/gpu/drm/rcar-du/rcar_du_vsp.c   | 28 +++++++++++++++++++
 drivers/gpu/drm/rcar-du/rcar_du_vsp.h   |  6 +++-
 drivers/media/platform/vsp1/vsp1_brx.c  | 23 ++++++++++++++-
 drivers/media/platform/vsp1/vsp1_drm.c  | 18 ++++++++++++
 drivers/media/platform/vsp1/vsp1_pipe.c |  1 +
 drivers/media/platform/vsp1/vsp1_pipe.h |  5 +++-
 drivers/media/platform/vsp1/vsp1_rpf.c  |  8 ++++++
 drivers/media/platform/vsp1/vsp1_wpf.c  | 17 ++++++++++++
 include/media/vsp1.h                    |  1 +
 include/uapi/drm/rcar_du_drm.h          | 27 ++++++++++++++++++
 13 files changed, 182 insertions(+), 5 deletions(-)
 create mode 100644 include/uapi/drm/rcar_du_drm.h

diff --git a/drivers/gpu/drm/rcar-du/rcar_du_drv.c b/drivers/gpu/drm/rcar-du/rcar_du_drv.c
index 02aee6cb0e53..bc183f92da60 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_drv.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_drv.c
@@ -1,7 +1,7 @@
 /*
  * rcar_du_drv.c  --  R-Car Display Unit DRM driver
  *
- * Copyright (C) 2013-2015 Renesas Electronics Corporation
+ * Copyright (C) 2013-2018 Renesas Electronics Corporation
  *
  * Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
  *
@@ -26,11 +26,15 @@
 #include <drm/drm_crtc_helper.h>
 #include <drm/drm_fb_cma_helper.h>
 #include <drm/drm_gem_cma_helper.h>
+#include <drm/rcar_du_drm.h>
+
+#include <media/vsp1.h>
 
 #include "rcar_du_drv.h"
 #include "rcar_du_kms.h"
 #include "rcar_du_of.h"
 #include "rcar_du_regs.h"
+#include "rcar_du_vsp.h"
 
 /* -----------------------------------------------------------------------------
  * Device Information
@@ -323,6 +327,11 @@ static void rcar_du_lastclose(struct drm_device *dev)
 	drm_fbdev_cma_restore_mode(rcdu->fbdev);
 }
 
+static const struct drm_ioctl_desc rcar_du_ioctls[] = {
+	DRM_IOCTL_DEF_DRV(RCAR_DU_SET_VMUTE, rcar_du_set_vmute,
+			  DRM_UNLOCKED | DRM_CONTROL_ALLOW),
+};
+
 DEFINE_DRM_GEM_CMA_FOPS(rcar_du_fops);
 
 static struct drm_driver rcar_du_driver = {
@@ -347,6 +356,8 @@ static struct drm_driver rcar_du_driver = {
 	.date			= "20130110",
 	.major			= 1,
 	.minor			= 0,
+	.ioctls			= rcar_du_ioctls,
+	.num_ioctls		= ARRAY_SIZE(rcar_du_ioctls),
 };
 
 /* -----------------------------------------------------------------------------
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_kms.c b/drivers/gpu/drm/rcar-du/rcar_du_kms.c
index 013649c9b36d..a82705bc179f 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_kms.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_kms.c
@@ -295,6 +295,43 @@ static void rcar_du_atomic_commit_tail(struct drm_atomic_state *old_state)
 	drm_atomic_helper_cleanup_planes(dev, old_state);
 }
 
+int rcar_du_async_commit(struct drm_device *dev, struct drm_crtc *crtc)
+{
+	int ret = 0;
+	struct drm_atomic_state *state;
+	struct drm_crtc_state *crtc_state;
+	struct drm_mode_config *config = &dev->mode_config;
+
+	drm_modeset_lock_all(dev);
+
+	state = drm_atomic_state_alloc(dev);
+	if (!state) {
+		ret = -ENOMEM;
+		goto err;
+	}
+
+	crtc_state = drm_atomic_helper_crtc_duplicate_state(crtc);
+	if (!crtc_state) {
+		ret = -ENOMEM;
+		goto err;
+	}
+
+	state->crtcs->state = crtc_state;
+	state->crtcs->old_state = crtc->state;
+	state->crtcs->new_state = crtc_state;
+	state->crtcs->ptr = crtc;
+	crtc_state->state = state;
+	crtc_state->active = true;
+
+	state->acquire_ctx = config->acquire_ctx;
+	ret = drm_atomic_commit(state);
+	drm_atomic_state_put(state);
+err:
+	drm_modeset_unlock_all(dev);
+
+	return ret;
+}
+
 /* -----------------------------------------------------------------------------
  * Initialization
  */
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_kms.h b/drivers/gpu/drm/rcar-du/rcar_du_kms.h
index 07951d5fe38b..dbd3178c9045 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_kms.h
+++ b/drivers/gpu/drm/rcar-du/rcar_du_kms.h
@@ -1,7 +1,7 @@
 /*
  * rcar_du_kms.h  --  R-Car Display Unit Mode Setting
  *
- * Copyright (C) 2013-2014 Renesas Electronics Corporation
+ * Copyright (C) 2013-2018 Renesas Electronics Corporation
  *
  * Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
  *
@@ -35,5 +35,6 @@ int rcar_du_modeset_init(struct rcar_du_device *rcdu);
 
 int rcar_du_dumb_create(struct drm_file *file, struct drm_device *dev,
 			struct drm_mode_create_dumb *args);
+int rcar_du_async_commit(struct drm_device *dev, struct drm_crtc *crtc);
 
 #endif /* __RCAR_DU_KMS_H__ */
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_vsp.c b/drivers/gpu/drm/rcar-du/rcar_du_vsp.c
index 23c25823b24f..ebe9e7e6346c 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_vsp.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_vsp.c
@@ -19,6 +19,7 @@
 #include <drm/drm_gem_cma_helper.h>
 #include <drm/drm_gem_framebuffer_helper.h>
 #include <drm/drm_plane_helper.h>
+#include <drm/rcar_du_drm.h>
 
 #include <linux/bitops.h>
 #include <linux/dma-mapping.h>
@@ -356,6 +357,33 @@ static void rcar_du_vsp_plane_reset(struct drm_plane *plane)
 	plane->state->plane = plane;
 }
 
+int rcar_du_set_vmute(struct drm_device *dev, void *data,
+		      struct drm_file *file_priv)
+{
+	struct rcar_du_vmute *vmute =
+		(struct rcar_du_vmute *)data;
+	struct drm_mode_object *obj;
+	struct drm_crtc *crtc;
+	struct rcar_du_crtc *rcrtc;
+	int ret = 0;
+
+	dev_dbg(dev->dev, "CRTC[%d], display:%s\n",
+		vmute->crtc_id, vmute->on ? "off" : "on");
+
+	obj = drm_mode_object_find(dev, vmute->crtc_id, DRM_MODE_OBJECT_CRTC);
+	if (!obj)
+		return -EINVAL;
+
+	crtc = obj_to_crtc(obj);
+	rcrtc = to_rcar_crtc(crtc);
+
+	vsp1_du_if_set_mute(rcrtc->vsp->vsp, vmute->on, rcrtc->vsp_pipe);
+
+	ret = rcar_du_async_commit(dev, crtc);
+
+	return ret;
+}
+
 static const struct drm_plane_funcs rcar_du_vsp_plane_funcs = {
 	.update_plane = drm_atomic_helper_update_plane,
 	.disable_plane = drm_atomic_helper_disable_plane,
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_vsp.h b/drivers/gpu/drm/rcar-du/rcar_du_vsp.h
index 8a8a25c8c8e8..cc7e09a2ef8e 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_vsp.h
+++ b/drivers/gpu/drm/rcar-du/rcar_du_vsp.h
@@ -1,7 +1,7 @@
 /*
  * rcar_du_vsp.h  --  R-Car Display Unit VSP-Based Compositor
  *
- * Copyright (C) 2015 Renesas Electronics Corporation
+ * Copyright (C) 2015-2018 Renesas Electronics Corporation
  *
  * Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
  *
@@ -65,6 +65,8 @@ void rcar_du_vsp_enable(struct rcar_du_crtc *crtc);
 void rcar_du_vsp_disable(struct rcar_du_crtc *crtc);
 void rcar_du_vsp_atomic_begin(struct rcar_du_crtc *crtc);
 void rcar_du_vsp_atomic_flush(struct rcar_du_crtc *crtc);
+int rcar_du_set_vmute(struct drm_device *dev, void *data,
+		      struct drm_file *file_priv);
 #else
 static inline int rcar_du_vsp_init(struct rcar_du_vsp *vsp,
 				   struct device_node *np,
@@ -76,6 +78,8 @@ static inline void rcar_du_vsp_enable(struct rcar_du_crtc *crtc) { };
 static inline void rcar_du_vsp_disable(struct rcar_du_crtc *crtc) { };
 static inline void rcar_du_vsp_atomic_begin(struct rcar_du_crtc *crtc) { };
 static inline void rcar_du_vsp_atomic_flush(struct rcar_du_crtc *crtc) { };
+static inline int rcar_du_set_vmute(struct drm_device *dev, void *data,
+				    struct drm_file *file_priv) { return 0; };
 #endif
 
 #endif /* __RCAR_DU_VSP_H__ */
diff --git a/drivers/media/platform/vsp1/vsp1_brx.c b/drivers/media/platform/vsp1/vsp1_brx.c
index 359917b5d842..942ff1217896 100644
--- a/drivers/media/platform/vsp1/vsp1_brx.c
+++ b/drivers/media/platform/vsp1/vsp1_brx.c
@@ -2,7 +2,7 @@
 /*
  * vsp1_brx.c  --  R-Car VSP1 Blend ROP Unit (BRU and BRS)
  *
- * Copyright (C) 2013 Renesas Corporation
+ * Copyright (C) 2013-2018 Renesas Corporation
  *
  * Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
  */
@@ -293,6 +293,27 @@ static void brx_configure_stream(struct vsp1_entity *entity,
 	format = vsp1_entity_get_pad_format(&brx->entity, brx->entity.config,
 					    brx->entity.source_pad);
 
+	if (pipe->vmute_flag) {
+		vsp1_brx_write(brx, dlb, VI6_BRU_INCTRL, 0);
+		vsp1_brx_write(brx, dlb, VI6_BRU_VIRRPF_SIZE,
+			       (format->width <<
+			       VI6_BRU_VIRRPF_SIZE_HSIZE_SHIFT) |
+			       (format->height <<
+			       VI6_BRU_VIRRPF_SIZE_VSIZE_SHIFT));
+		vsp1_brx_write(brx, dlb, VI6_BRU_VIRRPF_LOC, 0);
+		vsp1_brx_write(brx, dlb, VI6_BRU_VIRRPF_COL, (0xFF << 24));
+
+		for (i = 0; i < brx->entity.source_pad; ++i) {
+			vsp1_brx_write(brx, dlb, VI6_BRU_BLD(i),
+				       VI6_BRU_BLD_CCMDX_255_SRC_A |
+				       VI6_BRU_BLD_CCMDY_SRC_A |
+				       VI6_BRU_BLD_ACMDX_255_SRC_A |
+				       VI6_BRU_BLD_ACMDY_COEFY |
+				       VI6_BRU_BLD_COEFY_MASK);
+		}
+		return;
+	}
+
 	/*
 	 * The hardware is extremely flexible but we have no userspace API to
 	 * expose all the parameters, nor is it clear whether we would have use
diff --git a/drivers/media/platform/vsp1/vsp1_drm.c b/drivers/media/platform/vsp1/vsp1_drm.c
index e68733582df4..fb51c6e0f740 100644
--- a/drivers/media/platform/vsp1/vsp1_drm.c
+++ b/drivers/media/platform/vsp1/vsp1_drm.c
@@ -577,6 +577,24 @@ int vsp1_du_init(struct device *dev)
 }
 EXPORT_SYMBOL_GPL(vsp1_du_init);
 
+int vsp1_du_if_set_mute(struct device *dev, bool on, unsigned int pipe_index)
+{
+	struct vsp1_device *vsp1 = dev_get_drvdata(dev);
+	struct vsp1_drm_pipeline *drm_pipe;
+	struct vsp1_pipeline *pipe;
+
+	drm_pipe = &vsp1->drm->pipe[pipe_index];
+	pipe = &drm_pipe->pipe;
+
+	if (on)
+		pipe->vmute_flag = true;
+	else
+		pipe->vmute_flag = false;
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(vsp1_du_if_set_mute);
+
 /**
  * vsp1_du_setup_lif - Setup the output part of the VSP pipeline
  * @dev: the VSP device
diff --git a/drivers/media/platform/vsp1/vsp1_pipe.c b/drivers/media/platform/vsp1/vsp1_pipe.c
index 619d53de6026..e3136bdb7bcf 100644
--- a/drivers/media/platform/vsp1/vsp1_pipe.c
+++ b/drivers/media/platform/vsp1/vsp1_pipe.c
@@ -219,6 +219,7 @@ void vsp1_pipeline_init(struct vsp1_pipeline *pipe)
 
 	INIT_LIST_HEAD(&pipe->entities);
 	pipe->state = VSP1_PIPELINE_STOPPED;
+	pipe->vmute_flag = false;
 }
 
 /* Must be called with the pipe irqlock held. */
diff --git a/drivers/media/platform/vsp1/vsp1_pipe.h b/drivers/media/platform/vsp1/vsp1_pipe.h
index 743d8f0db45c..634ff059f3bb 100644
--- a/drivers/media/platform/vsp1/vsp1_pipe.h
+++ b/drivers/media/platform/vsp1/vsp1_pipe.h
@@ -2,7 +2,7 @@
 /*
  * vsp1_pipe.h  --  R-Car VSP1 Pipeline
  *
- * Copyright (C) 2013-2015 Renesas Electronics Corporation
+ * Copyright (C) 2013-2018 Renesas Electronics Corporation
  *
  * Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
  */
@@ -107,6 +107,7 @@ struct vsp1_partition {
  * @partitions: The number of partitions used to process one frame
  * @partition: The current partition for configuration to process
  * @part_table: The pre-calculated partitions used by the pipeline
+ * @vmute_flag: Enable mute flag of VSPD
  */
 struct vsp1_pipeline {
 	struct media_pipeline pipe;
@@ -146,6 +147,8 @@ struct vsp1_pipeline {
 	unsigned int partitions;
 	struct vsp1_partition *partition;
 	struct vsp1_partition *part_table;
+
+	bool vmute_flag;
 };
 
 void vsp1_pipeline_reset(struct vsp1_pipeline *pipe);
diff --git a/drivers/media/platform/vsp1/vsp1_rpf.c b/drivers/media/platform/vsp1/vsp1_rpf.c
index 4a8559854587..a486c9589cba 100644
--- a/drivers/media/platform/vsp1/vsp1_rpf.c
+++ b/drivers/media/platform/vsp1/vsp1_rpf.c
@@ -231,6 +231,14 @@ static void rpf_configure_partition(struct vsp1_entity *entity,
 	const struct v4l2_pix_format_mplane *format = &rpf->format;
 	struct v4l2_rect crop;
 	u32 crop_width, crop_height, crop_x, crop_y, fourcc;
+	u32 i;
+
+	if (pipe->vmute_flag) {
+		for (i = 0; i < vsp1->info->rpf_count; ++i)
+			vsp1_rpf_write(rpf, dlb, VI6_DPR_RPF_ROUTE(i),
+				       VI6_DPR_NODE_UNUSED);
+		return;
+	}
 
 	/*
 	 * Source size and crop offsets.
diff --git a/drivers/media/platform/vsp1/vsp1_wpf.c b/drivers/media/platform/vsp1/vsp1_wpf.c
index 929093ed6968..510d8ae0cdc5 100644
--- a/drivers/media/platform/vsp1/vsp1_wpf.c
+++ b/drivers/media/platform/vsp1/vsp1_wpf.c
@@ -10,6 +10,7 @@
 #include <linux/device.h>
 
 #include <media/v4l2-subdev.h>
+#include <media/vsp1.h>
 
 #include "vsp1.h"
 #include "vsp1_dl.h"
@@ -244,6 +245,9 @@ static void wpf_configure_stream(struct vsp1_entity *entity,
 	u32 outfmt = 0;
 	u32 srcrpf = 0;
 
+	if (pipe->vmute_flag)
+		return;
+
 	sink_format = vsp1_entity_get_pad_format(&wpf->entity,
 						 wpf->entity.config,
 						 RWPF_PAD_SINK);
@@ -334,6 +338,9 @@ static void wpf_configure_frame(struct vsp1_entity *entity,
 	unsigned long flags;
 	u32 outfmt;
 
+	if (pipe->vmute_flag)
+		return;
+
 	spin_lock_irqsave(&wpf->flip.lock, flags);
 	wpf->flip.active = (wpf->flip.active & ~mask)
 			 | (wpf->flip.pending & mask);
@@ -366,6 +373,16 @@ static void wpf_configure_partition(struct vsp1_entity *entity,
 	unsigned int flip;
 	unsigned int i;
 
+	if (pipe->vmute_flag) {
+		vsp1_wpf_write(wpf, dlb, VI6_WPF_SRCRPF,
+			       VI6_WPF_SRCRPF_VIRACT_MST);
+		vsp1_wpf_write(wpf, dlb, VI6_WPF_HSZCLIP, 0);
+		vsp1_wpf_write(wpf, dlb, VI6_WPF_VSZCLIP, 0);
+		vsp1_wpf_write(wpf, dlb, VI6_DPR_WPF_FPORCH(wpf->entity.index),
+			       VI6_DPR_WPF_FPORCH_FP_WPFN);
+		return;
+	}
+
 	sink_format = vsp1_entity_get_pad_format(&wpf->entity,
 						 wpf->entity.config,
 						 RWPF_PAD_SINK);
diff --git a/include/media/vsp1.h b/include/media/vsp1.h
index 18b91b12f730..881edc68fd13 100644
--- a/include/media/vsp1.h
+++ b/include/media/vsp1.h
@@ -100,5 +100,6 @@ void vsp1_du_atomic_flush(struct device *dev, unsigned int pipe_index,
 			  const struct vsp1_du_atomic_pipe_config *cfg);
 int vsp1_du_map_sg(struct device *dev, struct sg_table *sgt);
 void vsp1_du_unmap_sg(struct device *dev, struct sg_table *sgt);
+int vsp1_du_if_set_mute(struct device *dev, bool on, unsigned int pipe_index);
 
 #endif /* __MEDIA_VSP1_H__ */
diff --git a/include/uapi/drm/rcar_du_drm.h b/include/uapi/drm/rcar_du_drm.h
new file mode 100644
index 000000000000..1fca59ac435e
--- /dev/null
+++ b/include/uapi/drm/rcar_du_drm.h
@@ -0,0 +1,27 @@
+/*
+ * rcar_du_drm.h  --  R-Car Display Unit DRM driver
+ *
+ * Copyright (C) 2017 Renesas Electronics Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#ifndef __RCAR_DU_DRM_H__
+#define __RCAR_DU_DRM_H__
+
+struct rcar_du_vmute {
+	int crtc_id;	/* CRTCs ID */
+	int on;		/* Vmute function ON/OFF */
+};
+
+/* rcar-du + vspd specific ioctls */
+#define DRM_RCAR_DU_SET_VMUTE		0
+
+#define DRM_IOCTL_RCAR_DU_SET_VMUTE \
+	DRM_IOW(DRM_COMMAND_BASE + DRM_RCAR_DU_SET_VMUTE, \
+		struct rcar_du_vmute)
+
+#endif /* __RCAR_DU_DRM_H__ */
-- 
2.17.1

