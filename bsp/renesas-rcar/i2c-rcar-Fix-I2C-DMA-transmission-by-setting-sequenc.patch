From 7ee4b5aaa1280b737c5657c4d90452f04bf3fe78 Mon Sep 17 00:00:00 2001
From: Hiromitsu Yamasaki <hiromitsu.yamasaki.ym@renesas.com>
Date: Thu, 6 Sep 2018 16:07:48 +0530
Subject: [PATCH 241/909] i2c: rcar: Fix I2C DMA transmission by setting
 sequence

commit 55d2d2fb8b04b4b7bbdbd68d5e0523841b610de2 from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

By clearing the i2C MDE bit as the HW specification, it is necessary
to start transmission after 1 byte PIO transmission.

For 1st byte, it is necessary to perform PIO transfer.
Transfer is started by clearing the MDE bit, but I think that there
is a possibility that DMA transfer will be started before that.
In accordance with the HW specification, the transfer of 1st byte
was corrected so as to clear MDE clearly.
DMA transfer is used after the second byte.

Signed-off-by: Hiromitsu Yamasaki <hiromitsu.yamasaki.ym@renesas.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/i2c/busses/i2c-rcar.c | 44 +++++++++++++++++++++++------------
 1 file changed, 29 insertions(+), 15 deletions(-)

diff --git a/drivers/i2c/busses/i2c-rcar.c b/drivers/i2c/busses/i2c-rcar.c
index 53ed7eb6e5d2..d9f3c3adaedb 100644
--- a/drivers/i2c/busses/i2c-rcar.c
+++ b/drivers/i2c/busses/i2c-rcar.c
@@ -477,6 +477,18 @@ static void rcar_i2c_dma(struct rcar_i2c_priv *priv)
 	dma_async_issue_pending(chan);
 }
 
+static int rcar_i2c_is_pio(struct rcar_i2c_priv *priv)
+{
+	struct i2c_msg *msg = priv->msg;
+	bool read = msg->flags & I2C_M_RD;
+	struct dma_chan *chan = read ? priv->dma_rx : priv->dma_tx;
+
+	/* Do various checks to see if DMA is feasible at all */
+	return (IS_ERR(chan) || msg->len < 8 ||
+		!(msg->flags & I2C_M_DMA_SAFE) ||
+		(read && priv->flags & ID_P_NO_RXDMA));
+}
+
 static void rcar_i2c_irq_send(struct rcar_i2c_priv *priv, u32 msr)
 {
 	struct i2c_msg *msg = priv->msg;
@@ -486,22 +498,24 @@ static void rcar_i2c_irq_send(struct rcar_i2c_priv *priv, u32 msr)
 		return;
 
 	if (priv->pos < msg->len) {
-		/*
-		 * Prepare next data to ICRXTX register.
-		 * This data will go to _SHIFT_ register.
-		 *
-		 *    *
-		 * [ICRXTX] -> [SHIFT] -> [I2C bus]
-		 */
-		rcar_i2c_write(priv, ICRXTX, msg->buf[priv->pos]);
-		priv->pos++;
-
-		/*
-		 * Try to use DMA to transmit the rest of the data if
-		 * address transfer phase just finished.
-		 */
-		if (msr & MAT)
+		if (priv->pos == 0 || rcar_i2c_is_pio(priv)) {
+			/*
+			 * Prepare next data to ICRXTX register.
+			 * This data will go to _SHIFT_ register.
+			 *
+			 *    *
+			 * [ICRXTX] -> [SHIFT] -> [I2C bus]
+			 */
+			rcar_i2c_write(priv, ICRXTX, msg->buf[priv->pos]);
+			priv->pos++;
+		} else {
+			/*
+			 * Try to use DMA to transmit the rest of the data if
+			 * address transfer pashe just finished.
+			 */
 			rcar_i2c_dma(priv);
+			return;
+		}
 	} else {
 		/*
 		 * The last data was pushed to ICRXTX on _PREV_ empty irq.
-- 
2.17.1

