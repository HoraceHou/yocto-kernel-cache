From 63475b9723bb19e0e0c0feafd546d2d54f00bd72 Mon Sep 17 00:00:00 2001
From: Takeshi Saito <takeshi.saito.xv@renesas.com>
Date: Thu, 11 Oct 2018 16:05:49 +0900
Subject: [PATCH 224/909] mmc: tmio: Add adjust HS400 offset by manual
 calibration mode

commit a27609e63e9c4915706022b367d1d005833fe547 from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

Since Gen3 SDHI has a internal DS signal AC-spec violation in HS400 mode,
CRC-error may occur in read command. It is only HS400 mode.
This phoenomenon occurs at low/High temperature.
(R-Car Gen3 HW restriction No.109)
To fix this, after completion of HS400 tuning, enable manual calibration.

[Flow of Manual Calibration mode]
1) Complete tuning in HS400 mode.
2) Switch card to HS400
3) Set HS400 timing (SDHI transitions to HS400)
4) Send command (CMD13)
5) Enable manual calibration

Before enabling manual calibration mode, CMD13 command must be issued.
In card initialization processing, CMD13 is executed at the end of
select HS400.
So, when CMD13 request completes, enables manual mode.

Signed-off-by: Takeshi Saito <takeshi.saito.xv@renesas.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/mmc/host/tmio_mmc.h      | 9 +++++++++
 drivers/mmc/host/tmio_mmc_core.c | 5 +++++
 2 files changed, 14 insertions(+)

diff --git a/drivers/mmc/host/tmio_mmc.h b/drivers/mmc/host/tmio_mmc.h
index 9a119e09b6dc..29da507e9360 100644
--- a/drivers/mmc/host/tmio_mmc.h
+++ b/drivers/mmc/host/tmio_mmc.h
@@ -120,6 +120,11 @@
 /* Check LSI revisions and set specific quirk value */
 #define DTRAEND1_SET_BIT17	BIT(0)
 #define HS400_USE_4TAP		BIT(1)
+#define FORCE_HS200		BIT(2)
+#define HS400_USE_MANUAL_CALIB	BIT(3)
+/* bit[31:16] reserved for HS400 manual calibration */
+#define HS400_CALIB_MASK	GENMASK_ULL(23, 16)
+#define HS400_OFFSET_MASK	GENMASK_ULL(31, 24)
 
 struct tmio_mmc_data;
 struct tmio_mmc_host;
@@ -221,9 +226,13 @@ struct tmio_mmc_host {
 
 	void (*disable_scc)(struct mmc_host *mmc);
 	void (*prepare_hs400_tuning)(struct mmc_host *mmc, struct mmc_ios *ios);
+	void (*adjust_hs400_mode_enable)(struct mmc_host *mmc);
+	void (*adjust_hs400_mode_disable)(struct mmc_host *mmc);
 	void (*reset_hs400_mode)(struct mmc_host *mmc);
 	/* HS400 mode uses 4TAP */
 	bool			hs400_use_4tap;
+	/* Manual caribration for HS400 mode */
+	bool			needs_adjust_hs400;
 
 	/* Sampling data comparison: 1 for match. 0 for mismatch */
 	DECLARE_BITMAP(smpcmp, BITS_PER_BYTE * sizeof(long));
diff --git a/drivers/mmc/host/tmio_mmc_core.c b/drivers/mmc/host/tmio_mmc_core.c
index aebb96944a62..89f8d28ec11b 100644
--- a/drivers/mmc/host/tmio_mmc_core.c
+++ b/drivers/mmc/host/tmio_mmc_core.c
@@ -1057,6 +1057,11 @@ static void tmio_mmc_finish_request(struct tmio_mmc_host *host)
 		return;
 	}
 
+	/* Enabled adjust HS400 mode after CMD13 */
+	if (host->adjust_hs400_mode_enable && host->needs_adjust_hs400 &&
+	    mrq->cmd->opcode == MMC_SEND_STATUS)
+		host->adjust_hs400_mode_enable(host->mmc);
+
 	mmc_request_done(host->mmc, mrq);
 }
 
-- 
2.17.1

