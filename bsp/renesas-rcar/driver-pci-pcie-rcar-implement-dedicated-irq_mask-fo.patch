From d813b523a85927e74c880e3b0b36550119cf1a68 Mon Sep 17 00:00:00 2001
From: MengLi <meng.li@windriver.com>
Date: Thu, 11 Jul 2019 12:52:50 +0800
Subject: [PATCH 909/909] driver: pci: pcie-rcar: implement dedicated
 irq_mask() for renesas-rcar platform

when initialize pcie module, rcar_pcie_enable_msi () call
irq_create_mapping() to pre-allocates INT_PCI_MSI_NR(32) irq_desc
instance one time. When register a pcie device, call rcar_msi_setup_irq()
to assign a pre-allocates irq_desc instance for current msi interrupt
and initialize irq_desc.irq_data.msi_desc with current msi_desc
instance. When run kdump, function machine_kexec_mask_interrupts()
will iterate all irq_desc instances and call irq_mask() of
irq_desc.irq_data.chip with parameter irq_desc.irq_data.
When call irq_mask() of pcie module, irq_desc.irq_data.msi_desc
will be used to mask msi interrupt. Because not all the 32
pre-allocates irq_desc is used by msi interrupt,
irq_desc.irq_data.msi_desc is null in some irq_desc instances.
So, causing a kernel crash when call msi_set_mask_bit() function.
Detail crash info as below:

Unable to handle kernel NULL pointer dereference at virtual address 000000000000003c
Mem abort info:
  ESR = 0x96000004
  Exception class = DABT (current EL), IL = 32 bits
  SET = 0, FnV = 0
  EA = 0, S1PTW = 0
Data abort info:
  ISV = 0, ISS = 0x00000004
  CM = 0, WnR = 0
user pgtable: 4k pages, 48-bit VAs, pgdp = 00000000f13dcb05
[000000000000003c] pgd=0000000000000000

Therefore, implement a dedicated irq_mask() function, add a judgement
for msi_desc pointer.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/pci/controller/pcie-rcar.c | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/drivers/pci/controller/pcie-rcar.c b/drivers/pci/controller/pcie-rcar.c
index a1186a344909..764a0fdee12e 100644
--- a/drivers/pci/controller/pcie-rcar.c
+++ b/drivers/pci/controller/pcie-rcar.c
@@ -921,11 +921,21 @@ static void rcar_msi_teardown_irq(struct msi_controller *chip, unsigned int irq)
 	rcar_msi_free(msi, d->hwirq);
 }
 
+static void rcar_msi_mask_irq(struct irq_data *data)
+{
+	struct msi_desc *desc = irq_data_get_msi_desc(data);
+
+	if (!desc)
+		return;
+
+	pci_msi_mask_irq(data);
+}
+
 static struct irq_chip rcar_msi_irq_chip = {
 	.name = "R-Car PCIe MSI",
 	.irq_enable = pci_msi_unmask_irq,
 	.irq_disable = pci_msi_mask_irq,
-	.irq_mask = pci_msi_mask_irq,
+	.irq_mask = rcar_msi_mask_irq,
 	.irq_unmask = pci_msi_unmask_irq,
 };
 
-- 
2.17.1

