From e82af50c86deba34503857e96941496862d342be Mon Sep 17 00:00:00 2001
From: Koji Matsuoka <koji.matsuoka.xm@renesas.com>
Date: Thu, 23 Aug 2018 16:45:14 +0900
Subject: [PATCH 286/909] v4l: vsp1: Add underrun debug messege option

commit 12ea79975a10fa1f45b6809e2b5e612cf4f409d0 from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git

This patch adds debug code.

Signed-off-by: Koji Matsuoka <koji.matsuoka.xm@renesas.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/media/platform/Kconfig         |  9 ++++++
 drivers/media/platform/vsp1/vsp1_drv.c | 43 ++++++++++++++++++++++++++
 2 files changed, 52 insertions(+)

diff --git a/drivers/media/platform/Kconfig b/drivers/media/platform/Kconfig
index 1d62881da227..73890515bd58 100644
--- a/drivers/media/platform/Kconfig
+++ b/drivers/media/platform/Kconfig
@@ -433,6 +433,15 @@ config VIDEO_RENESAS_VSP1
 	  To compile this driver as a module, choose M here: the module
 	  will be called vsp1.
 
+config VIDEO_RENESAS_DEBUG
+	bool "Renesas VSP1 underrun debug messages"
+	depends on VIDEO_RENESAS_VSP1
+	---help---
+	  Enable debug underrun messages on Renesas VSP1 Video Processing
+	  Engine driver.
+	  If you set to enable, When an underrun occurred, a debug underrun
+	  message is output.
+
 config VIDEO_RENESAS_VSP_ALPHA_BIT_ARGB1555
 	int "Renesas VSP alpha bit function of ARGB1555"
 	depends on VIDEO_RENESAS_VSP1
diff --git a/drivers/media/platform/vsp1/vsp1_drv.c b/drivers/media/platform/vsp1/vsp1_drv.c
index a76143f34fba..e30ef84c5cab 100644
--- a/drivers/media/platform/vsp1/vsp1_drv.c
+++ b/drivers/media/platform/vsp1/vsp1_drv.c
@@ -7,6 +7,10 @@
  * Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
  */
 
+#ifdef CONFIG_VIDEO_RENESAS_DEBUG
+#define DEBUG
+#endif
+
 #include <linux/clk.h>
 #include <linux/delay.h>
 #include <linux/device.h>
@@ -39,6 +43,38 @@
 #include "vsp1_uif.h"
 #include "vsp1_video.h"
 
+#define VSP1_UT_IRQ	0x01
+
+static unsigned int vsp1_debug;	/* 1 to enable debug output */
+module_param_named(debug, vsp1_debug, int, 0600);
+static int underrun_vspd[4];
+module_param_array(underrun_vspd, int, NULL, 0600);
+
+#ifdef CONFIG_VIDEO_RENESAS_DEBUG
+#define VSP1_IRQ_DEBUG(fmt, args...)					\
+	do {								\
+		if (unlikely(vsp1_debug & VSP1_UT_IRQ))			\
+			vsp1_ut_debug_printk(__func__, fmt, ##args);	\
+	} while (0)
+
+static void vsp1_ut_debug_printk(const char *function_name,
+				 const char *format, ...)
+{
+	struct va_format vaf;
+	va_list args;
+
+	va_start(args, format);
+	vaf.fmt = format;
+	vaf.va = &args;
+
+	pr_debug("[vsp1 :%s] %pV", function_name, &vaf);
+
+	va_end(args);
+}
+#else
+#define VSP1_IRQ_DEBUG(fmt, args...)
+#endif
+
 static void __iomem *fcpv_reg[4];
 static const unsigned int fcpvd_offset[] = {
 	FCPVD0_REG, FCPVD1_REG, FCPVD2_REG, FCPVD3_REG
@@ -138,6 +174,13 @@ static irqreturn_t vsp1_irq_handler(int irq, void *data)
 		if (status & VI6_WFP_IRQ_STA_UND)
 			underrun = true;
 
+		if (vsp1_debug && underrun) {
+			VSP1_IRQ_DEBUG(
+			   "Underrun occurred num[%d] at VSPD (%s) LIF%d\n",
+			   ++underrun_vspd[vsp1->index],
+			   dev_name(vsp1->dev), i);
+		}
+
 		if (status & VI6_WFP_IRQ_STA_DFE) {
 			vsp1_pipeline_frame_end(wpf->entity.pipe);
 			ret = IRQ_HANDLED;
-- 
2.17.1

