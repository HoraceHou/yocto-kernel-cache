From 4499784bd69cfca91460810006bcb3012a13b253 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Tue, 8 Oct 2019 13:40:19 +0800
Subject: [PATCH] sound: soc: update card instance in multiple sound card
 system

When build this BSP with kts layer, configure CONFIG_LOCKDEP is
enabled, it cause below warning tracl during system boots up.
Call trace:
dapm_assert_locked.isra.10+0x4c/0x58
dapm_mark_dirty.isra.12+0x24/0x70
snd_soc_dapm_add_path+0x158/0x438
snd_soc_dapm_connect_dai_link_widgets+0xa0/0xf8
snd_soc_register_card+0x810/0xd00
devm_snd_soc_register_card+0x4c/0xa0
asoc_graph_card_probe+0x374/0x450
platform_drv_probe+0x58/0xa8
driver_probe_device+0x210/0x2f8
__device_attach_driver+0xc0/0xf0
bus_for_each_drv+0x8c/0xd8
__device_attach+0xdc/0x138
device_initial_probe+0x24/0x30
bus_probe_device+0xa4/0xb0
deferred_probe_work_func+0xa8/0x150
process_one_work+0x2a0/0x788
worker_thread+0x240/0x440
kthread+0x134/0x138
ret_from_fork+0x10/0x1c
Because the mutex variable(dapm_mutex) is not in correct
status. This issue is introduced by below sdk kernel pacth.
commit e27c2e3bb765("ASoC: Modify check condition of
multiple bindings of components"), it is from repo
https://github.com/CogentEmbedded/meta-rcar.git
After applying above patch, there will be four sound cards
(pcm3168a, ak4613, radio, wl18xx)existing in system at
the same time.
When kernel boots up, the first registered sound card instance
is set to the card variable of struct snd_soc_dapm_context.
So, when check the mutex status of other three sound cards, the
mutex of the first registered sound card is used, they are not match,
and there is a warning trace outputted.
Therefore, it is need to update sound card instance before lockdep
checking action.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 sound/soc/soc-core.c |  2 ++
 sound/soc/soc-dapm.c | 19 +++++++++++++++++++
 2 files changed, 21 insertions(+)

diff --git a/sound/soc/soc-core.c b/sound/soc/soc-core.c
index d39c2d3c4483..eb069d77005a 100644
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@ -1237,6 +1237,8 @@ static int soc_probe_component(struct snd_soc_card *card,
 				card->name, component->card->name);
 			return -ENODEV;
 		}
+		dapm->card = card;
+
 		return 0;
 	}
 
diff --git a/sound/soc/soc-dapm.c b/sound/soc/soc-dapm.c
index e118f1049fcf..8fa307adf586 100644
--- a/sound/soc/soc-dapm.c
+++ b/sound/soc/soc-dapm.c
@@ -4265,6 +4265,25 @@ void snd_soc_dapm_stream_event(struct snd_soc_pcm_runtime *rtd, int stream,
 			      int event)
 {
 	struct snd_soc_card *card = rtd->card;
+	int i = 0;
+
+	if (stream == SNDRV_PCM_STREAM_PLAYBACK) {
+		if (rtd->cpu_dai->playback_widget)
+			rtd->cpu_dai->playback_widget->dapm->card = card;
+	} else {
+		if (rtd->cpu_dai->capture_widget)
+			rtd->cpu_dai->capture_widget->dapm->card = card;
+	}
+
+	for (i = 0; i < rtd->num_codecs; i++) {
+		if (stream == SNDRV_PCM_STREAM_PLAYBACK) {
+			if (rtd->codec_dais[i]->playback_widget)
+				rtd->codec_dais[i]->playback_widget->dapm->card = card;
+		} else {
+			if (rtd->codec_dais[i]->capture_widget)
+				rtd->codec_dais[i]->capture_widget->dapm->card = card;
+		}
+	}
 
 	mutex_lock_nested(&card->dapm_mutex, SND_SOC_DAPM_CLASS_RUNTIME);
 	soc_dapm_stream_event(rtd, stream, event);
-- 
2.17.1

