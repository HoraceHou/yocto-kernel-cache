From 380b11f70316814fd3bb6c8ec4947d5718be2190 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Wed, 31 May 2017 10:56:33 -0500
Subject: [PATCH 096/205] remoteproc/pruss: add instance id to each PRUSS data

This commit comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

The PRUSS driver provided a struct pruss handle to client drivers
using the pruss_get() API for them to operate on a PRUSS instance.
The PRU client drivers may also want to know the exact PRUSS instance
id so that they can program/configure different PRUSS instances
differently (eg: running a Dual-EMAC PRU Ethernet usecase on one
instance, and running a PRU Ethernet Switch usecase on the other).
Add an instance id to each of the PRUSS so that the PRUSS API can
be enhanced to provide this instance id to PRU client drivers. The
values match the terminology used in each of the SoC's Technical
Reference Manuals.

Signed-off-by: Suman Anna <s-anna@ti.com>
(cherry picked from commit 8ae1b6af6a7abbe7b169dce7fc2af80f6ca4b2fb)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/remoteproc/pruss.c |   10 ++++++++++
 drivers/remoteproc/pruss.h |    2 ++
 2 files changed, 12 insertions(+)

diff --git a/drivers/remoteproc/pruss.c b/drivers/remoteproc/pruss.c
index b912409..5d273d4 100644
--- a/drivers/remoteproc/pruss.c
+++ b/drivers/remoteproc/pruss.c
@@ -27,10 +27,12 @@
 /**
  * struct pruss_private_data - PRUSS driver private data
  * @aux_data: auxiliary data used for creating the child nodes
+ * @pruss_id: PRUSS instance number
  * @has_no_sharedram: flag to indicate the absence of PRUSS Shared Data RAM
  */
 struct pruss_private_data {
 	struct of_dev_auxdata *aux_data;
+	u32 pruss_id;
 	bool has_no_sharedram;
 };
 
@@ -465,6 +467,7 @@ static int pruss_probe(struct platform_device *pdev)
 		return -ENOMEM;
 
 	pruss->dev = dev;
+	pruss->id = data->pruss_id;
 	mutex_init(&pruss->lock);
 	mutex_init(&pruss->cfg_lock);
 
@@ -580,31 +583,38 @@ static int pruss_remove(struct platform_device *pdev)
 /* instance-specific driver private data */
 static struct pruss_private_data am335x_pruss_priv_data = {
 	.aux_data = am335x_pruss_rproc_auxdata_lookup,
+	.pruss_id = 0,
 };
 
 static struct pruss_private_data am437x_pruss1_priv_data = {
 	.aux_data = am437x_pruss1_rproc_auxdata_lookup,
+	.pruss_id = 1,
 };
 
 static struct pruss_private_data am437x_pruss0_priv_data = {
 	.aux_data = am437x_pruss0_rproc_auxdata_lookup,
+	.pruss_id = 0,
 	.has_no_sharedram = true,
 };
 
 static struct pruss_private_data am57xx_pruss1_priv_data = {
 	.aux_data = am57xx_pruss1_rproc_auxdata_lookup,
+	.pruss_id = 1,
 };
 
 static struct pruss_private_data am57xx_pruss2_priv_data = {
 	.aux_data = am57xx_pruss2_rproc_auxdata_lookup,
+	.pruss_id = 2,
 };
 
 static struct pruss_private_data k2g_pruss0_priv_data = {
 	.aux_data = k2g_pruss0_rproc_auxdata_lookup,
+	.pruss_id = 0,
 };
 
 static struct pruss_private_data k2g_pruss1_priv_data = {
 	.aux_data = k2g_pruss1_rproc_auxdata_lookup,
+	.pruss_id = 1,
 };
 
 static struct pruss_match_private_data am335x_match_data[] = {
diff --git a/drivers/remoteproc/pruss.h b/drivers/remoteproc/pruss.h
index af7e701..1e33a27 100644
--- a/drivers/remoteproc/pruss.h
+++ b/drivers/remoteproc/pruss.h
@@ -139,6 +139,7 @@ struct pruss_intc_config {
  * @mem_regions: data for each of the PRUSS memory regions
  * @mem_in_use: to indicate if memory resource is in use
  * @host_mask: indicate which HOST IRQs are enabled
+ * @id: pruss instance id
  * @pru_running: flag to indicate if PRU is running
  * @pru_in_use: flag to indicate if PRU is used
  * @lock: mutex to serialize access to resources
@@ -150,6 +151,7 @@ struct pruss {
 	struct pruss_mem_region mem_regions[PRUSS_MEM_MAX];
 	struct pruss_mem_region *mem_in_use[PRUSS_MEM_MAX];
 	u32 host_mask;
+	u32 id;
 	bool pru_running[PRUSS_NUM_PRUS];
 	struct rproc *pru_in_use[PRUSS_NUM_PRUS];
 	struct mutex lock; /* PRU resource lock */
-- 
1.7.9.5

