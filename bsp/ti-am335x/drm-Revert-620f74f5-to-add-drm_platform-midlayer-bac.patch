From 9debf1678504db6b8bcf9590cd53f1073ec3a3a2 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Tue, 10 Jul 2018 15:53:05 +0800
Subject: [PATCH 160/205] drm: Revert 620f74f5 to add drm_platform midlayer
 back since sgx drm use it

This patch reverts 620f74f5 to cater for sgx drm drivers.

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 Documentation/gpu/drm-internals.rst |    3 ++
 drivers/gpu/drm/Makefile            |    2 +-
 drivers/gpu/drm/drm_platform.c      |   87 +++++++++++++++++++++++++++++++++++
 include/drm/drmP.h                  |    3 ++
 4 files changed, 94 insertions(+), 1 deletion(-)
 create mode 100644 drivers/gpu/drm/drm_platform.c

diff --git a/Documentation/gpu/drm-internals.rst b/Documentation/gpu/drm-internals.rst
index babfb61..e4cec53 100644
--- a/Documentation/gpu/drm-internals.rst
+++ b/Documentation/gpu/drm-internals.rst
@@ -240,6 +240,9 @@ drivers.
 .. kernel-doc:: drivers/gpu/drm/drm_pci.c
    :export:
 
+.. kernel-doc:: drivers/gpu/drm/drm_platform.c
+   :export:
+
 Open/Close, File Operations and IOCTLs
 ======================================
 
diff --git a/drivers/gpu/drm/Makefile b/drivers/gpu/drm/Makefile
index 59f0f9b..90e202f 100644
--- a/drivers/gpu/drm/Makefile
+++ b/drivers/gpu/drm/Makefile
@@ -7,7 +7,7 @@ drm-y       :=	drm_auth.o drm_bufs.o drm_cache.o \
 		drm_file.o drm_gem.o drm_ioctl.o drm_irq.o \
 		drm_lock.o drm_memory.o drm_drv.o \
 		drm_scatter.o drm_pci.o \
-		drm_sysfs.o drm_hashtab.o drm_mm.o \
+		drm_platform.o drm_sysfs.o drm_hashtab.o drm_mm.o \
 		drm_crtc.o drm_fourcc.o drm_modes.o drm_edid.o \
 		drm_info.o drm_encoder_slave.o \
 		drm_trace_points.o drm_global.o drm_prime.o \
diff --git a/drivers/gpu/drm/drm_platform.c b/drivers/gpu/drm/drm_platform.c
new file mode 100644
index 0000000..56d2f93
--- /dev/null
+++ b/drivers/gpu/drm/drm_platform.c
@@ -0,0 +1,87 @@
+/*
+ * Derived from drm_pci.c
+ *
+ * Copyright 2003 Jos√© Fonseca.
+ * Copyright 2003 Leif Delgass.
+ * Copyright (c) 2009, Code Aurora Forum.
+ * All Rights Reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
+ * AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <linux/export.h>
+#include <drm/drmP.h>
+
+/*
+ * Register.
+ *
+ * \param platdev - Platform device struture
+ * \return zero on success or a negative number on failure.
+ *
+ * Attempt to gets inter module "drm" information. If we are first
+ * then register the character device and inter module information.
+ * Try and register, if we fail to register, backout previous work.
+ */
+
+static int drm_get_platform_dev(struct platform_device *platdev,
+				struct drm_driver *driver)
+{
+	struct drm_device *dev;
+	int ret;
+
+	DRM_DEBUG("\n");
+
+	dev = drm_dev_alloc(driver, &platdev->dev);
+	if (IS_ERR(dev))
+		return PTR_ERR(dev);
+
+	dev->platformdev = platdev;
+
+	ret = drm_dev_register(dev, 0);
+	if (ret)
+		goto err_free;
+
+	return 0;
+
+err_free:
+	drm_dev_unref(dev);
+	return ret;
+}
+
+/**
+ * drm_platform_init - Register a platform device with the DRM subsystem
+ * @driver: DRM device driver
+ * @platform_device: platform device to register
+ *
+ * Registers the specified DRM device driver and platform device with the DRM
+ * subsystem, initializing a drm_device structure and calling the driver's
+ * .load() function.
+ *
+ * NOTE: This function is deprecated, please use drm_dev_alloc() and
+ * drm_dev_register() instead and remove your &drm_driver.load callback.
+ *
+ * Return: 0 on success or a negative error code on failure.
+ */
+int drm_platform_init(struct drm_driver *driver, struct platform_device *platform_device)
+{
+	DRM_DEBUG("\n");
+
+	return drm_get_platform_dev(platform_device, driver);
+}
+EXPORT_SYMBOL(drm_platform_init);
diff --git a/include/drm/drmP.h b/include/drm/drmP.h
index e1daa4f..fcdee70 100644
--- a/include/drm/drmP.h
+++ b/include/drm/drmP.h
@@ -515,6 +515,9 @@ static inline int drm_device_is_unplugged(struct drm_device *dev)
 
 /*@}*/
 
+/* platform section */
+extern int drm_platform_init(struct drm_driver *driver, struct platform_device *platform_device);
+
 /* returns true if currently okay to sleep */
 static __inline__ bool drm_can_sleep(void)
 {
-- 
1.7.9.5

