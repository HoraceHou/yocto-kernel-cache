From f04a0a60256f1c709ddebe07eabcdd2524060316 Mon Sep 17 00:00:00 2001
From: Dave Gerlach <d-gerlach@ti.com>
Date: Wed, 8 Feb 2017 18:19:55 -0600
Subject: [PATCH 058/205] soc: ti: wkup_m3_ipc: Fix enable_late_halt sysfs
 entry

This commit comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

In order to fix a race condition that was possible after the call to
rproc_boot the population of the static m3_ipc_state pointer was moved
until after the first interrupt was received from the wkup_m3. However,
the sysfs entry enable_late_halt was still being created during probe
with this static variable, leading to a NULL pointer being used for the
option variable which caused a kernel dump if the sysfs entry was
accessed or written to.

Fix this by making wkup_m3_ipc_dbg_init use the m3_ipc reference and not
calling until the wkup_m3 is actually available.

Fixes: 6832ad8c9c52 ("soc: ti: wkup_m3_ipc: Fix race condition with rproc_boot")
Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
(cherry picked from commit f5714f575f3b452afe353e59b01b5651efb0d39b)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/soc/ti/wkup_m3_ipc.c |    7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/drivers/soc/ti/wkup_m3_ipc.c b/drivers/soc/ti/wkup_m3_ipc.c
index 9d1b85b..b07103e 100644
--- a/drivers/soc/ti/wkup_m3_ipc.c
+++ b/drivers/soc/ti/wkup_m3_ipc.c
@@ -205,7 +205,7 @@ static int option_set(void *data, u64 val)
 DEFINE_SIMPLE_ATTRIBUTE(wkup_m3_ipc_option_fops, option_get, option_set,
 			"%llu\n");
 
-static int wkup_m3_ipc_dbg_init(void)
+static int wkup_m3_ipc_dbg_init(struct wkup_m3_ipc *m3_ipc)
 {
 	struct dentry *d;
 
@@ -214,7 +214,7 @@ static int wkup_m3_ipc_dbg_init(void)
 		return -EINVAL;
 
 	(void)debugfs_create_file("enable_late_halt", 0644, d,
-				  &m3_ipc_state->halt,
+				  &m3_ipc->halt,
 				  &wkup_m3_ipc_option_fops);
 
 	return 0;
@@ -286,6 +286,7 @@ static irqreturn_t wkup_m3_txev_handler(int irq, void *ipc_data)
 
 		m3_ipc->state = M3_STATE_INITED;
 		wkup_m3_init_scale_data(m3_ipc, dev);
+		wkup_m3_ipc_dbg_init(m3_ipc);
 		complete(&m3_ipc->sync_complete);
 		break;
 	case M3_STATE_MSG_FOR_RESET:
@@ -697,8 +698,6 @@ static int wkup_m3_ipc_probe(struct platform_device *pdev)
 		goto err_put_rproc;
 	}
 
-	wkup_m3_ipc_dbg_init();
-
 	return 0;
 
 err_put_rproc:
-- 
1.7.9.5

