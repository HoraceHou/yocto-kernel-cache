From b6a72209faf1b11fd779b83b009538cbd0fecf4d Mon Sep 17 00:00:00 2001
From: Liu Ying <victor.liu@nxp.com>
Date: Fri, 7 Jul 2017 16:39:59 +0800
Subject: [PATCH 2081/5242] MLK-15748 drm/imx: dpu: plane: Correct the way we
 do framebuffer cropping

commit  2154bc698ffc0f0de8fe6c97883258d3cded782f from
https://source.codeaurora.org/external/imx/linux-imx.git

We should not use fetchdecode clip feature to do framebuffer cropping
since the hardware hehavior differs from what we expected.
According to the spec, it seems that the clip feature will keep the
source frame resolution and fill pixels in the clipped area.  So, let's
take the usual way to do the cropping and just simply tweak the buffer
start address.

Reported-by: Jared Hu <jared.hu@nxp.com>
Tested-by: Jared Hu <jared.hu@nxp.com>
Signed-off-by: Liu Ying <victor.liu@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/gpu/drm/imx/dpu/dpu-plane.c   |   35 ++++++++++++++++++++-------------
 drivers/gpu/imx/dpu/dpu-fetchdecode.c |    2 +-
 2 files changed, 22 insertions(+), 15 deletions(-)

diff --git a/drivers/gpu/drm/imx/dpu/dpu-plane.c b/drivers/gpu/drm/imx/dpu/dpu-plane.c
index 0db05f0..ed968f7 100644
--- a/drivers/gpu/drm/imx/dpu/dpu-plane.c
+++ b/drivers/gpu/drm/imx/dpu/dpu-plane.c
@@ -110,13 +110,27 @@ static void dpu_drm_atomic_plane_destroy_state(struct drm_plane *plane,
 	.atomic_destroy_state	= dpu_drm_atomic_plane_destroy_state,
 };
 
+static inline dma_addr_t
+drm_plane_state_to_baseaddr(struct drm_plane_state *state)
+{
+	struct drm_framebuffer *fb = state->fb;
+	struct drm_gem_cma_object *cma_obj;
+
+	cma_obj = drm_fb_cma_get_gem_obj(fb, 0);
+	BUG_ON(!cma_obj);
+
+	return cma_obj->paddr + fb->offsets[0] +
+	       fb->pitches[0] * (state->src_y >> 16) +
+	       fb->format->cpp[0] * (state->src_x >> 16);
+}
+
 static int dpu_plane_atomic_check(struct drm_plane *plane,
 				  struct drm_plane_state *state)
 {
 	struct dpu_plane_state *dpstate = to_dpu_plane_state(state);
 	struct drm_crtc_state *crtc_state;
 	struct drm_framebuffer *fb = state->fb;
-	struct drm_gem_cma_object *cma_obj;
+	dma_addr_t baseaddr;
 	int bpp;
 
 	/* pure software check */
@@ -164,15 +178,15 @@ static int dpu_plane_atomic_check(struct drm_plane *plane,
 	}
 
 	/* base address alignment check */
-	cma_obj = drm_fb_cma_get_gem_obj(fb, 0);
+	baseaddr = drm_plane_state_to_baseaddr(state);
 	bpp = drm_format_plane_cpp(fb->format->format, 0) * 8;
 	switch (bpp) {
 	case 32:
-		if (cma_obj->paddr & 0x3)
+		if (baseaddr & 0x3)
 			return -EINVAL;
 		break;
 	case 16:
-		if (cma_obj->paddr & 0x1)
+		if (baseaddr & 0x1)
 			return -EINVAL;
 		break;
 	}
@@ -195,9 +209,8 @@ static void dpu_plane_atomic_update(struct drm_plane *plane,
 	struct dpu_layerblend *lb;
 	struct dpu_constframe *cf;
 	struct dpu_extdst *ed;
-	struct drm_gem_cma_object *cma_obj;
 	struct device *dev = plane->dev->dev;
-	unsigned int src_x, src_y, src_w, src_h;
+	unsigned int src_w, src_h;
 	int bpp, fd_id, lb_id;
 
 	/*
@@ -218,10 +231,6 @@ static void dpu_plane_atomic_update(struct drm_plane *plane,
 	fd = res->fd[fd_id];
 	lb = res->lb[lb_id];
 
-	cma_obj = drm_fb_cma_get_gem_obj(fb, 0);
-
-	src_x = state->src_x >> 16;
-	src_y = state->src_y >> 16;
 	src_w = state->src_w >> 16;
 	src_h = state->src_h >> 16;
 
@@ -231,11 +240,9 @@ static void dpu_plane_atomic_update(struct drm_plane *plane,
 	fetchdecode_source_stride(fd, fb->pitches[0]);
 	fetchdecode_src_buf_dimensions(fd, src_w, src_h);
 	fetchdecode_set_fmt(fd, fb->format->format);
-	fetchdecode_clipoffset(fd, src_x, src_y);
-	fetchdecode_clipdimensions(fd, src_w, src_h);
 	fetchdecode_layerproperty(fd, true);
-	fetchdecode_framedimensions(fd, state->crtc_w, state->crtc_h);
-	fetchdecode_baseaddress(fd, cma_obj->paddr);
+	fetchdecode_framedimensions(fd, src_w, src_h);
+	fetchdecode_baseaddress(fd, drm_plane_state_to_baseaddr(state));
 
 	layerblend_pixengcfg_dynamic_prim_sel(lb, dpstate->stage);
 	layerblend_pixengcfg_dynamic_sec_sel(lb, dpstate->source);
diff --git a/drivers/gpu/imx/dpu/dpu-fetchdecode.c b/drivers/gpu/imx/dpu/dpu-fetchdecode.c
index d0eaf66..39f9cba 100644
--- a/drivers/gpu/imx/dpu/dpu-fetchdecode.c
+++ b/drivers/gpu/imx/dpu/dpu-fetchdecode.c
@@ -256,7 +256,7 @@ void fetchdecode_layerproperty(struct dpu_fetchdecode *fd, bool enable)
 	u32 val;
 
 	if (enable)
-		val = SOURCEBUFFERENABLE | CLIPWINDOWENABLE;
+		val = SOURCEBUFFERENABLE;
 	else
 		val = 0;
 
-- 
1.7.9.5

