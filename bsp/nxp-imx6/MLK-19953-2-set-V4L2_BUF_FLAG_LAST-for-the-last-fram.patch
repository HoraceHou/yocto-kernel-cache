From a279435e15a4336bb7bcb21356f4a275c465efce Mon Sep 17 00:00:00 2001
From: ming_qian <ming.qian@nxp.com>
Date: Mon, 22 Oct 2018 17:24:49 +0800
Subject: [PATCH 4912/5242] MLK-19953-2:set V4L2_BUF_FLAG_LAST for the last
 frame

commit  b316abf470ae23ef26de5aeb307b5d82fb9d960d from
https://source.codeaurora.org/external/imx/linux-imx.git

Signed-off-by: ming_qian <ming.qian@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c |   88 +++++++++++++++++----------
 drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.h |    5 ++
 2 files changed, 61 insertions(+), 32 deletions(-)

diff --git a/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c b/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c
index ba9bc4e..ca97a85 100644
--- a/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c
+++ b/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c
@@ -858,9 +858,42 @@ static int v4l2_ioctl_qbuf(struct file *file,
 	else
 		wake_up_interruptible(&ctx->buffer_wq_input);
 
+	if (!ret && buf->type == V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE)
+		ctx->statistic.yuv_count++;
+
 	return ret;
 }
 
+static void notify_eos(struct vpu_ctx *ctx)
+{
+	const struct v4l2_event ev = {
+		.type = V4L2_EVENT_EOS
+	};
+
+	if (!test_and_set_bit(VPU_ENC_STATUS_EOS_SEND, &ctx->status) &&
+		!test_bit(VPU_ENC_STATUS_CLOSED, &ctx->status))
+		v4l2_event_queue_fh(&ctx->fh, &ev);
+}
+
+static int send_eos(struct vpu_ctx *ctx)
+{
+	if (!ctx)
+		return -EINVAL;
+
+	if (!test_bit(VPU_ENC_STATUS_START_SEND, &ctx->status)) {
+		notify_eos(ctx);
+		return 0;
+	} else if (!test_and_set_bit(VPU_ENC_STATUS_STOP_SEND, &ctx->status)) {
+		vpu_dbg(LVL_ALL, "stop stream\n");
+		ctx->forceStop = true;
+		v4l2_vpu_send_cmd(ctx, GTB_ENC_CMD_STREAM_STOP, 0, NULL);
+		wake_up_interruptible(&ctx->buffer_wq_input);
+		wake_up_interruptible(&ctx->buffer_wq_output);
+	}
+
+	return 0;
+}
+
 static int v4l2_ioctl_dqbuf(struct file *file,
 		void *fh,
 		struct v4l2_buffer *buf
@@ -881,9 +914,16 @@ static int v4l2_ioctl_dqbuf(struct file *file,
 
 	ret = vb2_dqbuf(&q_data->vb2_q, buf, file->f_flags & O_NONBLOCK);
 
-	if (buf->type == V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE)
+	if (buf->type == V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) {
+		if (!ret)
+			ctx->statistic.h264_count++;
 		buf->flags = q_data->vb2_reqs[buf->index].buffer_flags;
 
+		if (test_bit(VPU_ENC_STATUS_STOP_DONE, &ctx->status) &&
+			list_empty(&q_data->vb2_q.done_list))
+			buf->flags |= V4L2_BUF_FLAG_LAST;
+	}
+
 	return ret;
 }
 
@@ -938,35 +978,6 @@ static int v4l2_ioctl_g_crop(struct file *file,
 	return 0;
 }
 
-static void notify_eos(struct vpu_ctx *ctx)
-{
-	const struct v4l2_event ev = {
-		.type = V4L2_EVENT_EOS
-	};
-
-	if (!test_bit(VPU_ENC_STATUS_CLOSED, &ctx->status))
-		v4l2_event_queue_fh(&ctx->fh, &ev);
-}
-
-static int send_eos(struct vpu_ctx *ctx)
-{
-	if (!ctx)
-		return -EINVAL;
-
-	if (!test_bit(VPU_ENC_STATUS_CONFIGURED, &ctx->status)) {
-		notify_eos(ctx);
-		return 0;
-	} else if (!test_and_set_bit(VPU_ENC_STATUS_STOP_SEND, &ctx->status)) {
-		vpu_dbg(LVL_ALL, "stop stream\n");
-		ctx->forceStop = true;
-		v4l2_vpu_send_cmd(ctx, GTB_ENC_CMD_STREAM_STOP, 0, NULL);
-		wake_up_interruptible(&ctx->buffer_wq_input);
-		wake_up_interruptible(&ctx->buffer_wq_output);
-	}
-
-	return 0;
-}
-
 static int response_stop_stream(struct vpu_ctx *ctx)
 {
 	struct queue_data *queue;
@@ -1033,6 +1044,13 @@ static int v4l2_ioctl_streamon(struct file *file,
 	ret = vb2_streamon(&q_data->vb2_q,
 			i);
 	ctx->forceStop = false;
+	if (i == V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE) {
+		clear_bit(VPU_ENC_STATUS_START_SEND, &ctx->status);
+		clear_bit(VPU_ENC_STATUS_START_DONE, &ctx->status);
+		clear_bit(VPU_ENC_STATUS_STOP_SEND, &ctx->status);
+		clear_bit(VPU_ENC_STATUS_STOP_DONE, &ctx->status);
+		clear_bit(VPU_ENC_STATUS_EOS_SEND, &ctx->status);
+	}
 	return ret;
 }
 
@@ -1256,8 +1274,6 @@ static void v4l2_transfer_buffer_to_firmware(struct queue_data *This,
 	if (!test_and_set_bit(VPU_ENC_STATUS_CONFIGURED, &ctx->status)) {
 		configure_codec(ctx);
 		dump_vb2_data(vb);
-		clear_bit(VPU_ENC_STATUS_STOP_SEND, &ctx->status);
-		clear_bit(VPU_ENC_STATUS_STOP_DONE, &ctx->status);
 	}
 	mutex_unlock(&ctx->instance_mutex);
 }
@@ -1891,11 +1907,13 @@ static void vpu_api_event_handler(struct vpu_ctx *ctx, u_int32 uStrIdx,
 
 	switch (uEvent) {
 	case VID_API_ENC_EVENT_START_DONE:
+		set_bit(VPU_ENC_STATUS_START_DONE, &ctx->status);
 		submit_input_and_encode(ctx);
 		break;
 	case VID_API_ENC_EVENT_MEM_REQUEST:
 		enc_mem_alloc(ctx, (MEDIAIP_ENC_MEM_REQ_DATA *)event_data);
 		v4l2_vpu_send_cmd(ctx, GTB_ENC_CMD_STREAM_START, 0, NULL);
+		set_bit(VPU_ENC_STATUS_START_SEND, &ctx->status);
 		break;
 	case VID_API_ENC_EVENT_PARA_UPD_DONE:
 		break;
@@ -2638,6 +2656,12 @@ static ssize_t show_instance_info(struct device *dev,
 			statistic->ts_event.tv_sec,
 			statistic->ts_event.tv_nsec / 1000);
 
+	num += snprintf(buf + num, PAGE_SIZE - num,
+			"dbuf input yuv count:    %ld\n", statistic->yuv_count);
+	num += snprintf(buf + num, PAGE_SIZE - num,
+			"dqbuf output h264 count: %ld\n",
+			statistic->h264_count);
+
 	return num;
 }
 
diff --git a/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.h b/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.h
index 4450a0a..8db160a 100644
--- a/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.h
+++ b/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.h
@@ -239,6 +239,9 @@ struct buffer_addr {
 
 enum {
 	VPU_ENC_STATUS_INITIALIZED,
+	VPU_ENC_STATUS_EOS_SEND = 22,
+	VPU_ENC_STATUS_START_SEND = 23,
+	VPU_ENC_STATUS_START_DONE = 24,
 	VPU_ENC_STATUS_STOP_REQ = 25,
 	VPU_ENC_STATUS_STOP_SEND = 26,
 	VPU_ENC_STATUS_STOP_DONE = 27,
@@ -255,6 +258,8 @@ struct vpu_statistic {
 	unsigned long current_event;
 	struct timespec ts_cmd;
 	struct timespec ts_event;
+	unsigned long yuv_count;
+	unsigned long h264_count;
 };
 
 struct vpu_ctx {
-- 
1.7.9.5

