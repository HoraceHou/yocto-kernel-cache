From b209903a7ad15f2f7e20da6659f2572974d994c7 Mon Sep 17 00:00:00 2001
From: Richard Zhu <hongxing.zhu@nxp.com>
Date: Tue, 1 Mar 2016 11:24:37 +0800
Subject: [PATCH 0969/5242] MLK-12481 pci: imx: turn off pcie clks when link
 down

commit  ee5ca70c4eb5b58aa80aad01de1fd6d1d13fede9 from
https://source.codeaurora.org/external/imx/linux-imx.git

In order to save power consumption, turn off pcie clks/regulators
if there is no pcie link at all.
Summit this patch, because of that MLK-12278
doesn't turn off the clks/regulators actually.

Signed-off-by: Richard Zhu <hongxing.zhu@nxp.com>

In 4.14 the part changing host_init to return int was already upstream.

Signed-off-by: Leonard Crestez <leonard.crestez@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/pci/controller/dwc/pci-imx6.c |   27 ++++++++++++++++-----------
 1 file changed, 16 insertions(+), 11 deletions(-)

diff --git a/drivers/pci/controller/dwc/pci-imx6.c b/drivers/pci/controller/dwc/pci-imx6.c
index c1746e8..7e7910a 100644
--- a/drivers/pci/controller/dwc/pci-imx6.c
+++ b/drivers/pci/controller/dwc/pci-imx6.c
@@ -591,6 +591,18 @@ static int imx6_pcie_wait_for_link(struct imx6_pcie *imx6_pcie)
 	dev_dbg(dev, "DEBUG_R0: 0x%08x, DEBUG_R1: 0x%08x\n",
 		dw_pcie_readl_dbi(pci, PCIE_PHY_DEBUG_R0),
 		dw_pcie_readl_dbi(pci, PCIE_PHY_DEBUG_R1));
+
+	if (!IS_ENABLED(CONFIG_PCI_IMX6_COMPLIANCE_TEST)) {
+		clk_disable_unprepare(imx6_pcie->pcie);
+		clk_disable_unprepare(imx6_pcie->pcie_bus);
+		clk_disable_unprepare(imx6_pcie->pcie_phy);
+		if (imx6_pcie->variant == IMX6SX)
+			clk_disable_unprepare(imx6_pcie->pcie_inbound_axi);
+		release_bus_freq(BUS_FREQ_HIGH);
+		if (imx6_pcie->pcie_phy_regulator != NULL)
+			regulator_disable(imx6_pcie->pcie_phy_regulator);
+	}
+
 	return -ETIMEDOUT;
 }
 
@@ -679,16 +691,6 @@ static int imx6_pcie_establish_link(struct imx6_pcie *imx6_pcie)
 		ret = imx6_pcie_wait_for_link(imx6_pcie);
 		if (ret) {
 			dev_err(dev, "Failed to bring link up!\n");
-			if (!IS_ENABLED(CONFIG_PCI_IMX6_COMPLIANCE_TEST)) {
-				clk_disable_unprepare(imx6_pcie->pcie);
-				clk_disable_unprepare(imx6_pcie->pcie_bus);
-				clk_disable_unprepare(imx6_pcie->pcie_phy);
-				if (is_imx6sx_pcie(imx6_pcie))
-					clk_disable_unprepare(imx6_pcie->pcie_inbound_axi);
-				release_bus_freq(BUS_FREQ_HIGH);
-				if (imx6_pcie->pcie_phy_regulator != NULL)
-					regulator_disable(imx6_pcie->pcie_phy_regulator);
-			}
 			goto err_reset_phy;
 		}
 	} else {
@@ -709,6 +711,7 @@ static int imx6_pcie_establish_link(struct imx6_pcie *imx6_pcie)
 
 static int imx6_pcie_host_init(struct pcie_port *pp)
 {
+	int ret;
 	struct dw_pcie *pci = to_dw_pcie_from_pp(pp);
 	struct imx6_pcie *imx6_pcie = to_imx6_pcie(pci);
 
@@ -720,7 +723,9 @@ static int imx6_pcie_host_init(struct pcie_port *pp)
 	imx6_pcie_init_phy(imx6_pcie);
 	imx6_pcie_deassert_core_reset(imx6_pcie);
 	dw_pcie_setup_rc(pp);
-	imx6_pcie_establish_link(imx6_pcie);
+	ret = imx6_pcie_establish_link(imx6_pcie);
+	if (ret < 0)
+		return ret;
 
 	if (IS_ENABLED(CONFIG_PCI_MSI))
 		dw_pcie_msi_init(pp);
-- 
1.7.9.5

