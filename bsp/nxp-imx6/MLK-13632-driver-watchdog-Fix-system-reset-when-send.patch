From 45b0cbf30ebed71c4757f6291c06d01fce6b1302 Mon Sep 17 00:00:00 2001
From: Bai Ping <ping.bai@nxp.com>
Date: Mon, 19 Dec 2016 18:11:07 +0800
Subject: [PATCH 1365/5242] MLK-13632 driver: watchdog: Fix system reset when
 sending wdog unlock sequence

commit  23e78bd234d92016572f22ee23470de9d5f7f495 from
https://source.codeaurora.org/external/imx/linux-imx.git

For i.MX7ULP wdog, when we want to unlock the wdog with 16bit unlock command,
the two unlock command sequence must be write to WDOG_CNT register within 16 bus
clocks, otherwise, system may be reset unexpected. As writel include memory barrier,
if we use writel to send the unlock command, it may take more time than 16 bus clock,
so we should use writel_relaxed to write the unlock command to the CNT register.

Signed-off-by: Bai Ping <ping.bai@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/watchdog/imx7ulp_wdt.c |   13 ++++---------
 1 file changed, 4 insertions(+), 9 deletions(-)

diff --git a/drivers/watchdog/imx7ulp_wdt.c b/drivers/watchdog/imx7ulp_wdt.c
index 845c900..b542688 100644
--- a/drivers/watchdog/imx7ulp_wdt.c
+++ b/drivers/watchdog/imx7ulp_wdt.c
@@ -146,15 +146,10 @@ static inline void imx7ulp_wdt_init(void __iomem *base, unsigned int timeout)
 
 	local_irq_disable();
 
-	/*
-	 * if the wdog is in unlocked status, the UNLOCK
-	 * sequence no need to be send.
-	 */
-	val = readl(base + WDOG_CS);
-	if (!(val & WDOG_CS_ULK)) {
-		writel(UNLOCK_SEQ0, base + WDOG_CNT);
-		writel(UNLOCK_SEQ1, base + WDOG_CNT);
-	}
+	/* unlock the wdog for reconfiguration */
+	writel_relaxed(UNLOCK_SEQ0, base + WDOG_CNT);
+	writel_relaxed(UNLOCK_SEQ1, base + WDOG_CNT);
+
 	/*set an initial timeout value in TOVAL */
 	writel(timeout, base + WDOG_TOVAL);
 	/* enable 32bit command sequence and reconfigure */
-- 
1.7.9.5

