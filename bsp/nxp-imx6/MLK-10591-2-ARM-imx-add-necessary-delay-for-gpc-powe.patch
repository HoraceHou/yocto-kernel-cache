From 03adbc1732ac408f6bbe75304b7db6146f012876 Mon Sep 17 00:00:00 2001
From: Leonard Crestez <leonard.crestez@nxp.com>
Date: Thu, 22 Feb 2018 18:19:00 +0200
Subject: [PATCH 0493/5242] MLK-10591-2 ARM: imx: add necessary delay for gpc
 power switch

commit  f18ff78013ecc7894e4dd69a7ed54c36531a8d9e from
https://source.codeaurora.org/external/imx/linux-imx.git

Per design team's requirement, when GPC switch power req is
assert and self-clear, need to add delay to make sure power
switch is actually up, the delay value can be got from below:

delay = 2us * 66MHz / IPG_RATE,

here we add 2us margin to make it more reliable, currently only
display mix and pu mix are a power switch.

Signed-off-by: Anson Huang <b20788@freescale.com>
Signed-off-by: Robin Gong <b38343@freescale.com>

For 4.14 applies to drivers/soc/imx/gpc.c instead.

Signed-off-by: Leonard Crestez <leonard.crestez@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/soc/imx/gpc.c |   21 ++++++++++++++++-----
 1 file changed, 16 insertions(+), 5 deletions(-)

diff --git a/drivers/soc/imx/gpc.c b/drivers/soc/imx/gpc.c
index bdf3982..6ce7364 100644
--- a/drivers/soc/imx/gpc.c
+++ b/drivers/soc/imx/gpc.c
@@ -53,10 +53,13 @@
 #define GPU_VPU_PDN_REQ		BIT(0)
 
 #define GPC_CLK_MAX		10
+#define DEFAULT_IPG_RATE		66000000
+#define GPC_PU_UP_DELAY_MARGIN		2
 
 #define PGC_DOMAIN_FLAG_NO_PD		BIT(0)
 
 static void __iomem *gpc_base;
+static struct clk *ipg;
 
 static inline bool cpu_is_imx6sx(void)
 {
@@ -183,6 +186,7 @@ static int imx6_pm_dispmix_on(struct generic_pm_domain *genpd)
 {
 	struct imx_pm_domain *pd = to_imx_pm_domain(genpd);
 	u32 val = readl_relaxed(gpc_base + GPC_CNTR);
+	u32 ipg_rate = clk_get_rate(ipg);
 	int i;
 
 	if ((cpu_is_imx6sl() &&
@@ -199,6 +203,10 @@ static int imx6_pm_dispmix_on(struct generic_pm_domain *genpd)
 
 		writel_relaxed(0x1, gpc_base + GPC_PGC_DISP_SR_OFFSET);
 
+		/* Wait power switch done */
+		udelay(2 * DEFAULT_IPG_RATE / ipg_rate +
+			GPC_PU_UP_DELAY_MARGIN);
+
 		/* Disable reset clocks for all devices in the disp domain */
 		for (i = 0; i < pd->num_clks; i++)
 			clk_disable_unprepare(pd->clk[i]);
@@ -474,7 +482,7 @@ static int imx_gpc_old_dt_init(struct device *dev, struct regmap *regmap,
 	struct clk *clk;
 	struct imx_pm_domain *domain;
 	bool is_off;
-	int pu_clks, disp_clks;
+	int pu_clks, disp_clks, ipg_clks = 1;
 	int i = 0, k = 0, ret;
 
 	struct imx_pm_domain *pu_domain = &imx_gpc_domains[GPC_PGC_DOMAIN_PU];
@@ -483,12 +491,12 @@ static int imx_gpc_old_dt_init(struct device *dev, struct regmap *regmap,
 	if ((cpu_is_imx6sl() &&
 	     imx_get_soc_revision() >= IMX_CHIP_REVISION_1_2)) {
 		pu_clks = 2;
-		disp_clks = 6;
+		disp_clks = 5;
 	} else if (cpu_is_imx6sx()) {
 		pu_clks = 1;
-		disp_clks = 8;
+		disp_clks = 7;
 	} else {
-		pu_clks = GPC_CLK_MAX;
+		pu_clks = 6;
 		disp_clks = 0;
 	}
 
@@ -501,8 +509,11 @@ static int imx_gpc_old_dt_init(struct device *dev, struct regmap *regmap,
 	}
 	pu_domain->num_clks = i;
 
+	ipg = of_clk_get(dev->of_node, pu_clks);
+
 	/* Get disp domain clks */
-	for (k = 0, i = pu_clks; i < pu_clks + disp_clks ; i++, k++) {
+	for (k = 0, i = pu_clks + ipg_clks; i < pu_clks + ipg_clks + disp_clks;
+		i++, k++) {
 		clk = of_clk_get(dev->of_node, i);
 		if (IS_ERR(clk))
 			break;
-- 
1.7.9.5

