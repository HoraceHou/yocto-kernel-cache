From 1099fcfb962f23d3fc6692541923c2672fefd32b Mon Sep 17 00:00:00 2001
From: Li Jun <jun.li@nxp.com>
Date: Wed, 30 Aug 2017 17:59:39 +0800
Subject: [PATCH 2470/5242] MLK-16298-1 staging: typec: make super speed
 signal mux select configurable

commit  2a23a6d08b9f6dfa56bb904fb9b96b8cb03f3f3d from
https://source.codeaurora.org/external/imx/linux-imx.git

Instead of fixed pull up super speed mux selection gpio for cc1, use
GPIO_ACTIVE_HIGH/LOW to map the CC1/CC2 orientation via gpiod api, So
for ss-sel-gpios:
GPIO_ACTIVE_HIGH: CC1 <--> GPIO high
GPIO_ACTIVE_LOW : CC1 <--> GPIO low

Acked-by: Peter Chen <peter.chen@nxp.com>
Signed-off-by: Li Jun <jun.li@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/typec/tcpci.c |   28 ++++++++++++----------------
 1 file changed, 12 insertions(+), 16 deletions(-)

diff --git a/drivers/staging/typec/tcpci.c b/drivers/staging/typec/tcpci.c
index d1e55db..0c19e40d 100644
--- a/drivers/staging/typec/tcpci.c
+++ b/drivers/staging/typec/tcpci.c
@@ -30,7 +30,7 @@ struct tcpci {
 	struct regmap *regmap;
 
 	bool controls_vbus;
-	int ss_sel_gpio;
+	struct gpio_desc *ss_sel_gpio;
 
 	struct tcpc_dev tcpc;
 	struct tcpci_data *data;
@@ -284,10 +284,13 @@ static int tcpci_set_ss_mux(struct tcpc_dev *tcpc,
 {
 	struct tcpci *tcpci = tcpc_to_tcpci(tcpc);
 
+	if (!tcpci->ss_sel_gpio)
+		return 0;
+
 	if (polarity == TYPEC_POLARITY_CC1)
-		gpio_set_value(tcpci->ss_sel_gpio, 1);
+		gpiod_set_value_cansleep(tcpci->ss_sel_gpio, 1);
 	else
-		gpio_set_value(tcpci->ss_sel_gpio, 0);
+		gpiod_set_value_cansleep(tcpci->ss_sel_gpio, 0);
 
 	return 0;
 }
@@ -734,22 +737,15 @@ static int tcpci_parse_config(struct tcpci *tcpci)
 static int tcpci_ss_mux_control_init(struct tcpci *tcpci)
 {
 	struct device *dev = tcpci->dev;
-	int retval = 0;
 
-	tcpci->ss_sel_gpio = of_get_named_gpio(dev->of_node,
-						"ss-sel-gpios", 0);
-	if (!gpio_is_valid(tcpci->ss_sel_gpio)) {
-		/* Super speed signal mux conrol gpio is optional */
-		dev_dbg(dev, "no Super Speed mux gpio pin available");
-	} else {
-		retval = devm_gpio_request_one(dev, tcpci->ss_sel_gpio,
-				GPIOF_OUT_INIT_LOW, "typec_ss_sel");
-		if (retval < 0)
-			dev_err(dev, "Unable to request super speed mux gpio %d\n",
-									retval);
+	tcpci->ss_sel_gpio = devm_gpiod_get_optional(dev, "ss-sel",
+							GPIOD_OUT_HIGH);
+	if (IS_ERR(tcpci->ss_sel_gpio)) {
+		dev_err(dev, "Failed to request super speed mux sel gpio.");
+		return PTR_ERR(tcpci->ss_sel_gpio);
 	}
 
-	return retval;
+	return 0;
 }
 
 struct tcpci *tcpci_register_port(struct device *dev, struct tcpci_data *data)
-- 
1.7.9.5

