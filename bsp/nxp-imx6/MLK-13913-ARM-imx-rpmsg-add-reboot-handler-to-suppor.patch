From e2f3d4f1fd83c2e726580a87c2b2d0be4af95abc Mon Sep 17 00:00:00 2001
From: Robin Gong <yibin.gong@nxp.com>
Date: Mon, 13 Feb 2017 14:58:55 +0800
Subject: [PATCH 1509/5242] MLK-13913: ARM: imx: rpmsg: add reboot handler to
 support reboot

commit  7661bc06a5b9afe280dd9956781758db81e6b98a from
https://source.codeaurora.org/external/imx/linux-imx.git

Add reboot handler to send reboot message by rpmsg to M4 side, then
M4 will reboot A7 core. Meanwhile, remove shutdown interface at rpmsg
level, since M4 prefer to clear reboot and shutdown interface instead
of shutdown interface at rpmsg level.

Signed-off-by: Robin Gong <yibin.gong@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-imx/imx_rpmsg.c |    8 --------
 arch/arm/mach-imx/pm-rpmsg.c  |   34 ++++++++++++++++++++++++++++++++++
 2 files changed, 34 insertions(+), 8 deletions(-)

diff --git a/arch/arm/mach-imx/imx_rpmsg.c b/arch/arm/mach-imx/imx_rpmsg.c
index 0eadbb6..bb03605 100644
--- a/arch/arm/mach-imx/imx_rpmsg.c
+++ b/arch/arm/mach-imx/imx_rpmsg.c
@@ -26,7 +26,6 @@
 #include <linux/virtio_ids.h>
 #include <linux/virtio_ring.h>
 #include <linux/imx_rpmsg.h>
-#include "common.h"
 
 struct imx_virdev {
 	struct virtio_device vdev;
@@ -396,12 +395,6 @@ static int imx_rpmsg_remove(struct platform_device *pdev)
 	return 0;
 }
 
-static void imx_rpmsg_shutdown(struct platform_device *pdev)
-{
-	pm_shutdown_notify_m4();
-	pr_info("shutdown imx rpmsg.\n");
-}
-
 static struct platform_driver imx_rpmsg_driver = {
 	.driver = {
 		   .owner = THIS_MODULE,
@@ -410,7 +403,6 @@ static void imx_rpmsg_shutdown(struct platform_device *pdev)
 		   },
 	.probe = imx_rpmsg_probe,
 	.remove = imx_rpmsg_remove,
-	.shutdown = imx_rpmsg_shutdown,
 };
 
 static int __init imx_rpmsg_init(void)
diff --git a/arch/arm/mach-imx/pm-rpmsg.c b/arch/arm/mach-imx/pm-rpmsg.c
index 746bb99..fb5e0fb 100644
--- a/arch/arm/mach-imx/pm-rpmsg.c
+++ b/arch/arm/mach-imx/pm-rpmsg.c
@@ -21,6 +21,7 @@
 #include <linux/of.h>
 #include <linux/platform_device.h>
 #include <linux/pm_qos.h>
+#include <linux/reboot.h>
 #include <linux/rpmsg.h>
 #include <linux/uaccess.h>
 #include <linux/virtio.h>
@@ -41,6 +42,7 @@ enum pm_rpmsg_power_mode {
 	PM_RPMSG_WAIT,
 	PM_RPMSG_VLPS,
 	PM_RPMSG_VLLS,
+	PM_RPMSG_REBOOT,
 	PM_RPMSG_SHUTDOWN,
 };
 
@@ -49,6 +51,7 @@ struct pm_rpmsg_info {
 	struct device *dev;
 	struct pm_rpmsg_data *msg;
 	struct pm_qos_request pm_qos_req;
+	struct notifier_block restart_handler;
 };
 
 static struct pm_rpmsg_info pm_rpmsg;
@@ -112,6 +115,21 @@ void pm_shutdown_notify_m4(void)
 
 }
 
+void pm_reboot_notify_m4(void)
+{
+	struct pm_rpmsg_data msg;
+
+	msg.header.cate = IMX_RMPSG_LIFECYCLE;
+	msg.header.major = IMX_RMPSG_MAJOR;
+	msg.header.minor = IMX_RMPSG_MINOR;
+	msg.header.type = PM_RPMSG_TYPE;
+	msg.header.cmd = PM_RPMSG_MODE;
+	msg.data = PM_RPMSG_REBOOT;
+
+	pm_send_message(&msg, &pm_rpmsg, false);
+
+}
+
 static void pm_heart_beat_work_handler(struct work_struct *work)
 {
 	struct pm_rpmsg_data msg;
@@ -129,8 +147,18 @@ static void pm_heart_beat_work_handler(struct work_struct *work)
 		msecs_to_jiffies(30000));
 }
 
+static int pm_restart_handler(struct notifier_block *this, unsigned long mode,
+				void *cmd)
+{
+	pm_reboot_notify_m4();
+
+	return NOTIFY_DONE;
+}
+
 static int pm_rpmsg_probe(struct rpmsg_device *rpdev)
 {
+	int ret;
+
 	pm_rpmsg.rpdev = rpdev;
 
 	dev_info(&rpdev->dev, "new channel: 0x%x -> 0x%x!\n",
@@ -144,6 +172,12 @@ static int pm_rpmsg_probe(struct rpmsg_device *rpdev)
 
 	pm_vlls_notify_m4(false);
 
+	pm_rpmsg.restart_handler.notifier_call = pm_restart_handler;
+	pm_rpmsg.restart_handler.priority = 128;
+	ret = register_restart_handler(&pm_rpmsg.restart_handler);
+	if (ret)
+		dev_err(&rpdev->dev, "cannot register restart handler\n");
+
 	return 0;
 }
 
-- 
1.7.9.5

