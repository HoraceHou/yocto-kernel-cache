From e6d4a962ceffdfd11beefe1342337715d3b4f9eb Mon Sep 17 00:00:00 2001
From: Richard Zhu <hongxing.zhu@nxp.com>
Date: Thu, 9 Mar 2017 17:06:02 +0800
Subject: [PATCH 1566/5242] MLK-14439-2 soc: imx: enhance the mu driver

commit  627e4a8ea8c7b5ab7c562d980e578570692020c8 from
https://source.codeaurora.org/external/imx/linux-imx.git

- add the MU version1.0 (introduced by 7ulp)
support.
- add the MU_SetFn and MU_ReadStatus APIs.
- fix one mispell bug when enable the RX INTs.
Otherwise, the RX INTs wouldn't be configured
correctly.

Signed-off-by: Richard Zhu <hongxing.zhu@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/soc/imx/mu/mx8_mu.c   |  102 +++++++++++++++++++++++++++++++++--------
 drivers/soc/imx/mu/mx8_mu.h   |   36 ---------------
 drivers/soc/imx/sc/main/ipc.c |    2 +-
 include/linux/mx8_mu.h        |   47 +++++++++++++++++++
 4 files changed, 132 insertions(+), 55 deletions(-)
 delete mode 100644 drivers/soc/imx/mu/mx8_mu.h
 create mode 100644 include/linux/mx8_mu.h

diff --git a/drivers/soc/imx/mu/mx8_mu.c b/drivers/soc/imx/mu/mx8_mu.c
index ed341d6..7409c2c 100644
--- a/drivers/soc/imx/mu/mx8_mu.c
+++ b/drivers/soc/imx/mu/mx8_mu.c
@@ -7,19 +7,61 @@
 
 #include <linux/err.h>
 #include <linux/io.h>
-#include "mx8_mu.h"
+#include <linux/mx8_mu.h>
 
 
 /*!
+ * This function sets the Flag n of the MU.
+ */
+int32_t MU_SetFn(void __iomem *base, uint32_t Fn)
+{
+	uint32_t reg, offset;
+
+	reg = Fn & (~MU_CR_Fn_MASK1);
+	if (reg > 0)
+		return -EINVAL;
+
+	offset = unlikely((readl_relaxed(base) >> 16) == MU_VER_ID_V10)
+			  ? MU_V10_ACR_OFFSET1 : MU_ACR_OFFSET1;
+
+	reg = readl_relaxed(base + offset);
+	/*  Clear ABFn. */
+	reg &= ~MU_CR_Fn_MASK1;
+	reg |= Fn;
+	writel_relaxed(reg, base + offset);
+
+	return 0;
+}
+
+/*!
+ * This function reads the status from status register.
+ */
+uint32_t MU_ReadStatus(void __iomem *base)
+{
+	uint32_t reg, offset;
+
+	offset = unlikely((readl_relaxed(base) >> 16) == MU_VER_ID_V10)
+			  ? MU_V10_ASR_OFFSET1 : MU_ASR_OFFSET1;
+
+	reg = readl_relaxed(base + offset);
+
+	return reg;
+}
+
+/*!
  * This function enables specific RX full interrupt.
  */
 void MU_EnableRxFullInt(void __iomem *base, uint32_t index)
 {
-	uint32_t reg = readl_relaxed(base + MU_ACR_OFFSET1);
+	uint32_t reg, offset;
+
+	offset = unlikely((readl_relaxed(base) >> 16) == MU_VER_ID_V10)
+			  ? MU_V10_ACR_OFFSET1 : MU_ACR_OFFSET1;
 
+	reg = readl_relaxed(base + offset);
 	reg &= ~(MU_CR_GIRn_MASK1 | MU_CR_NMI_MASK1);
-	reg |= ~MU_CR_RIE0_MASK1 >> index;
-	writel_relaxed(reg, base + MU_ACR_OFFSET1);
+	reg |= MU_CR_RIE0_MASK1 >> index;
+	writel_relaxed(reg, base + offset);
 }
 
 /*!
@@ -27,11 +69,15 @@ void MU_EnableRxFullInt(void __iomem *base, uint32_t index)
  */
 void MU_EnableGeneralInt(void __iomem *base, uint32_t index)
 {
-	uint32_t reg = readl_relaxed(base + MU_ACR_OFFSET1);
+	uint32_t reg, offset;
+
+	offset = unlikely((readl_relaxed(base) >> 16) == MU_VER_ID_V10)
+			  ? MU_V10_ACR_OFFSET1 : MU_ACR_OFFSET1;
 
+	reg = readl_relaxed(base + offset);
 	reg &= ~(MU_CR_GIRn_MASK1 | MU_CR_NMI_MASK1);
 	reg |= MU_CR_GIE0_MASK1 >> index;
-	writel_relaxed(reg, base + MU_ACR_OFFSET1);
+	writel_relaxed(reg, base + offset);
 }
 
 /*
@@ -41,10 +87,18 @@ void MU_SendMessage(void __iomem *base, uint32_t regIndex, uint32_t msg)
 {
 	uint32_t mask = MU_SR_TE0_MASK1 >> regIndex;
 
-	/* Wait TX register to be empty. */
-	while (!(readl_relaxed(base + MU_ASR_OFFSET1) & mask))
-		;
-	writel_relaxed(msg, base + MU_ATR0_OFFSET1  + (regIndex * 4));
+	if (unlikely((readl_relaxed(base) >> 16) == MU_VER_ID_V10)) {
+		/* Wait TX register to be empty. */
+		while (!(readl_relaxed(base + MU_V10_ASR_OFFSET1) & mask))
+			;
+		writel_relaxed(msg, base + MU_V10_ATR0_OFFSET1
+			       + (regIndex * 4));
+	} else {
+		/* Wait TX register to be empty. */
+		while (!(readl_relaxed(base + MU_ASR_OFFSET1) & mask))
+			;
+		writel_relaxed(msg, base + MU_ATR0_OFFSET1  + (regIndex * 4));
+	}
 }
 
 
@@ -55,23 +109,35 @@ void MU_ReceiveMsg(void __iomem *base, uint32_t regIndex, uint32_t *msg)
 {
 	uint32_t mask = MU_SR_RF0_MASK1 >> regIndex;
 
-	/* Wait RX register to be full. */
-	while (!(readl_relaxed(base + MU_ASR_OFFSET1) & mask))
-		;
-	*msg = readl_relaxed(base + MU_ARR0_OFFSET1 + (regIndex * 4));
+	if (unlikely((readl_relaxed(base) >> 16) == MU_VER_ID_V10)) {
+		/* Wait RX register to be full. */
+		while (!(readl_relaxed(base + MU_V10_ASR_OFFSET1) & mask))
+			;
+		*msg = readl_relaxed(base + MU_V10_ARR0_OFFSET1
+				     + (regIndex * 4));
+	} else {
+		/* Wait RX register to be full. */
+		while (!(readl_relaxed(base + MU_ASR_OFFSET1) & mask))
+			;
+		*msg = readl_relaxed(base + MU_ARR0_OFFSET1 + (regIndex * 4));
+	}
 }
 
 
 
 void MU_Init(void __iomem *base)
 {
-	uint32_t reg;
+	uint32_t reg, offset;
+
+	offset = unlikely((readl_relaxed(base) >> 16) == MU_VER_ID_V10)
+			  ? MU_V10_ACR_OFFSET1 : MU_ACR_OFFSET1;
+
 
-	reg = readl_relaxed(base + MU_ACR_OFFSET1);
+	reg = readl_relaxed(base + offset);
 	/* Clear GIEn, RIEn, TIEn, GIRn and ABFn. */
 	reg &= ~(MU_CR_GIEn_MASK1 | MU_CR_RIEn_MASK1 | MU_CR_TIEn_MASK1
-			| MU_CR_GIRn_MASK1 | MU_CR_NMI_MASK1 | MU_CR_Fn_MASK1);
-	writel_relaxed(reg, base + MU_ACR_OFFSET1);
+		 | MU_CR_GIRn_MASK1 | MU_CR_NMI_MASK1 | MU_CR_Fn_MASK1);
+	writel_relaxed(reg, base + offset);
 }
 
 /**@}*/
diff --git a/drivers/soc/imx/mu/mx8_mu.h b/drivers/soc/imx/mu/mx8_mu.h
deleted file mode 100644
index 7d428ac..0000000
--- a/drivers/soc/imx/mu/mx8_mu.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * Copyright (C) 2016 Freescale Semiconductor, Inc.
- * Copyright 2017 NXP
- *
- * SPDX-License-Identifier:     GPL-2.0+
- */
-
-#define MU_ATR0_OFFSET1		0x0
-#define MU_ARR0_OFFSET1		0x10
-#define MU_ASR_OFFSET1		0x20
-#define MU_ACR_OFFSET1		0x24
-#define MU_TR_COUNT1		4
-#define MU_RR_COUNT1		4
-
-#define MU_CR_GIEn_MASK1	(0xF << 28)
-#define MU_CR_RIEn_MASK1	(0xF << 24)
-#define MU_CR_TIEn_MASK1	(0xF << 20)
-#define MU_CR_GIRn_MASK1	(0xF << 16)
-#define MU_CR_NMI_MASK1		(1 << 3)
-#define MU_CR_Fn_MASK1		0x7
-
-#define MU_SR_TE0_MASK1		(1 << 23)
-#define MU_SR_RF0_MASK1		(1 << 27)
-#define MU_CR_RIE0_MASK1	(1 << 27)
-#define MU_CR_GIE0_MASK1	(1 << 31)
-
-#define MU_TR_COUNT			4
-#define MU_RR_COUNT			4
-
-
-void MU_Init(void __iomem *base);
-void MU_SendMessage(void __iomem *base, uint32_t regIndex, uint32_t msg);
-void MU_ReceiveMsg(void __iomem *base, uint32_t regIndex, uint32_t *msg);
-void MU_EnableGeneralInt(void __iomem *base, uint32_t index);
-void MU_EnableRxFullInt(void __iomem *base, uint32_t index);
-
diff --git a/drivers/soc/imx/sc/main/ipc.c b/drivers/soc/imx/sc/main/ipc.c
index 0be0647..f437cf5 100644
--- a/drivers/soc/imx/sc/main/ipc.c
+++ b/drivers/soc/imx/sc/main/ipc.c
@@ -15,12 +15,12 @@
 #include <linux/of_fdt.h>
 #include <linux/interrupt.h>
 #include <linux/irq.h>
+#include <linux/mx8_mu.h>
 
 #include <soc/imx8/sc/svc/irq/api.h>
 #include <soc/imx8/sc/ipc.h>
 #include <soc/imx8/sc/sci.h>
 
-#include "../../mu/mx8_mu.h"
 #include "rpc.h"
 
 /* Local Defines */
diff --git a/include/linux/mx8_mu.h b/include/linux/mx8_mu.h
new file mode 100644
index 0000000..a26d2c6
--- /dev/null
+++ b/include/linux/mx8_mu.h
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2016 Freescale Semiconductor, Inc.
+ * Copyright 2017 NXP
+ *
+ * SPDX-License-Identifier:     GPL-2.0+
+ */
+
+#define MU_ATR0_OFFSET1		0x0
+#define MU_ARR0_OFFSET1		0x10
+#define MU_ASR_OFFSET1		0x20
+#define MU_ACR_OFFSET1		0x24
+
+/* Registers offsets of the MU Version 1.0 */
+#define MU_V10_VER_OFFSET1	0x0
+#define MU_V10_ATR0_OFFSET1	0x20
+#define MU_V10_ARR0_OFFSET1	0x40
+#define MU_V10_ASR_OFFSET1	0x60
+#define MU_V10_ACR_OFFSET1	0x64
+#define MU_VER_ID_V10		0x0100 /* Version 1.0 */
+
+#define MU_TR_COUNT1		4
+#define MU_RR_COUNT1		4
+
+#define MU_CR_GIEn_MASK1	(0xF << 28)
+#define MU_CR_RIEn_MASK1	(0xF << 24)
+#define MU_CR_TIEn_MASK1	(0xF << 20)
+#define MU_CR_GIRn_MASK1	(0xF << 16)
+#define MU_CR_NMI_MASK1		(1 << 3)
+#define MU_CR_Fn_MASK1		0x7
+
+#define MU_SR_TE0_MASK1		(1 << 23)
+#define MU_SR_RF0_MASK1		(1 << 27)
+#define MU_CR_RIE0_MASK1	(1 << 27)
+#define MU_CR_GIE0_MASK1	(1 << 31)
+
+#define MU_TR_COUNT			4
+#define MU_RR_COUNT			4
+
+
+void MU_Init(void __iomem *base);
+void MU_SendMessage(void __iomem *base, uint32_t regIndex, uint32_t msg);
+void MU_ReceiveMsg(void __iomem *base, uint32_t regIndex, uint32_t *msg);
+void MU_EnableGeneralInt(void __iomem *base, uint32_t index);
+void MU_EnableRxFullInt(void __iomem *base, uint32_t index);
+uint32_t MU_ReadStatus(void __iomem *base);
+int32_t MU_SetFn(void __iomem *base, uint32_t Fn);
+
-- 
1.7.9.5

