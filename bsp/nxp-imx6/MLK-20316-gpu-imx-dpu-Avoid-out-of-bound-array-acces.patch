From f1b312c18be298ca6949933c32ad5c09d81a965e Mon Sep 17 00:00:00 2001
From: Liu Ying <victor.liu@nxp.com>
Date: Mon, 12 Nov 2018 10:32:29 +0800
Subject: [PATCH 5089/5242] MLK-20316 gpu: imx: dpu: Avoid out-of-bound array
 access in dpu_{unit}_init()

commit  d95b6b9740711914431b41b3663df8e553471d94 from
https://source.codeaurora.org/external/imx/linux-imx.git

The callers of dpu_{unit}_init() might provide an invalid id as
the parameter, it may cause overrunning dpu->{unit}_priv[] and
cf_shdlreqs[] arrays and out-of-bound array access.  Although
the current only caller is dpu_submodules_init() and it always
provides valid ids, it would be good to fix the potential issue.
This patch fixes several issues reported by coverity - CID 1477330,
CID 1477335, CID 1477348, CID 1477346, CID 3298619, CID 1477347,
CID 5233021 and CID 1477321.

Signed-off-by: Liu Ying <victor.liu@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/gpu/imx/dpu/dpu-constframe.c |    3 +++
 drivers/gpu/imx/dpu/dpu-extdst.c     |    3 +++
 drivers/gpu/imx/dpu/dpu-fetcheco.c   |    3 +++
 drivers/gpu/imx/dpu/dpu-fetchwarp.c  |    3 +++
 drivers/gpu/imx/dpu/dpu-hscaler.c    |    3 +++
 drivers/gpu/imx/dpu/dpu-store.c      |    3 +++
 drivers/gpu/imx/dpu/dpu-vscaler.c    |    3 +++
 7 files changed, 21 insertions(+)

diff --git a/drivers/gpu/imx/dpu/dpu-constframe.c b/drivers/gpu/imx/dpu/dpu-constframe.c
index a7c2719..f82224a 100644
--- a/drivers/gpu/imx/dpu/dpu-constframe.c
+++ b/drivers/gpu/imx/dpu/dpu-constframe.c
@@ -258,6 +258,9 @@ int dpu_cf_init(struct dpu_soc *dpu, unsigned int id,
 		if (cf_ids[i] == id)
 			break;
 
+	if (i == ARRAY_SIZE(cf_ids))
+		return -EINVAL;
+
 	dpu->cf_priv[i] = cf;
 
 	cf->pec_base = devm_ioremap(dpu->dev, pec_base, SZ_16);
diff --git a/drivers/gpu/imx/dpu/dpu-extdst.c b/drivers/gpu/imx/dpu/dpu-extdst.c
index 6eb6a65..fe44db2 100644
--- a/drivers/gpu/imx/dpu/dpu-extdst.c
+++ b/drivers/gpu/imx/dpu/dpu-extdst.c
@@ -519,6 +519,9 @@ int dpu_ed_init(struct dpu_soc *dpu, unsigned int id,
 		if (ed_ids[i] == id)
 			break;
 
+	if (i == ARRAY_SIZE(ed_ids))
+		return -EINVAL;
+
 	dpu->ed_priv[i] = ed;
 
 	ed->pec_base = devm_ioremap(dpu->dev, pec_base, SZ_32);
diff --git a/drivers/gpu/imx/dpu/dpu-fetcheco.c b/drivers/gpu/imx/dpu/dpu-fetcheco.c
index 2b851f1..e1f3708 100644
--- a/drivers/gpu/imx/dpu/dpu-fetcheco.c
+++ b/drivers/gpu/imx/dpu/dpu-fetcheco.c
@@ -406,6 +406,9 @@ int dpu_fe_init(struct dpu_soc *dpu, unsigned int id,
 		if (fe_ids[i] == id)
 			break;
 
+	if (i == ARRAY_SIZE(fe_ids))
+		return -EINVAL;
+
 	fu = &fe->fu;
 	dpu->fe_priv[i] = fu;
 
diff --git a/drivers/gpu/imx/dpu/dpu-fetchwarp.c b/drivers/gpu/imx/dpu/dpu-fetchwarp.c
index 2e0a90a..e4b0916 100644
--- a/drivers/gpu/imx/dpu/dpu-fetchwarp.c
+++ b/drivers/gpu/imx/dpu/dpu-fetchwarp.c
@@ -299,6 +299,9 @@ int dpu_fw_init(struct dpu_soc *dpu, unsigned int id,
 		if (fw_ids[i] == id)
 			break;
 
+	if (i == ARRAY_SIZE(fw_ids))
+		return -EINVAL;
+
 	fu = &fw->fu;
 	dpu->fw_priv[i] = fu;
 
diff --git a/drivers/gpu/imx/dpu/dpu-hscaler.c b/drivers/gpu/imx/dpu/dpu-hscaler.c
index 4edd9cd..2ac4220 100644
--- a/drivers/gpu/imx/dpu/dpu-hscaler.c
+++ b/drivers/gpu/imx/dpu/dpu-hscaler.c
@@ -371,6 +371,9 @@ int dpu_hs_init(struct dpu_soc *dpu, unsigned int id,
 		if (hs_ids[i] == id)
 			break;
 
+	if (i == ARRAY_SIZE(hs_ids))
+		return -EINVAL;
+
 	dpu->hs_priv[i] = hs;
 
 	hs->pec_base = devm_ioremap(dpu->dev, pec_base, SZ_8);
diff --git a/drivers/gpu/imx/dpu/dpu-store.c b/drivers/gpu/imx/dpu/dpu-store.c
index 51688ec..8e7e305 100644
--- a/drivers/gpu/imx/dpu/dpu-store.c
+++ b/drivers/gpu/imx/dpu/dpu-store.c
@@ -118,6 +118,9 @@ int dpu_st_init(struct dpu_soc *dpu, unsigned int id,
 		if (st_ids[i] == id)
 			break;
 
+	if (i == ARRAY_SIZE(st_ids))
+		return -EINVAL;
+
 	dpu->st_priv[i] = st;
 
 	st->pec_base = devm_ioremap(dpu->dev, pec_base, SZ_32);
diff --git a/drivers/gpu/imx/dpu/dpu-vscaler.c b/drivers/gpu/imx/dpu/dpu-vscaler.c
index 2f851f0..1c65654 100644
--- a/drivers/gpu/imx/dpu/dpu-vscaler.c
+++ b/drivers/gpu/imx/dpu/dpu-vscaler.c
@@ -423,6 +423,9 @@ int dpu_vs_init(struct dpu_soc *dpu, unsigned int id,
 		if (vs_ids[i] == id)
 			break;
 
+	if (i == ARRAY_SIZE(vs_ids))
+		return -EINVAL;
+
 	dpu->vs_priv[i] = vs;
 
 	vs->pec_base = devm_ioremap(dpu->dev, pec_base, SZ_8);
-- 
1.7.9.5

