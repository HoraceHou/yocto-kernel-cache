From 9f60daba60eb8e40c3426a74559e74abdb56c8ce Mon Sep 17 00:00:00 2001
From: Li Jun <jun.li@nxp.com>
Date: Fri, 28 Jul 2017 16:55:33 +0800
Subject: [PATCH 2308/5242] MLK-16013-29 staging: typec: tcpm: Don't reset
 message id after soft reset

commit  fe6c3fd1d8722acec44febb7b83fff16923257ad from
https://source.codeaurora.org/external/imx/linux-imx.git

If the power source sent soft reset and the other end accepted, we should
not reset the message id as it was already updated by pd_transmit when
handling the soft reset.

Reviewed-by: Peter Chen <peter.chen@nxp.com>
Signed-off-by: Li Jun <jun.li@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/usb/typec/tcpm.c |   12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/drivers/usb/typec/tcpm.c b/drivers/usb/typec/tcpm.c
index 0be62b0..6da8a61 100644
--- a/drivers/usb/typec/tcpm.c
+++ b/drivers/usb/typec/tcpm.c
@@ -1692,12 +1692,18 @@ static void tcpm_pd_ctrl_request(struct tcpm_port *port,
 			tcpm_set_state(port, SNK_TRANSITION_SINK, 0);
 			break;
 		case SOFT_RESET_SEND:
-			port->message_id = 0;
 			port->rx_msgid = -1;
-			if (port->pwr_role == TYPEC_SOURCE)
+			/*
+			 * After reset data sent, the msg id is updated
+			 * by pd_transmit(0+1), now the other end gives
+			 * an accept so we can go on with msg id 1.
+			 */
+			if (port->pwr_role == TYPEC_SOURCE) {
 				next_state = SRC_SEND_CAPABILITIES;
-			else
+			} else {
+				port->message_id = 0;
 				next_state = SNK_WAIT_CAPABILITIES;
+			}
 			tcpm_set_state(port, next_state, 0);
 			break;
 		case DR_SWAP_SEND:
-- 
1.7.9.5

