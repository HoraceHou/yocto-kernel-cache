From 50428623b86e5d29fca5743106b8ee74270e82b8 Mon Sep 17 00:00:00 2001
From: Richard Zhu <hongxing.zhu@nxp.com>
Date: Tue, 29 May 2018 13:48:54 +0800
Subject: [PATCH 3926/5242] MLK-18515-2 PCI: imx: get reserved region for ep
 rc ddr test region

commit  e5cccf8bd94135dc9594dd26069f165a9dd4a8f2 from
https://source.codeaurora.org/external/imx/linux-imx.git

PCIe ep rc validation is one remote processors communications.
Remove the hard-coded ep rc ddr test region on imx8 platforms.
Get the reserved region for ep rc ddr test region.

Signed-off-by: Richard Zhu <hongxing.zhu@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/pci/controller/dwc/pci-imx6.c |   17 +++++++++++++++--
 1 file changed, 15 insertions(+), 2 deletions(-)

diff --git a/drivers/pci/controller/dwc/pci-imx6.c b/drivers/pci/controller/dwc/pci-imx6.c
index 3ade73d..0e92731 100644
--- a/drivers/pci/controller/dwc/pci-imx6.c
+++ b/drivers/pci/controller/dwc/pci-imx6.c
@@ -1628,7 +1628,8 @@ static void imx_pcie_regions_setup(struct device *dev)
 		 * RPMSG reserved 4Mbytes, but only used up to 2Mbytes.
 		 * The left 2Mbytes can be used here.
 		 */
-		ddr_test_region = 0xb8200000;
+		if (ddr_test_region == 0)
+			dev_err(dev, "invalid ddr test region.\n");
 		break;
 	case IMX6SX:
 	case IMX7D:
@@ -1640,6 +1641,7 @@ static void imx_pcie_regions_setup(struct device *dev)
 		ddr_test_region = 0x40000000;
 		break;
 	}
+	dev_info(dev, "ddr_test_region is 0x%08x.\n", ddr_test_region);
 
 	dw_pcie_prog_outbound_atu(pci, 2, 0, pp->mem_base,
 				  ddr_test_region, test_region_size);
@@ -2155,7 +2157,7 @@ static int __init imx_pcie_probe(struct platform_device *pdev)
 	struct dw_pcie *pci;
 	struct imx_pcie *imx_pcie;
 	struct resource *res;
-	struct device_node *node = dev->of_node;
+	struct device_node *reserved_node, *node = dev->of_node;
 	int ret;
 	u16 val;
 
@@ -2199,6 +2201,17 @@ static int __init imx_pcie_probe(struct platform_device *pdev)
 	if (IS_ERR(pci->dbi_base))
 		return PTR_ERR(pci->dbi_base);
 
+	reserved_node = of_parse_phandle(node, "reserved-region", 0);
+	if (!reserved_node) {
+		dev_info(dev, "no reserved region node.\n");
+	} else {
+		if (of_address_to_resource(reserved_node, 0, res)) {
+			dev_err(dev, "failed to get reserved region address\n");
+			return -EINVAL;
+		}
+		ddr_test_region = res->start + SZ_2M;
+	}
+
 	/* Fetch GPIOs */
 	imx_pcie->clkreq_gpio = of_get_named_gpio(node, "clkreq-gpio", 0);
 	if (gpio_is_valid(imx_pcie->clkreq_gpio)) {
-- 
1.7.9.5

