From e66511aa74d6ad152136c9f4cd8e794b31de64d1 Mon Sep 17 00:00:00 2001
From: Shengjiu Wang <shengjiu.wang@nxp.com>
Date: Thu, 2 Aug 2018 19:54:37 +0800
Subject: [PATCH 4401/5242] MLK-19118-3: ASoC: AK5558: add regulators for
 ak5558

commit  442046b6dc868ecfe50590e2390d9583785473d5 from
https://source.codeaurora.org/external/imx/linux-imx.git

add regulators for ak5558

Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
(cherry picked from commit 914f117ffb4233ba630515d8426d30006a82794f)
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 sound/soc/codecs/ak5558.c |   27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/sound/soc/codecs/ak5558.c b/sound/soc/codecs/ak5558.c
index f4ed5cc..7e8af67 100644
--- a/sound/soc/codecs/ak5558.c
+++ b/sound/soc/codecs/ak5558.c
@@ -12,6 +12,7 @@
 #include <linux/pm_runtime.h>
 #include <linux/regmap.h>
 #include <linux/slab.h>
+#include <linux/regulator/consumer.h>
 
 #include <sound/initval.h>
 #include <sound/pcm.h>
@@ -19,9 +20,16 @@
 #include <sound/soc.h>
 #include <sound/soc-dapm.h>
 #include <sound/tlv.h>
+#include <linux/regulator/consumer.h>
 
 #include "ak5558.h"
 
+#define AK5558_NUM_SUPPLIES 2
+static const char *ak5558_supply_names[AK5558_NUM_SUPPLIES] = {
+	"DVDD",
+	"AVDD",
+};
+
 /* AK5558 Codec Private Data */
 struct ak5558_priv {
 	struct snd_soc_component component;
@@ -30,6 +38,7 @@ struct ak5558_priv {
 	struct gpio_desc *reset_gpiod; /* Reset & Power down GPIO */
 	int slots;
 	int slot_width;
+	struct regulator_bulk_data supplies[AK5558_NUM_SUPPLIES];
 };
 
 /* ak5558 register cache & default register settings */
@@ -357,6 +366,7 @@ static int ak5558_i2c_probe(struct i2c_client *i2c)
 {
 	struct ak5558_priv *ak5558;
 	int ret = 0;
+	int i;
 
 	ak5558 = devm_kzalloc(&i2c->dev, sizeof(*ak5558), GFP_KERNEL);
 	if (!ak5558)
@@ -374,6 +384,23 @@ static int ak5558_i2c_probe(struct i2c_client *i2c)
 	if (IS_ERR(ak5558->reset_gpiod))
 		return PTR_ERR(ak5558->reset_gpiod);
 
+	for (i = 0; i < ARRAY_SIZE(ak5558->supplies); i++)
+		ak5558->supplies[i].supply = ak5558_supply_names[i];
+
+	ret = devm_regulator_bulk_get(&i2c->dev, ARRAY_SIZE(ak5558->supplies),
+				 ak5558->supplies);
+	if (ret != 0) {
+		dev_err(&i2c->dev, "Failed to request supplies: %d\n", ret);
+		return ret;
+	}
+
+	ret = regulator_bulk_enable(ARRAY_SIZE(ak5558->supplies),
+				    ak5558->supplies);
+	if (ret != 0) {
+		dev_err(&i2c->dev, "Failed to enable supplies: %d\n", ret);
+		return ret;
+	}
+
 	ret = devm_snd_soc_register_component(&i2c->dev,
 				     &soc_codec_dev_ak5558,
 				     &ak5558_dai, 1);
-- 
1.7.9.5

