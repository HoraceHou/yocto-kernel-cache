From 72116d494f37f60a477313f26df465f9a1c935c1 Mon Sep 17 00:00:00 2001
From: Aymen Sghaier <aymen.sghaier@nxp.com>
Date: Thu, 13 Sep 2018 16:41:03 +0200
Subject: [PATCH 4639/5242] MLK-19053: crypto: caam: RNG4 TRNG errata

commit  939d89ba5530b2b5680ad8ff2367fff51a17dfd8 from
https://source.codeaurora.org/external/imx/linux-imx.git

 The TRNG as used in RNG4, used in CAAM has a documentation issue. The
effect is that it is possible that the entropy used to instantiate the
DRBG may be old entropy, rather than newly generated entropy. There is
proper programming guidance, but it is not in the documentation.

Signed-off-by: Aymen Sghaier <aymen.sghaier@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/caam/inst_rng.c |   10 +++++++---
 drivers/crypto/caam/regs.h     |    3 ++-
 2 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/drivers/crypto/caam/inst_rng.c b/drivers/crypto/caam/inst_rng.c
index a8ed081..c5c83ab 100644
--- a/drivers/crypto/caam/inst_rng.c
+++ b/drivers/crypto/caam/inst_rng.c
@@ -230,7 +230,11 @@ static void kick_trng(struct device *ctrldev, int ent_delay)
 	r4tst = &ctrl->r4tst[0];
 
 	/* put RNG4 into program mode */
-	clrsetbits_32(&r4tst->rtmctl, 0, RTMCTL_PRGM);
+	/* Setting both RTMCTL:PRGM and RTMCTL:TRNG_ACC causes TRNG to
+	 * properly invalidate the entropy in the entropy register and
+	 * force re-generation.
+	 */
+	clrsetbits_32(&r4tst->rtmctl, 0, RTMCTL_PRGM | RTMCTL_ACC);
 
 	/*
 	 * Performance-wise, it does not make sense to
@@ -244,7 +248,7 @@ static void kick_trng(struct device *ctrldev, int ent_delay)
 	      >> RTSDCTL_ENT_DLY_SHIFT;
 	if (ent_delay <= val) {
 		/* put RNG4 into run mode */
-		clrsetbits_32(&r4tst->rtmctl, RTMCTL_PRGM, 0);
+		clrsetbits_32(&r4tst->rtmctl, RTMCTL_PRGM | RTMCTL_ACC, 0);
 		return;
 	}
 
@@ -264,7 +268,7 @@ static void kick_trng(struct device *ctrldev, int ent_delay)
 	 */
 	clrsetbits_32(&val, 0, RTMCTL_SAMP_MODE_RAW_ES_SC);
 	/* put RNG4 into run mode */
-	clrsetbits_32(&val, RTMCTL_PRGM, 0);
+	clrsetbits_32(&val, RTMCTL_PRGM | RTMCTL_ACC, 0);
 	/* write back the control register */
 	wr_reg32(&r4tst->rtmctl, val);
 }
diff --git a/drivers/crypto/caam/regs.h b/drivers/crypto/caam/regs.h
index add38c8..1080daa 100644
--- a/drivers/crypto/caam/regs.h
+++ b/drivers/crypto/caam/regs.h
@@ -469,7 +469,8 @@ struct rngtst {
 
 /* RNG4 TRNG test registers */
 struct rng4tst {
-#define RTMCTL_PRGM	0x00010000	/* 1 -> program mode, 0 -> run mode */
+#define RTMCTL_ACC  BIT(5)  /* TRNG access mode */
+#define RTMCTL_PRGM BIT(16) /* 1 -> program mode, 0 -> run mode */
 #define RTMCTL_SAMP_MODE_VON_NEUMANN_ES_SC	0 /* use von Neumann data in
 						     both entropy shifter and
 						     statistical checker */
-- 
1.7.9.5

