From be98d28848ac4166f699d91a7d08a57713ef9d24 Mon Sep 17 00:00:00 2001
From: "Guoniu.Zhou" <guoniu.zhou@nxp.com>
Date: Tue, 12 Jun 2018 16:56:14 +0800
Subject: [PATCH 4005/5242] MLK-18482: ISI: fix isi resume fail issue

commit  bcd39beb1992299a4fc0ea5e7446ad3fce2ac116 from
https://source.codeaurora.org/external/imx/linux-imx.git

Driver enable clock will fail in isi system power resume
callback because isi power domain is power off after system
power suspend so driver need to get device before disable
clock in system power suspend/resume callback and then put
device after disable clock.

Signed-off-by: Guoniu.Zhou <guoniu.zhou@nxp.com>
(cherry picked from commit 668fdea95ff9b4588f02a5c4285d56b90e05ccb4)
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/media/platform/imx8/mxc-isi-core.c |   16 ++++++++++++++--
 1 file changed, 14 insertions(+), 2 deletions(-)

diff --git a/drivers/media/platform/imx8/mxc-isi-core.c b/drivers/media/platform/imx8/mxc-isi-core.c
index b57c6cf..ccf5e24 100644
--- a/drivers/media/platform/imx8/mxc-isi-core.c
+++ b/drivers/media/platform/imx8/mxc-isi-core.c
@@ -201,9 +201,11 @@ static int mxc_isi_remove(struct platform_device *pdev)
 	struct mxc_isi_dev *mxc_isi = platform_get_drvdata(pdev);
 	struct device *dev = &pdev->dev;
 
+	pm_runtime_get_sync(&pdev->dev);
 	mxc_isi_unregister_capture_subdev(mxc_isi);
 
 	clk_disable_unprepare(mxc_isi->clk);
+	pm_runtime_put_sync(&pdev->dev);
 	pm_runtime_disable(dev);
 
 	return 0;
@@ -214,6 +216,8 @@ static int mxc_isi_pm_suspend(struct device *dev)
 {
 	struct mxc_isi_dev *mxc_isi = dev_get_drvdata(dev);
 
+	pm_runtime_get_sync(dev);
+
 	if ((mxc_isi->flags & MXC_ISI_PM_SUSPENDED) ||
 		(mxc_isi->flags & MXC_ISI_RUNTIME_SUSPEND))
 		return 0;
@@ -221,6 +225,7 @@ static int mxc_isi_pm_suspend(struct device *dev)
 	clk_disable_unprepare(mxc_isi->clk);
 	mxc_isi->flags |= MXC_ISI_PM_SUSPENDED;
 	mxc_isi->flags &= ~MXC_ISI_PM_POWERED;
+	pm_runtime_put_sync(dev);
 
 	return 0;
 }
@@ -230,14 +235,21 @@ static int mxc_isi_pm_resume(struct device *dev)
 	struct mxc_isi_dev *mxc_isi = dev_get_drvdata(dev);
 	int ret;
 
+	pm_runtime_get_sync(dev);
 	if (mxc_isi->flags & MXC_ISI_PM_POWERED)
 		return 0;
 
+	ret = clk_prepare_enable(mxc_isi->clk);
+	if (ret) {
+		pr_info("== %s ret=%d\n", __func__, ret);
+		return -EAGAIN;
+	}
+
 	mxc_isi->flags |= MXC_ISI_PM_POWERED;
 	mxc_isi->flags &= ~MXC_ISI_PM_SUSPENDED;
+	pm_runtime_put_sync(dev);
 
-	ret = clk_prepare_enable(mxc_isi->clk);
-	return (ret) ? -EAGAIN : 0;
+	return 0;
 }
 #endif
 
-- 
1.7.9.5

