From eedfe703e0a1acb25082ff4e21b406c3a4b81f26 Mon Sep 17 00:00:00 2001
From: ming_qian <ming.qian@nxp.com>
Date: Fri, 21 Sep 2018 16:48:27 +0800
Subject: [PATCH 4728/5242] MLK-19670: implement V4L2_CID_MPEG_VIDEO_H264_ASO
 in encoder driver

commit  017402a07809b47f5dc5e9a64cf2a38b54e4b1ce from
https://source.codeaurora.org/external/imx/linux-imx.git

enable uLowLatencyMode when ASO is enable.
disable uLowLatencyMode when ASO is disable.
the default value is disable

Signed-off-by: ming_qian <ming.qian@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c   |    1 -
 drivers/mxc/vpu-encoder-b0/vpu_encoder_ctrl.c |   33 +++++++++++++++++++++++++
 2 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c b/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c
index 2aa9fc4d..766a004 100644
--- a/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c
+++ b/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c
@@ -286,7 +286,6 @@ static int initialize_enc_param(struct vpu_ctx *ctx)
 	param->tEncMemDesc.uMemSize     = ctx->encoder_mem.size;
 	param->uFrameRate = 30;
 	param->uMinBitRate = BITRATE_LOW_THRESHOLD;
-	param->uLowLatencyMode = 0;
 
 	return 0;
 }
diff --git a/drivers/mxc/vpu-encoder-b0/vpu_encoder_ctrl.c b/drivers/mxc/vpu-encoder-b0/vpu_encoder_ctrl.c
index 2f46251c..add72a9 100644
--- a/drivers/mxc/vpu-encoder-b0/vpu_encoder_ctrl.c
+++ b/drivers/mxc/vpu-encoder-b0/vpu_encoder_ctrl.c
@@ -160,6 +160,19 @@ static int get_min_buffers_for_output(struct v4l2_ctrl *ctrl)
 	return 0;
 }
 
+static int set_display_re_ordering(struct v4l2_ctrl *ctrl)
+{
+	struct vpu_ctx *ctx = v4l2_ctrl_to_ctx(ctrl);
+	pMEDIAIP_ENC_PARAM  param = get_enc_param(ctx);
+
+	if (ctrl->val)
+		param->uLowLatencyMode = 1;
+	else
+		param->uLowLatencyMode = 0;
+
+	return 0;
+}
+
 static int add_ctrl_h264_profile(struct vpu_ctx *ctx)
 {
 	static const struct v4l2_ctrl_ops ctrl_h264_profile_ops = {
@@ -402,6 +415,25 @@ static int add_ctrl_min_buffers_for_output(struct vpu_ctx *ctx)
 	return 0;
 }
 
+static int add_ctrl_display_re_ordering(struct vpu_ctx *ctx)
+{
+	static const struct v4l2_ctrl_ops re_ordering_ops = {
+		.s_ctrl = set_display_re_ordering,
+	};
+	struct v4l2_ctrl *ctrl;
+
+	ctrl = v4l2_ctrl_new_std(&ctx->ctrl_handler,
+			&re_ordering_ops,
+			V4L2_CID_MPEG_VIDEO_H264_ASO,
+			0, 1, 1, 0);
+	if (!ctrl) {
+		vpu_dbg(LVL_ERR, "add ctrl display re ordering fail\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
 static int vpu_enc_register_ctrls(struct vpu_ctx *ctx)
 {
 	add_ctrl_h264_profile(ctx);
@@ -415,6 +447,7 @@ static int vpu_enc_register_ctrls(struct vpu_ctx *ctx)
 	add_ctrl_p_frame_qp(ctx);
 	add_ctrl_b_frame_qp(ctx);
 	add_ctrl_min_buffers_for_output(ctx);
+	add_ctrl_display_re_ordering(ctx);
 
 	return 0;
 }
-- 
1.7.9.5

