From e67472516e3e2971f5dd7b456b7a1be75752c198 Mon Sep 17 00:00:00 2001
From: Franck LENORMAND <franck.lenormand@nxp.com>
Date: Mon, 9 Jul 2018 18:52:38 +0200
Subject: [PATCH 4210/5242] MLK-18082: crypto: caam: Change handling of error
 in probe

commit  ece2811069155f0ae477269a64d8b72877b36872 from
https://source.codeaurora.org/external/imx/linux-imx.git

Signed-off-by: Franck LENORMAND <franck.lenormand@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/caam/jr.c |   39 +++++++++++++++++++++++++--------------
 1 file changed, 25 insertions(+), 14 deletions(-)

diff --git a/drivers/crypto/caam/jr.c b/drivers/crypto/caam/jr.c
index 3560cd1..9423fcb 100644
--- a/drivers/crypto/caam/jr.c
+++ b/drivers/crypto/caam/jr.c
@@ -492,8 +492,10 @@ static int caam_jr_probe(struct platform_device *pdev)
 
 	jrdev = &pdev->dev;
 	jrpriv = devm_kmalloc(jrdev, sizeof(*jrpriv), GFP_KERNEL);
-	if (!jrpriv)
-		return -ENOMEM;
+	if (!jrpriv) {
+		error = -ENOMEM;
+		goto exit;
+	}
 
 	dev_set_drvdata(jrdev, jrpriv);
 
@@ -506,7 +508,8 @@ static int caam_jr_probe(struct platform_device *pdev)
 	ctrl = of_iomap(nprop, 0);
 	if (!ctrl) {
 		dev_err(jrdev, "of_iomap() failed\n");
-		return -ENOMEM;
+		error = -ENOMEM;
+		goto exit;
 	}
 
 	jrpriv->rregs = (struct caam_job_ring __iomem __force *)ctrl;
@@ -533,8 +536,7 @@ static int caam_jr_probe(struct platform_device *pdev)
 	if (error) {
 		dev_err(jrdev, "dma_set_mask_and_coherent failed (%d)\n",
 			error);
-		iounmap(ctrl);
-		return error;
+		goto unmap_ctrl;
 	}
 
 	/* Identify the interrupt */
@@ -547,9 +549,7 @@ static int caam_jr_probe(struct platform_device *pdev)
 	/* Now do the platform independent part */
 	error = caam_jr_init(jrdev); /* now turn on hardware */
 	if (error) {
-		irq_dispose_mapping(jrpriv->irq);
-		iounmap(ctrl);
-		return error;
+		goto dispose_irq_mapping;
 	}
 
 	jrpriv->dev = jrdev;
@@ -568,7 +568,8 @@ static int caam_jr_probe(struct platform_device *pdev)
 	if (list_empty(&driver_data.jr_list)) {
 		spin_unlock(&driver_data.jr_alloc_lock);
 		dev_err(jrdev, "jr_list is empty\n");
-		return -ENODEV;
+		error = -ENODEV;
+		goto dispose_irq_mapping;
 	}
 	jrppriv = list_first_entry(&driver_data.jr_list,
 		struct caam_drv_private_jr, list_node);
@@ -586,11 +587,21 @@ static int caam_jr_probe(struct platform_device *pdev)
 			 */
 			error = inst_rng_imx(pdev);
 	}
-	if (error != 0) {
-		spin_lock(&driver_data.jr_alloc_lock);
-		list_del(&jrpriv->list_node);
-		spin_unlock(&driver_data.jr_alloc_lock);
-	}
+	if (error)
+		goto remove_jr_from_list;
+
+	goto exit;
+
+remove_jr_from_list:
+	spin_lock(&driver_data.jr_alloc_lock);
+	list_del(&jrpriv->list_node);
+	spin_unlock(&driver_data.jr_alloc_lock);
+dispose_irq_mapping:
+	irq_dispose_mapping(jrpriv->irq);
+unmap_ctrl:
+	iounmap(ctrl);
+
+exit:
 	return error;
 }
 
-- 
1.7.9.5

