From bf9b0b5bddfe64b2ecef7c694e3f6f4f6f1527c8 Mon Sep 17 00:00:00 2001
From: Anson Huang <Anson.Huang@freescale.com>
Date: Tue, 15 Dec 2015 17:59:11 +0800
Subject: [PATCH 0874/5242] MLK-12014 ARM: imx: enable necessary clock for RDC
 recovery from DSM

commit  8ef7bfb5690591a5115c76446f11a1c1acb7c092 from
https://source.codeaurora.org/external/imx/linux-imx.git

1. Per design requirement, EXSC for PCIe will need clock to recover RDC
   setting on resume when M/F mix is off, so we need to enable PCIe
   LPCG before entering DSM.

2. As M4 clock is disabled in low power mode, after exit from DSM, A7
   needs to restore TCM for M4, but without M4 clock, this operation
   never success, so we enable A7 wakeup sources for M4 as well during
   DSM, after exit DSM, M4's original wakeup sources will be restored.

Signed-off-by: Anson Huang <Anson.Huang@freescale.com>
(cherry picked from commit 847db79957d25545c762670eb1bc003f34cb2592)
Signed-off-by: Teo Hall <teo.hall@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-imx/common.h  |    2 ++
 arch/arm/mach-imx/gpcv2.c   |   22 ++++++++++++++++++++++
 arch/arm/mach-imx/pm-imx7.c |   16 +++++++++++++++-
 3 files changed, 39 insertions(+), 1 deletion(-)

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index d9f7801..443a112 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -112,6 +112,8 @@ static inline void imx_smp_prepare(void) {}
 void imx_gpcv2_pre_suspend(bool arm_power_off);
 void imx_gpcv2_post_resume(void);
 unsigned int imx_gpcv2_is_mf_mix_off(void);
+void imx_gpcv2_enable_wakeup_for_m4(void);
+void imx_gpcv2_disable_wakeup_for_m4(void);
 int imx_gpc_mf_power_on(unsigned int irq, unsigned int on);
 #ifdef CONFIG_HAVE_IMX_GPCV2
 int imx_gpcv2_mf_power_on(unsigned int irq, unsigned int on);
diff --git a/arch/arm/mach-imx/gpcv2.c b/arch/arm/mach-imx/gpcv2.c
index b9d4321..a3dc47c 100644
--- a/arch/arm/mach-imx/gpcv2.c
+++ b/arch/arm/mach-imx/gpcv2.c
@@ -35,6 +35,7 @@
 #define GPC_MISC		0x2c
 #define GPC_IMR1_CORE0		0x30
 #define GPC_IMR1_CORE1		0x40
+#define GPC_IMR1_M4		0x50
 #define GPC_SLOT0_CFG		0xb0
 #define GPC_PGC_CPU_MAPPING	0xec
 #define GPC_CPU_PGC_SW_PUP_REQ	0xf0
@@ -106,6 +107,7 @@ enum imx_gpc_slot {
 static void __iomem *gpc_base;
 static u32 gpcv2_wake_irqs[IMR_NUM];
 static u32 gpcv2_saved_imrs[IMR_NUM];
+static u32 gpcv2_saved_imrs_m4[IMR_NUM];
 static u32 gpcv2_mf_irqs[IMR_NUM];
 static u32 gpcv2_mf_request_on[IMR_NUM];
 static DEFINE_SPINLOCK(gpcv2_lock);
@@ -507,6 +509,26 @@ void imx_gpcv2_pre_suspend(bool arm_power_off)
 	}
 }
 
+void imx_gpcv2_enable_wakeup_for_m4(void)
+{
+	void __iomem *reg_imr2 = gpc_base + GPC_IMR1_M4;
+	u32 i;
+
+	for (i = 0; i < IMR_NUM; i++) {
+		gpcv2_saved_imrs_m4[i] = readl_relaxed(reg_imr2 + i * 4);
+		writel_relaxed(~gpcv2_wake_irqs[i], reg_imr2 + i * 4);
+	}
+}
+
+void imx_gpcv2_disable_wakeup_for_m4(void)
+{
+	void __iomem *reg_imr2 = gpc_base + GPC_IMR1_M4;
+	u32 i;
+
+	for (i = 0; i < IMR_NUM; i++)
+		writel_relaxed(gpcv2_saved_imrs_m4[i], reg_imr2 + i * 4);
+}
+
 void imx_gpcv2_post_resume(void)
 {
 	void __iomem *reg_imr1 = gpc_base + GPC_IMR1_CORE0;
diff --git a/arch/arm/mach-imx/pm-imx7.c b/arch/arm/mach-imx/pm-imx7.c
index f832b1e..2b56f07 100644
--- a/arch/arm/mach-imx/pm-imx7.c
+++ b/arch/arm/mach-imx/pm-imx7.c
@@ -78,6 +78,7 @@
 
 #define CCM_LPCG_START		0x4040
 #define CCM_LPCG_STEP		0x10
+#define CCM_PCIE_LPCG		0x4600
 
 #define BM_CCM_ROOT_POST_PODF	0x3f
 #define BM_CCM_ROOT_PRE_PODF	0x70000
@@ -708,10 +709,20 @@ static int imx7_pm_enter(suspend_state_t state)
 		imx_anatop_pre_suspend();
 		imx_gpcv2_pre_suspend(true);
 		if (imx_gpcv2_is_mf_mix_off()) {
+			/*
+			 * per design requirement, EXSC for PCIe/EIM
+			 * will need clock to recover RDC setting on
+			 * resume, so enable PCIe/EIM LPCG for RDC
+			 * recovery when M/F mix off
+			 */
+			writel_relaxed(0x3, pm_info->ccm_base.vbase +
+				CCM_PCIE_LPCG);
 			/* stop m4 if mix will also be shutdown */
-			if (imx_src_is_m4_enabled() && imx_mu_is_m4_in_stop())
+			if (imx_src_is_m4_enabled() && imx_mu_is_m4_in_stop()) {
 				writel(M4_RCR_HALT,
 					pm_info->src_base.vbase + M4RCR);
+				imx_gpcv2_enable_wakeup_for_m4();
+			}
 			imx7_console_save(console_saved_reg);
 			memcpy(ocram_saved_in_ddr, ocram_base, ocram_size);
 			if (lpsr_enabled) {
@@ -743,9 +754,12 @@ static int imx7_pm_enter(suspend_state_t state)
 		}
 		if (imx_gpcv2_is_mf_mix_off() ||
 			imx7_pm_is_resume_from_lpsr()) {
+			writel_relaxed(0x0, pm_info->ccm_base.vbase +
+				CCM_PCIE_LPCG);
 			memcpy(ocram_base, ocram_saved_in_ddr, ocram_size);
 			imx7_console_restore(console_saved_reg);
 			if (imx_src_is_m4_enabled() && imx_mu_is_m4_in_stop()) {
+				imx_gpcv2_disable_wakeup_for_m4();
 				/* restore M4 image */
 				memcpy(lpm_m4tcm_base,
 				    lpm_m4tcm_saved_in_ddr, SZ_32K);
-- 
1.7.9.5

