From 5bf799e69f5dbab3a95077419c65543dcfe6d90c Mon Sep 17 00:00:00 2001
From: Peter Chen <peter.chen@nxp.com>
Date: Mon, 8 Oct 2018 17:38:48 +0800
Subject: [PATCH 4872/5242] MLK-19850-5 usb: chipidea: imx: using USB PHY
 charger structure for detection

commit  28200a49f30b03c3cba48cc90b7efdb6f67256c9 from
https://source.codeaurora.org/external/imx/linux-imx.git

We can assign the charger detection results for common USB PHY
structure directly now, so delete the imx usb charger structure.

Reviewed-by: Jun Li <jun.li@nxp.com>
Signed-off-by: Peter Chen <peter.chen@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/usb/chipidea/ci_hdrc_imx.c |  113 ++------------------
 drivers/usb/chipidea/ci_hdrc_imx.h |   29 +-----
 drivers/usb/chipidea/usbmisc_imx.c |  201 +++++-------------------------------
 3 files changed, 38 insertions(+), 305 deletions(-)

diff --git a/drivers/usb/chipidea/ci_hdrc_imx.c b/drivers/usb/chipidea/ci_hdrc_imx.c
index 852e690..a50c277 100644
--- a/drivers/usb/chipidea/ci_hdrc_imx.c
+++ b/drivers/usb/chipidea/ci_hdrc_imx.c
@@ -109,8 +109,6 @@ struct ci_hdrc_imx_data {
 	bool supports_runtime_pm;
 	bool override_phy_control;
 	bool in_lpm;
-	bool imx_usb_charger_detection;
-	struct usb_charger charger;
 	struct regmap *anatop;
 	struct pinctrl *pinctrl;
 	struct pinctrl_state *pinctrl_hsic_active;
@@ -125,16 +123,6 @@ struct ci_hdrc_imx_data {
 	struct pm_qos_request pm_qos_req;
 };
 
-static char *imx_usb_charger_supplied_to[] = {
-	"imx_usb_charger",
-};
-
-static enum power_supply_property imx_usb_charger_power_props[] = {
-	POWER_SUPPLY_PROP_PRESENT,	/* Charger detected */
-	POWER_SUPPLY_PROP_ONLINE,	/* VBUS online */
-	POWER_SUPPLY_PROP_CURRENT_MAX,	/* Maximum current in mA */
-};
-
 /* Common functions shared by usbmisc drivers */
 
 static struct imx_usbmisc_data *usbmisc_get_init_data(struct device *dev)
@@ -320,27 +308,20 @@ static int ci_hdrc_imx_notify_event(struct ci_hdrc *ci, unsigned event)
 	struct device *dev = ci->dev->parent;
 	struct ci_hdrc_imx_data *data = dev_get_drvdata(dev);
 	int ret = 0;
+	struct imx_usbmisc_data *mdata = data->usbmisc_data;
 
 	switch (event) {
 	case CI_HDRC_CONTROLLER_VBUS_EVENT:
-		if (data->usbmisc_data && ci->vbus_active) {
-			if (data->imx_usb_charger_detection) {
-				ret = imx_usbmisc_charger_detection(
-					data->usbmisc_data, true);
-				if (!ret && data->charger.psy_desc.type !=
-							POWER_SUPPLY_TYPE_USB)
-					ret = CI_HDRC_NOTIFY_RET_DEFER_EVENT;
-			}
-		} else if (data->usbmisc_data && !ci->vbus_active) {
-			if (data->imx_usb_charger_detection)
-				ret = imx_usbmisc_charger_detection(
-					data->usbmisc_data, false);
+		if (ci->vbus_active) {
+			ret = imx_usbmisc_charger_detection(mdata, true);
+			if (!ret && mdata->usb_phy->chg_type != SDP_TYPE)
+				ret = CI_HDRC_NOTIFY_RET_DEFER_EVENT;
+		} else {
+			ret = imx_usbmisc_charger_detection(mdata, false);
 		}
 		break;
 	case CI_HDRC_CONTROLLER_CHARGER_POST_EVENT:
-		if (!data->imx_usb_charger_detection)
-			return ret;
-		imx_usbmisc_charger_secondary_detection(data->usbmisc_data);
+		imx_usbmisc_charger_secondary_detection(mdata);
 		break;
 	case CI_HDRC_IMX_HSIC_ACTIVE_EVENT:
 		if (!IS_ERR(data->pinctrl) &&
@@ -381,70 +362,6 @@ static int ci_hdrc_imx_notify_event(struct ci_hdrc *ci, unsigned event)
 	return ret;
 }
 
-static int imx_usb_charger_get_property(struct power_supply *psy,
-				enum power_supply_property psp,
-				union power_supply_propval *val)
-{
-	struct usb_charger *charger =
-		container_of(psy->desc, struct usb_charger, psy_desc);
-
-	switch (psp) {
-	case POWER_SUPPLY_PROP_PRESENT:
-		val->intval = charger->present;
-		break;
-	case POWER_SUPPLY_PROP_ONLINE:
-		val->intval = charger->online;
-		break;
-	case POWER_SUPPLY_PROP_CURRENT_MAX:
-		val->intval = charger->max_current;
-		break;
-	default:
-		return -EINVAL;
-	}
-	return 0;
-}
-
-/*
- * imx_usb_register_charger - register a USB charger
- * @charger: the charger to be initialized
- * @name: name for the power supply
-
- * Registers a power supply for the charger. The USB Controller
- * driver will call this after filling struct usb_charger.
- */
-static int imx_usb_register_charger(struct usb_charger *charger,
-		const char *name)
-{
-	struct power_supply_desc	*desc = &charger->psy_desc;
-
-	if (!charger->dev)
-		return -EINVAL;
-
-	if (name)
-		desc->name = name;
-	else
-		desc->name = "imx_usb_charger";
-
-	charger->bc = BATTERY_CHARGING_SPEC_1_2;
-	mutex_init(&charger->lock);
-
-	desc->type		= POWER_SUPPLY_TYPE_MAINS;
-	desc->properties	= imx_usb_charger_power_props;
-	desc->num_properties	= ARRAY_SIZE(imx_usb_charger_power_props);
-	desc->get_property	= imx_usb_charger_get_property;
-
-	charger->psy = devm_power_supply_register(charger->dev,
-						&charger->psy_desc, NULL);
-	if (IS_ERR(charger->psy))
-		return PTR_ERR(charger->psy);
-
-	charger->psy->supplied_to	= imx_usb_charger_supplied_to;
-	charger->psy->num_supplicants	= sizeof(imx_usb_charger_supplied_to)
-					/ sizeof(char *);
-
-	return 0;
-}
-
 static int ci_hdrc_imx_probe(struct platform_device *pdev)
 {
 	struct ci_hdrc_imx_data *data;
@@ -530,6 +447,7 @@ static int ci_hdrc_imx_probe(struct platform_device *pdev)
 	}
 
 	pdata.usb_phy = data->phy;
+	data->usbmisc_data->usb_phy = data->phy;
 
 	if ((of_device_is_compatible(np, "fsl,imx53-usb") ||
 	     of_device_is_compatible(np, "fsl,imx51-usb")) && pdata.usb_phy &&
@@ -585,19 +503,6 @@ static int ci_hdrc_imx_probe(struct platform_device *pdev)
 		data->usbmisc_data->anatop = data->anatop;
 	}
 
-	if (of_find_property(np, "imx-usb-charger-detection", NULL) &&
-							data->usbmisc_data) {
-		data->imx_usb_charger_detection = true;
-		data->charger.dev = dev;
-		data->usbmisc_data->charger = &data->charger;
-		ret = imx_usb_register_charger(&data->charger,
-						"imx_usb_charger");
-		if (ret && ret != -ENODEV)
-			goto disable_hsic_regulator;
-		if (!ret)
-			dev_dbg(dev, "USB Charger is created\n");
-	}
-
 	data->usbmisc_data->picophy = (imx_platform_flag == &imx7d_usb_data);
 	ret = imx_usbmisc_init(data->usbmisc_data);
 	if (ret) {
diff --git a/drivers/usb/chipidea/ci_hdrc_imx.h b/drivers/usb/chipidea/ci_hdrc_imx.h
index 5874f43..11798ae 100644
--- a/drivers/usb/chipidea/ci_hdrc_imx.h
+++ b/drivers/usb/chipidea/ci_hdrc_imx.h
@@ -7,37 +7,13 @@
 #define __DRIVER_USB_CHIPIDEA_CI_HDRC_IMX_H
 
 #include <linux/usb/otg.h>
-#include <linux/power_supply.h>
-
-enum battery_charging_spec {
-	BATTERY_CHARGING_SPEC_NONE = 0,
-	BATTERY_CHARGING_SPEC_UNKNOWN,
-	BATTERY_CHARGING_SPEC_1_0,
-	BATTERY_CHARGING_SPEC_1_1,
-	BATTERY_CHARGING_SPEC_1_2,
-};
-
-struct usb_charger {
-	/* USB controller */
-	struct device		*dev;
-	struct power_supply	*psy;
-	struct power_supply_desc	psy_desc;
-	struct mutex		lock;
-
-	/* Compliant with Battery Charging Specification version (if any) */
-	enum battery_charging_spec	bc;
-
-	/* properties */
-	unsigned		present:1;
-	unsigned		online:1;
-	unsigned		max_current;
-};
+#include <linux/usb/phy.h>
 
 struct imx_usbmisc_data {
 	struct device *dev;
 	int index;
 	struct regmap *anatop;
-	struct usb_charger *charger;
+	struct usb_phy *usb_phy;
 
 	unsigned int disable_oc:1; /* over current detect disabled */
 	unsigned int oc_polarity:1; /* over current polarity if oc enabled */
@@ -54,7 +30,6 @@ struct imx_usbmisc_data {
 	enum usb_dr_mode available_role;
 	int emp_curr_control;
 	int dc_vol_level_adjust;
-
 };
 
 int imx_usbmisc_init(struct imx_usbmisc_data *);
diff --git a/drivers/usb/chipidea/usbmisc_imx.c b/drivers/usb/chipidea/usbmisc_imx.c
index f9446c3..c80882f 100644
--- a/drivers/usb/chipidea/usbmisc_imx.c
+++ b/drivers/usb/chipidea/usbmisc_imx.c
@@ -173,6 +173,7 @@ struct imx_usbmisc {
 	void __iomem *base;
 	spinlock_t lock;
 	const struct usbmisc_ops *ops;
+	struct mutex mutex;
 };
 
 static struct regulator *vbus_wakeup_reg;
@@ -701,144 +702,6 @@ static int usbmisc_imx7d_power_lost_check(struct imx_usbmisc_data *data)
 }
 
 
-/***************************************************************************/
-/*                         imx usb charger detecton                        */
-/***************************************************************************/
-static void usb_charger_is_present(struct usb_charger *charger, bool present)
-{
-	if (present)
-		charger->present = 1;
-	else
-		charger->present = 0;
-
-	power_supply_changed(charger->psy);
-	sysfs_notify(&charger->psy->dev.kobj, NULL, "present");
-}
-
-static void imx6_disable_charger_detector(struct imx_usbmisc_data *data)
-{
-	struct regmap *regmap = data->anatop;
-
-	regmap_write(regmap, ANADIG_USB1_CHRG_DETECT_SET,
-				ANADIG_USB1_CHRG_DETECT_EN_B |
-				ANADIG_USB1_CHRG_DETECT_CHK_CHRG_B);
-}
-
-static int imx6_charger_data_contact_detect(struct imx_usbmisc_data *data)
-{
-	struct regmap *regmap = data->anatop;
-	struct usb_charger *charger = data->charger;
-	u32 val;
-	int i, data_pin_contact_count = 0;
-
-	/* check if vbus is valid */
-	regmap_read(regmap, ANADIG_USB1_VBUS_DET_STAT, &val);
-	if (!(val & ANADIG_USB1_VBUS_DET_STAT_VBUS_VALID)) {
-		dev_err(charger->dev, "vbus is error\n");
-		return -EINVAL;
-	}
-
-	/* Enable charger detector */
-	regmap_write(regmap, ANADIG_USB1_CHRG_DETECT_CLR,
-				ANADIG_USB1_CHRG_DETECT_EN_B);
-	/*
-	 * - Do not check whether a charger is connected to the USB port
-	 * - Check whether the USB plug has been in contact with each other
-	 */
-	regmap_write(regmap, ANADIG_USB1_CHRG_DETECT_SET,
-			ANADIG_USB1_CHRG_DETECT_CHK_CONTACT |
-			ANADIG_USB1_CHRG_DETECT_CHK_CHRG_B);
-
-	/* Check if plug is connected */
-	for (i = 0; i < 100; i = i + 1) {
-		regmap_read(regmap, ANADIG_USB1_CHRG_DET_STAT, &val);
-		if (val & ANADIG_USB1_CHRG_DET_STAT_PLUG_CONTACT) {
-			data_pin_contact_count++;
-			if (data_pin_contact_count > 5)
-				/* Data pin makes contact */
-				break;
-			else
-				usleep_range(5000, 10000);
-		} else {
-			data_pin_contact_count = 0;
-			usleep_range(5000, 6000);
-		}
-	}
-
-	if (i == 100) {
-		dev_err(charger->dev,
-			"VBUS is coming from a dedicated power supply.\n");
-		imx6_disable_charger_detector(data);
-		return -ENXIO;
-	}
-
-	return 0;
-}
-
-static int imx6_charger_primary_detection(struct imx_usbmisc_data *data)
-{
-	struct regmap *regmap = data->anatop;
-	struct usb_charger *charger = data->charger;
-	u32 val;
-	int ret;
-
-	ret = imx6_charger_data_contact_detect(data);
-	if (ret)
-		return ret;
-
-	/*
-	 * - Do check whether a charger is connected to the USB port
-	 * - Do not Check whether the USB plug has been in contact with
-	 * each other
-	 */
-	regmap_write(regmap, ANADIG_USB1_CHRG_DETECT_CLR,
-			ANADIG_USB1_CHRG_DETECT_CHK_CONTACT |
-			ANADIG_USB1_CHRG_DETECT_CHK_CHRG_B);
-
-	msleep(100);
-
-	/* Check if it is a charger */
-	regmap_read(regmap, ANADIG_USB1_CHRG_DET_STAT, &val);
-	if (!(val & ANADIG_USB1_CHRG_DET_STAT_CHRG_DETECTED)) {
-		dev_dbg(charger->dev, "It is a stardard downstream port\n");
-		charger->psy_desc.type = POWER_SUPPLY_TYPE_USB;
-		charger->max_current = 500;
-	}
-
-	imx6_disable_charger_detector(data);
-	return 0;
-}
-
-/*
- * It must be called after dp is pulled up (from USB controller driver),
- * That is used to differentiate DCP and CDP
- */
-int imx6_charger_secondary_detection(struct imx_usbmisc_data *data)
-{
-	struct regmap *regmap = data->anatop;
-	struct usb_charger *charger = data->charger;
-	int val;
-
-	msleep(80);
-
-	mutex_lock(&charger->lock);
-	regmap_read(regmap, ANADIG_USB1_CHRG_DET_STAT, &val);
-	if (val & ANADIG_USB1_CHRG_DET_STAT_DM_STATE) {
-		dev_dbg(charger->dev, "It is a dedicate charging port\n");
-		charger->psy_desc.type = POWER_SUPPLY_TYPE_USB_DCP;
-		charger->max_current = 1500;
-	} else {
-		dev_dbg(charger->dev, "It is a charging downstream port\n");
-		charger->psy_desc.type = POWER_SUPPLY_TYPE_USB_CDP;
-		charger->max_current = 900;
-	}
-
-	usb_charger_is_present(charger, true);
-	mutex_unlock(&charger->lock);
-
-	return 0;
-}
-
 static int usbmisc_imx6sx_power_lost_check(struct imx_usbmisc_data *data)
 {
 	struct imx_usbmisc *usbmisc = dev_get_drvdata(data->dev);
@@ -886,7 +749,6 @@ static void imx7_disable_charger_detector(struct imx_usbmisc_data *data)
 static int imx7d_charger_data_contact_detect(struct imx_usbmisc_data *data)
 {
 	struct imx_usbmisc *usbmisc = dev_get_drvdata(data->dev);
-	struct usb_charger *charger = data->charger;
 	unsigned long flags;
 	u32 val;
 	int i, data_pin_contact_count = 0;
@@ -896,7 +758,7 @@ static int imx7d_charger_data_contact_detect(struct imx_usbmisc_data *data)
 	/* check if vbus is valid */
 	val = readl(usbmisc->base + MX7D_USB_OTG_PHY_STATUS);
 	if (!(val & MX7D_USB_OTG_PHY_STATUS_VBUS_VLD)) {
-		dev_err(charger->dev, "vbus is error\n");
+		dev_err(data->dev, "vbus is error\n");
 		spin_unlock_irqrestore(&usbmisc->lock, flags);
 		return -EINVAL;
 	}
@@ -927,7 +789,7 @@ static int imx7d_charger_data_contact_detect(struct imx_usbmisc_data *data)
 	}
 
 	if (i == 100) {
-		dev_err(charger->dev,
+		dev_err(data->dev,
 			"VBUS is coming from a dedicated power supply.\n");
 		imx7_disable_charger_detector(data);
 		return -ENXIO;
@@ -939,7 +801,7 @@ static int imx7d_charger_data_contact_detect(struct imx_usbmisc_data *data)
 static int imx7d_charger_primary_detection(struct imx_usbmisc_data *data)
 {
 	struct imx_usbmisc *usbmisc = dev_get_drvdata(data->dev);
-	struct usb_charger *charger = data->charger;
+	struct usb_phy *usb_phy = data->usb_phy;
 	unsigned long flags;
 	u32 val;
 	int ret;
@@ -975,9 +837,8 @@ static int imx7d_charger_primary_detection(struct imx_usbmisc_data *data)
 	/* Check if it is a charger */
 	val = readl(usbmisc->base + MX7D_USB_OTG_PHY_STATUS);
 	if (!(val & MX7D_USB_OTG_PHY_STATUS_CHRGDET)) {
-		dev_dbg(charger->dev, "It is a stardard downstream port\n");
-		charger->psy_desc.type = POWER_SUPPLY_TYPE_USB;
-		charger->max_current = 500;
+		dev_dbg(data->dev, "It is a stardard downstream port\n");
+		usb_phy->chg_type = SDP_TYPE;
 	}
 
 	imx7_disable_charger_detector(data);
@@ -992,26 +853,20 @@ static int imx7d_charger_primary_detection(struct imx_usbmisc_data *data)
 int imx7d_charger_secondary_detection(struct imx_usbmisc_data *data)
 {
 	struct imx_usbmisc *usbmisc = dev_get_drvdata(data->dev);
-	struct usb_charger *charger = data->charger;
+	struct usb_phy *usb_phy = data->usb_phy;
 	int val;
 
 	msleep(80);
 
-	mutex_lock(&charger->lock);
 	val = readl(usbmisc->base + MX7D_USB_OTG_PHY_STATUS);
 	if (val & MX7D_USB_OTG_PHY_STATUS_LINE_STATE1) {
-		dev_dbg(charger->dev, "It is a dedicate charging port\n");
-		charger->psy_desc.type = POWER_SUPPLY_TYPE_USB_DCP;
-		charger->max_current = 1500;
+		dev_dbg(data->dev, "It is a dedicate charging port\n");
+		usb_phy->chg_type = DCP_TYPE;
 	} else {
-		dev_dbg(charger->dev, "It is a charging downstream port\n");
-		charger->psy_desc.type = POWER_SUPPLY_TYPE_USB_CDP;
-		charger->max_current = 900;
+		dev_dbg(data->dev, "It is a charging downstream port\n");
+		usb_phy->chg_type = CDP_TYPE;
 	}
 
-	usb_charger_is_present(charger, true);
-	mutex_unlock(&charger->lock);
-
 	return 0;
 }
 
@@ -1066,8 +921,6 @@ static int usbmisc_term_select_override(struct imx_usbmisc_data *data,
 static const struct usbmisc_ops imx6q_usbmisc_ops = {
 	.set_wakeup = usbmisc_imx6q_set_wakeup,
 	.init = usbmisc_imx6q_init,
-	.charger_primary_detection = imx6_charger_primary_detection,
-	.charger_secondary_detection = imx6_charger_secondary_detection,
 	.hsic_set_connect = usbmisc_imx6_hsic_set_connect,
 	.hsic_set_clk   = usbmisc_imx6_hsic_set_clk,
 };
@@ -1079,8 +932,6 @@ static int usbmisc_term_select_override(struct imx_usbmisc_data *data,
 static const struct usbmisc_ops imx6sx_usbmisc_ops = {
 	.set_wakeup = usbmisc_imx6q_set_wakeup,
 	.init = usbmisc_imx6sx_init,
-	.charger_primary_detection = imx6_charger_primary_detection,
-	.charger_secondary_detection = imx6_charger_secondary_detection,
 	.power_lost_check = usbmisc_imx6sx_power_lost_check,
 	.hsic_set_connect = usbmisc_imx6_hsic_set_connect,
 	.hsic_set_clk = usbmisc_imx6_hsic_set_clk,
@@ -1157,37 +1008,33 @@ int imx_usbmisc_set_wakeup(struct imx_usbmisc_data *data, bool enabled)
 int imx_usbmisc_charger_detection(struct imx_usbmisc_data *data, bool connect)
 {
 	struct imx_usbmisc *usbmisc;
-	struct usb_charger *charger;
+	struct usb_phy *usb_phy;
 	int ret = 0;
 
 	if (!data)
 		return -EINVAL;
 
-	charger = data->charger;
 	usbmisc = dev_get_drvdata(data->dev);
+	usb_phy = data->usb_phy;
 	if (!usbmisc->ops->charger_primary_detection)
 		return -ENOTSUPP;
 
-	mutex_lock(&charger->lock);
+	mutex_lock(&usbmisc->mutex);
 	if (connect) {
-		charger->online = 1;
 		ret = usbmisc->ops->charger_primary_detection(data);
 		if (ret) {
-			dev_err(charger->dev,
+			dev_err(data->dev,
 					"Error occurs during detection: %d\n",
 					ret);
+			usb_phy->chg_state = USB_CHARGER_ABSENT;
 		} else {
-			if (charger->psy_desc.type == POWER_SUPPLY_TYPE_USB)
-				usb_charger_is_present(charger, true);
+			usb_phy->chg_state = USB_CHARGER_PRESENT;
 		}
 	} else {
-		charger->online = 0;
-		charger->max_current = 0;
-		charger->psy_desc.type = POWER_SUPPLY_TYPE_MAINS;
-
-		usb_charger_is_present(charger, false);
+		usb_phy->chg_state = USB_CHARGER_ABSENT;
+		usb_phy->chg_type = UNKNOWN_TYPE;
 	}
-	mutex_unlock(&charger->lock);
+	mutex_unlock(&usbmisc->mutex);
 	return ret;
 }
 EXPORT_SYMBOL_GPL(imx_usbmisc_charger_detection);
@@ -1195,6 +1042,7 @@ int imx_usbmisc_charger_detection(struct imx_usbmisc_data *data, bool connect)
 int imx_usbmisc_charger_secondary_detection(struct imx_usbmisc_data *data)
 {
 	struct imx_usbmisc *usbmisc;
+	int ret;
 
 	if (!data)
 		return 0;
@@ -1202,7 +1050,11 @@ int imx_usbmisc_charger_secondary_detection(struct imx_usbmisc_data *data)
 	usbmisc = dev_get_drvdata(data->dev);
 	if (!usbmisc->ops->charger_secondary_detection)
 		return 0;
-	return usbmisc->ops->charger_secondary_detection(data);
+
+	mutex_lock(&usbmisc->mutex);
+	ret = usbmisc->ops->charger_secondary_detection(data);
+	mutex_unlock(&usbmisc->mutex);
+	return ret;
 }
 EXPORT_SYMBOL_GPL(imx_usbmisc_charger_secondary_detection);
 
@@ -1327,6 +1179,7 @@ static int usbmisc_imx_probe(struct platform_device *pdev)
 		return -ENOMEM;
 
 	spin_lock_init(&data->lock);
+	mutex_init(&data->mutex);
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	data->base = devm_ioremap_resource(&pdev->dev, res);
-- 
1.7.9.5

