From 0896b26e490a9844c093ce5feb838aab00b8bd65 Mon Sep 17 00:00:00 2001
From: Li Jun <jun.li@nxp.com>
Date: Wed, 26 Jul 2017 23:50:29 +0800
Subject: [PATCH 2289/5242] MLK-16013-10 staging: typec: add vbus detection
 for power sink

commit  9b3565567c8dad5fa24dfe7c2e1fb3bcd862de66 from
https://source.codeaurora.org/external/imx/linux-imx.git

Typec port controller may need enable vbus detection to detect
the vbus from power source.

Reviewed-by: Peter Chen <peter.chen@nxp.com>
Signed-off-by: Li Jun <jun.li@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/typec/tcpci.c |   21 +++++++++++++++++++++
 drivers/usb/typec/tcpm.c      |   11 +++++++++--
 include/linux/usb/tcpm.h      |    1 +
 3 files changed, 31 insertions(+), 2 deletions(-)

diff --git a/drivers/staging/typec/tcpci.c b/drivers/staging/typec/tcpci.c
index 076d97e..57a70fc 100644
--- a/drivers/staging/typec/tcpci.c
+++ b/drivers/staging/typec/tcpci.c
@@ -334,6 +334,26 @@ static int tcpci_pd_transmit(struct tcpc_dev *tcpc,
 	return 0;
 }
 
+static int tcpci_vbus_detect(struct tcpc_dev *tcpc, bool enable)
+{
+	struct tcpci *tcpci = tcpc_to_tcpci(tcpc);
+	int ret;
+
+	if (enable) {
+		ret = regmap_write(tcpci->regmap, TCPC_COMMAND,
+				   TCPC_CMD_ENABLE_VBUS_DETECT);
+		if (ret < 0)
+			return ret;
+	} else {
+		ret = regmap_write(tcpci->regmap, TCPC_COMMAND,
+				   TCPC_CMD_DISABLE_VBUS_DETECT);
+		if (ret < 0)
+			return ret;
+	}
+
+	return 0;
+}
+
 static int tcpci_init(struct tcpc_dev *tcpc)
 {
 	struct tcpci *tcpci = tcpc_to_tcpci(tcpc);
@@ -499,6 +519,7 @@ struct tcpci *tcpci_register_port(struct device *dev, struct tcpci_data *data)
 	tcpci->tcpc.set_polarity = tcpci_set_polarity;
 	tcpci->tcpc.set_vconn = tcpci_set_vconn;
 	tcpci->tcpc.start_drp_toggling = tcpci_start_drp_toggling;
+	tcpci->tcpc.vbus_detect = tcpci_vbus_detect;
 
 	tcpci->tcpc.set_pd_rx = tcpci_set_pd_rx;
 	tcpci->tcpc.set_roles = tcpci_set_roles;
diff --git a/drivers/usb/typec/tcpm.c b/drivers/usb/typec/tcpm.c
index a7e231c..bd94adf 100644
--- a/drivers/usb/typec/tcpm.c
+++ b/drivers/usb/typec/tcpm.c
@@ -2675,6 +2675,12 @@ static void tcpm_acc_detach(struct tcpm_port *port)
 	tcpm_detach(port);
 }
 
+static void tcpm_vbus_det(struct tcpm_port *port, bool enable)
+{
+	if (port->tcpc && port->tcpc->vbus_detect)
+		port->tcpc->vbus_detect(port->tcpc, true);
+}
+
 static inline enum tcpm_state hard_reset_state(struct tcpm_port *port)
 {
 	if (port->hard_reset_count < PD_N_HARD_RESET_COUNT)
@@ -2936,10 +2942,11 @@ static void run_state_machine(struct tcpm_port *port)
 		if ((port->cc1 == TYPEC_CC_OPEN &&
 		     port->cc2 != TYPEC_CC_OPEN) ||
 		    (port->cc1 != TYPEC_CC_OPEN &&
-		     port->cc2 == TYPEC_CC_OPEN))
+		     port->cc2 == TYPEC_CC_OPEN)) {
 			tcpm_set_state(port, SNK_DEBOUNCED,
 				       PD_T_CC_DEBOUNCE);
-		else if (tcpm_port_is_disconnected(port))
+			tcpm_vbus_det(port, true);
+		} else if (tcpm_port_is_disconnected(port))
 			tcpm_set_state(port, SNK_UNATTACHED,
 				       PD_T_PD_DEBOUNCE);
 		break;
diff --git a/include/linux/usb/tcpm.h b/include/linux/usb/tcpm.h
index b231b93..0443ade 100644
--- a/include/linux/usb/tcpm.h
+++ b/include/linux/usb/tcpm.h
@@ -158,6 +158,7 @@ struct tcpc_dev {
 	int (*try_role)(struct tcpc_dev *dev, int role);
 	int (*pd_transmit)(struct tcpc_dev *dev, enum tcpm_transmit_type type,
 			   const struct pd_message *msg);
+	int (*vbus_detect)(struct tcpc_dev *dev, bool enable);
 };
 
 struct tcpm_port;
-- 
1.7.9.5

