From d3e6c9449ec610945d53614bdc458382ce5c5994 Mon Sep 17 00:00:00 2001
From: Shengjiu Wang <shengjiu.wang@freescale.com>
Date: Thu, 23 Jun 2016 18:49:00 +0800
Subject: [PATCH 1856/5242] MLK-15004-1: ASoC: codec: cs42xx8: Add reset gpio
 of codec

commit  ca950fc7cdc4c935049e40766b974ab907a29a90 from
https://source.codeaurora.org/external/imx/linux-imx.git

Need to set the reset pin high when running, otherwise the chip
will remain in reset state.

Signed-off-by: Shengjiu Wang <shengjiu.wang@freescale.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 sound/soc/codecs/cs42xx8.c |   18 +++++++++++++++++-
 1 file changed, 17 insertions(+), 1 deletion(-)

diff --git a/sound/soc/codecs/cs42xx8.c b/sound/soc/codecs/cs42xx8.c
index 026aa10..7b49e14 100644
--- a/sound/soc/codecs/cs42xx8.c
+++ b/sound/soc/codecs/cs42xx8.c
@@ -14,6 +14,7 @@
 #include <linux/delay.h>
 #include <linux/module.h>
 #include <linux/of_device.h>
+#include <linux/of_gpio.h>
 #include <linux/pm_runtime.h>
 #include <linux/regulator/consumer.h>
 #include <sound/pcm_params.h>
@@ -45,6 +46,7 @@ struct cs42xx8_priv {
 	unsigned long sysclk;
 	u32 tx_channels;
 	int rate[2];
+	int reset_gpio;
 };
 
 /* -127.5dB to 0dB with step of 0.5dB */
@@ -503,7 +505,8 @@ static int cs42xx8_component_probe(struct snd_soc_component *component)
 
 int cs42xx8_probe(struct device *dev, struct regmap *regmap)
 {
-	const struct of_device_id *of_id;
+	const struct of_device_id *of_id = of_match_device(cs42xx8_of_match, dev);
+	struct device_node *np = dev->of_node;
 	struct cs42xx8_priv *cs42xx8;
 	int ret, val, i;
 
@@ -529,6 +532,16 @@ int cs42xx8_probe(struct device *dev, struct regmap *regmap)
 		return -EINVAL;
 	}
 
+	cs42xx8->reset_gpio = of_get_named_gpio(np, "reset-gpio", 0);
+	if (gpio_is_valid(cs42xx8->reset_gpio)) {
+		ret = devm_gpio_request_one(dev, cs42xx8->reset_gpio,
+				GPIOF_OUT_INIT_HIGH, "cs42xx8 reset");
+		if (ret) {
+			dev_err(dev, "unable to get reset gpio\n");
+			return ret;
+		}
+	}
+
 	cs42xx8->clk = devm_clk_get(dev, "mclk");
 	if (IS_ERR(cs42xx8->clk)) {
 		dev_err(dev, "failed to get the clock: %ld\n",
@@ -609,6 +622,9 @@ static int cs42xx8_runtime_resume(struct device *dev)
 		return ret;
 	}
 
+	if (gpio_is_valid(cs42xx8->reset_gpio))
+		gpio_set_value_cansleep(cs42xx8->reset_gpio, 1);
+
 	ret = regulator_bulk_enable(ARRAY_SIZE(cs42xx8->supplies),
 				    cs42xx8->supplies);
 	if (ret) {
-- 
1.7.9.5

