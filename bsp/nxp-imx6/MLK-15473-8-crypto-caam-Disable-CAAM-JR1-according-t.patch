From 1f5ebd9fc0dc3582f434f66def673f63a2c0d11d Mon Sep 17 00:00:00 2001
From: Aymen Sghaier <aymen.sghaier@nxp.com>
Date: Tue, 21 Nov 2017 18:31:35 +0100
Subject: [PATCH 4182/5242] MLK-15473-8: crypto: caam: Disable CAAM JR1
 according to SCFW update

commit  eba097f96d0fb11fac9ef2c1f8d30c83727b02ae from
https://source.codeaurora.org/external/imx/linux-imx.git

  After CAAM JR1 has been moved to SECO,
 imx-sc-firmware commit 36ff24f36b56 ("Move CAAM JR1 to SECO FW."),
 Linux no longer boots and rises a kernel panic at "caam_probe".
  So the CAAM JR1 should be disabled in the device-tree.

Tested-by: Daniel Baluta <daniel.baluta@nxp.com>
Reviewed-by: Silvano Di Ninno <silvano.dininno@nxp.com>
Signed-off-by: Aymen Sghaier <aymen.sghaier@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/caam/ctrl.c |   20 ++++++++++++++++----
 1 file changed, 16 insertions(+), 4 deletions(-)

diff --git a/drivers/crypto/caam/ctrl.c b/drivers/crypto/caam/ctrl.c
index 5e72a9d..0a48dc3 100644
--- a/drivers/crypto/caam/ctrl.c
+++ b/drivers/crypto/caam/ctrl.c
@@ -423,7 +423,7 @@ static void check_virt(struct caam_drv_private *ctrlpriv, u32 comp_params)
 
 static int enable_jobrings(struct caam_drv_private *ctrlpriv, int block_offset)
 {
-	int ring;
+	int ring, index;
 	int ret;
 	struct device_node *nprop, *np;
 	struct device *dev = ctrlpriv->dev;
@@ -450,9 +450,21 @@ static int enable_jobrings(struct caam_drv_private *ctrlpriv, int block_offset)
 	for_each_available_child_of_node(nprop, np)
 		if (of_device_is_compatible(np, "fsl,sec-v4.0-job-ring") ||
 		    of_device_is_compatible(np, "fsl,sec4.0-job-ring")) {
-			ctrlpriv->jr[ring] = (struct caam_job_ring __iomem __force *)
-					     ((__force uint8_t *)ctrl +
-					     (ring + JR_BLOCK_NUMBER) *
+
+			if (of_property_read_u32_index(np, "reg", 0, &index)) {
+				dev_err(dev, "%s read reg property error %d.",
+					np->full_name, index);
+				continue;
+			}
+			/* Get actual job ring index from its offset
+			 * ex: CAAM JR2 offset 0x30000 index = 2
+			 */
+			while (index > 16)
+				index = index >> 4;
+			index -= 1;
+			ctrlpriv->jr[index] = (struct caam_job_ring __force *)
+					     ((uint8_t *)ctrlpriv->ctrl +
+					     (index + JR_BLOCK_NUMBER) *
 					      block_offset);
 			ctrlpriv->total_jobrs++;
 			ring++;
-- 
1.7.9.5

