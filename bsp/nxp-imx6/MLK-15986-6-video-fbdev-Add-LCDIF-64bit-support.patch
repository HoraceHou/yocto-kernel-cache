From 07c67442c120dcb2675d5344de3d8135edad417b Mon Sep 17 00:00:00 2001
From: Cristina Ciocan <cristina-mihaela.ciocan@nxp.com>
Date: Wed, 5 Jul 2017 18:25:53 +0300
Subject: [PATCH 2236/5242] MLK-15986-6: video: fbdev: Add LCDIF 64bit support

commit  16351baea8b29515243bea87cfaa1bdff3ee8f86 from
https://source.codeaurora.org/external/imx/linux-imx.git

This patch enables LCDIF support for 64bit platforms.

Code for the LCDIF can be found in drivers/video/fbdev/mxsfb.c. Add 64bit
debug conditional directives to LCDIF code since this is a new option for
64bit platforms.

LCDIF driver changes are added from Fancy Fang's commit c12dd5e1c24c
("MLK-15322-4 video: fbdev: imx: lcdif: enable lcdif driver for imx8mq").

Signed-off-by: Cristina Ciocan <cristina-mihaela.ciocan@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/video/fbdev/Kconfig |    6 ++--
 drivers/video/fbdev/mx3fb.c |    2 +-
 drivers/video/fbdev/mxsfb.c |   70 ++++++++++++++++++++++++++++++-------------
 3 files changed, 55 insertions(+), 23 deletions(-)

diff --git a/drivers/video/fbdev/Kconfig b/drivers/video/fbdev/Kconfig
index f34b881..1e85acf 100644
--- a/drivers/video/fbdev/Kconfig
+++ b/drivers/video/fbdev/Kconfig
@@ -2280,7 +2280,8 @@ config FB_JZ4740
 
 config FB_MXS
 	tristate "MXS LCD framebuffer support"
-	depends on FB && (ARCH_MXS || ARCH_MXC)
+	depends on (FB && (ARCH_MXS || ARCH_MXC)) || \
+		   (FB_IMX64 && (ARCH_FSL_IMX8QM || ARCH_FSL_IMX8QXP || ARCH_FSL_IMX8MQ))
 	select FB_MXC_DISP_FRAMEWORK
 	select FB_CFB_FILLRECT
 	select FB_CFB_COPYAREA
@@ -2330,7 +2331,8 @@ source "drivers/video/fbdev/omap/Kconfig"
 source "drivers/video/fbdev/omap2/Kconfig"
 source "drivers/video/fbdev/mmp/Kconfig"
 
-if ARCH_MXC
+if ARCH_MXC || \
+	(FB_IMX64 && (ARCH_FSL_IMX8QM || ARCH_FSL_IMX8QXP || ARCH_FSL_IMX8MQ))
 source "drivers/video/fbdev/mxc/Kconfig"
 endif
 
diff --git a/drivers/video/fbdev/mx3fb.c b/drivers/video/fbdev/mx3fb.c
index 1c3c7ab..797b1f8 100644
--- a/drivers/video/fbdev/mx3fb.c
+++ b/drivers/video/fbdev/mx3fb.c
@@ -743,7 +743,7 @@ static int mx3fb_set_fix(struct fb_info *fbi)
 	struct fb_fix_screeninfo *fix = &fbi->fix;
 	struct fb_var_screeninfo *var = &fbi->var;
 
-	strncpy(fix->id, "DISP3 BG", 8);
+	strncpy(fix->id, "DISP3 BG", 9);
 
 	fix->line_length = var->xres_virtual * var->bits_per_pixel / 8;
 
diff --git a/drivers/video/fbdev/mxsfb.c b/drivers/video/fbdev/mxsfb.c
index a7fc463..06fe606 100644
--- a/drivers/video/fbdev/mxsfb.c
+++ b/drivers/video/fbdev/mxsfb.c
@@ -673,6 +673,9 @@ static void mxsfb_enable_controller(struct fb_info *fb_info)
 	struct mxsfb_info *host = fb_info->par;
 	u32 reg;
 	int ret;
+#ifdef CONFIG_FB_IMX64_DEBUG
+	static int pix_enable;
+#endif
 
 	dev_dbg(&host->pdev->dev, "%s\n", __func__);
 
@@ -702,26 +705,34 @@ static void mxsfb_enable_controller(struct fb_info *fb_info)
 				"dispdrv:%s\n", host->dispdrv->drv->name);
 	}
 
-	/* the pixel clock should be disabled before
-	 * trying to set its clock rate successfully.
-	 */
-	clk_disable_pix(host);
-	ret = clk_set_rate(host->clk_pix,
-			 PICOS2KHZ(fb_info->var.pixclock) * 1000U);
-	if (ret) {
-		dev_err(&host->pdev->dev,
-			"lcd pixel rate set failed: %d\n", ret);
-
-		if (host->reg_lcd) {
-			ret = regulator_disable(host->reg_lcd);
-			if (ret)
-				dev_err(&host->pdev->dev,
-					"lcd regulator disable failed: %d\n",
-					ret);
+#ifdef CONFIG_FB_IMX64_DEBUG
+	if (unlikely(!pix_enable)) {
+		/* the pixel clock should be disabled before
+		 * trying to set its clock rate successfully.
+		 */
+#else
+		clk_disable_pix(host);
+#endif
+		ret = clk_set_rate(host->clk_pix,
+				PICOS2KHZ(fb_info->var.pixclock) * 1000U);
+		if (ret) {
+			dev_err(&host->pdev->dev,
+				"lcd pixel rate set failed: %d\n", ret);
+
+			if (host->reg_lcd) {
+				ret = regulator_disable(host->reg_lcd);
+				if (ret)
+					dev_err(&host->pdev->dev,
+						"lcd regulator disable failed: %d\n",
+						ret);
+			}
+			return;
 		}
-		return;
+		clk_enable_pix(host);
+#ifdef CONFIG_FB_IMX64_DEBUG
+		pix_enable++;
 	}
-	clk_enable_pix(host);
+#endif
 
 	writel(CTRL2_OUTSTANDING_REQS__REQ_16,
 		host->base + LCDC_V4_CTRL2 + REG_SET);
@@ -816,6 +827,13 @@ static int mxsfb_set_par(struct fb_info *fb_info)
 	int line_size, fb_size;
 	int reenable = 0;
 	static u32 equal_bypass = 0;
+#ifdef CONFIG_FB_IMX64_DEBUG
+	static int time;
+
+	if (time == 1)
+		return 0;
+	time++;
+#endif
 
 	if (likely(equal_bypass > 1)) {
 		/* If parameter no change, don't reconfigure. */
@@ -913,8 +931,10 @@ static int mxsfb_set_par(struct fb_info *fb_info)
 		vdctrl0 |= VDCTRL0_HSYNC_ACT_HIGH;
 	if (host->sync & FB_SYNC_VERT_HIGH_ACT)
 		vdctrl0 |= VDCTRL0_VSYNC_ACT_HIGH;
+#ifndef CONFIG_FB_IMX64_DEBUG
 	if (!(host->sync & FB_SYNC_OE_LOW_ACT))
 		vdctrl0 |= VDCTRL0_ENABLE_ACT_HIGH;
+#endif
 	if (host->sync & FB_SYNC_CLK_LAT_FALL)
 		vdctrl0 |= VDCTRL0_DOTCLK_ACT_FALLING;
 
@@ -1047,6 +1067,10 @@ static int mxsfb_blank(int blank, struct fb_info *fb_info)
 {
 	struct mxsfb_info *host = fb_info->par;
 
+#ifdef CONFIG_FB_IMX64_DEBUG
+	return 0;
+#endif
+
 	host->cur_blank = blank;
 
 	switch (blank) {
@@ -1183,12 +1207,14 @@ static int mxsfb_restore_mode(struct fb_info *fb_info)
 	clk_enable_axi(host);
 	clk_enable_disp_axi(host);
 
+#ifndef CONFIG_FB_IMX64_DEBUG
 	/* Enable pixel clock earlier since in 7D
 	 * the lcdif registers should be accessed
 	 * when the pixel clock is enabled, otherwise
 	 * the bus will be hang.
 	 */
 	clk_enable_pix(host);
+#endif
 
 	/* Only restore the mode when the controller is running */
 	ctrl = readl(host->base + LCDC_CTRL);
@@ -1482,8 +1508,6 @@ static int mxsfb_dispdrv_init(struct platform_device *pdev,
 
 static void mxsfb_free_videomem(struct fb_info *fb_info)
 {
-	struct mxsfb_info *host = fb_info->par;
-
 	mxsfb_unmap_videomem(fb_info);
 }
 
@@ -2294,6 +2318,7 @@ static int mxsfb_probe(struct platform_device *pdev)
 
 	mxsfb_overlay_init(host);
 
+#ifndef CONFIG_FB_IMX64_DEBUG
 	console_lock();
 	ret = fb_blank(fb_info, FB_BLANK_UNBLANK);
 	console_unlock();
@@ -2301,15 +2326,20 @@ static int mxsfb_probe(struct platform_device *pdev)
 		dev_err(&pdev->dev, "Failed to unblank framebuffer\n");
 		goto fb_unregister;
 	}
+#endif
 
 	dev_info(&pdev->dev, "initialized\n");
 
 	return 0;
 
+#ifndef CONFIG_FB_IMX64_DEBUG
 fb_unregister:
 	unregister_framebuffer(fb_info);
+#endif
 fb_destroy:
 	fb_destroy_modelist(&fb_info->modelist);
+fb_free_videomem:
+	mxsfb_free_videomem(fb_info);
 fb_pm_runtime_disable:
 	clk_disable_pix(host);
 	clk_disable_axi(host);
-- 
1.7.9.5

