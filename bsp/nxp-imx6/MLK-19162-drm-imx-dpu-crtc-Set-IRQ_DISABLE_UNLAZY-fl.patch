From 0993da3fa2cbab0551a9020bb724971dee71726b Mon Sep 17 00:00:00 2001
From: Liu Ying <victor.liu@nxp.com>
Date: Fri, 24 Aug 2018 17:10:51 +0800
Subject: [PATCH 4447/5242] MLK-19162 drm/imx: dpu: crtc: Set
 IRQ_DISABLE_UNLAZY flag to interrupt status

commit  2f8235570dd9a073533fc358118f1e285655faf4 from
https://source.codeaurora.org/external/imx/linux-imx.git

Comparing to 4.9 kernel, the generic irq chip core of 4.14 kernel
imposes more strict check on !irqd_irq_masked(&desc->irq_data) when
it tries to unmask an irq via unmask_irq().  For irq chips without
implementing ->irq_enable() and ->irq_disable() callbacks, like the
DPU irq chip, the IRQ_DISABLE_UNLAZY flag has to be set to irq status,
otherwise, irqs cannot be enabled again after disablement(due to things
like system power management).

Signed-off-by: Liu Ying <victor.liu@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/gpu/drm/imx/dpu/dpu-crtc.c |    5 +++++
 1 file changed, 5 insertions(+)

diff --git a/drivers/gpu/drm/imx/dpu/dpu-crtc.c b/drivers/gpu/drm/imx/dpu/dpu-crtc.c
index ded240f..f91e6d4 100644
--- a/drivers/gpu/drm/imx/dpu/dpu-crtc.c
+++ b/drivers/gpu/drm/imx/dpu/dpu-crtc.c
@@ -22,6 +22,7 @@
 #include <linux/device.h>
 #include <linux/errno.h>
 #include <linux/export.h>
+#include <linux/irq.h>
 #include <linux/module.h>
 #include <linux/platform_device.h>
 #include <video/dpu.h>
@@ -685,6 +686,7 @@ static int dpu_crtc_init(struct dpu_crtc *dpu_crtc,
 	dpu_crtc->vbl_irq = dpu_map_inner_irq(dpu, stream_id ?
 				IRQ_DISENGCFG_FRAMECOMPLETE1 :
 				IRQ_DISENGCFG_FRAMECOMPLETE0);
+	irq_set_status_flags(dpu_crtc->vbl_irq, IRQ_DISABLE_UNLAZY);
 	ret = devm_request_irq(dev, dpu_crtc->vbl_irq, dpu_vbl_irq_handler, 0,
 				"imx_drm", dpu_crtc);
 	if (ret < 0) {
@@ -695,6 +697,7 @@ static int dpu_crtc_init(struct dpu_crtc *dpu_crtc,
 
 	dpu_crtc->safety_shdld_irq = dpu_map_inner_irq(dpu, stream_id ?
 			IRQ_EXTDST5_SHDLOAD : IRQ_EXTDST4_SHDLOAD);
+	irq_set_status_flags(dpu_crtc->safety_shdld_irq, IRQ_DISABLE_UNLAZY);
 	ret = devm_request_irq(dev, dpu_crtc->safety_shdld_irq,
 				dpu_safety_shdld_irq_handler, 0, "imx_drm",
 				dpu_crtc);
@@ -708,6 +711,7 @@ static int dpu_crtc_init(struct dpu_crtc *dpu_crtc,
 
 	dpu_crtc->content_shdld_irq = dpu_map_inner_irq(dpu, stream_id ?
 			IRQ_EXTDST1_SHDLOAD : IRQ_EXTDST0_SHDLOAD);
+	irq_set_status_flags(dpu_crtc->content_shdld_irq, IRQ_DISABLE_UNLAZY);
 	ret = devm_request_irq(dev, dpu_crtc->content_shdld_irq,
 				dpu_content_shdld_irq_handler, 0, "imx_drm",
 				dpu_crtc);
@@ -721,6 +725,7 @@ static int dpu_crtc_init(struct dpu_crtc *dpu_crtc,
 
 	dpu_crtc->dec_shdld_irq = dpu_map_inner_irq(dpu, stream_id ?
 			IRQ_DISENGCFG_SHDLOAD1 : IRQ_DISENGCFG_SHDLOAD0);
+	irq_set_status_flags(dpu_crtc->dec_shdld_irq, IRQ_DISABLE_UNLAZY);
 	ret = devm_request_irq(dev, dpu_crtc->dec_shdld_irq,
 				dpu_dec_shdld_irq_handler, 0, "imx_drm",
 				dpu_crtc);
-- 
1.7.9.5

