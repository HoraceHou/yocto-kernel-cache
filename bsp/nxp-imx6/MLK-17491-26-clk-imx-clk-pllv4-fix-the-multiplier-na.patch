From 31718973f73094b24f60772f43520054548aadda Mon Sep 17 00:00:00 2001
From: Dong Aisheng <aisheng.dong@nxp.com>
Date: Thu, 7 Sep 2017 13:06:40 +0800
Subject: [PATCH 3321/5242] MLK-17491-26 clk: imx: clk-pllv4: fix the
 multiplier name

commit  47e2cfbcf87c23f7195a3ca65bf949369f9b065b from
https://source.codeaurora.org/external/imx/linux-imx.git

Currently using 'div' name for the PLL multiplier defined in RM which is a
bit confusing. So fix it.

Fixes: 78ef764871d6 ("MLK-13441-5 ARM: imx: add new clk types")
Cc: Anson Huang <Anson.Huang@nxp.com>
Reviewed-by: Bai Ping <ping.bai@nxp.com>
Signed-off-by: Dong Aisheng <aisheng.dong@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/clk/imx/clk-pllv4.c |   22 +++++++++++-----------
 1 file changed, 11 insertions(+), 11 deletions(-)

diff --git a/drivers/clk/imx/clk-pllv4.c b/drivers/clk/imx/clk-pllv4.c
index 84f22f6..36b16c9 100644
--- a/drivers/clk/imx/clk-pllv4.c
+++ b/drivers/clk/imx/clk-pllv4.c
@@ -17,8 +17,8 @@
 #include "clk.h"
 
 #define PLL_EN			BIT(0)
-#define BP_PLL_DIV		16
-#define BM_PLL_DIV		(0x7f << 16)
+#define BP_PLL_MULT		16
+#define BM_PLL_MULT		(0x7f << 16)
 #define PLL_CFG_OFFSET		0x08
 #define PLL_NUM_OFFSET		0x10
 #define PLL_DENOM_OFFSET	0x14
@@ -39,14 +39,14 @@ static unsigned long clk_pllv4_recalc_rate(struct clk_hw *hw,
 	struct clk_pllv4 *pll = to_clk_pllv4(hw);
 	u32 mfn = readl_relaxed(pll->base + PLL_NUM_OFFSET);
 	u32 mfd = readl_relaxed(pll->base + PLL_DENOM_OFFSET);
-	u32 div = (readl_relaxed(pll->base + PLL_CFG_OFFSET)
-		& BM_PLL_DIV) >> BP_PLL_DIV;
+	u32 mult = (readl_relaxed(pll->base + PLL_CFG_OFFSET)
+		& BM_PLL_MULT) >> BP_PLL_MULT;
 	u64 temp64 = (u64)parent_rate;
 
 	temp64 *= mfn;
 	do_div(temp64, mfd);
 
-	return (parent_rate * div) + (u32)temp64;
+	return (parent_rate * mult) + (u32)temp64;
 }
 
 static long clk_pllv4_round_rate(struct clk_hw *hw, unsigned long rate,
@@ -106,23 +106,23 @@ static int clk_pllv4_set_rate(struct clk_hw *hw, unsigned long rate,
 		unsigned long parent_rate)
 {
 	struct clk_pllv4 *pll = to_clk_pllv4(hw);
-	u32 val, div;
+	u32 val, mult;
 	u32 mfn, mfd = 1000000;
 	u64 temp64;
 
-	div = rate / parent_rate;
+	mult = rate / parent_rate;
 
-	if (clk_pllv4_is_valid_mult(div))
+	if (clk_pllv4_is_valid_mult(mult))
 		return -EINVAL;
 
-	temp64 = (u64) (rate - div * parent_rate);
+	temp64 = (u64) (rate - mult * parent_rate);
 	temp64 *= mfd;
 	do_div(temp64, parent_rate);
 	mfn = temp64;
 
 	val = readl_relaxed(pll->base + PLL_CFG_OFFSET);
-	val &= ~BM_PLL_DIV;
-	val |= (div << BP_PLL_DIV);
+	val &= ~BM_PLL_MULT;
+	val |= mult << BP_PLL_MULT;
 	writel_relaxed(val, pll->base + PLL_CFG_OFFSET);
 	writel_relaxed(mfn, pll->base + PLL_NUM_OFFSET);
 	writel_relaxed(mfd, pll->base + PLL_DENOM_OFFSET);
-- 
1.7.9.5

