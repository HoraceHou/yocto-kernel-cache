From 66be04e549326fda7b4221e83e7df59726961953 Mon Sep 17 00:00:00 2001
From: Han Xu <han.xu@nxp.com>
Date: Wed, 5 Sep 2018 16:13:54 -0500
Subject: [PATCH 4546/5242] MLK-19462: mtd: fsl-quadspi: handle runtime pm
 properly in error path

commit  9188a04e21cf30006784130db96dc6e472ee1477 from
https://source.codeaurora.org/external/imx/linux-imx.git

runtime pm suspend should be called in error path during fsl-quadspi
driver probe. change the code to handle it properly.

Add one more hwcaps SNOR_HWCAPS_READ_1_1_4 for the Spansion QSPI nor
s25fl128s since it only indicate this mode as the best performance mode
in SFDP table.

Signed-off-by: Han Xu <han.xu@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/mtd/spi-nor/fsl-quadspi.c |   28 +++++++++++++++++-----------
 1 file changed, 17 insertions(+), 11 deletions(-)

diff --git a/drivers/mtd/spi-nor/fsl-quadspi.c b/drivers/mtd/spi-nor/fsl-quadspi.c
index 27245c3..e7a9b9c 100644
--- a/drivers/mtd/spi-nor/fsl-quadspi.c
+++ b/drivers/mtd/spi-nor/fsl-quadspi.c
@@ -31,6 +31,7 @@
 #include <linux/pm_qos.h>
 #include <linux/sizes.h>
 #include <linux/pm_runtime.h>
+#include <linux/pinctrl/consumer.h>
 
 /* runtime pm timeout */
 #define QUADSPI_RPM_TIMEOUT 50 /* 50ms */
@@ -1117,7 +1118,8 @@ static void fsl_qspi_unprep(struct spi_nor *nor, enum spi_nor_ops ops)
 static int fsl_qspi_probe(struct platform_device *pdev)
 {
 	const struct spi_nor_hwcaps hwcaps = {
-		.mask = SNOR_HWCAPS_READ_1_4_4_DTR |
+		.mask = SNOR_HWCAPS_READ_1_1_4 |
+			SNOR_HWCAPS_READ_1_4_4_DTR |
 			SNOR_HWCAPS_PP,
 	};
 	struct device_node *np = pdev->dev.of_node;
@@ -1184,12 +1186,6 @@ static int fsl_qspi_probe(struct platform_device *pdev)
 	if (ret)
 		q->ddr_smp = 0;
 
-	ret = fsl_qspi_init_rpm(q);
-	if (ret) {
-		dev_err(dev, "can not enable the clock\n");
-		goto clk_failed;
-	}
-
 	/* find the irq */
 	ret = platform_get_irq(pdev, 0);
 	if (ret < 0) {
@@ -1204,15 +1200,21 @@ static int fsl_qspi_probe(struct platform_device *pdev)
 		goto clk_failed;
 	}
 
+	ret = fsl_qspi_init_rpm(q);
+	if (ret) {
+		dev_err(dev, "can not enable the clock\n");
+		goto clk_failed;
+	}
+
 	ret = pm_runtime_get_sync(q->dev);
 	if (ret < 0) {
 		dev_err(q->dev, "Failed to enable clock\n");
-		return ret;
+		goto rpm_init_failed;
 	}
 
 	ret = fsl_qspi_nor_setup(q);
 	if (ret)
-		goto clk_failed;
+		goto rpm_failed;
 
 	if (of_get_property(np, "fsl,qspi-has-second-chip", NULL))
 		q->has_second_chip = true;
@@ -1321,10 +1323,14 @@ static int fsl_qspi_probe(struct platform_device *pdev)
 	}
 mutex_failed:
 	mutex_destroy(&q->lock);
-clk_failed:
-	dev_err(dev, "Freescale QuadSPI probe failed\n");
+rpm_failed:
+	pm_runtime_mark_last_busy(q->dev);
+	pm_runtime_put_autosuspend(q->dev);
+rpm_init_failed:
 	pm_runtime_dont_use_autosuspend(q->dev);
 	pm_runtime_disable(q->dev);
+clk_failed:
+	dev_err(dev, "Freescale QuadSPI probe failed\n");
 	return ret;
 }
 
-- 
1.7.9.5

