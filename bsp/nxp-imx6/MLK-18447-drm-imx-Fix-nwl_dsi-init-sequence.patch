From b4a58006a1ee94694816682fbad1bdac2ee0407d Mon Sep 17 00:00:00 2001
From: Robert Chiras <robert.chiras@nxp.com>
Date: Tue, 12 Jun 2018 14:20:52 +0300
Subject: [PATCH 3975/5242] MLK-18447: drm: imx: Fix nwl_dsi init sequence

commit  858d66d7f62c699f5553125f4c926523cf75fee6 from
https://source.codeaurora.org/external/imx/linux-imx.git

The init sequence for i.MX8QXP had some flaws, making MIPI1 not working
when MIPI0 was not started.
Also, re-arrange the SC calls for a better stability during power on.
Also, change the poweroff return signature to void, since the disable
return is also void.

Signed-off-by: Robert Chiras <robert.chiras@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/gpu/drm/imx/nwl_dsi-imx.c |  129 +++++++++++++++++++------------------
 1 file changed, 65 insertions(+), 64 deletions(-)

diff --git a/drivers/gpu/drm/imx/nwl_dsi-imx.c b/drivers/gpu/drm/imx/nwl_dsi-imx.c
index 91e2be7..37317ce 100644
--- a/drivers/gpu/drm/imx/nwl_dsi-imx.c
+++ b/drivers/gpu/drm/imx/nwl_dsi-imx.c
@@ -113,7 +113,7 @@ enum imx_ext_regs {
 
 struct devtype {
 	int (*poweron)(struct imx_mipi_dsi *);
-	int (*poweroff)(struct imx_mipi_dsi *);
+	void (*poweroff)(struct imx_mipi_dsi *);
 	u32 ext_regs; /* required external registers */
 	u32 tx_ulps_reg;
 	u32 pxl2dpi_reg;
@@ -122,7 +122,7 @@ struct devtype {
 };
 
 static int imx8qm_dsi_poweron(struct imx_mipi_dsi *dsi);
-static int imx8qm_dsi_poweroff(struct imx_mipi_dsi *dsi);
+static void imx8qm_dsi_poweroff(struct imx_mipi_dsi *dsi);
 static struct devtype imx8qm_dev = {
 	.poweron = &imx8qm_dsi_poweron,
 	.poweroff = &imx8qm_dsi_poweroff,
@@ -139,7 +139,7 @@ struct devtype {
 };
 
 static int imx8qxp_dsi_poweron(struct imx_mipi_dsi *dsi);
-static int imx8qxp_dsi_poweroff(struct imx_mipi_dsi *dsi);
+static void imx8qxp_dsi_poweroff(struct imx_mipi_dsi *dsi);
 static struct devtype imx8qxp_dev = {
 	.poweron = &imx8qxp_dsi_poweron,
 	.poweroff = &imx8qxp_dsi_poweroff,
@@ -156,7 +156,7 @@ struct devtype {
 };
 
 static int imx8mq_dsi_poweron(struct imx_mipi_dsi *dsi);
-static int imx8mq_dsi_poweroff(struct imx_mipi_dsi *dsi);
+static void imx8mq_dsi_poweroff(struct imx_mipi_dsi *dsi);
 static struct devtype imx8mq_dev = {
 	.poweron = &imx8mq_dsi_poweron,
 	.poweroff = &imx8mq_dsi_poweroff,
@@ -261,6 +261,27 @@ static int imx8q_dsi_poweron(struct imx_mipi_dsi *dsi, bool v2)
 			     mipi_id,
 			     dc_id);
 
+	if (v2) {
+		sci_err = sc_misc_set_control(ipc_handle,
+				mipi_id, SC_C_MODE, 0);
+		if (sci_err != SC_ERR_NONE)
+			DRM_DEV_ERROR(dev,
+				      "Failed to set SC_C_MODE (%d)\n",
+				      sci_err);
+		sci_err = sc_misc_set_control(ipc_handle,
+				mipi_id, SC_C_DUAL_MODE, 0);
+		if (sci_err != SC_ERR_NONE)
+			DRM_DEV_ERROR(dev,
+				      "Failed to set SC_C_DUAL_MODE (%d)\n",
+				      sci_err);
+		sci_err = sc_misc_set_control(ipc_handle,
+				mipi_id, SC_C_PXL_LINK_SEL, 0);
+		if (sci_err != SC_ERR_NONE)
+			DRM_DEV_ERROR(dev,
+				     "Failed to set SC_C_PXL_LINK_SEL (%d)\n",
+				     sci_err);
+	}
+
 	/* Initialize Pixel Link */
 	mipi_ctrl = (v2 && inst)?PXL_ADDR(2):PXL_ADDR(1);
 	sci_err = sc_misc_set_control(ipc_handle,
@@ -304,27 +325,6 @@ static int imx8q_dsi_poweron(struct imx_mipi_dsi *dsi, bool v2)
 		goto err_ipc;
 	}
 
-	if (v2) {
-		sci_err = sc_misc_set_control(ipc_handle,
-				mipi_id, SC_C_MODE, 0);
-		if (sci_err != SC_ERR_NONE)
-			DRM_DEV_ERROR(dev,
-				      "Failed to set SC_C_MODE (%d)\n",
-				      sci_err);
-		sci_err = sc_misc_set_control(ipc_handle,
-				mipi_id, SC_C_DUAL_MODE, 0);
-		if (sci_err != SC_ERR_NONE)
-			DRM_DEV_ERROR(dev,
-				      "Failed to set SC_C_DUAL_MODE (%d)\n",
-				      sci_err);
-		sci_err = sc_misc_set_control(ipc_handle,
-				mipi_id, SC_C_PXL_LINK_SEL, inst);
-		if (sci_err != SC_ERR_NONE)
-			DRM_DEV_ERROR(dev,
-				     "Failed to set SC_C_PXL_LINK_SEL (%d)\n",
-				     sci_err);
-	}
-
 	/* Assert DPI and MIPI bits */
 	sci_err = sc_misc_set_control(ipc_handle,
 				      mipi_id,
@@ -365,7 +365,7 @@ static int imx8q_dsi_poweron(struct imx_mipi_dsi *dsi, bool v2)
 	return ret;
 }
 
-static int imx8q_dsi_poweroff(struct imx_mipi_dsi *dsi, bool v2)
+static void imx8q_dsi_poweroff(struct imx_mipi_dsi *dsi, bool v2)
 {
 	struct device *dev = dsi->dev;
 	sc_err_t sci_err = 0;
@@ -373,46 +373,47 @@ static int imx8q_dsi_poweroff(struct imx_mipi_dsi *dsi, bool v2)
 	u32 mu_id;
 	u32 inst = dsi->instance;
 	sc_rsrc_t mipi_id, dc_id;
+	sc_ctrl_t mipi_ctrl;
 
-	mipi_id = (inst)?SC_R_MIPI_1:SC_R_MIPI_0;
-	if (v2)
-		dc_id = SC_R_DC_0;
-	else
-		dc_id = (inst)?SC_R_DC_1:SC_R_DC_0;
+	mipi_id = inst?MIPI_ID(1):MIPI_ID(0);
+	dc_id = (!v2 && inst)?DC_ID(1):DC_ID(0);
 
 	/* Deassert DPI and MIPI bits */
-	if (sc_ipc_getMuID(&mu_id) == SC_ERR_NONE &&
-	    sc_ipc_open(&ipc_handle, mu_id) == SC_ERR_NONE) {
-		sci_err = sc_misc_set_control(ipc_handle,
-				mipi_id, SC_C_DPI_RESET, 0);
-		if (sci_err != SC_ERR_NONE)
-			DRM_DEV_ERROR(dev,
-				"Failed to deassert DPI reset (%d)\n",
-				sci_err);
+	if (sc_ipc_getMuID(&mu_id) != SC_ERR_NONE ||
+	    sc_ipc_open(&ipc_handle, mu_id) != SC_ERR_NONE)
+		return;
 
-		sci_err = sc_misc_set_control(ipc_handle,
-				mipi_id, SC_C_MIPI_RESET, 0);
-		if (sci_err != SC_ERR_NONE)
-			DRM_DEV_ERROR(dev,
-				"Failed to deassert MIPI reset (%d)\n",
-				sci_err);
+	sci_err = sc_misc_set_control(ipc_handle,
+			mipi_id, SC_C_DPI_RESET, 0);
+	if (sci_err != SC_ERR_NONE)
+		DRM_DEV_ERROR(dev,
+			"Failed to deassert DPI reset (%d)\n",
+			sci_err);
 
-		sci_err = sc_misc_set_control(ipc_handle,
-				dc_id, SC_C_SYNC_CTRL0, 0);
-		if (sci_err != SC_ERR_NONE)
-			DRM_DEV_ERROR(dev,
-				"Failed to reset SC_C_SYNC_CTRL0 (%d)\n",
-				sci_err);
+	sci_err = sc_misc_set_control(ipc_handle,
+			mipi_id, SC_C_MIPI_RESET, 0);
+	if (sci_err != SC_ERR_NONE)
+		DRM_DEV_ERROR(dev,
+			"Failed to deassert MIPI reset (%d)\n",
+			sci_err);
 
-		sci_err = sc_misc_set_control(ipc_handle,
-				dc_id, SC_C_PXL_LINK_MST1_VLD, 0);
-		if (sci_err != SC_ERR_NONE)
-			DRM_DEV_ERROR(dev,
-				"Failed to reset SC_C_SYNC_CTRL0 (%d)\n",
-				sci_err);
-	}
+	mipi_ctrl = (v2 && inst)?SYNC_CTRL(1):SYNC_CTRL(0);
+	sci_err = sc_misc_set_control(ipc_handle,
+			dc_id, mipi_ctrl, 0);
+	if (sci_err != SC_ERR_NONE)
+		DRM_DEV_ERROR(dev,
+			"Failed to reset SC_C_SYNC_CTRL0 (%d)\n",
+			sci_err);
 
-	return 0;
+	mipi_ctrl = (v2 && inst)?PXL_VLD(2):PXL_VLD(1);
+	sci_err = sc_misc_set_control(ipc_handle,
+			dc_id, mipi_ctrl, 0);
+	if (sci_err != SC_ERR_NONE)
+		DRM_DEV_ERROR(dev,
+			"Failed to reset SC_C_SYNC_CTRL0 (%d)\n",
+			sci_err);
+
+	sc_ipc_close(ipc_handle);
 }
 
 static int imx8qm_dsi_poweron(struct imx_mipi_dsi *dsi)
@@ -420,7 +421,7 @@ static int imx8qm_dsi_poweron(struct imx_mipi_dsi *dsi)
 	return imx8q_dsi_poweron(dsi, false);
 }
 
-static int imx8qm_dsi_poweroff(struct imx_mipi_dsi *dsi)
+static void imx8qm_dsi_poweroff(struct imx_mipi_dsi *dsi)
 {
 	return imx8q_dsi_poweroff(dsi, false);
 }
@@ -430,7 +431,7 @@ static int imx8qxp_dsi_poweron(struct imx_mipi_dsi *dsi)
 	return imx8q_dsi_poweron(dsi, true);
 }
 
-static int imx8qxp_dsi_poweroff(struct imx_mipi_dsi *dsi)
+static void imx8qxp_dsi_poweroff(struct imx_mipi_dsi *dsi)
 {
 	return imx8q_dsi_poweroff(dsi, true);
 }
@@ -449,7 +450,7 @@ static int imx8mq_dsi_poweron(struct imx_mipi_dsi *dsi)
 	return 0;
 }
 
-static int imx8mq_dsi_poweroff(struct imx_mipi_dsi *dsi)
+static void imx8mq_dsi_poweroff(struct imx_mipi_dsi *dsi)
 {
 	regmap_update_bits(dsi->reset, SRC_MIPIPHY_RCR,
 			   PCLK_RESET_N, 0);
@@ -459,8 +460,6 @@ static int imx8mq_dsi_poweroff(struct imx_mipi_dsi *dsi)
 			   RESET_BYTE_N, 0);
 	regmap_update_bits(dsi->reset, SRC_MIPIPHY_RCR,
 			   DPI_RESET_N, 0);
-
-	return 0;
 }
 
 static void imx_nwl_dsi_enable(struct imx_mipi_dsi *dsi)
@@ -906,6 +905,8 @@ static void imx_nwl_dsi_unbind(struct device *dev,
 
 	if (dsi->encoder.dev)
 		drm_encoder_cleanup(&dsi->encoder);
+
+	pm_runtime_disable(dev);
 }
 
 static const struct component_ops imx_nwl_dsi_component_ops = {
-- 
1.7.9.5

