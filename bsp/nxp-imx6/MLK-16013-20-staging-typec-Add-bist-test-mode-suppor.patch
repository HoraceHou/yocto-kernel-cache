From cd52f40ed12c7ea25a90e1e0a526b45755a17914 Mon Sep 17 00:00:00 2001
From: Li Jun <jun.li@nxp.com>
Date: Thu, 27 Jul 2017 21:38:13 +0800
Subject: [PATCH 2299/5242] MLK-16013-20 staging: typec: Add bist test mode
 support
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

commit  e4c6f14104f34d846e8912f9968ffb30df894da1 from
https://source.codeaurora.org/external/imx/linux-imx.git

BIST(Built In Self-Test â€“ Power Delivery testing mechanism for
the PHY Layer), see PD 3.0 spec 5.9 Built in Self-Test (BIST), is
added to support BIST message handling in PD compliance test.

Reviewed-by: Peter Chen <peter.chen@nxp.com>
Signed-off-by: Li Jun <jun.li@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/typec/tcpci.c |   10 ++++++++++
 drivers/staging/typec/tcpci.h |    1 +
 drivers/usb/typec/tcpm.c      |    9 +++++++++
 include/linux/usb/tcpm.h      |    1 +
 4 files changed, 21 insertions(+)

diff --git a/drivers/staging/typec/tcpci.c b/drivers/staging/typec/tcpci.c
index d7430b2..57fcdd9 100644
--- a/drivers/staging/typec/tcpci.c
+++ b/drivers/staging/typec/tcpci.c
@@ -445,6 +445,15 @@ static int tcpci_vbus_detect(struct tcpc_dev *tcpc, bool enable)
 	return 0;
 }
 
+static void tcpci_bist_mode(struct tcpc_dev *tcpc, bool enable)
+{
+	struct tcpci *tcpci = tcpc_to_tcpci(tcpc);
+
+	regmap_update_bits(tcpci->regmap, TCPC_TCPC_CTRL,
+			   TCPC_TCPC_CTRL_BIST_MODE,
+			   enable ? TCPC_TCPC_CTRL_BIST_MODE : 0);
+}
+
 static int tcpci_init(struct tcpc_dev *tcpc)
 {
 	struct tcpci *tcpci = tcpc_to_tcpci(tcpc);
@@ -634,6 +643,7 @@ struct tcpci *tcpci_register_port(struct device *dev, struct tcpci_data *data)
 	tcpci->tcpc.vbus_detect = tcpci_vbus_detect;
 	tcpci->tcpc.vbus_discharge = tcpci_vbus_force_discharge;
 	tcpci->tcpc.get_vbus_vol = tcpci_get_vbus_vol;
+	tcpci->tcpc.bist_mode = tcpci_bist_mode;
 
 	tcpci->tcpc.set_pd_rx = tcpci_set_pd_rx;
 	tcpci->tcpc.set_roles = tcpci_set_roles;
diff --git a/drivers/staging/typec/tcpci.h b/drivers/staging/typec/tcpci.h
index 835138d..7ac11f2 100644
--- a/drivers/staging/typec/tcpci.h
+++ b/drivers/staging/typec/tcpci.h
@@ -36,6 +36,7 @@
 #define TCPC_CONFIG_STD_OUTPUT		0x18
 
 #define TCPC_TCPC_CTRL			0x19
+#define TCPC_TCPC_CTRL_BIST_MODE	BIT(1)
 #define TCPC_TCPC_CTRL_ORIENTATION	BIT(0)
 
 #define TCPC_ROLE_CTRL			0x1a
diff --git a/drivers/usb/typec/tcpm.c b/drivers/usb/typec/tcpm.c
index db9023f..917744d 100644
--- a/drivers/usb/typec/tcpm.c
+++ b/drivers/usb/typec/tcpm.c
@@ -2517,6 +2517,13 @@ static void tcpm_typec_connect(struct tcpm_port *port)
 	}
 }
 
+static void tcpm_bist_handle(struct tcpm_port *port, bool enable)
+{
+	/* Enable or disable BIST test mode */
+	if (port->tcpc && port->tcpc->bist_mode)
+		port->tcpc->bist_mode(port->tcpc, enable);
+}
+
 static int tcpm_src_attach(struct tcpm_port *port)
 {
 	enum typec_cc_polarity polarity =
@@ -2612,6 +2619,7 @@ static void tcpm_reset_port(struct tcpm_port *port)
 	 */
 	port->rx_msgid = -1;
 
+	tcpm_bist_handle(port, false);
 	port->tcpc->set_pd_rx(port->tcpc, false);
 	tcpm_init_vbus(port);	/* also disables charging */
 	tcpm_init_vconn(port);
@@ -3416,6 +3424,7 @@ static void run_state_machine(struct tcpm_port *port)
 		break;
 
 	case BIST_RX:
+		tcpm_bist_handle(port, true);
 		switch (BDO_MODE_MASK(port->bist_request)) {
 		case BDO_MODE_CARRIER2:
 			tcpm_pd_transmit(port, TCPC_TX_BIST_MODE_2, NULL);
diff --git a/include/linux/usb/tcpm.h b/include/linux/usb/tcpm.h
index bb2717f..9469f87 100644
--- a/include/linux/usb/tcpm.h
+++ b/include/linux/usb/tcpm.h
@@ -165,6 +165,7 @@ struct tcpc_dev {
 			   const struct pd_message *msg);
 	int (*vbus_detect)(struct tcpc_dev *dev, bool enable);
 	int (*vbus_discharge)(struct tcpc_dev *tcpc, bool enable);
+	void (*bist_mode)(struct tcpc_dev *tcpc, bool enable);
 
 };
 
-- 
1.7.9.5

