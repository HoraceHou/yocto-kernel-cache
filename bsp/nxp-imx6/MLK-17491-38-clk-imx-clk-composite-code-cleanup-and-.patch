From 6be48c87499654568cc0b6b21992b3d0253e7a1e Mon Sep 17 00:00:00 2001
From: Dong Aisheng <aisheng.dong@nxp.com>
Date: Wed, 13 Sep 2017 22:46:03 +0800
Subject: [PATCH 3332/5242] MLK-17491-38 clk: imx: clk-composite: code cleanup
 and improvement

commit  fef6b41b03ee63d343e78b50097fee1505609ee7 from
https://source.codeaurora.org/external/imx/linux-imx.git

1) reorder headfile
2) remove unused headfile
3) remove unused macro
4) replace magic number by macro
5) fix code indent issue
6) reorder local variables
7) remove unnessary error message

Cc: Anson Huang <Anson.Huang@nxp.com>
Reviewed-by: Bai Ping <ping.bai@nxp.com>
Signed-off-by: Dong Aisheng <aisheng.dong@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/clk/imx/clk-composite.c |   75 ++++++++++++++++++---------------------
 1 file changed, 35 insertions(+), 40 deletions(-)

diff --git a/drivers/clk/imx/clk-composite.c b/drivers/clk/imx/clk-composite.c
index c0fc16e..c6105d58 100644
--- a/drivers/clk/imx/clk-composite.c
+++ b/drivers/clk/imx/clk-composite.c
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2016 Freescale Semiconductor, Inc.
+ * Copyright 2017 NXP
  *
  * The code contained herein is licensed under the GNU General Public
  * License. You may obtain a copy of the GNU General Public License
@@ -10,83 +11,77 @@
  */
 
 #include <linux/clk-provider.h>
-#include <linux/slab.h>
-#include <linux/io.h>
 #include <linux/err.h>
+#include <linux/slab.h>
 
-#include "clk.h"
-
-#define PCG_CGC		BIT(30)
 #define PCG_PCS_SHIFT	24
 #define PCG_PCS_MASK	0x7
+#define PCG_CGC_SHIFT	30
+#define PCG_FRAC_SHIFT	3
+#define PCG_FRAC_WIDTH	1
+#define PCG_FRAC_MASK	BIT(3)
+#define PCG_PCD_SHIFT	0
+#define PCG_PCD_WIDTH	3
+#define PCG_PCD_MASK	0x7
 
-struct clk *imx_clk_composite(const char *name, const char **parent_name,
-			int num_parents, bool mux_present, bool rate_present, bool gate_present,
-			 void __iomem *reg)
+struct clk *imx_clk_composite(const char *name, const char **parent_names,
+			      int num_parents, bool mux_present,
+			      bool rate_present, bool gate_present,
+			      void __iomem *reg)
 {
+	struct clk_hw *mux_hw = NULL, *fd_hw = NULL, *gate_hw = NULL;
+	struct clk_fractional_divider *fd = NULL;
 	struct clk_gate *gate = NULL;
 	struct clk_mux *mux = NULL;
-	struct clk_fractional_divider *div = NULL;
-	struct clk_hw *mux_hw = NULL, *div_hw = NULL, *gate_hw = NULL;
 	struct clk *clk;
 
-	/* check if the mux is present in this composite clk. */
 	if (mux_present) {
 		mux = kzalloc(sizeof(*mux), GFP_KERNEL);
-		if (!mux) {
-			pr_err("%s: could not allocate mux clk\n", __func__);
+		if (!mux)
 			return ERR_PTR(-ENOMEM);
-		}
 		mux_hw = &mux->hw;
-		/* init the mux struct */
 		mux->reg = reg;
 		mux->shift = PCG_PCS_SHIFT;
 		mux->mask = PCG_PCS_MASK;
-		/* mux->lock */
 	}
 
 	if (rate_present) {
-		div = kzalloc(sizeof(*div), GFP_KERNEL);
-		if (!div) {
-			pr_err("%s: counld not allocate divider clk\n", __func__);
+		fd = kzalloc(sizeof(*fd), GFP_KERNEL);
+		if (!fd) {
 			kfree(mux);
 			return ERR_PTR(-ENOMEM);
 		}
-		div_hw = &div->hw;
-		/* init the div struct */
-		div->reg = reg;
-		div->mshift = 3;
-		div->mwidth = 1;
-		div->mmask  = (0x1) << 3;
-		div->nshift = 0;
-		div->nwidth = 3;
-		div->nmask  = 0x7;
-		div->flags = CLK_FRAC_DIVIDER_ZERO_BASED;
+		fd_hw = &fd->hw;
+		fd->reg = reg;
+		fd->mshift = PCG_FRAC_SHIFT;
+		fd->mwidth = PCG_FRAC_WIDTH;
+		fd->mmask  = PCG_FRAC_MASK;
+		fd->nshift = PCG_PCD_SHIFT;
+		fd->nwidth = PCG_PCD_WIDTH;
+		fd->nmask = PCG_PCD_MASK;
+		fd->flags = CLK_FRAC_DIVIDER_ZERO_BASED;
 	}
 
 	if (gate_present) {
 		gate = kzalloc(sizeof(*gate), GFP_KERNEL);
 		if (!gate) {
-			pr_err("%s: could not allocate gate clk\n", __func__);
 			kfree(mux);
-			kfree(div);
+			kfree(fd);
 			return ERR_PTR(-ENOMEM);
 		}
 		gate_hw = &gate->hw;
-		/* init the gate struct */
 		gate->reg = reg;
-		gate->bit_idx = 30;
-		/* gate->lock */
+		gate->bit_idx = PCG_CGC_SHIFT;
 	}
 
-	/* register the composite clk itself */
-	clk = clk_register_composite(NULL, name, parent_name, num_parents,
-				mux_hw, &clk_mux_ops, div_hw, &clk_fractional_divider_ops,
-				gate_hw, &clk_gate_ops, CLK_SET_RATE_GATE | CLK_SET_PARENT_GATE);
-
+	clk = clk_register_composite(NULL, name, parent_names, num_parents,
+				    mux_hw, &clk_mux_ops, fd_hw,
+				    &clk_fractional_divider_ops, gate_hw,
+				    &clk_gate_ops, CLK_SET_RATE_GATE |
+				    CLK_SET_PARENT_GATE);
 	if (IS_ERR(clk)) {
 		kfree(mux);
-		kfree(div);
+		kfree(fd);
 		kfree(gate);
 	}
 
-- 
1.7.9.5

