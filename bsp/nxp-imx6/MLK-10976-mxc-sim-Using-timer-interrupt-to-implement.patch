From 93c9771aedc73c5d81493a354162edbc86b8ecbd Mon Sep 17 00:00:00 2001
From: Luwei Zhou <b45643@freescale.com>
Date: Tue, 26 May 2015 16:49:06 +0800
Subject: [PATCH 0203/5242] MLK-10976: mxc: sim: Using timer interrupt to
 implement precise timing.

commit  1142ddd2bc967e8f2cce0e84c2991f32dbd8c843 from
https://source.codeaurora.org/external/imx/linux-imx.git

The EMV4.3 has strict requirement about the reset sequence. The old code use the mdelay, udelay to
achievet, which is not precise enough. Replace it with the timer interrupt. The EMV4.3 requires
40000~45000 clock cycles duration when reset is low.

Signed-off-by: Luwei Zhou <b45643@freescale.com>
(cherry picked from a006fe283c8b97f0a711cb0829bfbdaaf4a5f31f)
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/mxc/sim/imx_sim.c |   59 +++++++++++++++++++++++++++++++++------------
 1 file changed, 43 insertions(+), 16 deletions(-)

diff --git a/drivers/mxc/sim/imx_sim.c b/drivers/mxc/sim/imx_sim.c
index a15a3ee..75aa8bf 100755
--- a/drivers/mxc/sim/imx_sim.c
+++ b/drivers/mxc/sim/imx_sim.c
@@ -81,6 +81,7 @@
 #define SIM_STATE_RECEIVING		(7)
 #define SIM_STATE_RECEIVE_DONE		(8)
 #define SIM_STATE_RECEIVE_ERROR		(9)
+#define SIM_STATE_RESET_SEQUENCY	(10)
 
 /* Definitions of the offset of the SIM hardware registers */
 #define PORT1_CNTL			(0x00)
@@ -245,7 +246,7 @@
 #define RX_TIMEOUT			(100)
 #define RESET_RETRY_TIMES		(5)
 #define SIM_QUIRK_TKT259347		(1 << 0)
-#define EMV_RESET_LOW_CYCLES		42000
+#define EMV_RESET_LOW_CYCLES		40000
 #define ATR_MAX_DELAY_CLK		46400
 
 /* Main SIM driver structure */
@@ -409,10 +410,42 @@ static void sim_set_gpc_timer(struct sim_t *sim, u32 val)
 	/*First reset the counter*/
 	sim_reset_timer(sim);
 
+	/*Enable GPC timer interrupt*/
+	reg_data = __raw_readl(sim->ioaddr + INT_MASK);
+	reg_data &= ~SIM_INT_MASK_GPCM;
+	__raw_writel(reg_data, sim->ioaddr + INT_MASK);
+
 	/*Set the GPCNT clock source to be Fclk*/
 	sim_start_timer(sim, SIM_CNTL_GPCNT_CARD_CLK);
 }
 
+static int sim_reset_low_timing(struct sim_t *sim, u32 clock_cycle)
+{
+	int errval = 0;
+	int timeout = 0;
+	u32 fclk_in_khz, delay_in_us, reg_data;
+
+	fclk_in_khz = sim->clk_rate / MSEC_PER_SEC;
+	delay_in_us = EMV_RESET_LOW_CYCLES * USEC_PER_MSEC / fclk_in_khz;
+
+	sim_set_gpc_timer(sim, clock_cycle);
+
+	timeout  = wait_for_completion_timeout(&sim->xfer_done,
+					msecs_to_jiffies(delay_in_us / 1000 * 2));
+	if (timeout == 0) {
+		pr_err("Reset low GPC timout\n");
+		errval =  -SIM_E_TIMEOUT;
+	}
+
+	sim_reset_timer(sim);
+	/*Disable GPC timer interrupt*/
+	reg_data = __raw_readl(sim->ioaddr + INT_MASK);
+	reg_data |= SIM_INT_MASK_GPCM;
+	__raw_writel(reg_data, sim->ioaddr + INT_MASK);
+
+	return errval;
+}
+
 static void sim_set_cwt(struct sim_t *sim, u8 enable)
 {
 	u32 reg_val;
@@ -828,6 +861,9 @@ static irqreturn_t sim_irq_handler(int irq, void *dev_id)
 		}
 	}
 
+	else if ((sim->state == SIM_STATE_RESET_SEQUENCY) &&
+			(tx_status & SIM_XMT_STATUS_GPCNT))
+		complete(&sim->xfer_done);
 	else if (rx_status & SIM_RCV_STATUS_RDRF) {
 		pr_err("unexpected  status %d\n", sim->state);
 		sim_rcv_read_fifo(sim);
@@ -927,21 +963,11 @@ static void sim_activate(struct sim_t *sim)
 	}
 }
 
-static void sim_reset_low_delay(struct sim_t *sim)
-{
-	u32 fclk_in_khz;
-	u32 delay_in_us;
-
-	fclk_in_khz = sim->clk_rate / MSEC_PER_SEC;
-	delay_in_us = EMV_RESET_LOW_CYCLES * USEC_PER_MSEC / fclk_in_khz;
-	mdelay(delay_in_us / USEC_PER_MSEC);
-	udelay(delay_in_us % USEC_PER_MSEC);
-}
-
 static void sim_cold_reset_sequency(struct sim_t *sim)
 {
 	u32 reg_data;
 
+	sim->state = SIM_STATE_RESET_SEQUENCY;
 	reg_data = __raw_readl(sim->ioaddr + sim->port_ctrl_reg);
 	reg_data &= ~SIM_PORT_CNTL_SRST;
 	__raw_writel(reg_data, sim->ioaddr + sim->port_ctrl_reg);
@@ -953,13 +979,13 @@ static void sim_cold_reset_sequency(struct sim_t *sim)
 		reg_data |= SIM_PORT_CNTL_SVEN;
 
 	__raw_writel(reg_data, sim->ioaddr + sim->port_ctrl_reg);
-	mdelay(9);
+	msleep(9);
 
 	reg_data = __raw_readl(sim->ioaddr + sim->port_ctrl_reg);
 	reg_data |= SIM_PORT_CNTL_SCEN;
 	__raw_writel(reg_data, sim->ioaddr + sim->port_ctrl_reg);
 
-	sim_reset_low_delay(sim);
+	sim_reset_low_timing(sim, EMV_RESET_LOW_CYCLES);
 
 	reg_data = __raw_readl(sim->ioaddr + sim->port_ctrl_reg);
 	reg_data |= SIM_PORT_CNTL_SRST;
@@ -1019,6 +1045,7 @@ static void sim_warm_reset_sequency(struct sim_t *sim)
 {
 	u32 reg_data;
 
+	sim->state = SIM_STATE_RESET_SEQUENCY;
 	reg_data = __raw_readl(sim->ioaddr + sim->port_ctrl_reg);
 	reg_data |= (SIM_PORT_CNTL_SRST | SIM_PORT_CNTL_SCEN);
 	if (sim->sven_low_active)
@@ -1027,13 +1054,13 @@ static void sim_warm_reset_sequency(struct sim_t *sim)
 		reg_data |= SIM_PORT_CNTL_SVEN;
 	__raw_writel(reg_data, sim->ioaddr + sim->port_ctrl_reg);
 
-	udelay(20);
+	usleep_range(20, 25);
 
 	reg_data = __raw_readl(sim->ioaddr + sim->port_ctrl_reg);
 	reg_data &= ~SIM_PORT_CNTL_SRST;
 	__raw_writel(reg_data, sim->ioaddr + sim->port_ctrl_reg);
 
-	sim_reset_low_delay(sim);
+	sim_reset_low_timing(sim, EMV_RESET_LOW_CYCLES);
 
 	reg_data = __raw_readl(sim->ioaddr + sim->port_ctrl_reg);
 	reg_data |= SIM_PORT_CNTL_SRST;
-- 
1.7.9.5

