From c0f0f13bf3679c57d868d88305d79af74eec9ae9 Mon Sep 17 00:00:00 2001
From: Peter Chen <peter.chen@nxp.com>
Date: Fri, 15 Sep 2017 10:05:21 +0800
Subject: [PATCH 2552/5242] MLK-16285-1 staging: typec: tcpci: move request
 interrupt to the end of probe

commit  82d23ff1091740eeed80a55dc36dc6b6a33e5d26 from
https://source.codeaurora.org/external/imx/linux-imx.git

The tcpci_irq may visit tcpci->port if unexpected interrupt occurs
(eg, board design issue causes GPIO status is incorrect) and cause
NULL pointer dereference issue.

Besides, delete clear TCPC_ALERT and TCPC_ALERT_MASK code which are
already done at tcpci_init.

Signed-off-by: Peter Chen <peter.chen@nxp.com>
Acked-by: Li Jun <jun.li@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/typec/tcpci.c |   20 ++++++++++++--------
 1 file changed, 12 insertions(+), 8 deletions(-)

diff --git a/drivers/staging/typec/tcpci.c b/drivers/staging/typec/tcpci.c
index 0c19e40d..c9bcdb5 100644
--- a/drivers/staging/typec/tcpci.c
+++ b/drivers/staging/typec/tcpci.c
@@ -797,15 +797,19 @@ struct tcpci *tcpci_register_port(struct device *dev, struct tcpci_data *data)
 	if (err < 0)
 		return ERR_PTR(err);
 
-	err = tcpci_ss_mux_control_init(tcpci);
-	if (err)
-		return err;
-
 	tcpci->port = tcpm_register_port(tcpci->dev, &tcpci->tcpc);
 	if (PTR_ERR_OR_ZERO(tcpci->port))
 		return ERR_CAST(tcpci->port);
 
+	err = tcpci_ss_mux_control_init(tcpci);
+	if (err)
+		goto err1;
+
 	return tcpci;
+
+err1:
+	tcpm_unregister_port(tcpci->port);
+	return ERR_PTR(err);
 }
 EXPORT_SYMBOL_GPL(tcpci_register_port);
 
@@ -838,6 +842,10 @@ static int tcpci_probe(struct i2c_client *client,
 	if (err < 0)
 		return err;
 
+	chip->tcpci = tcpci_register_port(&client->dev, &chip->data);
+	if (PTR_ERR_OR_ZERO(chip->tcpci))
+		return PTR_ERR(chip->tcpci);
+
 	err = devm_request_threaded_irq(&client->dev, client->irq, NULL,
 					_tcpci_irq,
 					IRQF_ONESHOT | IRQF_TRIGGER_LOW,
@@ -845,10 +853,6 @@ static int tcpci_probe(struct i2c_client *client,
 	if (err < 0)
 		return err;
 
-	chip->tcpci = tcpci_register_port(&client->dev, &chip->data);
-	if (PTR_ERR_OR_ZERO(chip->tcpci))
-		return PTR_ERR(chip->tcpci);
-
 	i2c_set_clientdata(client, chip);
 	return 0;
 }
-- 
1.7.9.5

