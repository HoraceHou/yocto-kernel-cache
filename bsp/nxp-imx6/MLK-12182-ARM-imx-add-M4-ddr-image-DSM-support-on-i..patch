From 982fe7d770e564de33b85eab3198a233b1700fbb Mon Sep 17 00:00:00 2001
From: Anson Huang <Anson.Huang@nxp.com>
Date: Tue, 12 Jan 2016 00:14:53 +0800
Subject: [PATCH 0872/5242] MLK-12182 ARM: imx: add M4 ddr image DSM support
 on i.MX7D

commit  9af0adfa25180e3d6a602f81c9e6243a95c74739 from
https://source.codeaurora.org/external/imx/linux-imx.git

For DSM mode, M4 TCM context is lost and A7 will restore them
after resume and write TCM entry to M4 and re-kick it. It
assumes M4 is running on TCM, but M4 also has case of running
image on DDR, OCRAMS first 2 words stores the stack and pc
address for M4, to support M4 running on both TCM and DDR
case, we can just leave the OCRAMS first 3 words unchanged
during DSM, the third words is also reserved for M4, as OCRAMS
can keep its context during DSM.

This patch leaves OCRAMS first 3 words unchanged and remove
the re-program of TCM entry after exit from DSM, thus it can
support DSM mode for M4 running on TCM/DDR/OCRAM.

Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
(cherry picked from commit b8c47389d16dacf3a78c0f92e6737d09811c45a9)
Signed-off-by: Teo Hall <teo.hall@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-imx/pm-imx7.c |   13 +++++--------
 1 file changed, 5 insertions(+), 8 deletions(-)

diff --git a/arch/arm/mach-imx/pm-imx7.c b/arch/arm/mach-imx/pm-imx7.c
index 2d37021..0e9e920 100644
--- a/arch/arm/mach-imx/pm-imx7.c
+++ b/arch/arm/mach-imx/pm-imx7.c
@@ -118,6 +118,8 @@
 #define M4_PC_OFF		0x04
 #define M4_RCR_HALT		0xAB
 #define M4_RCR_GO		0xAA
+#define M4_OCRAMS_RESERVED_SIZE	0xc
+
 extern unsigned long iram_tlb_base_addr;
 extern unsigned long iram_tlb_phys_addr;
 
@@ -747,12 +749,6 @@ static int imx7_pm_enter(suspend_state_t state)
 				/* restore M4 image */
 				memcpy(lpm_m4tcm_base,
 				    lpm_m4tcm_saved_in_ddr, SZ_32K);
-				/* set sp from word in the image */
-				writel(*(lpm_m4tcm_saved_in_ddr),
-				    m4_bootrom_base + M4_SP_OFF);
-				/* set PC from next word */
-				writel(*(lpm_m4tcm_saved_in_ddr+1),
-				    m4_bootrom_base + M4_PC_OFF);
 				/* kick m4 to enable */
 				writel(M4_RCR_GO,
 					pm_info->src_base.vbase + M4RCR);
@@ -835,8 +831,9 @@ void __init imx7_pm_map_io(void)
 		return;
 	}
 
-	/* Set all entries to 0. */
-	memset((void *)iram_tlb_base_addr, 0, MX7_IRAM_TLB_SIZE);
+	/* Set all entries to 0 except first 3 words reserved for M4. */
+	memset((void *)(iram_tlb_base_addr + M4_OCRAMS_RESERVED_SIZE),
+		0, MX7_IRAM_TLB_SIZE - M4_OCRAMS_RESERVED_SIZE);
 
 	/*
 	 * Make sure the IRAM virtual address has a mapping in the IRAM
-- 
1.7.9.5

