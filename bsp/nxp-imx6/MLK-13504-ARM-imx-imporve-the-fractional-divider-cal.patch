From 9c675d270c1a27c77ff61f61d8c02c631bc8b1ba Mon Sep 17 00:00:00 2001
From: Bai Ping <ping.bai@nxp.com>
Date: Tue, 22 Nov 2016 17:14:32 +0800
Subject: [PATCH 1290/5242] MLK-13504 ARM: imx: imporve the fractional divider
 calculation

commit  1c83de8b4448a2cd08b52d74b83007b0433cac3c from
https://source.codeaurora.org/external/imx/linux-imx.git

Improve the fractional divider calculation accuracy use
continued fraction method.

Signed-off-by: Bai Ping <ping.bai@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/clk/imx/clk-composite.c    |    4 +++-
 drivers/clk/imx/clk-frac-divider.c |   39 ++++++++++++++++++++++--------------
 drivers/clk/imx/clk.h              |    2 ++
 3 files changed, 29 insertions(+), 16 deletions(-)

diff --git a/drivers/clk/imx/clk-composite.c b/drivers/clk/imx/clk-composite.c
index f329a92..7482bb9 100644
--- a/drivers/clk/imx/clk-composite.c
+++ b/drivers/clk/imx/clk-composite.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 Freescale Semiconductor, Inc.
+ * Copyright (C) 2016 Freescale Semiconductor, Inc.
  *
  * The code contained herein is licensed under the GNU General Public
  * License. You may obtain a copy of the GNU General Public License
@@ -56,8 +56,10 @@ struct clk *imx_clk_composite(const char *name, const char **parent_name,
 		/* init the div struct */
 		div->reg = reg;
 		div->mshift = 3;
+		div->mwidth = 1;
 		div->mmask  = (0x1) << 3;
 		div->nshift = 0;
+		div->nwidth = 3;
 		div->nmask  = 0x7;
 	}
 
diff --git a/drivers/clk/imx/clk-frac-divider.c b/drivers/clk/imx/clk-frac-divider.c
index 8eec646..0850ba2 100644
--- a/drivers/clk/imx/clk-frac-divider.c
+++ b/drivers/clk/imx/clk-frac-divider.c
@@ -1,6 +1,8 @@
 /*
  * Copyright (C) 2016 Freescale Semiconductor, Inc.
  *
+ * Based on driver/clk/clk-fractional-divider.c
+ *
  * The code contained herein is licensed under the GNU General Public
  * License. You may obtain a copy of the GNU General Public License
  * Version 2 or later at the following locations:
@@ -9,11 +11,12 @@
  * http://www.gnu.org/copyleft/gpl.html
  */
 
+#include <linux/bitops.h>
 #include <linux/clk-provider.h>
-#include <linux/slab.h>
-#include <linux/io.h>
 #include <linux/err.h>
-#include <linux/gcd.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/rational.h>
 
 #include "clk.h"
 
@@ -41,33 +44,39 @@ static long clk_frac_divider_round_rate(struct clk_hw *hw, unsigned long rate,
 					unsigned long *parent_rate)
 {
 	struct clk_frac_divider *fd = to_clk_frac_divider(hw);
-	unsigned long div;
-	unsigned maxn = (fd->nmask >> fd->nshift) + 2;
+	unsigned long scale;
+	unsigned long m, n;
+	u64 ret;
 
 	if (!rate || rate >= *parent_rate)
 		return *parent_rate;
 
-	div = gcd(*parent_rate, rate);
+	scale = fls_long(*parent_rate / rate - 1);
+	if (scale > 4)
+		rate <<= scale - fd->nwidth;
 
-	while ((*parent_rate / div) > maxn) {
-		div <<= 1;
-		rate <<= 1;
-	}
+	rational_best_approximation(rate, *parent_rate,
+			GENMASK(fd->mwidth - 1, 0), GENMASK(fd->nwidth - 1, 0),
+			&m, &n);
 
-	return rate;
+	ret = (u64)*parent_rate * m;
+	do_div(ret, n);
+
+	return ret;
 }
 
 static int clk_frac_divider_set_rate(struct clk_hw *hw, unsigned long rate,
 					unsigned long parent_rate)
 {
 	struct clk_frac_divider *fd = to_clk_frac_divider(hw);
-	unsigned long div;
 	unsigned long m, n;
 	u32 val;
 
-	div = gcd(parent_rate, rate);
-	m = rate / div - 1;
-	n = parent_rate / div - 1;
+	rational_best_approximation(rate, parent_rate,
+			GENMASK(fd->mwidth - 1, 0), GENMASK(fd->nwidth - 1, 0),
+			&m, &n);
+	m = m - 1;
+	n = n - 1;
 	if (m && !n)
 		return -EINVAL;
 
diff --git a/drivers/clk/imx/clk.h b/drivers/clk/imx/clk.h
index eecee5f..732ac1c 100644
--- a/drivers/clk/imx/clk.h
+++ b/drivers/clk/imx/clk.h
@@ -57,8 +57,10 @@ struct clk_frac_divider {
 	struct clk_hw	hw;
 	void __iomem	*reg;
 	u8		mshift;
+	u8		mwidth;
 	u32		mmask;
 	u8		nshift;
+	u8		nwidth;
 	u32		nmask;
 };
 
-- 
1.7.9.5

