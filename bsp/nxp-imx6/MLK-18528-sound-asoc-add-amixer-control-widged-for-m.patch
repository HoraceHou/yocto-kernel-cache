From 4f2d205948eb22a967517afab52a754d87ee1bf8 Mon Sep 17 00:00:00 2001
From: Cosmin-Gabriel Samoila <cosmin.samoila@nxp.com>
Date: Thu, 7 Jun 2018 15:46:18 +0300
Subject: [PATCH 3943/5242] MLK-18528 sound: asoc: add amixer control widged
 for micfil

commit  2d196b75ee721fc81dc8336ed031475a4b27d6bb from
https://source.codeaurora.org/external/imx/linux-imx.git

Add channels output gain and quality select controls.

Signed-off-by: Cosmin-Gabriel Samoila <cosmin.samoila@nxp.com>
Reviewed-by: Shengjiu Wang <shengjiu.wang@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 sound/soc/fsl/fsl_micfil.c |   90 +++++++++++++++++++++++++++++++++++++++++---
 sound/soc/fsl/fsl_micfil.h |    5 ++-
 2 files changed, 89 insertions(+), 6 deletions(-)

diff --git a/sound/soc/fsl/fsl_micfil.c b/sound/soc/fsl/fsl_micfil.c
index 7035b33..d108f33 100644
--- a/sound/soc/fsl/fsl_micfil.c
+++ b/sound/soc/fsl/fsl_micfil.c
@@ -41,6 +41,7 @@ struct fsl_micfil {
 	bool slave_mode;
 	char name[32];
 	unsigned int mclk_streams;
+	int quality;	/*QUALITY 2-0 bits */
 };
 
 struct fsl_micfil_soc_data {
@@ -63,8 +64,82 @@ struct fsl_micfil_soc_data {
 };
 MODULE_DEVICE_TABLE(of, fsl_micfil_dt_ids);
 
-static const struct snd_soc_component_driver fsl_micfil_component = {
-	.name		= "fsl-micfil",
+/* Table 5. Quality Modes
+ * Medium	0 0 0
+ * High		0 0 1
+ * Very Low 2	1 0 0
+ * Very Low 1	1 0 1
+ * Very Low 0	1 1 0
+ * Low		1 1 1
+ */
+static const char * const micfil_quality_select_texts[] = {
+	"Medium", "High",
+	"VLow2", "VLow1",
+	"VLow0", "Low",
+};
+
+static const struct soc_enum fsl_micfil_enum[] = {
+	SOC_ENUM_SINGLE(REG_MICFIL_CTRL2,
+			MICFIL_CTRL2_QSEL_SHIFT,
+			ARRAY_SIZE(micfil_quality_select_texts),
+			micfil_quality_select_texts),
+};
+
+static int set_quality(struct snd_kcontrol *kcontrol,
+		       struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_component *comp = snd_kcontrol_chip(kcontrol);
+	struct soc_enum *e = (struct soc_enum *)kcontrol->private_value;
+	unsigned int *item = ucontrol->value.enumerated.item;
+	struct fsl_micfil *micfil = snd_soc_component_get_drvdata(comp);
+	int val = snd_soc_enum_item_to_val(e, item[0]);
+	int ret;
+
+	switch (val) {
+	case 0:
+	case 1:
+		micfil->quality = val;
+		break;
+	case 2:
+	case 3:
+	case 4:
+	case 5:
+		micfil->quality = val + 2;
+		break;
+	default:
+		dev_err(comp->dev, "Undefined value %d\n", val);
+		return -EINVAL;
+	}
+
+	ret = snd_soc_component_update_bits(comp,
+					    REG_MICFIL_CTRL2,
+					    MICFIL_CTRL2_QSEL_MASK,
+					    micfil->quality << MICFIL_CTRL2_QSEL_SHIFT);
+	if (ret)
+		return ret;
+
+	return 0;
+}
+
+static const struct snd_kcontrol_new fsl_micfil_snd_controls[] = {
+	SOC_SINGLE_RANGE("CH1 Gain", REG_MICFIL_OUT_CTRL,
+			 MICFIL_OUTGAIN_CHX_SHIFT(0), 0x0, 0xF, 0),
+	SOC_SINGLE_RANGE("CH2 Gain", REG_MICFIL_OUT_CTRL,
+			 MICFIL_OUTGAIN_CHX_SHIFT(1), 0x0, 0xF, 0),
+	SOC_SINGLE_RANGE("CH3 Gain", REG_MICFIL_OUT_CTRL,
+			 MICFIL_OUTGAIN_CHX_SHIFT(2), 0x0, 0xF, 0),
+	SOC_SINGLE_RANGE("CH4 Gain", REG_MICFIL_OUT_CTRL,
+			 MICFIL_OUTGAIN_CHX_SHIFT(3), 0x0, 0xF, 0),
+	SOC_SINGLE_RANGE("CH5 Gain", REG_MICFIL_OUT_CTRL,
+			 MICFIL_OUTGAIN_CHX_SHIFT(4), 0x0, 0xF, 0),
+	SOC_SINGLE_RANGE("CH6 Gain", REG_MICFIL_OUT_CTRL,
+			 MICFIL_OUTGAIN_CHX_SHIFT(5), 0x0, 0xF, 0),
+	SOC_SINGLE_RANGE("CH7 Gain", REG_MICFIL_OUT_CTRL,
+			 MICFIL_OUTGAIN_CHX_SHIFT(6), 0x0, 0xF, 0),
+	SOC_SINGLE_RANGE("CH8 Gain", REG_MICFIL_OUT_CTRL,
+			 MICFIL_OUTGAIN_CHX_SHIFT(7), 0x0, 0xF, 0),
+	SOC_ENUM_EXT("MICFIL Quality Select", fsl_micfil_enum[0],
+		     snd_soc_get_enum_double, set_quality),
 };
 
 static inline unsigned int get_pdm_clk(struct fsl_micfil *micfil,
@@ -339,7 +414,6 @@ static int fsl_micfil_hw_free(struct snd_pcm_substream *substream,
 {
 	struct fsl_micfil *micfil = snd_soc_dai_get_drvdata(dai);
 
-
 	if (!micfil->slave_mode &&
 	    micfil->mclk_streams & BIT(substream->stream)) {
 		clk_disable_unprepare(micfil->mclk);
@@ -450,7 +524,13 @@ static int fsl_micfil_dai_probe(struct snd_soc_dai *cpu_dai)
 	.ops = &fsl_micfil_dai_ops,
 };
 
-/* REG MAP */
+static const struct snd_soc_component_driver fsl_micfil_component = {
+	.name		= "fsl-micfil-dai",
+	.controls	= fsl_micfil_snd_controls,
+	.num_controls	= ARRAY_SIZE(fsl_micfil_snd_controls),
+};
+
+/* REGMAP */
 static const struct reg_default fsl_micfil_reg_defaults[] = {
 	{REG_MICFIL_CTRL1,		0x00000000},
 	{REG_MICFIL_CTRL2,		0x00000000},
@@ -514,7 +594,7 @@ static bool fsl_micfil_writeable_reg(struct device *dev, unsigned int reg)
 	switch (reg) {
 	case REG_MICFIL_CTRL1:
 	case REG_MICFIL_CTRL2:
-	case REG_MICFIL_STAT:		/* Write 1 to Clear */
+	case REG_MICFIL_STAT:
 	case REG_MICFIL_FIFO_CTRL:
 	case REG_MICFIL_FIFO_STAT:	/* Write 1 to Clear */
 	case REG_MICFIL_DC_CTRL:
diff --git a/sound/soc/fsl/fsl_micfil.h b/sound/soc/fsl/fsl_micfil.h
index 74417e0..3252db7 100644
--- a/sound/soc/fsl/fsl_micfil.h
+++ b/sound/soc/fsl/fsl_micfil.h
@@ -108,7 +108,7 @@
 #define MICFIL_STAT_CHXF_MASK(v)	BIT(MICFIL_STAT_CHXF_SHIFT(v))
 #define MICFIL_STAT_CHXF(v)		BIT(MICFIL_STAT_CHXF_SHIFT(v))
 
-/* Micfil FIFO Control Register -- REG_MICFIL_FIFO_CTRL 0x10 */
+/* MICFIL FIFO Control Register -- REG_MICFIL_FIFO_CTRL 0x10 */
 #define MICFIL_FIFO_CTRL_FIFOWMK_SHIFT	0
 #define MICFIL_FIFO_CTRL_FIFOWMK_WIDTH	3
 #define MICFIL_FIFO_CTRL_FIFOWMK_MASK	((BIT(MICFIL_FIFO_CTRL_FIFOWMK_WIDTH) - 1) \
@@ -116,6 +116,9 @@
 #define MICFIL_FIFO_CTRL_FIFOWMK(v)	(((v) << MICFIL_FIFO_CTRL_FIFOWMK_SHIFT) \
 					 & MICFIL_FIFO_CTRL_FIFOWMK_MASK)
 
+/* MICFIL Output Control Register */
+#define MICFIL_OUTGAIN_CHX_SHIFT(v)	(4 * (v))
+
 /* Constants */
 #define MICFIL_DMA_IRQ_DISABLED(v)	((v) & MICFIL_CTRL1_DISEL_MASK)
 #define MICFIL_DMA_ENABLED(v)		((0x1 << MICFIL_CTRL1_DISEL_SHIFT) \
-- 
1.7.9.5

