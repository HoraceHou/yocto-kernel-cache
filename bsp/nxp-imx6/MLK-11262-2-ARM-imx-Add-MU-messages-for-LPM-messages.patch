From 0dc7a8794e858b92c17ef6eda44221a15169dc21 Mon Sep 17 00:00:00 2001
From: Teo Hall <teo.hall@freescale.com>
Date: Fri, 30 Oct 2015 09:00:36 -0500
Subject: [PATCH 0868/5242] MLK-11262-2: ARM: imx: Add MU messages for LPM
 messages

commit  e563fe4d2fe061cf248428e7207c17ae9b556c78 from
https://source.codeaurora.org/external/imx/linux-imx.git

add LPM messages for:
	-M4 reporting state
	-M4 Request/Release High Bus Freq
	-A7 tell M4 it is ready

Signed-off-by: Teo Hall <teo.hall@freescale.com>
(cherry picked from commit 52234ae38e6e4f2b3452d807dd1c1e199be6350c)

Conflicts:
	arch/arm/mach-imx/common.h
	arch/arm/mach-imx/mu.c
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-imx/common.h |    2 ++
 arch/arm/mach-imx/mu.c     |   48 ++++++++++++++++++++++++++++++++++++++------
 2 files changed, 44 insertions(+), 6 deletions(-)

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index fff27ca..2615f44 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -79,6 +79,8 @@ static inline void imx_gpc_add_m4_wake_up_irq(u32 irq, bool enable) {}
 void mcc_receive_from_mu_buffer(unsigned int index, unsigned int *data);
 void mcc_send_via_mu_buffer(unsigned int index, unsigned int data);
 bool imx_mu_is_m4_in_low_freq(void);
+bool imx_mu_is_m4_in_stop(void);
+int imx_mu_lpm_ready(bool ready);
 
 enum mxc_cpu_pwr_mode {
 	WAIT_CLOCKED,		/* wfi only */
diff --git a/arch/arm/mach-imx/mu.c b/arch/arm/mach-imx/mu.c
index 898cfd0..7dbe3bf 100644
--- a/arch/arm/mach-imx/mu.c
+++ b/arch/arm/mach-imx/mu.c
@@ -43,8 +43,9 @@
 #define MU_LPM_M4_WAKEUP_ENABLE_MASK	0xF
 #define MU_LPM_M4_WAKEUP_ENABLE_SHIFT	0x0
 
-#define MU_LPM_HANDSHAKE_INDEX		0
-#define MU_RPMSG_HANDSHAKE_INDEX	1
+#define MU_LPM_M4_RUN_MODE	        0x5A5A0001
+#define MU_LPM_M4_WAIT_MODE	        0x5A5A0002
+#define MU_LPM_M4_STOP_MODE	        0x5A5A0003
 
 struct imx_mu_rpmsg_box {
 	const char *name;
@@ -64,6 +65,13 @@ struct imx_mu_rpmsg_box {
 static u32 m4_wake_irqs[4];
 static bool m4_freq_low;
 struct irq_domain *domain;
+static bool m4_in_stop;
+
+
+bool imx_mu_is_m4_in_stop(void)
+{
+	return m4_in_stop;
+}
 
 bool imx_mu_is_m4_in_low_freq(void)
 {
@@ -186,10 +194,18 @@ static void mu_work_handler(struct work_struct *work)
 	pr_debug("receive M4 message 0x%x\n", m4_message);
 
 	switch (m4_message) {
+	case MU_LPM_M4_RUN_MODE:
+	case MU_LPM_M4_WAIT_MODE:
+		m4_in_stop = false;
+		break;
+	case MU_LPM_M4_STOP_MODE:
+		m4_in_stop = true;
+		break;
 	case MU_LPM_M4_REQUEST_HIGH_BUS:
 		request_bus_freq(BUS_FREQ_HIGH);
 #ifdef CONFIG_SOC_IMX6SX
-		imx6sx_set_m4_highfreq(true);
+		if (cpu_is_imx6sx())
+			imx6sx_set_m4_highfreq(true);
 #endif
 		imx_mu_send_message(MU_LPM_HANDSHAKE_INDEX,
 			MU_LPM_BUS_HIGH_READY_FOR_M4);
@@ -198,10 +214,12 @@ static void mu_work_handler(struct work_struct *work)
 	case MU_LPM_M4_RELEASE_HIGH_BUS:
 		release_bus_freq(BUS_FREQ_HIGH);
 #ifdef CONFIG_SOC_IMX6SX
-		imx6sx_set_m4_highfreq(false);
+		if (cpu_is_imx6sx()) {
+			imx6sx_set_m4_highfreq(false);
+			imx_mu_send_message(MU_LPM_HANDSHAKE_INDEX,
+				MU_LPM_M4_FREQ_CHANGE_READY);
+		}
 #endif
-		imx_mu_send_message(MU_LPM_HANDSHAKE_INDEX,
-			MU_LPM_M4_FREQ_CHANGE_READY);
 		m4_freq_low = true;
 		break;
 	default:
@@ -253,6 +271,18 @@ int imx_mu_rpmsg_send(unsigned int rpmsg)
 	return imx_mu_send_message(MU_RPMSG_HANDSHAKE_INDEX, rpmsg);
 }
 
+int imx_mu_lpm_ready(bool ready)
+{
+	u32 val;
+
+	val = readl_relaxed(mu_base + MU_ACR);
+	if (ready)
+		writel_relaxed(val | BIT(0), mu_base + MU_ACR);
+	else
+		writel_relaxed(val & ~BIT(0), mu_base + MU_ACR);
+	return 0;
+}
+
 int imx_mu_rpmsg_register_nb(const char *name, struct notifier_block *nb)
 {
 	if ((name == NULL) || (nb == NULL))
@@ -348,6 +378,12 @@ static int imx_mu_probe(struct platform_device *pdev)
 				return ret;
 			}
 		}
+
+		INIT_DELAYED_WORK(&mu_work, mu_work_handler);
+		/* enable the bit26(RIE1) of MU_ACR */
+		writel_relaxed(readl_relaxed(mu_base + MU_ACR) |
+			BIT(26) | BIT(27), mu_base + MU_ACR);
+		imx_mu_lpm_ready(true);
 	} else {
 		INIT_DELAYED_WORK(&mu_work, mu_work_handler);
 
-- 
1.7.9.5

