From 7bc238cd5a8a0484e02419f9f6fa379598b8cf93 Mon Sep 17 00:00:00 2001
From: Richard Zhu <hongxing.zhu@nxp.com>
Date: Mon, 11 Jun 2018 17:07:19 +0800
Subject: [PATCH 3927/5242] MLK-18559 PCI: imx: fix crash when request
 reserved region

commit  ebb428d0f05e5e22485580f1c48dcdae83e4bf05 from
https://source.codeaurora.org/external/imx/linux-imx.git

Fix the crash when pcie request the reserved memory region
after the -EPROBE_DEFER in the probe.
The pointer of the resource parameter would be invalided
in the second probe. Use one structure varible to replace
it.
Put node after done with it, after call of_parse_phandle.

Signed-off-by: Richard Zhu <hongxing.zhu@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/pci/controller/dwc/pci-imx6.c |    8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/drivers/pci/controller/dwc/pci-imx6.c b/drivers/pci/controller/dwc/pci-imx6.c
index 0e92731..75abb56 100644
--- a/drivers/pci/controller/dwc/pci-imx6.c
+++ b/drivers/pci/controller/dwc/pci-imx6.c
@@ -2156,7 +2156,7 @@ static int __init imx_pcie_probe(struct platform_device *pdev)
 	struct device *dev = &pdev->dev;
 	struct dw_pcie *pci;
 	struct imx_pcie *imx_pcie;
-	struct resource *res;
+	struct resource *res, reserved_res;
 	struct device_node *reserved_node, *node = dev->of_node;
 	int ret;
 	u16 val;
@@ -2205,11 +2205,13 @@ static int __init imx_pcie_probe(struct platform_device *pdev)
 	if (!reserved_node) {
 		dev_info(dev, "no reserved region node.\n");
 	} else {
-		if (of_address_to_resource(reserved_node, 0, res)) {
+		if (of_address_to_resource(reserved_node, 0, &reserved_res)) {
 			dev_err(dev, "failed to get reserved region address\n");
+			of_node_put(reserved_node);
 			return -EINVAL;
 		}
-		ddr_test_region = res->start + SZ_2M;
+		ddr_test_region = reserved_res.start + SZ_2M;
+		of_node_put(reserved_node);
 	}
 
 	/* Fetch GPIOs */
-- 
1.7.9.5

