From 0f0134d9fd4ca050c7a9f13b77f1c7ddb48fdb56 Mon Sep 17 00:00:00 2001
From: "Guoniu.Zhou" <guoniu.zhou@nxp.com>
Date: Fri, 9 Nov 2018 18:48:13 +0800
Subject: [PATCH 5097/5242] MLK-20326-2: ISI: enable horizonal and vertical
 flip for mem2mem

commit  316bcec7f9fcd8184ee2e4c91a5aadbb0b6a035e from
https://source.codeaurora.org/external/imx/linux-imx.git

Eanble horizonal and vertical flip for memory to memory function
of ISI

Signed-off-by: Guoniu.Zhou <guoniu.zhou@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/media/platform/imx8/mxc-isi-core.h |    1 +
 drivers/media/platform/imx8/mxc-isi-hw.c   |   26 +++++---
 drivers/media/platform/imx8/mxc-isi-m2m.c  |   88 +++++++++++++++++++++++++++-
 3 files changed, 106 insertions(+), 9 deletions(-)

diff --git a/drivers/media/platform/imx8/mxc-isi-core.h b/drivers/media/platform/imx8/mxc-isi-core.h
index f004d23..3369ae8 100644
--- a/drivers/media/platform/imx8/mxc-isi-core.h
+++ b/drivers/media/platform/imx8/mxc-isi-core.h
@@ -245,6 +245,7 @@ struct mxc_isi_m2m_dev {
 	unsigned int frame_count;
 
 	struct list_head		out_active;
+	struct mxc_isi_ctrls	ctrls;
 
 	u8 alpha;
 };
diff --git a/drivers/media/platform/imx8/mxc-isi-hw.c b/drivers/media/platform/imx8/mxc-isi-hw.c
index c5bc711..b95b091 100644
--- a/drivers/media/platform/imx8/mxc-isi-hw.c
+++ b/drivers/media/platform/imx8/mxc-isi-hw.c
@@ -665,6 +665,21 @@ void mxc_isi_clean_irq_status(struct mxc_isi_dev *mxc_isi, u32 val)
 	writel(val, mxc_isi->regs + CHNL_STS);
 }
 
+void mxc_isi_m2m_channel_set_filp(struct mxc_isi_dev *mxc_isi)
+{
+	u32 val;
+
+	val = readl(mxc_isi->regs + CHNL_IMG_CTRL);
+	val &= ~(CHNL_IMG_CTRL_VFLIP_EN_MASK | CHNL_IMG_CTRL_HFLIP_EN_MASK);
+
+	if (mxc_isi->m2m.vflip)
+		val |= (CHNL_IMG_CTRL_VFLIP_EN_ENABLE << CHNL_IMG_CTRL_VFLIP_EN_OFFSET);
+	if (mxc_isi->m2m.hflip)
+		val |= (CHNL_IMG_CTRL_HFLIP_EN_ENABLE << CHNL_IMG_CTRL_HFLIP_EN_OFFSET);
+
+	writel(val, mxc_isi->regs + CHNL_IMG_CTRL);
+}
+
 void mxc_isi_m2m_channel_init(struct mxc_isi_dev *mxc_isi)
 {
 	u32 val;
@@ -688,14 +703,6 @@ void mxc_isi_m2m_channel_config(struct mxc_isi_dev *mxc_isi)
 
 	chain_buf(mxc_isi);
 
-	/* image ctrl */
-	reg = 0;
-	reg |= (mxc_isi->m2m.vflip << CHNL_IMG_CTRL_VFLIP_EN_OFFSET |
-			mxc_isi->m2m.hflip << CHNL_IMG_CTRL_HFLIP_EN_OFFSET |
-			mxc_isi->m2m.alpha << CHNL_IMG_CTRL_GBL_ALPHA_VAL_OFFSET |
-			mxc_isi->m2m.alphaen << CHNL_IMG_CTRL_GBL_ALPHA_EN_OFFSET);
-	writel(reg, mxc_isi->regs + CHNL_IMG_CTRL);
-
 	/* scale size need to equal input size when scaling disabled*/
 	reg = src_f->o_width | (src_f->o_height << CHNL_IMG_CFG_HEIGHT_OFFSET);
 	writel(reg, mxc_isi->regs + CHNL_SCL_IMG_CFG);
@@ -705,6 +712,9 @@ void mxc_isi_m2m_channel_config(struct mxc_isi_dev *mxc_isi)
 
 	/* Scaling */
 	mxc_isi_channel_set_scaling(mxc_isi);
+
+	/* Horizonal and Vertical flip */
+	mxc_isi_m2m_channel_set_filp(mxc_isi);
 }
 
 void mxc_isi_m2m_channel_enable(struct mxc_isi_dev *mxc_isi)
diff --git a/drivers/media/platform/imx8/mxc-isi-m2m.c b/drivers/media/platform/imx8/mxc-isi-m2m.c
index f8dfe02..f1c87dc 100644
--- a/drivers/media/platform/imx8/mxc-isi-m2m.c
+++ b/drivers/media/platform/imx8/mxc-isi-m2m.c
@@ -855,6 +855,84 @@ static int mxc_isi_m2m_streamoff(struct file *file, void *priv,
 	.vidioc_streamoff		= mxc_isi_m2m_streamoff,
 };
 
+/*
+ * V4L2 controls handling
+ */
+#define ctrl_to_mxc_isi_m2m(__ctrl) \
+	container_of((__ctrl)->handler, struct mxc_isi_dev, m2m.ctrls.handler)
+
+static int mxc_isi_m2m_s_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct mxc_isi_dev *mxc_isi = ctrl_to_mxc_isi_m2m(ctrl);
+	unsigned long flags;
+
+	dev_dbg(&mxc_isi->pdev->dev, "%s\n", __func__);
+
+	if (ctrl->flags & V4L2_CTRL_FLAG_INACTIVE)
+		return 0;
+
+	spin_lock_irqsave(&mxc_isi->slock, flags);
+
+	switch (ctrl->id) {
+	case V4L2_CID_HFLIP:
+		if (ctrl->val < 0)
+			return -EINVAL;
+		mxc_isi->m2m.hflip = (ctrl->val > 0) ? 1 : 0;
+		break;
+
+	case V4L2_CID_VFLIP:
+		if (ctrl->val < 0)
+			return -EINVAL;
+		mxc_isi->m2m.vflip = (ctrl->val > 0) ? 1 : 0;
+		break;
+
+	default:
+		dev_err(&mxc_isi->pdev->dev, "%s: Not support %d CID\n", __func__, ctrl->id);
+		return -EINVAL;
+	}
+
+	spin_unlock_irqrestore(&mxc_isi->slock, flags);
+
+	return 0;
+}
+
+static const struct v4l2_ctrl_ops mxc_isi_m2m_ctrl_ops = {
+	.s_ctrl = mxc_isi_m2m_s_ctrl,
+};
+
+static int mxc_isi_m2m_ctrls_create(struct mxc_isi_dev *mxc_isi)
+{
+	struct mxc_isi_ctrls *ctrls = &mxc_isi->m2m.ctrls;
+	struct v4l2_ctrl_handler *handler = &ctrls->handler;
+
+	if (mxc_isi->m2m.ctrls.ready)
+		return 0;
+
+	v4l2_ctrl_handler_init(handler, 4);
+
+	ctrls->hflip = v4l2_ctrl_new_std(handler, &mxc_isi_m2m_ctrl_ops,
+					V4L2_CID_HFLIP, 0, 1, 1, 0);
+	ctrls->vflip = v4l2_ctrl_new_std(handler, &mxc_isi_m2m_ctrl_ops,
+					V4L2_CID_VFLIP, 0, 1, 1, 0);
+
+	if (!handler->error)
+		ctrls->ready = true;
+
+	return handler->error;
+
+}
+
+void mxc_isi_m2m_ctrls_delete(struct mxc_isi_dev *mxc_isi)
+{
+	struct mxc_isi_ctrls *ctrls = &mxc_isi->m2m.ctrls;
+
+	if (ctrls->ready) {
+		v4l2_ctrl_handler_free(&ctrls->handler);
+		ctrls->ready = false;
+		ctrls->alpha = NULL;
+	}
+}
+
 int mxc_isi_register_m2m_device(struct mxc_isi_dev *mxc_isi,
 				 struct v4l2_device *v4l2_dev)
 {
@@ -890,15 +968,23 @@ int mxc_isi_register_m2m_device(struct mxc_isi_dev *mxc_isi,
 	vdev->vfl_dir = VFL_DIR_M2M;
 	vdev->device_caps = V4L2_CAP_STREAMING | V4L2_CAP_VIDEO_M2M;
 
+	ret = mxc_isi_m2m_ctrls_create(mxc_isi);
+	if (ret)
+		goto free_m2m;
+
 	ret = video_register_device(vdev, VFL_TYPE_GRABBER, -1);
 	if (ret < 0) {
 		dev_err(dev, "%s fail to register video device\n", __func__);
-		goto free_m2m;
+		goto ctrl_free;
 	}
+
+	vdev->ctrl_handler = &mxc_isi->m2m.ctrls.handler;
 	video_set_drvdata(vdev, mxc_isi);
 
 	return 0;
 
+ctrl_free:
+	mxc_isi_m2m_ctrls_delete(mxc_isi);
 free_m2m:
 	v4l2_m2m_release(isi_m2m->m2m_dev);
 	return ret;
-- 
1.7.9.5

