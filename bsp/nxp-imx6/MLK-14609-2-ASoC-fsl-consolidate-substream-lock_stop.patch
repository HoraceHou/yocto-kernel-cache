From 3a204bd69dbe8df47fd56085a8ec2649c927f0cf Mon Sep 17 00:00:00 2001
From: Octavian Purdila <octavian.purdila@nxp.com>
Date: Fri, 14 Apr 2017 16:18:46 +0300
Subject: [PATCH 1714/5242] MLK-14609-2 ASoC: fsl: consolidate substream
 lock_stop/unlock_start

commit  a07a41afdbb30aa0fe608b6b767651a1bf5a5cc2 from
https://source.codeaurora.org/external/imx/linux-imx.git

Add common imx_stop_lock_pcm_streams and imx_start_unlock_pcm_streams
functions to remove code duplication in fsl_asrc and fsl_esai.

Signed-off-by: Octavian Purdila <octavian.purdila@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 sound/soc/fsl/fsl_asrc.c |   37 ++++++-------------------------------
 sound/soc/fsl/fsl_esai.c |   36 +++++-------------------------------
 sound/soc/fsl/imx-pcm.h  |   35 +++++++++++++++++++++++++++++++++++
 3 files changed, 46 insertions(+), 62 deletions(-)

diff --git a/sound/soc/fsl/fsl_asrc.c b/sound/soc/fsl/fsl_asrc.c
index c567b82..0e69dbc 100644
--- a/sound/soc/fsl/fsl_asrc.c
+++ b/sound/soc/fsl/fsl_asrc.c
@@ -24,6 +24,7 @@
 #include <sound/pcm_params.h>
 
 #include "fsl_asrc.h"
+#include "imx-pcm.h"
 
 #define IDEAL_RATIO_DECIMAL_DEPTH 26
 
@@ -847,28 +848,6 @@ static bool fsl_asrc_check_xrun(struct snd_pcm_substream *substream)
 	return ret;
 }
 
-static int stop_lock_stream(struct snd_pcm_substream *substream,
-			    unsigned long *flags)
-{
-	if (substream) {
-		snd_pcm_stream_lock_irqsave(substream, *flags);
-		if (substream->runtime->status->state == SNDRV_PCM_STATE_RUNNING)
-			substream->ops->trigger(substream, SNDRV_PCM_TRIGGER_STOP);
-	}
-	return 0;
-}
-
-static int start_unlock_stream(struct snd_pcm_substream *substream,
-			       unsigned long *flags)
-{
-	if (substream) {
-		if (substream->runtime->status->state == SNDRV_PCM_STATE_RUNNING)
-			substream->ops->trigger(substream, SNDRV_PCM_TRIGGER_START);
-		snd_pcm_stream_unlock_irqrestore(substream, *flags);
-	}
-	return 0;
-}
-
 static void fsl_asrc_reset(struct snd_pcm_substream *substream, bool stop)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
@@ -877,12 +856,10 @@ static void fsl_asrc_reset(struct snd_pcm_substream *substream, bool stop)
 	struct snd_dmaengine_dai_dma_data *dma_params_be = NULL;
 	struct snd_soc_dpcm *dpcm;
 	struct snd_pcm_substream *be_substream;
-	unsigned long flags0, flags1;
+	unsigned long flags = 0;
 
-	if (stop) {
-		stop_lock_stream(asrc_priv->substream[0], &flags0);
-		stop_lock_stream(asrc_priv->substream[1], &flags1);
-	}
+	if (stop)
+		imx_stop_lock_pcm_streams(asrc_priv->substream, 2, &flags);
 
 	/* find the be for this fe stream */
 	list_for_each_entry(dpcm, &rtd->dpcm[substream->stream].be_clients, list_be) {
@@ -898,10 +875,8 @@ static void fsl_asrc_reset(struct snd_pcm_substream *substream, bool stop)
 		break;
 	}
 
-	if (stop) {
-		start_unlock_stream(asrc_priv->substream[1], &flags1);
-		start_unlock_stream(asrc_priv->substream[0], &flags0);
-	}
+	if (stop)
+		imx_start_unlock_pcm_streams(asrc_priv->substream, 2, &flags);
 }
 
 /**
diff --git a/sound/soc/fsl/fsl_esai.c b/sound/soc/fsl/fsl_esai.c
index f0a76af..0bd8f37 100644
--- a/sound/soc/fsl/fsl_esai.c
+++ b/sound/soc/fsl/fsl_esai.c
@@ -817,28 +817,6 @@ static bool fsl_esai_check_xrun(struct snd_pcm_substream *substream)
 	return saisr & (ESAI_SAISR_TUE | ESAI_SAISR_ROE) ;
 }
 
-static int stop_lock_stream(struct snd_pcm_substream *substream)
-{
-	if (substream) {
-		snd_pcm_stream_lock_irq(substream);
-		if (substream->runtime->status->state == SNDRV_PCM_STATE_RUNNING
-			&& substream->ops)
-			substream->ops->trigger(substream, SNDRV_PCM_TRIGGER_STOP);
-	}
-	return 0;
-}
-
-static int start_unlock_stream(struct snd_pcm_substream *substream)
-{
-	if (substream) {
-		if (substream->runtime->status->state == SNDRV_PCM_STATE_RUNNING
-			&& substream->ops)
-			substream->ops->trigger(substream, SNDRV_PCM_TRIGGER_START);
-		snd_pcm_stream_unlock_irq(substream);
-	}
-	return 0;
-}
-
 /*
  *Here is ESAI underrun reset step:
  *1. Read "TUE" and got TUE=1
@@ -858,13 +836,11 @@ static void fsl_esai_reset(struct snd_pcm_substream *substream, bool stop)
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
 	struct fsl_esai *esai_priv = snd_soc_dai_get_drvdata(cpu_dai);
+	unsigned long flags = 0;
 	u32 saisr;
 
-	if (stop) {
-		stop_lock_stream(esai_priv->substream[0]);
-		stop_lock_stream(esai_priv->substream[1]);
-	}
-
+	if (stop)
+		imx_stop_lock_pcm_streams(esai_priv->substream, 2, &flags);
 
 	regmap_update_bits(esai_priv->regmap, REG_ESAI_ECR,
 				ESAI_ECR_ESAIEN_MASK | ESAI_ECR_ERST_MASK,
@@ -902,10 +878,8 @@ static void fsl_esai_reset(struct snd_pcm_substream *substream, bool stop)
 
 	regmap_read(esai_priv->regmap, REG_ESAI_SAISR, &saisr);
 
-	if (stop) {
-		start_unlock_stream(esai_priv->substream[1]);
-		start_unlock_stream(esai_priv->substream[0]);
-	}
+	if (stop)
+		imx_start_unlock_pcm_streams(esai_priv->substream, 2, &flags);
 }
 
 static int fsl_esai_probe(struct platform_device *pdev)
diff --git a/sound/soc/fsl/imx-pcm.h b/sound/soc/fsl/imx-pcm.h
index 8859a35..e87387b 100644
--- a/sound/soc/fsl/imx-pcm.h
+++ b/sound/soc/fsl/imx-pcm.h
@@ -77,4 +77,39 @@ static inline void imx_pcm_fiq_exit(struct platform_device *pdev)
 }
 #endif
 
+static inline void imx_pcm_stream_trigger(struct snd_pcm_substream *s, int tr)
+{
+	if (s->runtime->status->state == SNDRV_PCM_STATE_RUNNING && s->ops)
+		s->ops->trigger(s, tr);
+}
+
+static inline void imx_stop_lock_pcm_streams(struct snd_pcm_substream **s,
+					     int count, unsigned long *flags)
+{
+	int i;
+
+	local_irq_save(*flags);
+	for (i = 0; i < count; i++) {
+		if (!s[i])
+			continue;
+		snd_pcm_stream_lock(s[i]);
+		imx_pcm_stream_trigger(s[i], SNDRV_PCM_TRIGGER_STOP);
+	}
+}
+
+static inline void imx_start_unlock_pcm_streams(struct snd_pcm_substream **s,
+						int count, unsigned long *flags)
+{
+	int i;
+
+	for (i = count - 1; i >= 0; i--) {
+		if (!s[i])
+			continue;
+		imx_pcm_stream_trigger(s[i], SNDRV_PCM_TRIGGER_START);
+		snd_pcm_stream_unlock(s[i]);
+	}
+	local_irq_restore(*flags);
+}
+
+
 #endif /* _IMX_PCM_H */
-- 
1.7.9.5

