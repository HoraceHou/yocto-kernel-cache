From 0a45fef5cc8892edb41b8e09e27a5f091bd30e51 Mon Sep 17 00:00:00 2001
From: Laurentiu Palcu <laurentiu.palcu@nxp.com>
Date: Fri, 5 Oct 2018 15:35:54 +0300
Subject: [PATCH 4799/5242] MLK-19673-1: drm/imx/core: add a workqueue and a
 commit object

commit  f90e1670eca819619910bf052fec40ce963d418a from
https://source.codeaurora.org/external/imx/linux-imx.git

This change adds a workqueue and a commit object that can be used by the
drivers to protect pending commits (non-blocking ones) from concurent
commits using legacy API (for example).

A non-blocking commit will defer the work to a workqueue and it may wait
for fences to be cleared. Waiting for fences to be cleared is
interruptible. Hence, if a SETPLANE IOCTL is performed (to disable a
plane), it may preempt the current commit and will mess up the atomic
states.  When the legacy calls finish, the non-blocking commit worker
will resume, but the crtc and/or FBs of some planes are already NULL.
Hence, the non-blocking commit will crash in
drm_atomic_helper_commit_planes() with NULL pointer dereference.

This particular patch does not affect existing drivers in any way.

Signed-off-by: Laurentiu Palcu <laurentiu.palcu@nxp.com>
CC: Ying Liu <victor.liu@nxp.com>
CC: Fancy Fang <chen.fang@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/gpu/drm/imx/imx-drm-core.c |   13 +++++++++++++
 drivers/gpu/drm/imx/imx-drm.h      |    6 ++++++
 2 files changed, 19 insertions(+)

diff --git a/drivers/gpu/drm/imx/imx-drm-core.c b/drivers/gpu/drm/imx/imx-drm-core.c
index 2cbe713..67179c2 100644
--- a/drivers/gpu/drm/imx/imx-drm-core.c
+++ b/drivers/gpu/drm/imx/imx-drm-core.c
@@ -279,6 +279,14 @@ static int imx_drm_bind(struct device *dev)
 	imxdrm->drm = drm;
 	drm->dev_private = imxdrm;
 
+	imxdrm->wq = alloc_ordered_workqueue("imxdrm", 0);
+	if (!imxdrm->wq) {
+		ret = -ENOMEM;
+		goto err_unref;
+	}
+
+	init_waitqueue_head(&imxdrm->commit.wait);
+
 	/*
 	 * enable drm irq mode.
 	 * - with irq_enabled = true, we can use the vblank feature.
@@ -358,6 +366,7 @@ static int imx_drm_bind(struct device *dev)
 err_kms:
 	dev_set_drvdata(dev, NULL);
 	drm_mode_config_cleanup(drm);
+	destroy_workqueue(imxdrm->wq);
 err_unref:
 	drm_dev_unref(drm);
 
@@ -371,6 +380,8 @@ static void imx_drm_unbind(struct device *dev)
 	if (has_dpu(dev))
 		imx_drm_driver.driver_features &= ~DRIVER_RENDER;
 
+	flush_workqueue(imxdrm->wq);
+
 	drm_dev_unregister(drm);
 
 	drm_kms_helper_poll_fini(drm);
@@ -382,6 +393,8 @@ static void imx_drm_unbind(struct device *dev)
 	component_unbind_all(drm->dev, drm);
 	dev_set_drvdata(dev, NULL);
 
+	destroy_workqueue(imxdrm->wq);
+
 	drm_dev_unref(drm);
 }
 
diff --git a/drivers/gpu/drm/imx/imx-drm.h b/drivers/gpu/drm/imx/imx-drm.h
index 2f54495..0a5c44d 100644
--- a/drivers/gpu/drm/imx/imx-drm.h
+++ b/drivers/gpu/drm/imx/imx-drm.h
@@ -19,6 +19,12 @@ struct imx_drm_device {
 	struct drm_device			*drm;
 	unsigned int				pipes;
 	struct drm_atomic_state			*state;
+
+	struct workqueue_struct *wq;
+	struct {
+		wait_queue_head_t wait;
+		bool pending;
+	} commit;
 };
 
 struct imx_crtc_state {
-- 
1.7.9.5

