From 9b10cc771a64d331965d93e2695a402628a60779 Mon Sep 17 00:00:00 2001
From: Peter Chen <peter.chen@nxp.com>
Date: Mon, 21 Aug 2017 15:00:05 +0800
Subject: [PATCH 2489/5242] MLK-16221-3 usb: cdns3: gadget: add free memory
 operation when gadget is stopped

commit  31c9a5ad208e6802d0316b2a113bdadc6f37695f from
https://source.codeaurora.org/external/imx/linux-imx.git

When the UDC core calls ->udc_stop, we need to free related non-ep TRB
memory.

Signed-off-by: Peter Chen <peter.chen@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/usb/cdns3/gadget.c |   32 ++++++++++++++++++++++++++++++--
 1 file changed, 30 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/cdns3/gadget.c b/drivers/usb/cdns3/gadget.c
index 921a270..955ba9c 100644
--- a/drivers/usb/cdns3/gadget.c
+++ b/drivers/usb/cdns3/gadget.c
@@ -1440,6 +1440,24 @@ static int usb_ss_gadget_ep_enable(struct usb_ep *ep,
 	return 0;
 }
 
+static void usb_ss_free_trb_pool(struct usb_ss_endpoint *usb_ss_ep)
+{
+	struct usb_ss_dev *usb_ss = usb_ss_ep->usb_ss;
+
+	if (usb_ss_ep->trb_pool) {
+		dma_free_coherent(usb_ss->sysdev,
+			sizeof(struct usb_ss_trb) * USB_SS_TRBS_NUM,
+			usb_ss_ep->trb_pool, usb_ss_ep->trb_pool_dma);
+		usb_ss_ep->trb_pool = NULL;
+	}
+
+	if (usb_ss_ep->cpu_addr) {
+		dma_free_coherent(usb_ss->sysdev, 4096, usb_ss_ep->cpu_addr,
+			usb_ss_ep->dma_addr);
+		usb_ss_ep->cpu_addr = NULL;
+	}
+}
+
 /**
  * usb_ss_gadget_ep_disable Disable endpoint
  * @ep: endpoint object
@@ -1835,12 +1853,22 @@ static int usb_ss_gadget_udc_stop(struct usb_gadget *gadget)
 {
 	struct usb_ss_dev *usb_ss = gadget_to_usb_ss(gadget);
 	unsigned long flags;
+	int i;
 
 	spin_lock_irqsave(&usb_ss->lock, flags);
 	usb_ss->gadget_driver = NULL;
+	if (!usb_ss->start_gadget)
+		goto quit;
 	/* disable interrupt for device */
-	if (usb_ss->start_gadget)
-		gadget_writel(usb_ss, &usb_ss->regs->usb_ien, 0);
+	gadget_writel(usb_ss, &usb_ss->regs->usb_ien, 0);
+	spin_unlock_irqrestore(&usb_ss->lock, flags);
+
+	for (i = 0; i < usb_ss->ep_nums ; i++)
+		usb_ss_free_trb_pool(usb_ss->eps[i]);
+
+	return 0;
+
+quit:
 	spin_unlock_irqrestore(&usb_ss->lock, flags);
 
 	return 0;
-- 
1.7.9.5

