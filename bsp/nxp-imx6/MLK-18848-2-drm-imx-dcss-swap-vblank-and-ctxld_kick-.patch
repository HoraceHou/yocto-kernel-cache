From 9ff9c34c7fdfeb1a93c8127c956b30545ffb0249 Mon Sep 17 00:00:00 2001
From: Laurentiu Palcu <laurentiu.palcu@nxp.com>
Date: Tue, 4 Sep 2018 13:57:10 +0300
Subject: [PATCH 4588/5242] MLK-18848-2: drm: imx: dcss: swap vblank and
 ctxld_kick interrupts

commit  7eca37dee98c0cdf729a03c4d475304539813385 from
https://source.codeaurora.org/external/imx/linux-imx.git

During boot time, the interrupt latency can reach 20ms due to UART
holding the interrupts disabled. If, during this time, VBLANK (LINE_0)
and CTXLD_KICK (LINE_1) are triggered, the handlers will be called in
the order of the irq_steer lines (vblank handler first and ctxld_kick
second). This may lead to "vblank wait timed out" warning messages from
DRM core, because the 50ms wait time is exceeded. Especially when
display is lower than 30fps.

Swapping the interrupt lines will have the ctxld_kick interrupt handler
always be called first, kicking the context loader ON before VBLANK
notification is sent to userspace.

Signed-off-by: Laurentiu Palcu <laurentiu.palcu@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm64/boot/dts/freescale/fsl-imx8mq.dtsi |    6 +++---
 drivers/gpu/imx/dcss/dcss-dtg.c               |   12 ++++++------
 2 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/arch/arm64/boot/dts/freescale/fsl-imx8mq.dtsi b/arch/arm64/boot/dts/freescale/fsl-imx8mq.dtsi
index 5ba0009..797ce6f 100755
--- a/arch/arm64/boot/dts/freescale/fsl-imx8mq.dtsi
+++ b/arch/arm64/boot/dts/freescale/fsl-imx8mq.dtsi
@@ -531,16 +531,16 @@
 			     <4 IRQ_TYPE_LEVEL_HIGH>,
 			     <5 IRQ_TYPE_LEVEL_HIGH>,
 			     <6 IRQ_TYPE_LEVEL_HIGH>,
-			     <8 IRQ_TYPE_EDGE_RISING>,
-				 <9 IRQ_TYPE_LEVEL_HIGH>,
+			     <8 IRQ_TYPE_LEVEL_HIGH>,
+				 <9 IRQ_TYPE_EDGE_RISING>,
 				 <16 IRQ_TYPE_LEVEL_HIGH>,
 				 <17 IRQ_TYPE_LEVEL_HIGH>;
 		interrupt-names = "dpr_dc_ch0",
 				  "dpr_dc_ch1",
 				  "dpr_dc_ch2",
 				  "ctx_ld",
-				  "dtg_prg1",
 				  "ctxld_kick",
+				  "dtg_prg1",
 				  "dtrc_ch1",
 				  "dtrc_ch2";
 		interrupt-parent = <&irqsteer_dcss>;
diff --git a/drivers/gpu/imx/dcss/dcss-dtg.c b/drivers/gpu/imx/dcss/dcss-dtg.c
index 4d6c4e4..9d94694 100644
--- a/drivers/gpu/imx/dcss/dcss-dtg.c
+++ b/drivers/gpu/imx/dcss/dcss-dtg.c
@@ -183,7 +183,7 @@ static irqreturn_t dcss_dtg_irq_handler(int irq, void *data)
 
 	dcss_ctxld_kick(dtg->dcss);
 
-	dcss_writel(status & LINE1_IRQ, dtg->base_reg + DCSS_DTG_INT_CONTROL);
+	dcss_writel(status & LINE0_IRQ, dtg->base_reg + DCSS_DTG_INT_CONTROL);
 
 	return IRQ_HANDLED;
 }
@@ -213,7 +213,7 @@ static int dcss_dtg_irq_config(struct dcss_dtg_priv *dtg)
 
 	dtg->ctxld_kick_irq_en = false;
 
-	dcss_update(LINE1_IRQ, LINE1_IRQ, dtg->base_reg + DCSS_DTG_INT_MASK);
+	dcss_update(LINE0_IRQ, LINE0_IRQ, dtg->base_reg + DCSS_DTG_INT_MASK);
 
 	return 0;
 }
@@ -311,7 +311,7 @@ void dcss_dtg_sync_set(struct dcss_soc *dcss, struct videomode *vm)
 	dcss_dtg_write(dtg, sb_ctxld_trig | db_ctxld_trig, DCSS_DTG_TC_CTXLD);
 
 	/* vblank trigger */
-	dcss_dtg_write(dtg, 0, DCSS_DTG_LINE0_INT);
+	dcss_dtg_write(dtg, 0, DCSS_DTG_LINE1_INT);
 
 	/* CTXLD trigger */
 	dcss_dtg_write(dtg, ((95 * dis_lrc_y) / 100) << 16, DCSS_DTG_LINE0_INT);
@@ -479,7 +479,7 @@ void dcss_dtg_vblank_irq_enable(struct dcss_soc *dcss, bool en)
 	struct dcss_dtg_priv *dtg = dcss->dtg_priv;
 	u32 status;
 
-	dcss_update(LINE0_IRQ, LINE0_IRQ, dtg->base_reg + DCSS_DTG_INT_MASK);
+	dcss_update(LINE1_IRQ, LINE1_IRQ, dtg->base_reg + DCSS_DTG_INT_MASK);
 
 	dcss_dpr_irq_enable(dcss, en);
 
@@ -499,7 +499,7 @@ void dcss_dtg_vblank_irq_enable(struct dcss_soc *dcss, bool en)
 			return;
 		}
 
-		dcss_writel(status & LINE0_IRQ,
+		dcss_writel(status & LINE1_IRQ,
 			    dtg->base_reg + DCSS_DTG_INT_CONTROL);
 
 		return;
@@ -516,5 +516,5 @@ void dcss_dtg_vblank_irq_clear(struct dcss_soc *dcss)
 
 	reg = dtg->base_reg + DCSS_DTG_INT_CONTROL;
 
-	dcss_update(LINE0_IRQ, LINE0_IRQ, reg);
+	dcss_update(LINE1_IRQ, LINE1_IRQ, reg);
 }
-- 
1.7.9.5

