From 664f3d03dc23ba008490329585151e3414a6e6e5 Mon Sep 17 00:00:00 2001
From: Richard Zhu <hongxing.zhu@nxp.com>
Date: Wed, 20 Jan 2016 16:13:28 +0800
Subject: [PATCH 0910/5242] MLK-12278 pci: imx: turn off pcie clks when link
 is down

commit  063bbad5347d4f6272f2af7b70b76c2b6b6728bd from
https://source.codeaurora.org/external/imx/linux-imx.git

In order to save power assumption, turn off the pcie clks
when there is no pcie link up at all.
add the option CONFIG_PCI_IMX6_COMPLIANCE_TEST, enable it
when the image is used to do the pcie compliance tests

Signed-off-by: Richard Zhu <hongxing.zhu@nxp.com>
Signed-off-by: Leonard Crestez <leonard.crestez@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/pci/controller/dwc/Kconfig    |    9 +++++++++
 drivers/pci/controller/dwc/pci-imx6.c |   20 ++++++++++++++++----
 2 files changed, 25 insertions(+), 4 deletions(-)

diff --git a/drivers/pci/controller/dwc/Kconfig b/drivers/pci/controller/dwc/Kconfig
index 9dcfc8b..797c13e 100644
--- a/drivers/pci/controller/dwc/Kconfig
+++ b/drivers/pci/controller/dwc/Kconfig
@@ -94,6 +94,15 @@ config PCI_IMX6
 	depends on PCI_MSI_IRQ_DOMAIN
 	select PCIE_DW_HOST
 
+config PCI_IMX6_COMPLIANCE_TEST
+	bool "Enable pcie compliance tests on imx6"
+	depends on PCI_IMX6
+	default n
+	help
+	  Say Y here if you want do the compliance tests on imx6 pcie rc found
+	  on FSL iMX SoCs. The pcie clks wouldn't be turned off, and the link
+	  speed wouldn't be limited to gen1 when the Y is set here.
+
 config EP_MODE_IN_EP_RC_SYS
 	bool "PCI Express EP mode in the IMX6 RC/EP interconnection system"
 	depends on PCI_IMX6
diff --git a/drivers/pci/controller/dwc/pci-imx6.c b/drivers/pci/controller/dwc/pci-imx6.c
index 653a715..c1746e8 100644
--- a/drivers/pci/controller/dwc/pci-imx6.c
+++ b/drivers/pci/controller/dwc/pci-imx6.c
@@ -625,10 +625,12 @@ static int imx6_pcie_establish_link(struct imx6_pcie *imx6_pcie)
 	 * started in Gen2 mode, there is a possibility the devices on the
 	 * bus will not be detected at all.  This happens with PCIe switches.
 	 */
-	tmp = dw_pcie_readl_dbi(pci, PCIE_RC_LCR);
-	tmp &= ~PCIE_RC_LCR_MAX_LINK_SPEEDS_MASK;
-	tmp |= PCIE_RC_LCR_MAX_LINK_SPEEDS_GEN1;
-	dw_pcie_writel_dbi(pci, PCIE_RC_LCR, tmp);
+	if (!IS_ENABLED(CONFIG_PCI_IMX6_COMPLIANCE_TEST)) {
+		tmp = dw_pcie_readl_dbi(pci, PCIE_RC_LCR);
+		tmp &= ~PCIE_RC_LCR_MAX_LINK_SPEEDS_MASK;
+		tmp |= PCIE_RC_LCR_MAX_LINK_SPEEDS_GEN1;
+		dw_pcie_writel_dbi(pci, PCIE_RC_LCR, tmp);
+	}
 
 	/* Start LTSSM. */
 	if (imx6_pcie->variant == IMX7D)
@@ -677,6 +679,16 @@ static int imx6_pcie_establish_link(struct imx6_pcie *imx6_pcie)
 		ret = imx6_pcie_wait_for_link(imx6_pcie);
 		if (ret) {
 			dev_err(dev, "Failed to bring link up!\n");
+			if (!IS_ENABLED(CONFIG_PCI_IMX6_COMPLIANCE_TEST)) {
+				clk_disable_unprepare(imx6_pcie->pcie);
+				clk_disable_unprepare(imx6_pcie->pcie_bus);
+				clk_disable_unprepare(imx6_pcie->pcie_phy);
+				if (is_imx6sx_pcie(imx6_pcie))
+					clk_disable_unprepare(imx6_pcie->pcie_inbound_axi);
+				release_bus_freq(BUS_FREQ_HIGH);
+				if (imx6_pcie->pcie_phy_regulator != NULL)
+					regulator_disable(imx6_pcie->pcie_phy_regulator);
+			}
 			goto err_reset_phy;
 		}
 	} else {
-- 
1.7.9.5

