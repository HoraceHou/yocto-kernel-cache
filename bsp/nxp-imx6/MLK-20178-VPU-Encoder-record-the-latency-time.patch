From ccd83f4e3f6ec1a50b30d82f62c0fd5d505dcf12 Mon Sep 17 00:00:00 2001
From: ming_qian <ming.qian@nxp.com>
Date: Fri, 2 Nov 2018 14:35:03 +0800
Subject: [PATCH 4988/5242] MLK-20178:VPU Encoder:record the latency time

commit  08fa9e557d84fe5dd60c69629378cb44747999ba from
https://source.codeaurora.org/external/imx/linux-imx.git

Signed-off-by: ming_qian <ming.qian@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c |   35 +++++++++++++++++++++++++++
 drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.h |    4 ++-
 2 files changed, 38 insertions(+), 1 deletion(-)

diff --git a/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c b/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c
index 22b34bc..3cc9bc0 100644
--- a/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c
+++ b/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.c
@@ -1212,6 +1212,7 @@ static int v4l2_ioctl_streamon(struct file *file,
 		)
 {
 	struct vpu_ctx *ctx = v4l2_fh_to_ctx(fh);
+	struct vpu_attr *attr;
 	struct queue_data *q_data;
 	int ret;
 
@@ -1223,6 +1224,13 @@ static int v4l2_ioctl_streamon(struct file *file,
 		q_data = &ctx->q_data[V4L2_DST];
 	else
 		return -EINVAL;
+
+	attr = get_vpu_ctx_attr(ctx);
+	if (attr) {
+		attr->ts_start[V4L2_SRC] = 0;
+		attr->ts_start[V4L2_DST] = 0;
+	}
+
 	ret = vb2_streamon(&q_data->vb2_q, i);
 	if (!ret && i == V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE) {
 		clear_bit(VPU_ENC_STATUS_START_SEND, &ctx->status);
@@ -1585,6 +1593,22 @@ static u32 get_vb2_plane_phy_addr(struct vb2_buffer *vb, unsigned int plane_no)
 	return *dma_addr + vb->planes[plane_no].data_offset;
 }
 
+static void record_start_time(struct vpu_ctx *ctx, enum QUEUE_TYPE type)
+{
+	struct vpu_attr *attr = get_vpu_ctx_attr(ctx);
+	struct timespec ts;
+
+	if (!attr)
+		return;
+
+	if (attr->ts_start[type])
+		return;
+
+	getrawmonotonic(&ts);
+	attr->ts_start[type] = ts.tv_sec * MSEC_PER_SEC +
+				ts.tv_nsec / NSEC_PER_MSEC;
+}
+
 static bool update_yuv_addr(struct vpu_ctx *ctx)
 {
 	bool bGotAFrame = FALSE;
@@ -1992,6 +2016,7 @@ static int submit_input_and_encode(struct vpu_ctx *ctx)
 	if (update_yuv_addr(ctx)) {
 		vpu_ctx_send_cmd(ctx, GTB_ENC_CMD_FRAME_ENCODE, 0, NULL);
 		clear_queue_rw_flag(queue, VPU_ENC_FLAG_WRITEABLE);
+		record_start_time(ctx, V4L2_SRC);
 	}
 exit:
 	up(&queue->drv_q_lock);
@@ -2221,6 +2246,7 @@ static int handle_event_frame_done(struct vpu_ctx *ctx,
 	show_enc_pic_info(pEncPicInfo);
 
 	count_encoded_frame(ctx);
+	record_start_time(ctx, V4L2_DST);
 	frame = vmalloc(sizeof(*frame));
 	if (frame) {
 		struct queue_data *queue = &ctx->q_data[V4L2_DST];
@@ -3149,6 +3175,15 @@ static ssize_t show_instance_info(struct device *dev,
 	num += snprintf(buf + num, PAGE_SIZE - num,
 			"dqbuf output h264 count: %ld\n",
 			statistic->h264_count);
+	if (vpu_attr->ts_start[V4L2_SRC] && vpu_attr->ts_start[V4L2_DST]) {
+		unsigned long latency;
+
+		latency = vpu_attr->ts_start[V4L2_DST] -
+				vpu_attr->ts_start[V4L2_SRC];
+		num += snprintf(buf + num, PAGE_SIZE - num,
+				"latency(ms):%ld\n", latency);
+	}
+
 	if (!vpu_attr->core->ctx[vpu_attr->index])
 		num += snprintf(buf + num, PAGE_SIZE - num,
 			"<instance has been released>\n");
diff --git a/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.h b/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.h
index 4284e03..555a847 100644
--- a/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.h
+++ b/drivers/mxc/vpu-encoder-b0/vpu_encoder_b0.h
@@ -54,7 +54,7 @@
 #define RPC_SIZE_DEFAULT	0x500000
 #define RPC_SIZE_MIN		0x100000
 #define PRINT_SIZE_DEFAULT	0x300000
-#define PRINT_SIZE_MIN		0x100000
+#define PRINT_SIZE_MIN		0x200000
 #define MEM_SIZE  0x2800000
 #define YUV_SIZE  0x4000000
 #define STREAM_SIZE 0x300000
@@ -227,6 +227,8 @@ struct vpu_attr {
 	struct vpu_statistic statistic;
 	MEDIAIP_ENC_PARAM param;
 
+	unsigned long ts_start[2];
+
 	bool created;
 };
 
-- 
1.7.9.5

