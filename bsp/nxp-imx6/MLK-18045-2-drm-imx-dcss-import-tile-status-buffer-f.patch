From 96548870ff33b469948348a0febe0720fe520904 Mon Sep 17 00:00:00 2001
From: Fancy Fang <chen.fang@nxp.com>
Date: Mon, 9 Apr 2018 19:36:16 +0800
Subject: [PATCH 3608/5242] MLK-18045-2 drm/imx: dcss: import tile status
 buffer from 'ts_dma_buf'

commit  af37468f337a82824b86f3408e641c5b537569e1 from
https://source.codeaurora.org/external/imx/linux-imx.git

When the fb's gem_obj associated 'dma_buf' field is set with
valid value, the tile status buffer need to be imported with
the 'ts_dma_buf' which is passed from the 'dma_metadata' to
get the tile status buffer start physical address.

Signed-off-by: Fancy Fang <chen.fang@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/gpu/drm/imx/dcss/dcss-plane.c |   49 ++++++++++++++++++++++++++++++++-
 1 file changed, 48 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/imx/dcss/dcss-plane.c b/drivers/gpu/drm/imx/dcss/dcss-plane.c
index aa4aed6..3ee75a1 100644
--- a/drivers/gpu/drm/imx/dcss/dcss-plane.c
+++ b/drivers/gpu/drm/imx/dcss/dcss-plane.c
@@ -18,6 +18,7 @@
 #include <drm/drm_fb_cma_helper.h>
 #include <drm/drm_gem_cma_helper.h>
 #include <drm/drm_atomic.h>
+#include <linux/dma-buf.h>
 
 #include "video/imx-dcss.h"
 #include "dcss-plane.h"
@@ -240,6 +241,23 @@ static int dcss_plane_atomic_check(struct drm_plane *plane,
 	return 0;
 }
 
+static struct drm_gem_object *dcss_plane_gem_import(struct drm_device *dev,
+						    struct dma_buf *dma_buf)
+{
+	struct drm_gem_object *obj;
+
+	if (IS_ERR(dma_buf))
+		return ERR_CAST(dma_buf);
+
+	mutex_lock(&dev->object_name_lock);
+
+	obj = dev->driver->gem_prime_import(dev, dma_buf);
+
+	mutex_unlock(&dev->object_name_lock);
+
+	return obj;
+}
+
 static void dcss_plane_atomic_set_base(struct dcss_plane *dcss_plane)
 {
 	int mod_idx;
@@ -247,6 +265,9 @@ static void dcss_plane_atomic_set_base(struct dcss_plane *dcss_plane)
 	struct drm_plane_state *state = plane->state;
 	struct drm_framebuffer *fb = state->fb;
 	struct drm_gem_cma_object *cma_obj = drm_fb_cma_get_gem_obj(fb, 0);
+	struct dma_buf *dma_buf;
+	struct dma_metadata *mdata;
+	struct drm_gem_object *gem_obj;
 	unsigned long p1_ba, p2_ba;
 	dma_addr_t caddr;
 	bool modifiers_present = !!(fb->flags & DRM_MODE_FB_MODIFIERS);
@@ -287,7 +308,33 @@ static void dcss_plane_atomic_set_base(struct dcss_plane *dcss_plane)
 			dcss_dec400d_bypass(dcss_plane->dcss);
 			return;
 		case DRM_FORMAT_MOD_VIVANTE_SUPER_TILED_FC:
-			caddr = cma_obj->paddr + ALIGN(fb->height, 64) * fb->pitches[0];
+			dma_buf = cma_obj->base.dma_buf;
+			if (!dma_buf) {
+				caddr = cma_obj->paddr +
+					ALIGN(fb->height, 64) * fb->pitches[0];
+				goto config;
+			}
+
+			mdata = dma_buf->priv;
+			if (!mdata ||
+			    mdata->magic != VIV_VIDMEM_METADATA_MAGIC) {
+				WARN_ON(1);
+				return;
+			}
+
+			gem_obj = dcss_plane_gem_import(plane->dev,
+							mdata->ts_dma_buf);
+			if (IS_ERR(gem_obj)) {
+				WARN_ON(1);
+				return;
+			}
+
+			caddr = to_drm_gem_cma_obj(gem_obj)->paddr;
+
+			/* release gem_obj */
+			drm_gem_object_unreference_unlocked(gem_obj);
+
+config:
 			dcss_dec400d_read_config(dcss_plane->dcss, 0, true);
 			dcss_dec400d_addr_set(dcss_plane->dcss, p1_ba, caddr);
 			break;
-- 
1.7.9.5

