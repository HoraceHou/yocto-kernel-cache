From 6249136ca69617f0fa8490ee4047b4de7a880d17 Mon Sep 17 00:00:00 2001
From: Chenyan Feng <ella.feng@nxp.com>
Date: Sat, 11 Aug 2018 02:32:33 +0800
Subject: [PATCH 4370/5242] MGS-4120 [#ccc] Enable GPU workaround on 4GB
 LPDDR4 platform

commit  623458ca36d191a1af6eb8056940a20c48269382 from
https://source.codeaurora.org/external/imx/linux-imx.git

Added a flagbits in soc_platform to workaround Soc platform. Add a
check for memory address beyond 4G for 850d mscale.

Date: 10th Aug, 2018
Signed-off-by: Ella Feng <ella.feng@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../default/gc_hal_kernel_allocator_gfp.c          |   10 ++++-
 .../default/gc_hal_kernel_allocator_user_memory.c  |   41 ++++++++++++++++++++
 .../hal/os/linux/kernel/gc_hal_kernel_platform.h   |    8 ++++
 .../freescale/gc_hal_kernel_platform_imx.c         |    4 ++
 4 files changed, 62 insertions(+), 1 deletion(-)

diff --git a/drivers/mxc/gpu-viv/hal/os/linux/kernel/allocator/default/gc_hal_kernel_allocator_gfp.c b/drivers/mxc/gpu-viv/hal/os/linux/kernel/allocator/default/gc_hal_kernel_allocator_gfp.c
index c76431b..a4fed0a 100644
--- a/drivers/mxc/gpu-viv/hal/os/linux/kernel/allocator/default/gc_hal_kernel_allocator_gfp.c
+++ b/drivers/mxc/gpu-viv/hal/os/linux/kernel/allocator/default/gc_hal_kernel_allocator_gfp.c
@@ -311,12 +311,20 @@ static int gc_usage_show(struct seq_file* m, void* data)
     mdlPriv = kzalloc(sizeof(struct gfp_mdl_priv), GFP_KERNEL | __GFP_NORETRY);
 
 #if defined(CONFIG_ZONE_DMA32) && LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37)
-    if (Flags & gcvALLOC_FLAG_4GB_ADDR)
+    if ((Flags & gcvALLOC_FLAG_4GB_ADDR) || (Allocator->os->device->platform->flagBits & gcvPLATFORM_FLAG_LIMIT_4G_ADDRESS))
     {
         /* remove __GFP_HIGHMEM bit, add __GFP_DMA32 bit */
         gfp &= ~__GFP_HIGHMEM;
         gfp |= __GFP_DMA32;
     }
+#else
+    if (Flags & gcvALLOC_FLAG_4GB_ADDR || (Allocator->os->device->platform->flagBits & gcvPLATFORM_FLAG_LIMIT_4G_ADDRESS))
+    {
+        /* remove __GFP_HIGHMEM bit, add __GFP_DMA bit */
+        gfp &= ~__GFP_HIGHMEM;
+        gfp |= __GFP_DMA;
+    }
+
 #endif
 
     if (contiguous)
diff --git a/drivers/mxc/gpu-viv/hal/os/linux/kernel/allocator/default/gc_hal_kernel_allocator_user_memory.c b/drivers/mxc/gpu-viv/hal/os/linux/kernel/allocator/default/gc_hal_kernel_allocator_user_memory.c
index 578af3f..3a04df6 100644
--- a/drivers/mxc/gpu-viv/hal/os/linux/kernel/allocator/default/gc_hal_kernel_allocator_user_memory.c
+++ b/drivers/mxc/gpu-viv/hal/os/linux/kernel/allocator/default/gc_hal_kernel_allocator_user_memory.c
@@ -463,6 +463,47 @@ static int import_pfn_map(struct um_desc *um,
         gcmkONERROR(gcvSTATUS_OUT_OF_RESOURCES);
     }
 
+    if(Os->device->platform->flagBits & gcvPLATFORM_FLAG_LIMIT_4G_ADDRESS )
+    {
+        gctPHYS_ADDR_T addr;
+
+        if (Physical != gcvINVALID_PHYSICAL_ADDRESS)
+        {
+            if(Physical >0xFFFFFFFFu || Physical + Size > 0xFFFFFFFFu )
+            {
+                gcmkONERROR(gcvSTATUS_INVALID_ARGUMENT);
+            }
+        }
+        else if (vm_flags & VM_PFNMAP)
+        {
+            for(i = 0; i < pageCount; i++)
+            {
+                addr =  UserMemory->pfns[i] << PAGE_SHIFT;
+                if( addr > 0xFFFFFFFFu)
+                {
+                    kfree(UserMemory->pfns);
+                    UserMemory->pfns = gcvNULL;
+                    kfree(UserMemory->refs) ;
+                    UserMemory->refs = gcvNULL;
+                    gcmkONERROR(gcvSTATUS_INVALID_ARGUMENT);
+                }
+            }
+        }
+        else
+        {
+            for (i = 0; i< pageCount; i++)
+            {
+                addr = page_to_phys(UserMemory->pages[i]);
+                if(addr > 0xFFFFFFFFu )
+                {
+                    kfree(UserMemory->pages);
+                    UserMemory->pages = gcvNULL;
+                    gcmkONERROR(gcvSTATUS_INVALID_ARGUMENT);
+                }
+            }
+        }
+    }
+
     UserMemory->vm_flags = vm_flags;
     UserMemory->user_vaddr = (unsigned long)Memory;
     UserMemory->size  = Size;
diff --git a/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_platform.h b/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_platform.h
index b790b90..f83354d 100644
--- a/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_platform.h
+++ b/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_platform.h
@@ -281,6 +281,12 @@
 }
 gcsPLATFORM_OPERATIONS;
 
+enum
+{
+    /* GPU can't issue more that 32bit physical address */
+    gcvPLATFORM_FLAG_LIMIT_4G_ADDRESS = 1 << 0,
+};
+
 struct soc_platform
 {
 #if USE_LINUX_PCIE
@@ -293,6 +299,8 @@ struct soc_platform
 
     const char *name;
     gcsPLATFORM_OPERATIONS* ops;
+    /* PLATFORM specific flags */
+    gctUINT32  flagBits;
 };
 
 #if USE_LINUX_PCIE
diff --git a/drivers/mxc/gpu-viv/hal/os/linux/kernel/platform/freescale/gc_hal_kernel_platform_imx.c b/drivers/mxc/gpu-viv/hal/os/linux/kernel/platform/freescale/gc_hal_kernel_platform_imx.c
index f8f94a2..66dac1c 100644
--- a/drivers/mxc/gpu-viv/hal/os/linux/kernel/platform/freescale/gc_hal_kernel_platform_imx.c
+++ b/drivers/mxc/gpu-viv/hal/os/linux/kernel/platform/freescale/gc_hal_kernel_platform_imx.c
@@ -1488,6 +1488,10 @@ static inline int reset_gpu(int gpu)
     )
 {
     patch_param(Platform->device, Args);
+
+    if (of_find_compatible_node(NULL, NULL, "fsl,imx8mq-gpu") && ((Args->baseAddress + totalram_pages * PAGE_SIZE) > 0x100000000))
+        Platform->flagBits = gcvPLATFORM_FLAG_LIMIT_4G_ADDRESS;
+
     return gcvSTATUS_OK;
 }
 
-- 
1.7.9.5

