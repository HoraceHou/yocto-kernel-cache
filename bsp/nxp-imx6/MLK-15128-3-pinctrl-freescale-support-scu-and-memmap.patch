From 80fa93837ce40369bb0c58cb38f7e76889891049 Mon Sep 17 00:00:00 2001
From: Anson Huang <Anson.Huang@nxp.com>
Date: Tue, 20 Jun 2017 23:05:52 +0800
Subject: [PATCH 1973/5242] MLK-15128-3 pinctrl: freescale: support scu and
 memmap pinctrl together

commit  ed57aad6d5e4fb620e7bd645e970340dec203734 from
https://source.codeaurora.org/external/imx/linux-imx.git

As i.MX8MQ is a ARM64 SoC but it does NOT use SCU pinctrl, so
need to support both SCU and MEMMAP pinctrl together for ARM64
build.

use IMX8_USE_SCU flag to distinguish SCU and MEMMAP pinctrl
type.

Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
Signed-off-by: Peng Fan <peng.fan@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/pinctrl/freescale/pinctrl-imx.c    |   40 ++++++++++++---
 drivers/pinctrl/freescale/pinctrl-imx.h    |   73 +++++++++++++++++++++++++---
 drivers/pinctrl/freescale/pinctrl-memmap.c |    8 +--
 drivers/pinctrl/freescale/pinctrl-scu.c    |    9 ++--
 4 files changed, 108 insertions(+), 22 deletions(-)

diff --git a/drivers/pinctrl/freescale/pinctrl-imx.c b/drivers/pinctrl/freescale/pinctrl-imx.c
index 1cacfc5..3bbb882 100644
--- a/drivers/pinctrl/freescale/pinctrl-imx.c
+++ b/drivers/pinctrl/freescale/pinctrl-imx.c
@@ -56,6 +56,7 @@ static int imx_dt_node_to_map(struct pinctrl_dev *pctldev,
 			struct pinctrl_map **map, unsigned *num_maps)
 {
 	struct imx_pinctrl *ipctl = pinctrl_dev_get_drvdata(pctldev);
+	const struct imx_pinctrl_soc_info *info = ipctl->info;
 	const struct group_desc *grp;
 	struct pinctrl_map *new_map;
 	struct device_node *parent;
@@ -153,6 +154,7 @@ static int imx_pmx_set(struct pinctrl_dev *pctldev, unsigned selector,
 		       unsigned group)
 {
 	struct imx_pinctrl *ipctl = pinctrl_dev_get_drvdata(pctldev);
+	const struct imx_pinctrl_soc_info *info = ipctl->info;
 	unsigned int npins;
 	int i, err;
 	struct group_desc *grp = NULL;
@@ -176,7 +178,11 @@ static int imx_pmx_set(struct pinctrl_dev *pctldev, unsigned selector,
 		func->name, grp->name);
 
 	for (i = 0; i < npins; i++) {
-		err = imx_pmx_set_one_pin(ipctl, &((struct imx_pin *)(grp->data))[i]);
+		struct imx_pin *pin = &((struct imx_pin *)(grp->data))[i];
+		if (info->flags & IMX8_USE_SCU)
+			err = imx_pmx_set_one_pin_scu(ipctl, pin);
+		else
+			err = imx_pmx_set_one_pin_mem(ipctl, pin);
 		if (err)
 			return err;
 	}
@@ -250,23 +256,41 @@ static u32 imx_pinconf_parse_generic_config(struct device_node *np,
 static int imx_pinconf_get(struct pinctrl_dev *pctldev,
 			     unsigned pin_id, unsigned long *config)
 {
-	return imx_pinconf_backend_get(pctldev, pin_id, config);
+	struct imx_pinctrl *ipctl = pinctrl_dev_get_drvdata(pctldev);
+	const struct imx_pinctrl_soc_info *info = ipctl->info;
+
+	if (info->flags & IMX8_USE_SCU)
+		return imx_pinconf_backend_get_scu(pctldev, pin_id, config);
+	else
+		return imx_pinconf_backend_get_mem(pctldev, pin_id, config);
 }
 
 static int imx_pinconf_set(struct pinctrl_dev *pctldev,
 			     unsigned pin_id, unsigned long *configs,
 			     unsigned num_configs)
 {
-	return imx_pinconf_backend_set(pctldev, pin_id, configs, num_configs);
+	struct imx_pinctrl *ipctl = pinctrl_dev_get_drvdata(pctldev);
+	const struct imx_pinctrl_soc_info *info = ipctl->info;
+
+	if (info->flags & IMX8_USE_SCU)
+		return imx_pinconf_backend_set_scu(pctldev, pin_id, configs, num_configs);
+	else
+		return imx_pinconf_backend_set_mem(pctldev, pin_id, configs, num_configs);
 }
 
 static void imx_pinconf_dbg_show(struct pinctrl_dev *pctldev,
 				   struct seq_file *s, unsigned pin_id)
 {
+	struct imx_pinctrl *ipctl = pinctrl_dev_get_drvdata(pctldev);
+	const struct imx_pinctrl_soc_info *info = ipctl->info;
 	unsigned long config;
 	int ret;
 
-	ret = imx_pinconf_backend_get(pctldev, pin_id, &config);
+	if (info->flags & IMX8_USE_SCU)
+		ret = imx_pinconf_backend_get_scu(pctldev, pin_id, &config);
+	else
+		ret = imx_pinconf_backend_get_mem(pctldev, pin_id, &config);
+
 	if (ret) {
 		seq_puts(s, "N/A");
 		return;
@@ -394,8 +418,12 @@ static int imx_pinctrl_parse_groups(struct device_node *np,
 	for (i = 0; i < grp->num_pins; i++) {
 		struct imx_pin *pin = &((struct imx_pin *)(grp->data))[i];
 
-		imx_pinctrl_parse_pin(ipctl, &grp->pins[i], pin,
-				      list_p, config);
+		if (info->flags & IMX8_USE_SCU)
+			imx_pinctrl_parse_pin_scu(ipctl, &grp->pins[i],
+				pin, list_p, config);
+		else
+			imx_pinctrl_parse_pin_mem(ipctl, &grp->pins[i],
+				pin, list_p, config);
 	}
 
 	return 0;
diff --git a/drivers/pinctrl/freescale/pinctrl-imx.h b/drivers/pinctrl/freescale/pinctrl-imx.h
index e26ff32..1c50b6e 100644
--- a/drivers/pinctrl/freescale/pinctrl-imx.h
+++ b/drivers/pinctrl/freescale/pinctrl-imx.h
@@ -136,12 +136,69 @@ int imx_pinctrl_probe(struct platform_device *pdev,
 			const struct imx_pinctrl_soc_info *info);
 int imx_pinctrl_suspend(struct device *dev);
 int imx_pinctrl_resume(struct device *dev);
-int imx_pmx_set_one_pin(struct imx_pinctrl *ipctl, struct imx_pin *pin);
-int imx_pinconf_backend_get(struct pinctrl_dev *pctldev, unsigned pin_id,
-			    unsigned long *config);
-int imx_pinconf_backend_set(struct pinctrl_dev *pctldev, unsigned pin_id,
-			    unsigned long *configs, unsigned num_configs);
-int imx_pinctrl_parse_pin(struct imx_pinctrl *ipctl,
-			  unsigned int *pin_id, struct imx_pin *pin,
-			  const __be32 **list_p, u32 generic_config);
+
+#ifdef CONFIG_PINCTRL_IMX_MEMMAP
+int imx_pmx_set_one_pin_mem(struct imx_pinctrl *ipctl, struct imx_pin *pin);
+int imx_pinconf_backend_get_mem(struct pinctrl_dev *pctldev, unsigned pin_id,
+		unsigned long *config);
+int imx_pinconf_backend_set_mem(struct pinctrl_dev *pctldev, unsigned pin_id,
+		unsigned long *configs, unsigned num_configs);
+int imx_pinctrl_parse_pin_mem(struct imx_pinctrl *ipctl,
+		unsigned int *pin_id, struct imx_pin *pin, const __be32 **list_p,
+		u32 generic_config);
+#else
+static inline int imx_pmx_set_one_pin_mem(struct imx_pinctrl *ipctl, struct imx_pin *pin)
+{
+	return 0;
+}
+static inline int imx_pinconf_backend_get_mem(struct pinctrl_dev *pctldev, unsigned pin_id,
+		unsigned long *config)
+{
+	return 0;
+}
+static inline int imx_pinconf_backend_set_mem(struct pinctrl_dev *pctldev, unsigned pin_id,
+		unsigned long *configs, unsigned num_configs)
+{
+	return 0;
+}
+static inline int imx_pinctrl_parse_pin_mem(struct imx_pinctrl *ipctl,
+		unsigned int *pin_id, struct imx_pin *pin, const __be32 **list_p,
+		u32 generic_config)
+{
+	return 0;
+}
+#endif
+
+#ifdef CONFIG_PINCTRL_IMX_SCU
+int imx_pmx_set_one_pin_scu(struct imx_pinctrl *ipctl, struct imx_pin *pin);
+int imx_pinconf_backend_get_scu(struct pinctrl_dev *pctldev, unsigned pin_id,
+		unsigned long *config);
+int imx_pinconf_backend_set_scu(struct pinctrl_dev *pctldev, unsigned pin_id,
+		unsigned long *configs, unsigned num_configs);
+int imx_pinctrl_parse_pin_scu(struct imx_pinctrl *ipctl,
+		unsigned int *pin_id, struct imx_pin *pin, const __be32 **list_p,
+		u32 generic_config);
+#else
+static inline int imx_pmx_set_one_pin_scu(struct imx_pinctrl *ipctl, struct imx_pin *pin)
+{
+	return 0;
+}
+static inline int imx_pinconf_backend_get_scu(struct pinctrl_dev *pctldev, unsigned pin_id,
+		unsigned long *config)
+{
+	return 0;
+}
+static inline int imx_pinconf_backend_set_scu(struct pinctrl_dev *pctldev, unsigned pin_id,
+		unsigned long *configs, unsigned num_configs)
+{
+	return 0;
+}
+static inline int imx_pinctrl_parse_pin_scu(struct imx_pinctrl *ipctl,
+		unsigned int *pin_id, struct imx_pin *pin, const __be32 **list_p,
+		u32 generic_config)
+{
+	return 0;
+}
+#endif
+
 #endif /* __DRIVERS_PINCTRL_IMX_H */
diff --git a/drivers/pinctrl/freescale/pinctrl-memmap.c b/drivers/pinctrl/freescale/pinctrl-memmap.c
index effabb5..fc93976 100644
--- a/drivers/pinctrl/freescale/pinctrl-memmap.c
+++ b/drivers/pinctrl/freescale/pinctrl-memmap.c
@@ -33,7 +33,7 @@
 #define IOMUXC_IBE	(1 << 16)
 #define IOMUXC_OBE	(1 << 17)
 
-int imx_pmx_set_one_pin(struct imx_pinctrl *ipctl, struct imx_pin *pin)
+int imx_pmx_set_one_pin_mem(struct imx_pinctrl *ipctl, struct imx_pin *pin)
 {
 	const struct imx_pinctrl_soc_info *info = ipctl->info;
 	unsigned int pin_id = pin->pin;
@@ -108,7 +108,7 @@ int imx_pmx_set_one_pin(struct imx_pinctrl *ipctl, struct imx_pin *pin)
 	return 0;
 }
 
-int imx_pinconf_backend_get(struct pinctrl_dev *pctldev,
+int imx_pinconf_backend_get_mem(struct pinctrl_dev *pctldev,
 			    unsigned pin_id, unsigned long *config)
 {
 	struct imx_pinctrl *ipctl = pinctrl_dev_get_drvdata(pctldev);
@@ -129,7 +129,7 @@ int imx_pinconf_backend_get(struct pinctrl_dev *pctldev,
 	return 0;
 }
 
-int imx_pinconf_backend_set(struct pinctrl_dev *pctldev,
+int imx_pinconf_backend_set_mem(struct pinctrl_dev *pctldev,
 			    unsigned pin_id, unsigned long *configs,
 			    unsigned num_configs)
 {
@@ -166,7 +166,7 @@ int imx_pinconf_backend_set(struct pinctrl_dev *pctldev,
 	return 0;
 }
 
-int imx_pinctrl_parse_pin(struct imx_pinctrl *ipctl,
+int imx_pinctrl_parse_pin_mem(struct imx_pinctrl *ipctl,
 			  unsigned int *grp_pin_id, struct imx_pin *pin,
 			  const __be32 **list_p, u32 generic_config)
 {
diff --git a/drivers/pinctrl/freescale/pinctrl-scu.c b/drivers/pinctrl/freescale/pinctrl-scu.c
index 4e2ac42..1314197 100644
--- a/drivers/pinctrl/freescale/pinctrl-scu.c
+++ b/drivers/pinctrl/freescale/pinctrl-scu.c
@@ -31,12 +31,12 @@
 
 sc_ipc_t pinctrl_ipcHandle;
 
-int imx_pmx_set_one_pin(struct imx_pinctrl *ipctl, struct imx_pin *pin)
+int imx_pmx_set_one_pin_scu(struct imx_pinctrl *ipctl, struct imx_pin *pin)
 {
 	return 0;
 }
 
-int imx_pinconf_backend_get(struct pinctrl_dev *pctldev, unsigned pin_id,
+int imx_pinconf_backend_get_scu(struct pinctrl_dev *pctldev, unsigned pin_id,
 			    unsigned long *config)
 {
 	sc_err_t err = SC_ERR_NONE;
@@ -54,7 +54,8 @@ int imx_pinconf_backend_get(struct pinctrl_dev *pctldev, unsigned pin_id,
 
 	return 0;
 }
-int imx_pinconf_backend_set(struct pinctrl_dev *pctldev, unsigned pin_id,
+
+int imx_pinconf_backend_set_scu(struct pinctrl_dev *pctldev, unsigned pin_id,
 			    unsigned long *configs, unsigned num_configs)
 {
 	sc_err_t err = SC_ERR_NONE;
@@ -90,7 +91,7 @@ int imx_pinconf_backend_set(struct pinctrl_dev *pctldev, unsigned pin_id,
 	return 0;
 }
 
-int imx_pinctrl_parse_pin(struct imx_pinctrl *ipctl,
+int imx_pinctrl_parse_pin_scu(struct imx_pinctrl *ipctl,
 			  unsigned int *pin_id, struct imx_pin *pin,
 			  const __be32 **list_p, u32 generic_config)
 {
-- 
1.7.9.5

