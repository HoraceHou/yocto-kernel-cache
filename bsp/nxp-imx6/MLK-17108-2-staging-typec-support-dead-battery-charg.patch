From c17f7f2dc7b999525f92793d9b29916d6dcbc921 Mon Sep 17 00:00:00 2001
From: Jun Li <jun.li@nxp.com>
Date: Fri, 19 Jan 2018 03:16:00 +0800
Subject: [PATCH 3271/5242] MLK-17108-2 staging: typec: support dead battery
 charging

commit  876270659b2eaaa3f40e9610cc116d7b3c5eaa00 from
https://source.codeaurora.org/external/imx/linux-imx.git

If the vbus is aready on and remote cc state is Rp while typec init, we
think it's a dead battery case, this needs the PD session already setup
by bootloader,  so kernel can negotiate a new power session by soft reset,
this patch use the exsiting flag vbus_never_low as boot from dead battery
flag, but update the condition of setting it: not only check vbus, also
the cc status to make sure remote is a power source, if yes, bypass the
vbus sink disable. If the vbus is from local, we will still disable vbus
charge so original code intention is kept.

Acked-by: Peter Chen <peter.chen@nxp.com>
Signed-off-by: Li Jun <jun.li@nxp.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/usb/typec/tcpm.c |   25 ++++++++++++++++---------
 1 file changed, 16 insertions(+), 9 deletions(-)

diff --git a/drivers/usb/typec/tcpm.c b/drivers/usb/typec/tcpm.c
index 0fa3038..7dac973 100644
--- a/drivers/usb/typec/tcpm.c
+++ b/drivers/usb/typec/tcpm.c
@@ -2646,7 +2646,9 @@ static void tcpm_reset_port(struct tcpm_port *port)
 
 	tcpm_bist_handle(port, false);
 	port->tcpc->set_pd_rx(port->tcpc, false);
-	tcpm_init_vbus(port);	/* also disables charging */
+	/* Don't disable charging if boot from dead battery */
+	if (!port->vbus_never_low)
+		tcpm_init_vbus(port);
 	tcpm_init_vconn(port);
 	tcpm_set_current_limit(port, 0, 0);
 	tcpm_set_polarity(port, TYPEC_POLARITY_CC1);
@@ -4286,21 +4288,26 @@ static void tcpm_init(struct tcpm_port *port)
 {
 	enum typec_cc_status cc1, cc2;
 
-	tcpm_reset_port(port);
-
 	/*
-	 * XXX
-	 * Should possibly wait for VBUS to settle if it was enabled locally
-	 * since tcpm_reset_port() will disable VBUS.
+	 * Possibly the vbus was enabled locally which is wrong, we can
+	 * firstly disable power sink then start tcpm state transition
+	 * to fix it, this is different from dead battery case which can
+	 * detect RP on cc , in case of dead battery boot, we don't disable
+	 * vbus sink for charging.
 	 */
+	if (port->tcpc->get_cc(port->tcpc, &cc1, &cc2))
+		return;
+
 	port->vbus_present = port->tcpc->get_vbus(port->tcpc);
-	if (port->vbus_present)
+	if ((cc1 >= TYPEC_CC_RP_DEF || cc2 >= TYPEC_CC_RP_DEF) &&
+	    port->vbus_present)
 		port->vbus_never_low = true;
 
+	tcpm_reset_port(port);
+
 	tcpm_set_state(port, tcpm_default_state(port), 0);
 
-	if (port->tcpc->get_cc(port->tcpc, &cc1, &cc2) == 0)
-		_tcpm_cc_change(port, cc1, cc2);
+	_tcpm_cc_change(port, cc1, cc2);
 
 	/*
 	 * Some adapters need a clean slate at startup, and won't recover
-- 
1.7.9.5

