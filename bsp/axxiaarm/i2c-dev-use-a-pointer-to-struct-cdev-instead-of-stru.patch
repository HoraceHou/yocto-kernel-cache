From 53206dc40ce6b1fd1d5dfac030885df45be50888 Mon Sep 17 00:00:00 2001
From: Wang Quanyang <quanyang.wang@windriver.com>
Date: Wed, 25 Apr 2018 03:42:22 -0400
Subject: [PATCH] i2c-dev: use a pointer to struct cdev instead of struct cdev

When CONFIG_DEBUG_KOBJECT_RELEASE enabled, a calltrace happends as below:

[   81.663116] ODEBUG: free active (active state 0) object type: work_struct hint: kobject_delayed_cleanup+0x0/0x1b8
[   81.663143] ------------[ cut here ]------------
[   81.663150] WARNING: CPU: 15 PID: 1 at /kernel-source//lib/debugobjects.c:289 debug_print_object+0xac/0xc8
[   81.663153] Modules linked in:
[   81.663161] CPU: 15 PID: 1 Comm: swapper/0 Tainted: G        W       4.12.21-yocto-standard #28
[   81.663164] Hardware name: AXM56xx Victoria (DT)
[   81.663167] task: ffffffc3eb420080 task.stack: ffffffc3eb428000
[   81.663171] PC is at debug_print_object+0xac/0xc8
[   81.663175] LR is at debug_print_object+0xac/0xc8
[   81.663178] pc : [<ffffff80086f0fcc>] lr : [<ffffff80086f0fcc>] pstate: 800001c5
[   81.663181] sp : ffffffc3eb42b7b0
[   81.663184] x29: ffffffc3eb42b7b0 x28: 0000000000000140
[   81.663191] x27: 0000000000000001 x26: ffffffc3df9fc5e8
[   81.663198] x25: ffffffc3dfbee000 x24: ffffff800a39d070
[   81.663204] x23: ffffff8008f36fa8 x22: ffffff80093ed6d8
[   81.663210] x21: ffffffc3df9fc5e8 x20: ffffff800a2cb000
[   81.663217] x19: ffffff80093d2000 x18: ffffffffffffffff
[   81.663223] x17: 000000000000000e x16: 0000000000000007
[   81.663229] x15: ffffff80093d0b88 x14: 6f6b203a746e6968
[   81.663235] x13: 207463757274735f x12: 6b726f77203a6570
[   81.663242] x11: 7974207463656a62 x10: 6f20293020657461
[   81.663248] x9 : ffffff8009507108 x8 : 0000000000000000
[   81.663254] x7 : ffffff8008128fa0 x6 : 0000000000000000
[   81.663260] x5 : 0000000000000080 x4 : ffffff80093d1000
[   81.663267] x3 : 0000000000000000 x2 : ffffffffffffffff
[   81.663273] x1 : 0000000000000000 x0 : 0000000000000065
[   81.663279] ---[ end trace 5f5358070349ea99 ]---
[   81.663282] Call trace:
[   81.663286] Exception stack(0xffffffc3eb42b5d0 to 0xffffffc3eb42b700)
[   81.663290] b5c0:                                   ffffff80093d2000 0000008000000000
[   81.663294] b5e0: ffffffc3eb42b7b0 ffffff80086f0fcc 00000000800001c5 000000000000003d
[   81.663298] b600: ffffffc3eb42b7b0 ffffffc3eb42b7b0 ffffffc3eb42b770 00000000ffffffc8
[   81.663301] b620: ffffffc3eb42b660 ffffff80081425f0 0000000000000000 ffffffc3eb42b730
[   81.663305] b640: ffffffc3eb42b7b0 ffffffc3eb42b7b0 ffffffc3eb42b770 00000000ffffffc8
[   81.663308] b660: ffffffc3eb42b710 ffffff800823fb78 ffffff8008f4aaa0 ffffff800a2cb000
[   81.663312] b680: 0000000000000065 0000000000000000 ffffffffffffffff 0000000000000000
[   81.663315] b6a0: ffffff80093d1000 0000000000000080 0000000000000000 ffffff8008128fa0
[   81.663319] b6c0: 0000000000000000 ffffff8009507108 6f20293020657461 7974207463656a62
[   81.663322] b6e0: 6b726f77203a6570 207463757274735f 6f6b203a746e6968 ffffff80093d0b88
[   81.663326] [<ffffff80086f0fcc>] debug_print_object+0xac/0xc8
[   81.663331] [<ffffff80086f2204>] __debug_check_no_obj_freed+0x1c4/0x210
[   81.663335] [<ffffff80086f24d4>] debug_check_no_obj_freed+0x1c/0x28
[   81.663340] [<ffffff80082bd96c>] kfree+0x224/0x470
[   81.663345] [<ffffff800898ea64>] put_i2c_dev+0x64/0x70
[   81.663349] [<ffffff800898f264>] i2cdev_detach_adapter+0x64/0xc0
[   81.663353] [<ffffff800898fbcc>] i2cdev_notifier_call+0x4c/0x80
[   81.663359] [<ffffff80080f8700>] notifier_call_chain+0x78/0xd8
[   81.663363] [<ffffff80080f9228>] blocking_notifier_call_chain+0x68/0x88
[   81.663368] [<ffffff800882e098>] device_del+0x58/0x340
[   81.663371] [<ffffff800882e3d8>] device_unregister+0x58/0x78
[   81.663375] [<ffffff800898a040>] i2c_del_adapter+0x2b0/0x368
[   81.663379] [<ffffff8008a8b814>] unittest_i2c_bus_remove+0x3c/0x88
[   81.663384] [<ffffff800883611c>] platform_drv_remove+0x2c/0x58
[   81.663389] [<ffffff8008833afc>] device_release_driver_internal+0x18c/0x218
[   81.663392] [<ffffff8008833c0c>] driver_detach+0x4c/0x88
[   81.663396] [<ffffff80088326f8>] bus_remove_driver+0x88/0x100
[   81.663400] [<ffffff8008834b8c>] driver_unregister+0x34/0x58
[   81.663405] [<ffffff8008836228>] platform_driver_unregister+0x20/0x30
[   81.663410] [<ffffff80090b8070>] of_unittest_overlay+0xd4c/0x1060
[   81.663414] [<ffffff80090b97f8>] of_unittest+0x1474/0x17e8
[   81.663419] [<ffffff8008083798>] do_one_initcall+0x58/0x168
[   81.663424] [<ffffff8009050f30>] kernel_init_freeable+0x1fc/0x2d0
[   81.663429] [<ffffff8008c56560>] kernel_init+0x18/0x108
[   81.663432] [<ffffff80080834c0>] ret_from_fork+0x10/0x50

In function i2cdev_detach_adapter, put_i2c_dev(i2c_dev) is called to free
struct i2c_dev immediately after cdev_del(i2c_dev->cdev). But this is not
safe because cdev_del can't assure us that there is no reference to cdev.
If put_i2c_dev frees the memory of cdev and there are still some references
to cdev, it may cause a crash.

The kernel option CONFIG_DEBUG_KOBJECT_RELEASE delay the release of kobjects
on the last reference count to improve the visibility of this kind of kobject
release bug.

Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/i2c/i2c-dev.c |   18 ++++++++++++------
 1 files changed, 12 insertions(+), 6 deletions(-)

diff --git a/drivers/i2c/i2c-dev.c b/drivers/i2c/i2c-dev.c
index 1aca742..4917ad1 100644
--- a/drivers/i2c/i2c-dev.c
+++ b/drivers/i2c/i2c-dev.c
@@ -49,7 +49,7 @@ struct i2c_dev {
 	struct list_head list;
 	struct i2c_adapter *adap;
 	struct device *dev;
-	struct cdev cdev;
+	struct cdev *cdev;
 };
 
 #define I2C_MINORS	MINORMASK
@@ -643,9 +643,15 @@ static int i2cdev_attach_adapter(struct device *dev, void *dummy)
 	if (IS_ERR(i2c_dev))
 		return PTR_ERR(i2c_dev);
 
-	cdev_init(&i2c_dev->cdev, &i2cdev_fops);
-	i2c_dev->cdev.owner = THIS_MODULE;
-	res = cdev_add(&i2c_dev->cdev, MKDEV(I2C_MAJOR, adap->nr), 1);
+	i2c_dev->cdev = cdev_alloc();
+	if (!i2c_dev->cdev) {
+		dev_err(i2c_dev->dev, "Error allocating cdev\n");
+		res = -ENOMEM;
+		goto error_cdev;
+	}
+	i2c_dev->cdev->ops = &i2cdev_fops;
+	i2c_dev->cdev->owner = THIS_MODULE;
+	res = cdev_add(i2c_dev->cdev, MKDEV(I2C_MAJOR, adap->nr), 1);
 	if (res)
 		goto error_cdev;
 
@@ -662,7 +668,7 @@ static int i2cdev_attach_adapter(struct device *dev, void *dummy)
 		 adap->name, adap->nr);
 	return 0;
 error:
-	cdev_del(&i2c_dev->cdev);
+	cdev_del(i2c_dev->cdev);
 error_cdev:
 	put_i2c_dev(i2c_dev);
 	return res;
@@ -681,7 +687,7 @@ static int i2cdev_detach_adapter(struct device *dev, void *dummy)
 	if (!i2c_dev) /* attach_adapter must have failed */
 		return 0;
 
-	cdev_del(&i2c_dev->cdev);
+	cdev_del(i2c_dev->cdev);
 	put_i2c_dev(i2c_dev);
 	device_destroy(i2c_dev_class, MKDEV(I2C_MAJOR, adap->nr));
 
-- 
1.7.5.4

