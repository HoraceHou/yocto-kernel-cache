From 1c369fbdfd0f1fb407c6db51567197d2d7132425 Mon Sep 17 00:00:00 2001
From: John Jacques <john.jacques@intel.com>
Date: Wed, 6 Sep 2017 17:01:30 -0500
Subject: [PATCH 245/278] tools/perf: Changes for Axxia CoreSight Support

Signed-off-by: John Jacques <john.jacques@intel.com>
---
 tools/perf/Makefile.config     |  2 +-
 tools/perf/util/auxtrace.c     |  4 ++--
 tools/perf/util/cs-etm.c       | 11 +++--------
 tools/perf/util/probe-event.c  | 45 +++++++++++++++---------------------------
 tools/perf/util/probe-finder.c | 15 +++++++-------
 tools/perf/util/probe-finder.h |  3 ---
 6 files changed, 30 insertions(+), 50 deletions(-)

diff --git a/tools/perf/Makefile.config b/tools/perf/Makefile.config
index dbbbbd9..8f2d495 100644
--- a/tools/perf/Makefile.config
+++ b/tools/perf/Makefile.config
@@ -566,7 +566,7 @@ endif
 
 ifdef CSTRACE_PATH
   ifeq (${IS_64_BIT}, 1)
-    CSTRACE_LNX = linux64
+    CSTRACE_LNX = linux-arm64
   else
     CSTRACE_LNX = linux
   endif
diff --git a/tools/perf/util/auxtrace.c b/tools/perf/util/auxtrace.c
index 758085e..dbecdfd 100644
--- a/tools/perf/util/auxtrace.c
+++ b/tools/perf/util/auxtrace.c
@@ -1829,7 +1829,7 @@ static int addr_filter__resolve_kernel_syms(struct addr_filter *filt)
 		filt->addr = start;
 		if (filt->range && !filt->size && !filt->sym_to) {
 			filt->size = size;
-			no_size = !size;
+			no_size = !!size;
 		}
 	}
 
@@ -1843,7 +1843,7 @@ static int addr_filter__resolve_kernel_syms(struct addr_filter *filt)
 		if (err)
 			return err;
 		filt->size = start + size - filt->addr;
-		no_size = !size;
+		no_size = !!size;
 	}
 
 	/* The very last symbol in kallsyms does not imply a particular size */
diff --git a/tools/perf/util/cs-etm.c b/tools/perf/util/cs-etm.c
index 5fcd155..d48b9a4 100644
--- a/tools/perf/util/cs-etm.c
+++ b/tools/perf/util/cs-etm.c
@@ -446,8 +446,9 @@ static int cs_etm__setup_queue(struct cs_etm_auxtrace *etm,
 		if (etm->sampling_mode)
 			if (etm->timeless_decoding)
 				etmq->step_through_buffers = true;
-			if (etm->timeless_decoding || !etm->have_sched_switch)
-				etmq->use_buffer_pid_tid = true;
+
+		if (etm->timeless_decoding || !etm->have_sched_switch)
+			etmq->use_buffer_pid_tid = true;
 	}
 
 	if (!etmq->on_heap &&
@@ -1259,12 +1260,6 @@ static int cs_etm__process_auxtrace_event(struct perf_session *session,
 
 }
 
-static const char * const cs_etm_global_header_fmts[] = {
-  [CS_HEADER_VERSION_0]	= "   Header version		%"PRIx64"\n",
-  [CS_PMU_TYPE_CPUS]	= "   PMU type/num cpus		%"PRIx64"\n",
-  [CS_ETM_SNAPSHOT]	= "   Snapshot			%"PRIx64"\n",
-};
-
 static const char * const cs_etm_priv_fmts[] = {
   [CS_ETM_MAGIC]	= "   Magic number		%"PRIx64"\n",
   [CS_ETM_CPU]		= "   CPU			%"PRIx64"\n",
diff --git a/tools/perf/util/probe-event.c b/tools/perf/util/probe-event.c
index a2670e9..359b54d 100644
--- a/tools/perf/util/probe-event.c
+++ b/tools/perf/util/probe-event.c
@@ -702,31 +702,18 @@ static int add_exec_to_probe_trace_events(struct probe_trace_event *tevs,
 	return ret;
 }
 
-static int
-post_process_module_probe_trace_events(struct probe_trace_event *tevs,
-				       int ntevs, const char *module,
-				       struct debuginfo *dinfo)
+static int add_module_to_probe_trace_events(struct probe_trace_event *tevs,
+					    int ntevs, const char *module)
 {
-	Dwarf_Addr text_offs = 0;
 	int i, ret = 0;
 	char *mod_name = NULL;
-	struct map *map;
 
 	if (!module)
 		return 0;
 
-	map = get_target_map(module, false);
-	if (!map || debuginfo__get_text_offset(dinfo, &text_offs, true) < 0) {
-		pr_warning("Failed to get ELF symbols for %s\n", module);
-		return -EINVAL;
-	}
-
 	mod_name = find_module_name(module);
+
 	for (i = 0; i < ntevs; i++) {
-		ret = post_process_probe_trace_point(&tevs[i].point,
-						map, (unsigned long)text_offs);
-		if (ret < 0)
-			break;
 		tevs[i].point.module =
 			strdup(mod_name ? mod_name : module);
 		if (!tevs[i].point.module) {
@@ -736,8 +723,6 @@ static int add_exec_to_probe_trace_events(struct probe_trace_event *tevs,
 	}
 
 	free(mod_name);
-	map__put(map);
-
 	return ret;
 }
 
@@ -797,7 +782,7 @@ static int add_exec_to_probe_trace_events(struct probe_trace_event *tevs,
 static int post_process_probe_trace_events(struct perf_probe_event *pev,
 					   struct probe_trace_event *tevs,
 					   int ntevs, const char *module,
-					   bool uprobe, struct debuginfo *dinfo)
+					   bool uprobe)
 {
 	int ret;
 
@@ -805,8 +790,7 @@ static int post_process_probe_trace_events(struct perf_probe_event *pev,
 		ret = add_exec_to_probe_trace_events(tevs, ntevs, module);
 	else if (module)
 		/* Currently ref_reloc_sym based probe is not for drivers */
-		ret = post_process_module_probe_trace_events(tevs, ntevs,
-							     module, dinfo);
+		ret = add_module_to_probe_trace_events(tevs, ntevs, module);
 	else
 		ret = post_process_kernel_probe_trace_events(tevs, ntevs);
 
@@ -850,27 +834,30 @@ static int try_to_find_probe_trace_events(struct perf_probe_event *pev,
 		}
 	}
 
+	debuginfo__delete(dinfo);
+
 	if (ntevs > 0) {	/* Succeeded to find trace events */
 		pr_debug("Found %d probe_trace_events.\n", ntevs);
 		ret = post_process_probe_trace_events(pev, *tevs, ntevs,
-					pev->target, pev->uprobes, dinfo);
+						pev->target, pev->uprobes);
 		if (ret < 0 || ret == ntevs) {
-			pr_debug("Post processing failed or all events are skipped. (%d)\n", ret);
 			clear_probe_trace_events(*tevs, ntevs);
 			zfree(tevs);
-			ntevs = 0;
 		}
+		if (ret != ntevs)
+			return ret < 0 ? ret : ntevs;
+		ntevs = 0;
+		/* Fall through */
 	}
 
-	debuginfo__delete(dinfo);
-
 	if (ntevs == 0)	{	/* No error but failed to find probe point. */
 		pr_warning("Probe point '%s' not found.\n",
 			   synthesize_perf_probe_point(&pev->point));
 		return -ENOENT;
-	} else if (ntevs < 0) {
-		/* Error path : ntevs < 0 */
-		pr_debug("An error occurred in debuginfo analysis (%d).\n", ntevs);
+	}
+	/* Error path : ntevs < 0 */
+	pr_debug("An error occurred in debuginfo analysis (%d).\n", ntevs);
+	if (ntevs < 0) {
 		if (ntevs == -EBADF)
 			pr_warning("Warning: No dwarf info found in the vmlinux - "
 				"please rebuild kernel with CONFIG_DEBUG_INFO=y.\n");
diff --git a/tools/perf/util/probe-finder.c b/tools/perf/util/probe-finder.c
index a5731de..1346a05 100644
--- a/tools/perf/util/probe-finder.c
+++ b/tools/perf/util/probe-finder.c
@@ -1504,8 +1504,7 @@ int debuginfo__find_available_vars_at(struct debuginfo *dbg,
 }
 
 /* For the kernel module, we need a special code to get a DIE */
-int debuginfo__get_text_offset(struct debuginfo *dbg, Dwarf_Addr *offs,
-				bool adjust_offset)
+static int debuginfo__get_text_offset(struct debuginfo *dbg, Dwarf_Addr *offs)
 {
 	int n, i;
 	Elf32_Word shndx;
@@ -1534,8 +1533,6 @@ int debuginfo__get_text_offset(struct debuginfo *dbg, Dwarf_Addr *offs,
 			if (!shdr)
 				return -ENOENT;
 			*offs = shdr->sh_addr;
-			if (adjust_offset)
-				*offs -= shdr->sh_offset;
 		}
 	}
 	return 0;
@@ -1549,12 +1546,16 @@ int debuginfo__find_probe_point(struct debuginfo *dbg, unsigned long addr,
 	Dwarf_Addr _addr = 0, baseaddr = 0;
 	const char *fname = NULL, *func = NULL, *basefunc = NULL, *tmp;
 	int baseline = 0, lineno = 0, ret = 0;
+	bool reloc = false;
 
-	/* We always need to relocate the address for aranges */
-	if (debuginfo__get_text_offset(dbg, &baseaddr, false) == 0)
-		addr += baseaddr;
+retry:
 	/* Find cu die */
 	if (!dwarf_addrdie(dbg->dbg, (Dwarf_Addr)addr, &cudie)) {
+		if (!reloc && debuginfo__get_text_offset(dbg, &baseaddr) == 0) {
+			addr += baseaddr;
+			reloc = true;
+			goto retry;
+		}
 		pr_warning("Failed to find debug information for address %lx\n",
 			   addr);
 		ret = -EINVAL;
diff --git a/tools/perf/util/probe-finder.h b/tools/perf/util/probe-finder.h
index 27f0615..9106be4 100644
--- a/tools/perf/util/probe-finder.h
+++ b/tools/perf/util/probe-finder.h
@@ -46,9 +46,6 @@ int debuginfo__find_trace_events(struct debuginfo *dbg,
 int debuginfo__find_probe_point(struct debuginfo *dbg, unsigned long addr,
 				struct perf_probe_point *ppt);
 
-int debuginfo__get_text_offset(struct debuginfo *dbg, Dwarf_Addr *offs,
-			       bool adjust_offset);
-
 /* Find a line range */
 int debuginfo__find_line_range(struct debuginfo *dbg, struct line_range *lr);
 
-- 
1.8.5.2.233.g932f7e4

