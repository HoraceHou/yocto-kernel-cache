From 55c9aab9c64068fe5685e84cd5763b48a50769ed Mon Sep 17 00:00:00 2001
From: luca abeni <luca.abeni@santannapisa.it>
Date: Wed, 13 Mar 2019 15:49:48 +0100
Subject: [PATCH] sched: WARN ON at kernel/sched/deadline.c
 task_non_contending

From https://lkml.org/lkml/2019/3/13/381

It seems the author just public the patch in the discussion, but not submit
the formal patch to upstream.
Now just integrate this patch temporarily and keep eyes on the formal one
and backport.

Signed-off-by: Haiqing Bai <Haiqing.Bai@windriver.com>
---
 kernel/sched/deadline.c |    3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/kernel/sched/deadline.c b/kernel/sched/deadline.c
index b5fbdde..c6adb0a 100644
--- a/kernel/sched/deadline.c
+++ b/kernel/sched/deadline.c
@@ -251,7 +251,6 @@ static void task_non_contending(struct task_struct *p)
 	if (dl_entity_is_special(dl_se))
 		return;
 
-	WARN_ON(hrtimer_active(&dl_se->inactive_timer));
 	WARN_ON(dl_se->dl_non_contending);
 
 	zerolag_time = dl_se->deadline -
@@ -268,7 +267,7 @@ static void task_non_contending(struct task_struct *p)
 	 * If the "0-lag time" already passed, decrease the active
 	 * utilization now, instead of starting a timer
 	 */
-	if (zerolag_time < 0) {
+	if (zerolag_time < 0 || hrtimer_active(&dl_se->inactive_timer)) {
 		if (dl_task(p))
 			sub_running_bw(dl_se, dl_rq);
 		if (!dl_task(p) || p->state == TASK_DEAD) {
-- 
1.7.9.5

