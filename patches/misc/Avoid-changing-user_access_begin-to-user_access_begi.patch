From 71f12b34f83612862b625b01e4cc537d2682be35 Mon Sep 17 00:00:00 2001
From: Haiqing Bai <Haiqing.Bai@windriver.com>
Date: Tue, 31 Dec 2019 08:03:03 +0000
Subject: [PATCH 2/5] Avoid changing 'user_access_begin()' to
 'user_access_begin(const void __user *ptr, size_t len)'

For CVE-2019-10220, below upstream commit is back ported:
9f79b78ef744("Convert filldir[64]() from __put_user() to unsafe_put_user()")
which calls 'user_access_begin(const void __user *ptr, size_t len)' to
replace 'user_access_begin()'. But this means all 'user_access_begin()' should
be replaced in kernel. We just want to focous on the CVE fix, so just unwrap
the implementation of 'user_access_begin(const void __user *ptr, size_t len)'
and there are no loss of function.

Signed-off-by: Haiqing Bai <Haiqing.Bai@windriver.com>
---
 fs/readdir.c | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/fs/readdir.c b/fs/readdir.c
index 58c24417eb30..9f579562feef 100644
--- a/fs/readdir.c
+++ b/fs/readdir.c
@@ -243,8 +243,10 @@ static int filldir(struct dir_context *ctx, const char *name, int namlen,
 	 * Note! This range-checks 'previous' (which may be NULL).
 	 * The real range was checked in getdents
 	 */
-	if (!user_access_begin(dirent, sizeof(*dirent)))
+	if (unlikely(!access_ok(VERIFY_WRITE, dirent, sizeof(*dirent))))
 		goto efault;
+	__uaccess_begin();
+
 	if (dirent)
 		unsafe_put_user(offset, &dirent->d_off, efault_end);
 	dirent = buf->current_dir;
@@ -327,8 +329,10 @@ static int filldir64(struct dir_context *ctx, const char *name, int namlen,
 	 * Note! This range-checks 'previous' (which may be NULL).
 	 * The real range was checked in getdents
 	 */
-	if (!user_access_begin(dirent, sizeof(*dirent)))
+	if (unlikely(!access_ok(VERIFY_WRITE, dirent, sizeof(*dirent))))
 		goto efault;
+	__uaccess_begin();
+
 	if (dirent)
 		unsafe_put_user(offset, &dirent->d_off, efault_end);
 	dirent = buf->current_dir;
-- 
2.17.1

