From e7877ae369257bfceb65508a8d78f568dbc8b79c Mon Sep 17 00:00:00 2001
From: Dmitri Epshtein <dima@marvell.com>
Date: Wed, 14 Sep 2016 17:31:00 +0300
Subject: [PATCH 0497/1345] pp3: enable print out large range of NSS registers

commit  29575400a9af967157686f4c9403812565d1345e from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

See sysfs commands under directory pp3/debug
echo [o] [c] > read_nss_reg  - Read [c] NSS registers from offset [o]
echo [a] [c] > read_u32      - Read [c] values from virtual address [a]

Change-Id: I659be5c58eb87ef62e7a407d15a30e8fba5704df
Signed-off-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/32767
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yelena Krivosheev <yelena@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../marvell/pp3/platform/mv_pp3_debug_sysfs.c      |   76 +++++++++-----------
 1 file changed, 32 insertions(+), 44 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/platform/mv_pp3_debug_sysfs.c b/drivers/net/ethernet/marvell/pp3/platform/mv_pp3_debug_sysfs.c
index a3bd1a4..1f11f69 100644
--- a/drivers/net/ethernet/marvell/pp3/platform/mv_pp3_debug_sysfs.c
+++ b/drivers/net/ethernet/marvell/pp3/platform/mv_pp3_debug_sysfs.c
@@ -132,8 +132,7 @@ static ssize_t pp3_hex_debug_store(struct device *dev,
 {
 	const char      *name = attr->attr.name;
 	int             err;
-	unsigned int    a, b, c;
-	unsigned long   flags;
+	unsigned int    a, b, c, size, val;
 	u32             *arr;
 	int i, ret;
 
@@ -143,64 +142,53 @@ static ssize_t pp3_hex_debug_store(struct device *dev,
 	/* Read port and value */
 	err = a = b = c = 0;
 	ret = sscanf(buf, "%x %x %x", &a, &b, &c);
+	if (ret == 2) {
+		/* read*/
+		size = b;
+		val = 0;
+	} else if (ret == 3) {
+		/* write */
+		size = c;
+		val = b;
+	} else {
+		pr_info("Wrong number of arguments: %d", ret);
+		return -EINVAL;
+	}
 
-	local_irq_save(flags);
-
-	arr = kzalloc(sizeof(unsigned int) * PP3_DEBUG_ARRAY_SIZE, GFP_KERNEL);
+	arr = kcalloc(size, sizeof(unsigned int), GFP_KERNEL);
+	if (!arr)
+		return -ENOMEM;
 
 	if (!strcmp(name, "write_nss_reg")) {
-		if (c > PP3_DEBUG_ARRAY_SIZE) {
-			pr_info("can't write more than %d values", PP3_DEBUG_ARRAY_SIZE);
-			err = 1;
-			goto end;
-		}
-		for (i = 0; i < c; i++)
-			arr[i] = b;
-		mv_pp3_hw_write(a + mv_pp3_nss_regs_vaddr_get(), c, arr);
+		for (i = 0; i < size; i++)
+			arr[i] = val;
+		mv_pp3_hw_write(a + mv_pp3_nss_regs_vaddr_get(), size, arr);
 	} else if (!strcmp(name, "read_nss_reg")) {
-		if (b > PP3_DEBUG_ARRAY_SIZE) {
-			pr_info("can't read more than %d values", PP3_DEBUG_ARRAY_SIZE);
-			err = 1;
-			goto end;
-		}
-		mv_pp3_hw_read(a + mv_pp3_nss_regs_vaddr_get(), b, arr);
-		for (i = 0; i < b; i++)
-			pr_info("0x%x = 0x%08x\n", a+i*4, arr[i]);
+		mv_pp3_hw_read(a + mv_pp3_nss_regs_vaddr_get(), size, arr);
+		for (i = 0; i < size; i++)
+			pr_info("0x%x = 0x%08x\n", a + i * 4, arr[i]);
 	} else if (!strcmp(name, "write_u32_le")) {
-		if (c > PP3_DEBUG_ARRAY_SIZE) {
-			pr_info("can't write more than %d values", PP3_DEBUG_ARRAY_SIZE);
-			err = 1;
-			goto end;
-		}
-		for (i = 0; i < c; i++)
-			arr[i] = b;
-		mv_pp3_hw_write((void __iomem *)a, c, arr);
+		for (i = 0; i < size; i++)
+			arr[i] = val;
+		mv_pp3_hw_write((void __iomem *)a, size, arr);
 	} else if (!strcmp(name, "read_u32_le")) {
-		if (b > PP3_DEBUG_ARRAY_SIZE) {
-			pr_info("can't read more than %d values", PP3_DEBUG_ARRAY_SIZE);
-			err = 1;
-			goto end;
-		}
-		mv_pp3_hw_read((void __iomem *)a, b, arr);
-		for (i = 0; i < b; i++)
-			pr_info("0x%x = 0x%08x\n", a + i*4, arr[i]);
+		mv_pp3_hw_read((void __iomem *)a, size, arr);
+		for (i = 0; i < size; i++)
+			pr_info("0x%x = 0x%08x\n", a + i * 4, arr[i]);
 
 	} else if (!strcmp(name, "read_u32")) {
-		for (i = 0; i < b; i++)
-			pr_info("0x%x = 0x%08x\n", a + i*4, *(u32 *)(a + 4*i));
+		for (i = 0; i < size; i++)
+			pr_info("0x%x = 0x%08x\n", a + i * 4, *(u32 *)(a + 4 * i));
 
 	} else if (!strcmp(name, "write_u32")) {
-		for (i = 0; i < c; i++)
-			*(u32 *)(a + 4*i) = b;
+		for (i = 0; i < size; i++)
+			*(u32 *)(a + 4 * i) = val;
 	} else {
 		err = 1;
 		pr_err("%s: illegal operation <%s>\n", __func__, attr->attr.name);
 	}
-end:
 	kfree(arr);
 
-	local_irq_restore(flags);
-
 	if (err)
 		pr_err("%s: error %d\n", __func__, err);
 
-- 
1.7.9.5

