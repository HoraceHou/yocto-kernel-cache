From 0562e0c2c1c593013f5ec042c27970026514ad0e Mon Sep 17 00:00:00 2001
From: jinghua <xigu@marvell.com>
Date: Wed, 24 Aug 2016 22:20:15 +0800
Subject: [PATCH 0480/1345] pinctrl: a3700: add support for a0 chip

commit  41f40e2980588b3b3712cff8690b38446cbff66a from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- This patch adds Armada3700 A0 pinctrl settings.
- This patch only passes compilation, has not been tested
  on real Armada3700 A0 board.

Change-Id: I2d2a518f3f1e95f1664f21181f75f9fef2388231
Signed-off-by: jinghua <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/32605
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Wilson Ding <dingwei@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../pinctrl/marvell,armada-3700-pinctrl.txt        |   79 ++++-
 drivers/pinctrl/mvebu/pinctrl-armada-3700.c        |  344 ++++++++++++++++++++
 2 files changed, 422 insertions(+), 1 deletion(-)

diff --git a/Documentation/devicetree/bindings/pinctrl/marvell,armada-3700-pinctrl.txt b/Documentation/devicetree/bindings/pinctrl/marvell,armada-3700-pinctrl.txt
index 22167e9..a08cacc 100644
--- a/Documentation/devicetree/bindings/pinctrl/marvell,armada-3700-pinctrl.txt
+++ b/Documentation/devicetree/bindings/pinctrl/marvell,armada-3700-pinctrl.txt
@@ -4,7 +4,8 @@ Please refer to marvell,mvebu-pinctrl.txt in this directory for common binding
 part and usage.
 
 Required properties:
-- compatible: "marvell,armada-3700-z1-nb-pinctrl" or "marvell,armada-3700-z1-sb-pinctrl"
+- compatible: "marvell,armada-3700-nb-pinctrl", "marvell,armada-3700-sb-pinctrl"
+	      "marvell,armada-3700-z1-nb-pinctrl", "marvell,armada-3700-z1-sb-pinctrl"
 - reg: register specifier of MPP registers
 
 Available mpp pins/groups and functions:
@@ -86,3 +87,79 @@ mpp26         26       sdio(sd0-d1), gpio
 mpp27         27       sdio(sd0-d0), gpio
 mpp28         28       sdio(sd0-cmd), gpio
 mpp29         29       sdio(sd0-clk), gpio
+
+
+North bridge: "marvell,armada-3700-nb-pinctrl"
+name          pins     functions
+================================================================================
+mpp0          0        i2c1(sck), gpio
+mpp1          1        i2c1(sda), gpio
+mpp2          2        i2c2(sck), gpio
+mpp3          3        i2c2(sda), gpio
+mpp4          4        1wire, gpio
+mpp5          5        gpio
+mpp6          6        pmic0(slp-out), gpio
+mpp7          7        pmic1(slp-out), gpio
+mpp8          8        sdio, gpio
+mpp9          9        sdio, gpio, uart2(rts)
+mpp10         10       sdio, gpio, uart2(cts)
+mpp11         11       pwm0, gpio, led0-od
+mpp12         12       pwm1, gpio, led1-od
+mpp13         13       pwm2, gpio, led2-od
+mpp14         14       pwm3, gpio, led3-od
+mpp15         15       spi-quad, gpio
+mpp16         16       spi-quad, gpio
+mpp17         17       spi-cs1, gpio
+mpp18         18       spi-cs2, gpio, uart2(tx)
+mpp19         19       spi-cs3, gpio, uart2(rx)
+mpp20         20       jtag, gpio
+mpp21         21       jtag, gpio
+mpp22         22       jtag, gpio
+mpp23         23       jtag, gpio
+mpp24         24       jtag, gpio
+mpp25         25       uart1, gpio
+mpp26         26       uart1, gpio
+mpp27         27       mmc, gpio
+mpp28         28       mmc, gpio
+mpp29         29       mmc, gpio
+mpp30         30       mmc, gpio
+mpp31         31       mmc, gpio
+mpp32         32       mmc, gpio
+mpp33         33       mmc, gpio
+mpp34         34       mmc, gpio
+mpp35         35       mmc, gpio
+mpp36         36       spi
+
+South bridge: "marvell,armada-3700-sb-pinctrl"
+name          pins     functions
+================================================================================
+mpp0          0        usb32(drvvbus0), gpio
+mpp1          1        usb32(drvvbus1), gpio
+mpp2          2        gpio
+mpp3          3        pcie1(resetn), gpio
+mpp4          4        pcie1(clkreq), gpio
+mpp5          5        pcie1(wakeup), gpio
+mpp6          6        rgmii, gpio
+mpp7          7        rgmii, gpio
+mpp8          8        rgmii, gpio
+mpp9          9        rgmii, gpio
+mpp10         10       rgmii, gpio
+mpp11         11       rgmii, gpio
+mpp12         12       rgmii, gpio
+mpp13         13       rgmii, gpio
+mpp14         14       rgmii, gpio
+mpp15         15       rgmii, gpio
+mpp16         16       rgmii, gpio
+mpp17         17       rgmii, gpio
+mpp18         18       smi, gpio
+mpp19         19       smi, gpio
+mpp20         20       ptp(event-req), gpio
+mpp21         21       ptp(clk-req), gpio, mii(tx-err)
+mpp22         22       ptp(trig-gen), gpio, mii(carrier-sense)
+mpp23         23       mii(collision), gpio, mii(tx-err)
+mpp24         24       sdio(sd0-d2), gpio
+mpp25         25       sdio(sd0-d3), gpio
+mpp26         26       sdio(sd0-d1), gpio
+mpp27         27       sdio(sd0-d0), gpio
+mpp28         28       sdio(sd0-cmd), gpio
+mpp29         29       sdio(sd0-clk), gpio
\ No newline at end of file
diff --git a/drivers/pinctrl/mvebu/pinctrl-armada-3700.c b/drivers/pinctrl/mvebu/pinctrl-armada-3700.c
index f665b1b..0dcc752 100644
--- a/drivers/pinctrl/mvebu/pinctrl-armada-3700.c
+++ b/drivers/pinctrl/mvebu/pinctrl-armada-3700.c
@@ -288,6 +288,173 @@ static int armada_3700_mpp_ctrl_set(unsigned pid,
 	{BIT(15),		1,		{0}				},	/* pin 36 */
 };
 
+/* North bridge pin-ctl for A0 */
+static struct mvebu_mpp_mode armada_3700_nb_mpp_modes[] = {
+	MPP_MODE(0,
+	   MPP_FUNCTION(0x0, "i2c1", "sck"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(1,
+	   MPP_FUNCTION(0x0, "i2c1", "sda"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(2,
+	   MPP_FUNCTION(0x0, "i2c2", "sck"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(3,
+	   MPP_FUNCTION(0x0, "i2c2", "sda"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(4,
+	   MPP_FUNCTION(0x0, "1wire", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(5,
+	   MPP_FUNCTION(0x0, "gpio", NULL)),
+	MPP_MODE(6,
+	   MPP_FUNCTION(0x0, "pmic0", "slp-out"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(7,
+	   MPP_FUNCTION(0x0, "pmic1", "slp-out"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(8,
+	   MPP_FUNCTION(0x0, "sdio", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(9,
+	   MPP_FUNCTION(0x0, "sdio", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL),
+	   MPP_FUNCTION(0x2, "uart2", "rts")),
+	MPP_MODE(10,
+	   MPP_FUNCTION(0x0, "sdio", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL),
+	   MPP_FUNCTION(0x2, "uart2", "cts")),
+	MPP_MODE(11,
+	   MPP_FUNCTION(0x0, "pwm0", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL),
+	   MPP_FUNCTION(0x2, "led0-od", NULL)),
+	MPP_MODE(12,
+	   MPP_FUNCTION(0x0, "pwm1", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL),
+	   MPP_FUNCTION(0x2, "led1-od", NULL)),
+	MPP_MODE(13,
+	   MPP_FUNCTION(0x0, "pwm2", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL),
+	   MPP_FUNCTION(0x2, "led2-od", NULL)),
+	MPP_MODE(14,
+	   MPP_FUNCTION(0x0, "pwm3", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL),
+	   MPP_FUNCTION(0x2, "led3-od", NULL)),
+	MPP_MODE(15,
+	   MPP_FUNCTION(0x0, "spi-quad", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(16,
+	   MPP_FUNCTION(0x0, "spi-quad", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(17,
+	   MPP_FUNCTION(0x0, "spi-cs1", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(18,
+	   MPP_FUNCTION(0x0, "spi-cs2", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL),
+	   MPP_FUNCTION(0x2, "uart2", "tx")),
+	MPP_MODE(19,
+	   MPP_FUNCTION(0x0, "spi-cs3", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL),
+	   MPP_FUNCTION(0x2, "uart2", "rx")),
+	MPP_MODE(20,
+	   MPP_FUNCTION(0x0, "jtag", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(21,
+	   MPP_FUNCTION(0x0, "jtag", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(22,
+	   MPP_FUNCTION(0x0, "jtag", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(23,
+	   MPP_FUNCTION(0x0, "jtag", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(24,
+	   MPP_FUNCTION(0x0, "jtag", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(25,
+	   MPP_FUNCTION(0x0, "uart1", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(26,
+	   MPP_FUNCTION(0x0, "uart1", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(27,
+	   MPP_FUNCTION(0x0, "mmc", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(28,
+	   MPP_FUNCTION(0x0, "mmc", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(29,
+	   MPP_FUNCTION(0x0, "mmc", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(30,
+	   MPP_FUNCTION(0x0, "mmc", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(31,
+	   MPP_FUNCTION(0x0, "mmc", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(32,
+	   MPP_FUNCTION(0x0, "mmc", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(33,
+	   MPP_FUNCTION(0x0, "mmc", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(34,
+	   MPP_FUNCTION(0x0, "mmc", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(35,
+	   MPP_FUNCTION(0x0, "mmc", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	/*
+	 * The mpp36 is not a GPIO pin exposed to the user.
+	 * It is dedicated to spi function.
+	 */
+	MPP_MODE(36,
+	   MPP_FUNCTION(0x0, "spi", NULL)),
+};
+
+/* North bridge pins' configs setting bitmaps for A0, this array idx is north bridge pin id. */
+static struct armada_3700_mpp_setting_bitmap armada_3700_nb_mpp_bitmap[] = {
+	/* mask			config_num	configs */
+	{BIT(10),		2,		{0, BIT(10)}			},	/* pin 0 */
+	{BIT(10),		2,		{0, BIT(10)}			},	/* pin 1 */
+	{BIT(9),		2,		{0, BIT(9)}			},	/* pin 2 */
+	{BIT(9),		2,		{0, BIT(9)}			},	/* pin 3 */
+	{BIT(16),		2,		{0, BIT(16)}			},	/* pin 4 */
+	{0,			1,		{0}				},	/* pin 5 */
+	{BIT(8),		2,		{0, BIT(8)}			},	/* pin 6 */
+	{BIT(7),		2,		{0, BIT(7)}			},	/* pin 7 */
+	{BIT(1),		2,		{0, BIT(1)}			},	/* pin 8 */
+	{BIT(1) | BIT(19),	3,		{0, BIT(1), BIT(1) | BIT(19)}	},	/* pin 9 */
+	{BIT(1) | BIT(19),	3,		{0, BIT(1), BIT(1) | BIT(19)}	},	/* pin 10 */
+	{BIT(3) | BIT(20),	3,		{0, BIT(3), BIT(3) | BIT(20)}	},	/* pin 11 */
+	{BIT(4) | BIT(21),	3,		{0, BIT(4), BIT(4) | BIT(21)}	},	/* pin 12 */
+	{BIT(5) | BIT(22),	3,		{0, BIT(5), BIT(5) | BIT(22)}	},	/* pin 13 */
+	{BIT(6) | BIT(23),	3,		{0, BIT(6), BIT(6) | BIT(23)}	},	/* pin 14 */
+	{BIT(18),		2,		{0, BIT(18)}			},	/* pin 15 */
+	{BIT(18),		2,		{0, BIT(18)}			},	/* pin 16 */
+	{BIT(12),		2,		{0, BIT(12)}			},	/* pin 17 */
+	{BIT(13) | BIT(19),	3,		{0, BIT(13), BIT(19)}		},	/* pin 18 */
+	{BIT(14) | BIT(19),	3,		{0, BIT(14), BIT(19)}		},	/* pin 19 */
+	{BIT(0),		2,		{0, BIT(0)}			},	/* pin 20 */
+	{BIT(0),		2,		{0, BIT(0)}			},	/* pin 21 */
+	{BIT(0),		2,		{0, BIT(0)}			},	/* pin 22 */
+	{BIT(0),		2,		{0, BIT(0)}			},	/* pin 23 */
+	{BIT(0),		2,		{0, BIT(0)}			},	/* pin 24 */
+	{BIT(17),		2,		{0, BIT(17)}			},	/* pin 25 */
+	{BIT(17),		2,		{0, BIT(17)}			},	/* pin 26 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 27 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 28 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 29 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 30 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 31 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 32 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 33 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 34 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 35 */
+	{BIT(15),		1,		{0}				},	/* pin 36 */
+};
+
 static int armada_3700_nb_mpp_ctrl_get(unsigned pid, unsigned long *config)
 {
 	int rc;
@@ -465,6 +632,137 @@ static int armada_3700_nb_mpp_ctrl_set(unsigned pid, unsigned long config)
 	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 29 */
 };
 
+/* south bridge pin-ctl for A0 */
+static struct mvebu_mpp_mode armada_3700_sb_mpp_modes[] = {
+	MPP_MODE(0,
+	   MPP_FUNCTION(0x0, "usb32", "drvvbus0"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(1,
+	   MPP_FUNCTION(0x0, "usb2", "drvvbus1"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(2,
+	   MPP_FUNCTION(0x0, "gpio", NULL)),
+	MPP_MODE(3,
+	   MPP_FUNCTION(0x0, "pcie1", "resetn"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(4,
+	   MPP_FUNCTION(0x0, "pcie1", "clkreq"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(5,
+	   MPP_FUNCTION(0x0, "pcie1", "wakeup"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(6,
+	   MPP_FUNCTION(0x0, "rgmii", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(7,
+	   MPP_FUNCTION(0x0, "rgmii", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(8,
+	   MPP_FUNCTION(0x0, "rgmii", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(9,
+	   MPP_FUNCTION(0x0, "rgmii", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(10,
+	   MPP_FUNCTION(0x0, "rgmii", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(11,
+	   MPP_FUNCTION(0x0, "rgmii", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(12,
+	   MPP_FUNCTION(0x0, "rgmii", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(13,
+	   MPP_FUNCTION(0x0, "rgmii", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(14,
+	   MPP_FUNCTION(0x0, "rgmii", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(15,
+	   MPP_FUNCTION(0x0, "rgmii", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(16,
+	   MPP_FUNCTION(0x0, "rgmii", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(17,
+	   MPP_FUNCTION(0x0, "rgmii", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(18,
+	   MPP_FUNCTION(0x0, "smi", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(19,
+	   MPP_FUNCTION(0x0, "smi", NULL),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(20,
+	   MPP_FUNCTION(0x0, "ptp", "event-req"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(21,
+	   MPP_FUNCTION(0x0, "ptp", "clk-req"),
+	   MPP_FUNCTION(0x1, "gpio", NULL),
+	   MPP_FUNCTION(0x2, "mii", "tx-err")),
+	MPP_MODE(22,
+	   MPP_FUNCTION(0x0, "ptp", "trig-gen"),
+	   MPP_FUNCTION(0x1, "gpio", NULL),
+	   MPP_FUNCTION(0x2, "mii", "carrier-sense")),
+	MPP_MODE(23,
+	   MPP_FUNCTION(0x0, "mii", "collision"),
+	   MPP_FUNCTION(0x1, "gpio", NULL),
+	   MPP_FUNCTION(0x2, "mii", "tx-err")),
+	MPP_MODE(24,
+	   MPP_FUNCTION(0x0, "sdio", "sd0-d2"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(25,
+	   MPP_FUNCTION(0x0, "sdio", "sd0-d3"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(26,
+	   MPP_FUNCTION(0x0, "sdio", "sd0-d1"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(27,
+	   MPP_FUNCTION(0x0, "sdio", "sd0-d0"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(28,
+	   MPP_FUNCTION(0x0, "sdio", "sd0-cmd"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+	MPP_MODE(29,
+	   MPP_FUNCTION(0x0, "sdio", "sd0-clk"),
+	   MPP_FUNCTION(0x1, "gpio", NULL)),
+};
+
+/* south bridge pins' configs setting bitmaps for A0, this array idx is south bridge pin id */
+static struct armada_3700_mpp_setting_bitmap armada_3700_sb_mpp_bitmap[] = {
+	/*mask			config_num	configs*/
+	{BIT(0),		2,		{0, BIT(0)}			},	/* pin 0 */
+	{BIT(1),		2,		{0, BIT(1)}			},	/* pin 1 */
+	{0,			1,		{0}				},	/* pin 2 */
+	{BIT(5),		2,		{0, BIT(5)}			},	/* pin 3 */
+	{BIT(9),		2,		{0, BIT(9)}			},	/* pin 4 */
+	{BIT(10),		2,		{0, BIT(10)}			},	/* pin 5 */
+	{BIT(3),		2,		{0, BIT(3)}			},	/* pin 6 */
+	{BIT(3),		2,		{0, BIT(3)}			},	/* pin 7 */
+	{BIT(3),		2,		{0, BIT(3)}			},	/* pin 8 */
+	{BIT(3),		2,		{0, BIT(3)}			},	/* pin 9 */
+	{BIT(3),		2,		{0, BIT(3)}			},	/* pin 10 */
+	{BIT(3),		2,		{0, BIT(3)}			},	/* pin 11 */
+	{BIT(3),		2,		{0, BIT(3)}			},	/* pin 12 */
+	{BIT(3),		2,		{0, BIT(3)}			},	/* pin 13 */
+	{BIT(3),		2,		{0, BIT(3)}			},	/* pin 14 */
+	{BIT(3),		2,		{0, BIT(3)}			},	/* pin 15 */
+	{BIT(3),		2,		{0, BIT(3)}			},	/* pin 16 */
+	{BIT(3),		2,		{0, BIT(3)}			},	/* pin 17 */
+	{BIT(4),		2,		{0, BIT(4)}			},	/* pin 18 */
+	{BIT(4),		2,		{0, BIT(4)}			},	/* pin 19 */
+	{BIT(11),		2,		{0, BIT(11)}			},	/* pin 20 */
+	{BIT(12) | BIT(6),	3,		{0, BIT(12), BIT(6)}		},	/* pin 21 */
+	{BIT(13) | BIT(7),	3,		{0, BIT(13), BIT(7)}		},	/* pin 22 */
+	{BIT(14) | BIT(8),	3,		{0, BIT(14), BIT(8)}		},	/* pin 23 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 24 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 25 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 26 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 27 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 28 */
+	{BIT(2),		2,		{0, BIT(2)}			},	/* pin 29 */
+};
+
 static int armada_3700_sb_mpp_ctrl_get(unsigned pid, unsigned long *config)
 {
 	int rc;
@@ -563,6 +861,25 @@ static unsigned int armada_3700_mpp_consistency_check(struct armada_3700_mpp_con
 	.nbitmaps = ARRAY_SIZE(armada_3700_z1_sb_mpp_bitmap),
 	.index = I_SOUTHBRIDGE,
 };
+static struct mvebu_pinctrl_soc_info a3700_mpp_sb_soc_info = {
+	.variant = 0,
+	.controls = armada_3700_sb_mpp_controls,
+	.ncontrols = ARRAY_SIZE(armada_3700_sb_mpp_controls),
+	.modes = armada_3700_sb_mpp_modes,
+	.nmodes = ARRAY_SIZE(armada_3700_sb_mpp_modes),
+	.gpioranges = armada_3700_sb_mpp_gpio_ranges,
+	.ngpioranges = ARRAY_SIZE(armada_3700_sb_mpp_gpio_ranges),
+};
+
+static struct armada_3700_mpp_conf a3700_mpp_sb_conf = {
+	.soc_info = &a3700_mpp_sb_soc_info,
+	.modes = armada_3700_sb_mpp_modes,
+	.nmodes = ARRAY_SIZE(armada_3700_sb_mpp_modes),
+	.bitmap = armada_3700_sb_mpp_bitmap,
+	.nbitmaps = ARRAY_SIZE(armada_3700_sb_mpp_bitmap),
+	.index = I_SOUTHBRIDGE,
+};
+
 static struct mvebu_pinctrl_soc_info a3700_z1_mpp_nb_soc_info = {
 	.variant = 0,
 	.controls = armada_3700_nb_mpp_controls,
@@ -582,6 +899,25 @@ static unsigned int armada_3700_mpp_consistency_check(struct armada_3700_mpp_con
 	.index = I_NORTHBRIDGE,
 };
 
+static struct mvebu_pinctrl_soc_info a3700_mpp_nb_soc_info = {
+	.variant = 0,
+	.controls = armada_3700_nb_mpp_controls,
+	.ncontrols = ARRAY_SIZE(armada_3700_nb_mpp_controls),
+	.modes = armada_3700_nb_mpp_modes,
+	.nmodes = ARRAY_SIZE(armada_3700_nb_mpp_modes),
+	.gpioranges = armada_3700_nb_mpp_gpio_ranges,
+	.ngpioranges = ARRAY_SIZE(armada_3700_nb_mpp_gpio_ranges),
+};
+
+static struct armada_3700_mpp_conf a3700_mpp_nb_conf = {
+	.soc_info = &a3700_mpp_nb_soc_info,
+	.modes = armada_3700_nb_mpp_modes,
+	.nmodes = ARRAY_SIZE(armada_3700_nb_mpp_modes),
+	.bitmap = armada_3700_nb_mpp_bitmap,
+	.nbitmaps = ARRAY_SIZE(armada_3700_nb_mpp_bitmap),
+	.index = I_NORTHBRIDGE,
+};
+
 static const struct of_device_id armada_3700_pinctrl_of_match[] = {
 	{
 		.compatible = "marvell,armada-3700-z1-nb-pinctrl",
@@ -591,6 +927,14 @@ static unsigned int armada_3700_mpp_consistency_check(struct armada_3700_mpp_con
 		.compatible = "marvell,armada-3700-z1-sb-pinctrl",
 		.data       = (void *) &a3700_z1_mpp_sb_conf,
 	},
+	{
+		.compatible = "marvell,armada-3700-nb-pinctrl",
+		.data	    = (void *) &a3700_mpp_nb_conf
+	},
+	{
+		.compatible = "marvell,armada-3700-sb-pinctrl",
+		.data	    = (void *) &a3700_mpp_sb_conf,
+	},
 	{ },
 };
 
-- 
1.7.9.5

