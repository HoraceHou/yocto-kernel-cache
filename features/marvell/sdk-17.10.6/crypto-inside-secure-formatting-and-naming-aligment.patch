From 575137ea4d604367bc609ad84348a03aecefd8e9 Mon Sep 17 00:00:00 2001
From: Ofer Heifetz <oferh@marvell.com>
Date: Thu, 11 Jan 2018 15:11:57 +0200
Subject: [PATCH 1280/1345] crypto: inside-secure: formatting and naming
 aligment

commit  12e7ec337516a8b3986ddbf67f5ede62030315ea from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Change-Id: I69345123704999f5e87c462561226264de49d402
Signed-off-by: Ofer Heifetz <oferh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/48874
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/51661
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/inside-secure/cipher.c |    4 ++--
 drivers/crypto/inside-secure/hash.c   |   18 +++++++++---------
 2 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/drivers/crypto/inside-secure/cipher.c b/drivers/crypto/inside-secure/cipher.c
index cbcd90f..a0f51b9 100644
--- a/drivers/crypto/inside-secure/cipher.c
+++ b/drivers/crypto/inside-secure/cipher.c
@@ -361,7 +361,6 @@ static int safexcel_handle_result(struct safexcel_crypto_priv *priv, int ring,
 				  struct crypto_async_request *async,
 				  bool *should_complete, int *ret)
 {
-
 	struct ablkcipher_request *req = ablkcipher_request_cast(async);
 	struct safexcel_cipher_req *sreq = ablkcipher_request_ctx(req);
 	int err;
@@ -370,9 +369,10 @@ static int safexcel_handle_result(struct safexcel_crypto_priv *priv, int ring,
 		sreq->needs_inv = false;
 		err = safexcel_handle_inv_result(priv, ring, async,
 						 should_complete, ret);
-	} else
+	} else {
 		err = safexcel_handle_req_result(priv, ring, async,
 						 should_complete, ret);
+	}
 
 	return err;
 }
diff --git a/drivers/crypto/inside-secure/hash.c b/drivers/crypto/inside-secure/hash.c
index 8ed1efe..f8a4ab5 100644
--- a/drivers/crypto/inside-secure/hash.c
+++ b/drivers/crypto/inside-secure/hash.c
@@ -164,8 +164,8 @@ static int safexcel_handle_req_result(struct safexcel_crypto_priv *priv, int rin
 
 /* Send hash command to the engine */
 static int safexcel_ahash_send_req(struct crypto_async_request *async, int ring,
-				    struct safexcel_request *request, int *commands,
-				    int *results)
+				   struct safexcel_request *request,
+				   int *commands, int *results)
 {
 	struct ahash_request *areq = ahash_request_cast(async);
 	struct crypto_ahash *ahash = crypto_ahash_reqtfm(areq);
@@ -392,9 +392,10 @@ static int safexcel_handle_result(struct safexcel_crypto_priv *priv, int ring,
 		req->needs_inv = false;
 		err = safexcel_handle_inv_result(priv, ring, async,
 						 should_complete, ret);
-	} else
+	} else {
 		err = safexcel_handle_req_result(priv, ring, async,
 						 should_complete, ret);
+	}
 
 	return err;
 }
@@ -420,10 +421,9 @@ static int safexcel_ahash_send_inv(struct crypto_async_request *async,
 }
 
 static int safexcel_ahash_send(struct crypto_async_request *async,
-			 int ring, struct safexcel_request *request,
-			 int *commands, int *results)
+			       int ring, struct safexcel_request *request,
+			       int *commands, int *results)
 {
-
 	struct ahash_request *areq = ahash_request_cast(async);
 	struct safexcel_ahash_req *req = ahash_request_ctx(areq);
 	int ret;
@@ -443,8 +443,8 @@ static int safexcel_ahash_exit_inv(struct crypto_tfm *tfm)
 	struct safexcel_ahash_ctx *ctx = crypto_tfm_ctx(tfm);
 	struct safexcel_crypto_priv *priv = ctx->priv;
 	AHASH_REQUEST_ON_STACK(req, __crypto_ahash_cast(tfm));
-	struct safexcel_ahash_req *sreq = ahash_request_ctx(req);
-	struct safexcel_inv_result result = { 0 };
+	struct safexcel_ahash_req *rctx = ahash_request_ctx(req);
+	struct safexcel_inv_result result = {};
 	int ring = ctx->base.ring;
 
 	/* create invalidation request */
@@ -455,7 +455,7 @@ static int safexcel_ahash_exit_inv(struct crypto_tfm *tfm)
 	ahash_request_set_tfm(req, __crypto_ahash_cast(tfm));
 	ctx = crypto_tfm_ctx(req->base.tfm);
 	ctx->base.exit_inv = true;
-	sreq->needs_inv = true;
+	rctx->needs_inv = true;
 
 	spin_lock_bh(&priv->ring[ring].queue_lock);
 	ahash_enqueue_request(&priv->ring[ring].queue, req);
-- 
1.7.9.5

