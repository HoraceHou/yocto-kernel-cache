From 9028009fb607762eca6030d8b49b154f02e7fc9d Mon Sep 17 00:00:00 2001
From: Igal Liberman <igall@marvell.com>
Date: Wed, 14 Jun 2017 18:54:14 +0300
Subject: [PATCH 1028/1345] fix: clk: mvebu: cp110: always enable gate clock
 18 (eMMC & GOP)

commit  9eb37ec87932c8d53ce20cf00245c02ea6c18cdc from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Gate clock 18 feeds many core clocks in CP110, one of this clocks
is the eMMC clock. eMMC driver supports only one clock - the core
clock of eMMC) so we need to enable clock 18 in CP110 clock level
and not the eMMC driver itself.

This is a workaround, the complete solution should be nesting all
clock providers and consumers in the CP110 driver.

One possible issue with this patch might be the fact that if
we boot without IOs which use this clock, this clock will be
still enabled.

This patch prevents a stall when the Kernel is booted without
ppv2 driver (Clock 18 is shared between eMMC and GOP so currently,
eMMC "relys" on ppv2 for enabling this clock and this is a bug).

Change-Id: Iab49fd670f075c1c5d32b3edf30c6f27637ae117
Signed-off-by: Igal Liberman <igall@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/40500
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/40641
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/clk/mvebu/cp110-system-controller.c |   21 ++++++++++++++++++++-
 1 file changed, 20 insertions(+), 1 deletion(-)

diff --git a/drivers/clk/mvebu/cp110-system-controller.c b/drivers/clk/mvebu/cp110-system-controller.c
index 66db9e8..f49e667 100644
--- a/drivers/clk/mvebu/cp110-system-controller.c
+++ b/drivers/clk/mvebu/cp110-system-controller.c
@@ -391,6 +391,25 @@ static int cp110_syscon_common_probe(struct platform_device *pdev,
 		cp110_clks[CP110_MAX_CORE_CLOCKS + i] = hw;
 	}
 
+	/*
+	 * Gated clock 18 feeds many core clocks in CP110, one of this clocks
+	 * is the eMMC clock. eMMC driver supports only one clock - the core
+	 * clock of eMMC) so we need to enable clock 18 in CP110 clock level
+	 * and not the eMMC driver itself.
+	 * TODO:
+	 * This is a workaround, the complete solution should be nesting all
+	 * clock providers and consumers in the CP110 driver. One possible
+	 * drawback of this WA is the fact that if we boot without IOs which
+	 * use this clock, this clock will be still enabled.
+	 */
+	if (cp110_clks[CP110_MAX_CORE_CLOCKS + CP110_GATE_SDMMC_GOP]) {
+		ret = clk_prepare_enable(cp110_clks[CP110_MAX_CORE_CLOCKS +
+						    CP110_GATE_SDMMC_GOP]);
+		if (ret)
+			goto fail_clk_add;
+
+	}
+
 	ret = of_clk_add_hw_provider(np, cp110_of_clk_get, cp110_clk_data);
 	if (ret)
 		goto fail_clk_add;
@@ -445,7 +464,7 @@ static int cp110_clk_probe(struct platform_device *pdev)
 };
 
 static struct platform_driver cp110_syscon_legacy_driver = {
-	.probe = *cp110_syscon_legacy_clk_probe,
+	.probe = cp110_syscon_legacy_clk_probe,
 	.driver		= {
 		.name	= "marvell-cp110-system-controller0",
 		.of_match_table = cp110_syscon_legacy_of_match,
-- 
1.7.9.5

