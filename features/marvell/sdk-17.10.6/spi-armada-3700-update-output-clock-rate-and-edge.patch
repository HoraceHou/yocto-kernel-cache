From d150c6625c8470fd5bc75b484a00c8c9bf02807e Mon Sep 17 00:00:00 2001
From: zachary <zhangzg@marvell.com>
Date: Wed, 14 Jun 2017 17:31:57 +0800
Subject: [PATCH 1051/1345] spi: armada-3700: update output clock rate and
 edge

commit  a6ba07b36a1b3fc7e52ac117841e30a64c29b061 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

According to function specification, the maximum SPI output clock
supported by Armada-3700 is 100MHz.
The SPI slave devices can work with a higher clock frequency than
the maximum output clock (100MHz) supported by Armada3700. Each SPI
transfer will pass the speed_hz to the SPI driver.
If the data output delay from the flash is greater than 1/2 of the
clock cycle (this is usually the case when running at high frequency)
needs to set negative edge of the clock to capture data.
For most of SPI flashes, the number is 7ns(capturing data time).
This patches limits spi flash working less than 100MHz and sets
CLK_CAPT_EDGE to negative edge when SPI flash output flash frequency
is more than 71MHz(1/14ns).

Change-Id: I6389242e9d9a6d0e8c77ea57605bdf0736b2c69b
Signed-off-by: zachary <zhangzg@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/40480
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Victor Gu <xigu@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/spi/spi-armada-3700.c |   21 +++++++++++++++++++--
 1 file changed, 19 insertions(+), 2 deletions(-)

diff --git a/drivers/spi/spi-armada-3700.c b/drivers/spi/spi-armada-3700.c
index ffd9d46..87462a4 100644
--- a/drivers/spi/spi-armada-3700.c
+++ b/drivers/spi/spi-armada-3700.c
@@ -98,6 +98,9 @@
 
 /* A3700_SPI_IF_TIME_REG */
 #define A3700_SPI_CLK_CAPT_EDGE		BIT(7)
+#define DATA_CAP_CLOCK_CYCLE_NS		14	/*Minimum clock cycle of flash*/
+#define RVT_EDGE_FLASH_CAP_FREQ		(1000 * 1000 * 1000 / DATA_CAP_CLOCK_CYCLE_NS)
+#define A3700_SPI_MAX_OUTPUT_CLK_FREQ	(100 * 1000 * 1000)	/*100MHz*/
 
 /* Flags and macros for struct a3700_spi */
 #define A3700_INSTR_CNT			1
@@ -228,7 +231,14 @@ static void a3700_spi_clock_set(struct a3700_spi *a3700_spi,
 	u32 val;
 	u32 prescale;
 
-	prescale = DIV_ROUND_UP(clk_get_rate(a3700_spi->clk), speed_hz);
+	/*
+	* SPI controller has a maximum output clock freq to flash,
+	* flash could not be working in higher freq than this.
+	*/
+	if (speed_hz >= A3700_SPI_MAX_OUTPUT_CLK_FREQ)
+		prescale = DIV_ROUND_UP(clk_get_rate(a3700_spi->clk), A3700_SPI_MAX_OUTPUT_CLK_FREQ);
+	else
+		prescale = DIV_ROUND_UP(clk_get_rate(a3700_spi->clk), speed_hz);
 
 	val = spireg_read(a3700_spi, A3700_SPI_IF_CFG_REG);
 	val = val & ~A3700_SPI_CLK_PRESCALE_MASK;
@@ -236,7 +246,14 @@ static void a3700_spi_clock_set(struct a3700_spi *a3700_spi,
 	val = val | (prescale & A3700_SPI_CLK_PRESCALE_MASK);
 	spireg_write(a3700_spi, A3700_SPI_IF_CFG_REG, val);
 
-	if (prescale <= 2) {
+	/*
+	* If the data output delay from the flash is greater than 1/2 of the clock cycle
+	* (this is usually the case when running at high frequency) needs to set negative
+	* edge of the clock to capture data. For most of SPI flashes, the number is 7ns
+	* (catpuring data time). So it means that SOC set CLK_CAPT_EDGE to negative
+	* edge when SPI flash output flash frequency is more than 71MHz(1/14ns).
+	*/
+	if (clk_get_rate(a3700_spi->clk) / prescale > RVT_EDGE_FLASH_CAP_FREQ) {
 		val = spireg_read(a3700_spi, A3700_SPI_IF_TIME_REG);
 		val |= A3700_SPI_CLK_CAPT_EDGE;
 		spireg_write(a3700_spi, A3700_SPI_IF_TIME_REG, val);
-- 
1.7.9.5

