From 96b094b2d287cf07d48d64fe89ac7335abbcf253 Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Tue, 16 Aug 2016 14:38:52 +0300
Subject: [PATCH 0423/1345] net: mvpp2x: number of buffers removed from BM
 pool based on BPPI and BPPE counters

commit  ef02fc90b576a4d9be22547d1ce5035bd58f4fdb from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- number of buffers removed from BM pool in BM destroy based on BPPI
  and BPPE counters
- BM destroy release only amount of buffers regarding to BPPI
  and BPPE counters +1 due to the fact that HW has one buffer
  ready and is not reflected in "external + internal" counters

Change-Id: I296796764f686a3a678ca18f5e326e064df6c81a
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/31981
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yuval Caduri <cyuval@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c   |   18 ++++++++++++++++++
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h   |    2 ++
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |   12 +++++++++---
 3 files changed, 29 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
index 0e33905..c0843e5 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
@@ -6170,3 +6170,21 @@ void mv_pp2x_tx_fifo_threshold_set(struct mv_pp2x_hw *hw, u32 port_id, u32 val)
 		      MVPP22_TX_FIFO_THRESH_REG(port_id),
 		      val & MVPP22_TX_FIFO_THRESH_MASK);
 }
+
+/* Check number of buffers in BM pool */
+int mv_pp2x_check_hw_buf_num(struct mv_pp2x *priv, struct mv_pp2x_bm_pool *bm_pool)
+{
+
+	int buf_num = 0;
+
+	buf_num += mv_pp2x_read(&priv->hw, MVPP2_BM_POOL_PTRS_NUM_REG(bm_pool->id))
+					& MVPP22_BM_POOL_PTRS_NUM_MASK;
+	buf_num += mv_pp2x_read(&priv->hw, MVPP2_BM_BPPI_PTRS_NUM_REG(bm_pool->id))
+					& MVPP2_BM_BPPI_PTR_NUM_MASK;
+
+	/* HW has one buffer ready and is not reflected in "external + internal" counters */
+	if (buf_num)
+		return (buf_num + 1);
+	else
+		return 0;
+}
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
index 52eff7d..5c69b93 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
@@ -780,4 +780,6 @@ int mv_pp22_rss_tbl_entry_get(struct mv_pp2x_hw *hw,
 
 void mv_pp2x_tx_fifo_threshold_set(struct mv_pp2x_hw *hw, u32 port_id, u32 val);
 
+int mv_pp2x_check_hw_buf_num(struct mv_pp2x *priv, struct mv_pp2x_bm_pool *bm_pool);
+
 #endif /* _MVPP2_HW_H_ */
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index 9b2ebe4..0066202 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -411,10 +411,16 @@ int mv_pp2x_bm_pool_destroy(struct device *dev, struct mv_pp2x *priv,
 			    struct mv_pp2x_bm_pool *bm_pool)
 {
 	u32 val;
-	int size_bytes;
+	int size_bytes, buf_num;
+
+	buf_num = mv_pp2x_check_hw_buf_num(priv, bm_pool);
+
+	mv_pp2x_bm_bufs_free(priv, bm_pool, buf_num);
+
+	/* Check buffer counters after free */
+	buf_num = mv_pp2x_check_hw_buf_num(priv, bm_pool);
 
-	mv_pp2x_bm_bufs_free(priv, bm_pool, bm_pool->buf_num);
-	if (bm_pool->buf_num) {
+	if (buf_num) {
 		WARN(1, "cannot free all buffers in pool %d, buf_num left %d\n",
 		     bm_pool->id,
 		     bm_pool->buf_num);
-- 
1.7.9.5

