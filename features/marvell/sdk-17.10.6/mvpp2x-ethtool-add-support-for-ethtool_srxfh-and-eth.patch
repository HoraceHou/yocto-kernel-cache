From 254b0098f5f42df1f17da65e8a066e80d72548d5 Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Mon, 29 Aug 2016 18:39:22 +0300
Subject: [PATCH 0442/1345] mvpp2x: ethtool: add support for ethtool_srxfh and
 ethtool_grxfh

commit  b81d1d725246561d3615b53f9fe925d1c9c703bf from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Change-Id: I44637406e0f9c138fb566b839732ddb62d416d97
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/32342
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yuval Caduri <cyuval@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c  |  105 +++++++++++++++++++-
 1 file changed, 101 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
index 72c2b7c..c028129 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
@@ -683,22 +683,118 @@ static u32 mv_pp2x_ethtool_get_rxfh_indir_size(struct net_device *dev)
 	return ARRAY_SIZE(port->priv->rx_indir_table);
 }
 
+static int mv_pp2x_get_rss_hash_opts(struct mv_pp2x_port *port,
+				     struct ethtool_rxnfc *nfc)
+{
+	switch (nfc->flow_type) {
+	case TCP_V4_FLOW:
+	case TCP_V6_FLOW:
+		nfc->data |= RXH_IP_SRC | RXH_IP_DST;
+		nfc->data |= RXH_L4_B_0_1 | RXH_L4_B_2_3;
+		break;
+	case UDP_V4_FLOW:
+	case UDP_V6_FLOW:
+		nfc->data |= RXH_IP_SRC | RXH_IP_DST;
+		if (port->priv->pp2_cfg.rss_cfg.rss_mode == MVPP2_RSS_NF_UDP_5T)
+			nfc->data |= RXH_L4_B_0_1 | RXH_L4_B_2_3;
+		break;
+	case IPV4_FLOW:
+	case IPV6_FLOW:
+		nfc->data |= RXH_IP_SRC | RXH_IP_DST;
+		break;
+	default:
+		return -EOPNOTSUPP;
+	}
+	return 0;
+}
+
 static int mv_pp2x_ethtool_get_rxnfc(struct net_device *dev,
-				     struct ethtool_rxnfc *info,
+				     struct ethtool_rxnfc *cmd,
 				     u32 *rules)
 {
 	struct mv_pp2x_port *port = netdev_priv(dev);
+	int ret = -EOPNOTSUPP;
 
 	if (port->priv->pp2_cfg.queue_mode == MVPP2_QDIST_SINGLE_MODE)
 		return -EOPNOTSUPP;
 
-	if (info->cmd == ETHTOOL_GRXRINGS) {
-		if (port)
-			info->data = ARRAY_SIZE(port->priv->rx_indir_table);
+	if (!port)
+		return -EIO;
+
+	switch (cmd->cmd) {
+	case ETHTOOL_GRXRINGS:
+			cmd->data = ARRAY_SIZE(port->priv->rx_indir_table);
+			ret = 0;
+			break;
+	case ETHTOOL_GRXFH:
+			ret = mv_pp2x_get_rss_hash_opts(port, cmd);
+			break;
+	default:
+			break;
+	}
+
+	return ret;
+}
+
+static int mv_pp2x_set_rss_hash_opt(struct mv_pp2x_port *port,
+				struct ethtool_rxnfc *nfc)
+{
+	if (nfc->data & ~(RXH_IP_SRC | RXH_IP_DST |
+			  RXH_L4_B_0_1 | RXH_L4_B_2_3))
+		return -EINVAL;
+
+	switch (nfc->flow_type) {
+	case TCP_V4_FLOW:
+	case TCP_V6_FLOW:
+		if (!(nfc->data & RXH_IP_SRC) ||
+		    !(nfc->data & RXH_IP_DST) ||
+		    !(nfc->data & RXH_L4_B_0_1) ||
+		    !(nfc->data & RXH_L4_B_2_3))
+			return -EINVAL;
+		break;
+	case UDP_V4_FLOW:
+	case UDP_V6_FLOW:
+		if (!(nfc->data & RXH_IP_SRC) ||
+		    !(nfc->data & RXH_IP_DST))
+			return -EINVAL;
+		switch (nfc->data & (RXH_L4_B_0_1 | RXH_L4_B_2_3)) {
+		case 0:
+			mv_pp22_rss_mode_set(port, MVPP2_RSS_NF_UDP_2T);
+			break;
+		case (RXH_L4_B_0_1 | RXH_L4_B_2_3):
+			mv_pp22_rss_mode_set(port, MVPP2_RSS_NF_UDP_5T);
+			break;
+		default:
+			return -EINVAL;
+		}
+		break;
+	default:
+		return -EINVAL;
 	}
 	return 0;
 }
 
+static int mv_pp2x_ethtool_set_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd)
+{
+	struct mv_pp2x_port *port = netdev_priv(dev);
+	int ret = -EOPNOTSUPP;
+
+	/* Single mode doesn't support RSS features */
+	if (port->priv->pp2_cfg.queue_mode == MVPP2_QDIST_SINGLE_MODE)
+		return -EOPNOTSUPP;
+
+	switch (cmd->cmd) {
+	case ETHTOOL_SRXFH:
+		ret =  mv_pp2x_set_rss_hash_opt(port, cmd);
+		break;
+	default:
+		break;
+	}
+
+	return ret;
+}
+
+
 static int mv_pp2x_ethtool_get_rxfh(struct net_device *dev, u32 *indir, u8 *key,
 				    u8 *hfunc)
 {
@@ -967,6 +1063,7 @@ static void mv_pp2x_eth_tool_diag_test(struct net_device *netdev,
 	.set_pauseparam		= mv_pp2x_set_pauseparam,
 	.get_rxfh_indir_size	= mv_pp2x_ethtool_get_rxfh_indir_size,
 	.get_rxnfc		= mv_pp2x_ethtool_get_rxnfc,
+	.set_rxnfc		= mv_pp2x_ethtool_set_rxnfc,
 	.get_rxfh		= mv_pp2x_ethtool_get_rxfh,
 	.set_rxfh		= mv_pp2x_ethtool_set_rxfh,
 	.get_regs_len           = mv_pp2x_ethtool_get_regs_len,
-- 
1.7.9.5

