From c8728cfde60021e7860d867407dfeced582533ef Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Thu, 27 Apr 2017 14:57:12 +0300
Subject: [PATCH 0987/1345] net: mvpp2x: use common Linux num_online_cpus
 callback and cpumask variable

commit  6ad90f10067eb71dce4c96e32fe52126dd0668a5 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Instead of using local num_online_cpus and cpumask function,
common Linux num_online_cpus callback and cpumask variable would be used.

No functionality changes.

Change-Id: I8aa09a0919771021ceba090e3a9b1d3679b87892
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/38985
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Reviewed-by: Yuval Caduri <cyuval@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h      |    2 --
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |   31 ++++----------------
 2 files changed, 5 insertions(+), 28 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
index a083f516..c77b47e 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
@@ -512,8 +512,6 @@ struct mv_pp2x {
 	struct	mv_pp2x_hw hw;
 	struct mv_pp2x_platform_data *pp2xdata;
 
-	u16 cpu_map; /* Bitmap of the participating cpu's */
-
 	struct mv_pp2x_param_config pp2_cfg;
 
 	/* List of pointers to port structures */
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index 10bdab9..2d6248e 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -1868,20 +1868,6 @@ static enum hrtimer_restart mv_pp2x_hr_timer_cb(struct hrtimer *timer)
 	return HRTIMER_NORESTART;
 }
 
-/* The function get the number of cpu online */
-static int mv_pp2x_num_online_cpu_get(struct mv_pp2x *pp2)
-{
-	u8 num_online_cpus = 0;
-	u16 x = pp2->cpu_map;
-
-	while (x) {
-		x &= (x - 1);
-		num_online_cpus++;
-	}
-
-	return num_online_cpus;
-}
-
 /* The function calculate the width, such as cpu width, cos queue width */
 static void mv_pp2x_width_calc(struct mv_pp2x_port *port, u32 *cpu_width,
 			       u32 *cos_width, u32 *port_rxq_width)
@@ -1892,7 +1878,7 @@ static void mv_pp2x_width_calc(struct mv_pp2x_port *port, u32 *cpu_width,
 		/* Calculate CPU width */
 		if (cpu_width)
 			*cpu_width = ilog2(roundup_pow_of_two(
-				mv_pp2x_num_online_cpu_get(pp2)));
+				num_online_cpus()));
 		/* Calculate cos queue width */
 		if (cos_width)
 			*cos_width = ilog2(roundup_pow_of_two(
@@ -2066,7 +2052,7 @@ static int mv_pp22_cpu_id_from_indir_tbl_get(struct mv_pp2x *pp2,
 		return -EINVAL;
 
 	for (i = 0; i < 16; i++) {
-		if (pp2->cpu_map & (1 << i)) {
+		if ((*cpumask_bits(cpu_online_mask)) & (1 << i)) {
 			if (seq == cpu_seq) {
 				*cpu_id = i;
 				return 0;
@@ -2093,9 +2079,6 @@ int mv_pp22_rss_rxfh_indir_set(struct mv_pp2x_port *port)
 
 	memset(&rss_entry, 0, sizeof(struct mv_pp22_rss_entry));
 
-	if (!port->priv->cpu_map)
-		return -1;
-
 	/* Calculate cpu and cos width */
 	mv_pp2x_width_calc(port, &cpu_width, &cos_width, NULL);
 
@@ -2248,7 +2231,7 @@ int mv_pp22_rss_default_cpu_set(struct mv_pp2x_port *port, int default_cpu)
 	if (port->priv->pp2_cfg.queue_mode == MVPP2_QDIST_SINGLE_MODE)
 		return -1;
 
-	if (!(port->priv->cpu_map & (1 << default_cpu))) {
+	if (!(*cpumask_bits(cpu_online_mask) & (1 << default_cpu))) {
 		pr_err("Invalid default cpu id %d\n", default_cpu);
 		return -EINVAL;
 	}
@@ -4189,7 +4172,7 @@ static void mv_pp21_port_queue_vectors_init(struct mv_pp2x_port *port)
 	q_vec[0].pending_cause_rx = 0;
 	q_vec[0].qv_type = MVPP2_SHARED;
 	q_vec[0].sw_thread_id = 0;
-	q_vec[0].sw_thread_mask = port->priv->cpu_map;
+	q_vec[0].sw_thread_mask = *cpumask_bits(cpu_online_mask);
 	q_vec[0].irq = port->of_irqs[0];
 	netif_napi_add(port->dev, &q_vec[0].napi, mv_pp21_poll,
 		       NAPI_POLL_WEIGHT);
@@ -5158,7 +5141,7 @@ static int mv_pp2x_init_config(struct mv_pp2x_param_config *pp2_cfg,
 static void mv_pp22_init_rxfhindir(struct mv_pp2x *pp2)
 {
 	int i;
-	int online_cpus = mv_pp2x_num_online_cpu_get(pp2);
+	int online_cpus = num_online_cpus();
 
 	if (!online_cpus)
 		return;
@@ -5533,7 +5516,6 @@ static int mv_pp2x_probe(struct platform_device *pdev)
 	struct mv_pp2x_hw *hw;
 	int port_count = 0, cpu;
 	int i, err;
-	u16 cpu_map;
 	u32 cell_index = 0;
 	struct device_node *dn = pdev->dev.of_node;
 	struct device_node *port_node;
@@ -5564,10 +5546,8 @@ static int mv_pp2x_probe(struct platform_device *pdev)
 	}
 
 	/* Save cpu_present_mask + populate the per_cpu address space */
-	cpu_map = 0;
 	i = 0;
 	for_each_present_cpu(cpu) {
-		cpu_map |= (1 << cpu);
 		hw->cpu_base[cpu] = hw->base;
 		if (priv->pp2xdata->multi_addr_space) {
 			hw->cpu_base[cpu] +=
@@ -5575,7 +5555,6 @@ static int mv_pp2x_probe(struct platform_device *pdev)
 			i++;
 		}
 	}
-	priv->cpu_map = cpu_map;
 
 	/*Init PP2 Configuration */
 	err = mv_pp2x_init_config(&priv->pp2_cfg, cell_index);
-- 
1.7.9.5

