From 9b2efbf04a2168a101ec7a6fbe24a1616308f69d Mon Sep 17 00:00:00 2001
From: Evan Wang <xswang@marvell.com>
Date: Tue, 8 Aug 2017 16:07:30 +0800
Subject: [PATCH 1157/1345] pci: a80x0: a70x0: add pcie reset via gpio
 supported

commit  de0202d35b0489473186c4dfe087b942f531ff12 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

For some boards need PCIe reset, this patch added support
for PCIe reset using GPIO

Change-Id: If7498c04fb46fd7438165244c0f816042c9677f1
Signed-off-by: Evan Wang <xswang@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/42743
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Igal Liberman <igall@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../devicetree/bindings/pci/armada8k-pcie.txt      |    3 ++
 drivers/pci/host/pcie-armada8k.c                   |   32 +++++++++++++++++++-
 2 files changed, 34 insertions(+), 1 deletion(-)

diff --git a/Documentation/devicetree/bindings/pci/armada8k-pcie.txt b/Documentation/devicetree/bindings/pci/armada8k-pcie.txt
index 6db4725..2310335 100644
--- a/Documentation/devicetree/bindings/pci/armada8k-pcie.txt
+++ b/Documentation/devicetree/bindings/pci/armada8k-pcie.txt
@@ -20,6 +20,7 @@ PHY support is supported for armada-8k, and the following parameters are used:
                       lane index from perspective of PCIe controller although the physical phy is comphy
                       serdes lane5 or other comphy lane. In this way, driver implementation will support
                       PCIe case with width more than 1, such as X2, X4.
+- reset-gpios	    : a pointer to the PCI device reset via gpio. This entry is mandatory of A8040 MCBin.
 
 
 Example of PCIE RC X1:
@@ -65,5 +66,7 @@ pcie@0x06000000 {
 		&comphy0 3 COMPHY_PCIE0
 		>;
 	phy-names = "pcie-phy0", "pcie-phy1", "pcie-phy2", "pcie-phy3";
+	/* GPIO for PCIe reset - optionally */
+	reset-gpios = <&cpm_gpio1 20 GPIO_ACTIVE_HIGH>;
 	status = "okay";
 };
diff --git a/drivers/pci/host/pcie-armada8k.c b/drivers/pci/host/pcie-armada8k.c
index 3d5c6d0..d3e9c53 100644
--- a/drivers/pci/host/pcie-armada8k.c
+++ b/drivers/pci/host/pcie-armada8k.c
@@ -23,6 +23,7 @@
 #include <linux/of_pci.h>
 #include <linux/of_irq.h>
 #include <dt-bindings/phy/phy-comphy-mvebu.h>
+#include <linux/of_gpio.h>
 
 #include "pcie-designware.h"
 
@@ -32,6 +33,8 @@ struct armada8k_pcie {
 	int			phy_count;
 	struct clk		*clk;
 	struct pcie_port	pp;
+	struct gpio_desc	*reset_gpio;
+	enum of_gpio_flags	flags;
 };
 
 #define PCIE_GLOBAL_CONTROL             0x0
@@ -229,6 +232,24 @@ static int armada8k_add_pcie_port(struct pcie_port *pp,
 	return 0;
 }
 
+/* armada8k_pcie_reset
+ * The function implements the PCIe reset via GPIO.
+ * First, pull down the GPIO used for PCIe reset, and wait 200ms;
+ * Second, set the GPIO output value with setting from DTS, and wait
+ * 200ms for taking effect.
+ * Return: void, always success.
+ */
+static void armada8k_pcie_reset(struct armada8k_pcie *pcie)
+{
+	/* Set the reset gpio to low first */
+	gpiod_direction_output(pcie->reset_gpio, 0);
+	/* After 200ms to reset pcie */
+	mdelay(200);
+	gpiod_direction_output(pcie->reset_gpio,
+			       (pcie->flags & OF_GPIO_ACTIVE_LOW) ? 0 : 1);
+	mdelay(200);
+}
+
 static int armada8k_pcie_probe(struct platform_device *pdev)
 {
 	struct armada8k_pcie *armada8k_pcie;
@@ -236,7 +257,7 @@ static int armada8k_pcie_probe(struct platform_device *pdev)
 	struct phy **phys = NULL;
 	struct device *dev = &pdev->dev;
 	struct resource *base;
-	int i, phy_count = 0;
+	int i, reset_gpio, phy_count = 0;
 	u32 command;
 	char phy_name[16];
 	int ret = 0;
@@ -295,6 +316,15 @@ static int armada8k_pcie_probe(struct platform_device *pdev)
 		}
 	}
 
+	/* Config reset gpio for pcie if the reset connected to gpio */
+	reset_gpio = of_get_named_gpio_flags(pdev->dev.of_node,
+					     "reset-gpios", 0,
+					     &armada8k_pcie->flags);
+	if (gpio_is_valid(reset_gpio)) {
+		armada8k_pcie->reset_gpio = gpio_to_desc(reset_gpio);
+		armada8k_pcie_reset(armada8k_pcie);
+	}
+
 	pp = &armada8k_pcie->pp;
 	pp->dev = dev;
 	armada8k_pcie->phys = phys;
-- 
1.7.9.5

