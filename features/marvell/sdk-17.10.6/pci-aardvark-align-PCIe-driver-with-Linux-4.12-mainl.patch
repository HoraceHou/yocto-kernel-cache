From 3657e7f001e010121cdcac2027e829e5c6e7daa5 Mon Sep 17 00:00:00 2001
From: Evan Wang <xswang@marvell.com>
Date: Wed, 16 Aug 2017 15:25:10 +0800
Subject: [PATCH 1147/1345] pci: aardvark: align PCIe driver with Linux-4.12
 mainline

commit  e8bb80b229618f6b2c13b6637362c8892918e4cc from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Change-Id: I5cf94b881749c0d1194c8605c1e870e800329ac8
Signed-off-by: Evan Wang <xswang@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/43080
Reviewed-by: Victor Gu <xigu@marvell.com>
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/pci/host/pci-aardvark.c |   27 +++++++++++++++++++--------
 1 file changed, 19 insertions(+), 8 deletions(-)

diff --git a/drivers/pci/host/pci-aardvark.c b/drivers/pci/host/pci-aardvark.c
index 306ba98..223e811 100644
--- a/drivers/pci/host/pci-aardvark.c
+++ b/drivers/pci/host/pci-aardvark.c
@@ -141,14 +141,24 @@
 #define CENTRAL_INT_BASE_ADDR			0x1b000
 #define HOST_CTRL_INT_STATUS_REG		(CENTRAL_INT_BASE_ADDR + 0x0)
 #define HOST_CTRL_INT_MASK_REG			(CENTRAL_INT_BASE_ADDR + 0x4)
+#define     PCIE_IRQ_CMDQ_INT			BIT(0)
 #define     PCIE_IRQ_MSI_STATUS_INT		BIT(1)
+#define     PCIE_IRQ_CMD_SENT_DONE		BIT(3)
 #define     PCIE_IRQ_DMA_INT			BIT(4)
+#define     PCIE_IRQ_IB_DXFERDONE		BIT(5)
 #define     PCIE_IRQ_OB_DXFERDONE		BIT(6)
 #define     PCIE_IRQ_OB_RXFERDONE		BIT(7)
+#define     PCIE_IRQ_COMPQ_INT			BIT(12)
+#define     PCIE_IRQ_DIR_RD_DDR_DET		BIT(13)
+#define     PCIE_IRQ_DIR_WR_DDR_DET		BIT(14)
 #define     PCIE_IRQ_CORE_INT			BIT(16)
 #define     PCIE_IRQ_CORE_INT_PIO		BIT(17)
 #define     PCIE_IRQ_DPMU_INT			BIT(18)
 #define     PCIE_IRQ_PCIE_MIS_INT		BIT(19)
+#define     PCIE_IRQ_MSI_INT1_DET		BIT(20)
+#define     PCIE_IRQ_MSI_INT2_DET		BIT(21)
+#define     PCIE_IRQ_RC_DBELL_DET		BIT(22)
+#define     PCIE_IRQ_EP_STATUS			BIT(23)
 #define     PCIE_IRQ_ALL_MASK			0xfff0fb
 #define     PCIE_IRQ_ENABLE_INTS_MASK		PCIE_IRQ_CORE_INT
 
@@ -266,9 +276,11 @@ static void advk_pcie_setup_hw(struct advk_pcie *pcie)
 
 	/* Set PCIe Device Control and Status 1 PF0 register */
 	reg = PCIE_CORE_DEV_CTRL_STATS_RELAX_ORDER_DISABLE |
-		(PCIE_CORE_DEV_CTRL_STATS_MAX_PAYLOAD_SZ << PCIE_CORE_DEV_CTRL_STATS_MAX_PAYLOAD_SZ_SHIFT) |
+		(PCIE_CORE_DEV_CTRL_STATS_MAX_PAYLOAD_SZ <<
+		 PCIE_CORE_DEV_CTRL_STATS_MAX_PAYLOAD_SZ_SHIFT) |
 		PCIE_CORE_DEV_CTRL_STATS_SNOOP_DISABLE |
-		(PCIE_CORE_DEV_CTRL_STATS_MAX_RD_REQ_SZ << PCIE_CORE_DEV_CTRL_STATS_MAX_RD_REQ_SIZE_SHIFT);
+		(PCIE_CORE_DEV_CTRL_STATS_MAX_RD_REQ_SZ <<
+		 PCIE_CORE_DEV_CTRL_STATS_MAX_RD_REQ_SIZE_SHIFT);
 	advk_writel(pcie, reg, PCIE_CORE_DEV_CTRL_STATS_REG);
 
 	/* Program PCIe Control 2 to disable strict ordering */
@@ -872,10 +884,9 @@ static int advk_pcie_bus_configure_mps(struct pci_dev *dev, void *data)
 	return 0;
 }
 
-static void advk_pcie_configure_mps(struct advk_pcie *pcie)
+static void advk_pcie_configure_mps(struct pci_bus *bus, struct advk_pcie *pcie)
 {
 	u8 smpss = PCIE_CORE_DEV_CTRL_STATS_MAX_PAYLOAD_SZ;
-	struct pci_bus *bus = pcie->bus;
 	u32 reg;
 
 	/* Find the minimal supported MAX payload size */
@@ -963,7 +974,7 @@ static int advk_pcie_probe(struct platform_device *pdev)
 
 	pcie->clk = devm_clk_get(&pdev->dev, NULL);
 	if (IS_ERR(pcie->clk)) {
-		dev_err(&pdev->dev, "Failed to obtain clock from DT\n");
+		dev_err(dev, "Failed to obtain clock from DT\n");
 		return PTR_ERR(pcie->clk);
 	}
 
@@ -983,7 +994,7 @@ static int advk_pcie_probe(struct platform_device *pdev)
 
 	ret = clk_prepare_enable(pcie->clk);
 	if (ret) {
-		dev_err(&pdev->dev, "Failed to enable clock\n");
+		dev_err(dev, "Failed to enable clock\n");
 		return ret;
 	}
 after_pcie_reset:
@@ -1024,7 +1035,7 @@ static int advk_pcie_probe(struct platform_device *pdev)
 		pcie_bus_configure_settings(child);
 
 	/* Configure the MAX pay load size */
-	advk_pcie_configure_mps(pcie);
+	advk_pcie_configure_mps(bus, pcie);
 
 	pci_bus_add_devices(bus);
 	return 0;
@@ -1081,7 +1092,7 @@ static int advk_pcie_resume_noirq(struct device *dev)
 	advk_pcie_setup_hw(pcie);
 
 	/* Reconfigure the MAX pay load size */
-	advk_pcie_configure_mps(pcie);
+	advk_pcie_configure_mps(pcie->bus, pcie);
 
 	return 0;
 }
-- 
1.7.9.5

