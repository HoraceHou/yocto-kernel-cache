From 41d1657ac94077f9ca3d1f15f9f1b0ae618b6d5c Mon Sep 17 00:00:00 2001
From: Igal Liberman <igall@marvell.com>
Date: Sun, 19 Mar 2017 13:44:18 +0200
Subject: [PATCH 0895/1345] crypto: inside-secure: register supported
 algorithms

commit  1760efd34b8786bae50c3a5b28754ff3a369842b from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

This patch adds the registration of all supported algorithms by
current EIP197 driver:
	cipher: AES (CBC and ESB)
	hash: SHA1, SHA224, SSH256, HMAC-SHA1

Note that we register the algorithms only once, for the first engine.
Practically, currently, the Kernel uses only the first engine
and performs basic initialization of the second engine.
Working with 2 engines in the Kernel is planned as future work.

Change-Id: I201e78b77fa5db59194b5e23dbc826c6db630623
Signed-off-by: Igal Liberman <igall@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/37582
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/inside-secure/safexcel.c |   76 +++++++++++++++++++++++++++++++
 1 file changed, 76 insertions(+)

diff --git a/drivers/crypto/inside-secure/safexcel.c b/drivers/crypto/inside-secure/safexcel.c
index c34f48a..cae8570 100644
--- a/drivers/crypto/inside-secure/safexcel.c
+++ b/drivers/crypto/inside-secure/safexcel.c
@@ -21,6 +21,9 @@
 
 #include "safexcel.h"
 
+/* eip_in_use holds the active engine id */
+static int eip_in_use = -1;
+
 static void eip197_prng_init(struct safexcel_crypto_priv *priv)
 {
 	/* disable PRNG and set to manual mode */
@@ -998,6 +1001,59 @@ static int safexcel_request_ring_irq(struct platform_device *pdev, const char *n
 	return irq;
 }
 
+/* List of supported algorithms */
+static struct safexcel_alg_template *safexcel_algs[] = {
+	&safexcel_alg_ecb_aes,
+	&safexcel_alg_cbc_aes,
+	&safexcel_alg_sha1,
+	&safexcel_alg_sha224,
+	&safexcel_alg_sha256,
+	&safexcel_alg_hmac_sha1,
+};
+
+/* Register the supported hash and cipher algorithms */
+static int safexcel_register_algorithms(struct safexcel_crypto_priv *priv)
+{
+	int i, j, ret = 0;
+
+	for (i = 0; i < ARRAY_SIZE(safexcel_algs); i++) {
+		safexcel_algs[i]->priv = priv;
+
+		if (safexcel_algs[i]->type == SAFEXCEL_ALG_TYPE_CIPHER)
+			ret = crypto_register_alg(&safexcel_algs[i]->alg.crypto);
+		else
+			ret = crypto_register_ahash(&safexcel_algs[i]->alg.ahash);
+
+		if (ret)
+			goto fail;
+	}
+
+	return 0;
+
+fail:
+	for (j = i; j < 0; j--) {
+		if (safexcel_algs[j]->type == SAFEXCEL_ALG_TYPE_CIPHER)
+			crypto_unregister_alg(&safexcel_algs[j]->alg.crypto);
+		else
+			crypto_unregister_ahash(&safexcel_algs[j]->alg.ahash);
+	}
+
+	return ret;
+}
+
+/* Unregister the hash and cipher algorithms */
+static void safexcel_unregister_algorithms(struct safexcel_crypto_priv *priv)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(safexcel_algs); i++) {
+		if (safexcel_algs[i]->type == SAFEXCEL_ALG_TYPE_CIPHER)
+			crypto_unregister_alg(&safexcel_algs[i]->alg.crypto);
+		else
+			crypto_unregister_ahash(&safexcel_algs[i]->alg.ahash);
+	}
+}
+
 static void safexcel_configure(struct safexcel_crypto_priv *priv)
 {
 	u32 val, mask;
@@ -1133,6 +1189,23 @@ static int safexcel_probe(struct platform_device *pdev)
 		goto err_pool;
 	}
 
+	/*
+	 * Kernel crypto API doesn't allow to register 2 engines.
+	 * Allowing working with 2 engines requires additional modification
+	 * which are planned as future work (Modify the Kernel crypto API or
+	 * implement load balance in EIP driver to handle 2 engines).
+	 *
+	 * Currently we want to register the first probed engine.
+	 */
+	if (eip_in_use == -1) {
+		eip_in_use = priv->id;
+		ret = safexcel_register_algorithms(priv);
+		if (ret) {
+			dev_err(dev, "Failed to register algorithms (%d)\n", ret);
+			goto err_pool;
+		}
+	}
+
 	return 0;
 
 err_pool:
@@ -1148,6 +1221,9 @@ static int safexcel_remove(struct platform_device *pdev)
 	struct safexcel_crypto_priv *priv = platform_get_drvdata(pdev);
 	int i;
 
+	if (priv->id == eip_in_use)
+		safexcel_unregister_algorithms(priv);
+
 	clk_disable_unprepare(priv->clk);
 
 	for (i = 0; i < priv->config.rings; i++) {
-- 
1.7.9.5

