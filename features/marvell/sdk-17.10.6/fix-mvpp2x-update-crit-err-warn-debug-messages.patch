From 5d0b72099e719c70bd24be7945348ce1a236db4a Mon Sep 17 00:00:00 2001
From: Alan Winkowski <walan@marvell.com>
Date: Wed, 20 Jul 2016 11:24:59 +0300
Subject: [PATCH 0363/1345] fix: mvpp2x: update crit/err/warn/debug messages

commit  dd7b33eb412a21c954a42b79728658c854e18dd9 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Change-Id: I7f6c57c9343806a6ae64cae64381f0f16ed12157
Signed-off-by: Alan Winkowski <walan@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/31261
Reviewed-by: Yuval Caduri <cyuval@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c   |   13 +--------
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h   |    4 ---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |   28 ++++++++++----------
 3 files changed, 15 insertions(+), 30 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
index b44989a..cd25363 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
@@ -864,9 +864,6 @@ static int mv_pp2x_prs_tcam_first_free(struct mv_pp2x_hw *hw,
 {
 	int tid;
 
-	/*pr_crit("mv_pp2x_prs_tcam_first_free start=%d, end=%d, caller=%pS\n",
-	 * start, end, __builtin_return_address(0));
-	 */
 	if (start > end)
 		swap(start, end);
 
@@ -877,7 +874,7 @@ static int mv_pp2x_prs_tcam_first_free(struct mv_pp2x_hw *hw,
 		if (!hw->prs_shadow[tid].valid)
 			return tid;
 	}
-	pr_crit("Out of TCAM Entries !!: %s(%d)\n", __FILENAME__, __LINE__);
+	pr_err("Out of TCAM Entries !!: %s(%d)\n", __FILENAME__, __LINE__);
 	return -EINVAL;
 }
 
@@ -1653,10 +1650,6 @@ static void mv_pp2x_prs_def_flow_init(struct mv_pp2x_hw *hw)
 
 		/* Update shadow table and hw entry */
 		mv_pp2x_prs_shadow_set(hw, pe.index, MVPP2_PRS_LU_FLOWS);
-
-		/*pr_crit("mv_pp2x_prs_def_flow_init: port(%d), index(%d)\n",
-		 * port, pe.index);
-		 */
 		mv_pp2x_prs_hw_write(hw, &pe);
 	}
 }
@@ -2688,10 +2681,6 @@ int mv_pp2x_prs_def_flow(struct mv_pp2x_port *port)
 
 		/* Update shadow table */
 		mv_pp2x_prs_shadow_set(hw, pe->index, MVPP2_PRS_LU_FLOWS);
-
-		/*pr_crit("mv_pp2x_prs_def_flow: index(%d) port->id\n",
-		 * pe->index, port->id);
-		 */
 	}
 
 	mv_pp2x_prs_tcam_port_map_set(pe, (1 << port->id));
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
index e13553b..5805b15 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
@@ -502,10 +502,6 @@ static inline void mv_pp22_txdesc_phys_addr_set(dma_addr_t phys_addr,
 #else
 	*((dma_addr_t *)buf_phys_addr_p) = phys_addr;
 	*((u8 *)buf_phys_addr_p + sizeof(dma_addr_t)) = 0; /*5th byte*/
-
-	/*pr_crit("phys_addr=%x, buf_phys_addr_hw_cmd2=%d\n",
-	* phys_addr, tx_desc->u.pp22.buf_phys_addr_hw_cmd2);
-	*/
 #endif
 }
 
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index cba3247..a84f969 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -425,8 +425,8 @@ int mv_pp2x_bm_pool_ext_add(struct device *dev, struct mv_pp2x *priv,
 	struct mv_pp2x_hw *hw = &priv->hw;
 
 	if ((priv->num_pools + 1) > MVPP2_BM_POOLS_MAX_ALLOC_NUM) {
-		pr_err("Unable to add pool. Max BM pool alloc reached %d\n",
-		       priv->num_pools + 1);
+		dev_err(dev, "Unable to add pool. Max BM pool alloc reached %d\n",
+			priv->num_pools + 1);
 		return -ENOMEM;
 	}
 
@@ -435,8 +435,8 @@ int mv_pp2x_bm_pool_ext_add(struct device *dev, struct mv_pp2x *priv,
 		MVPP2_BM_STATE_MASK;
 
 	if (enabled) {
-		pr_info("%s pool %d already enabled. Ignoring request\n",
-			__func__, pool);
+		dev_info(dev, "%s pool %d already enabled. Ignoring request\n",
+			 __func__, pool);
 		return 0;
 	}
 
@@ -1478,14 +1478,14 @@ static void mv_pp22_dev_link_event(struct net_device *dev)
 
 		netif_carrier_on(dev);
 		netif_tx_wake_all_queues(dev);
-		pr_info("%s: link up\n", dev->name);
+		netdev_info(dev, "%s: link up\n", dev->name);
 		port->mac_data.flags |= MV_EMAC_F_LINK_UP;
 	} else {
 		if (!netif_carrier_ok(dev))
 			return;
 		netif_carrier_off(dev);
 		netif_tx_stop_all_queues(dev);
-		pr_info("%s: link down\n", dev->name);
+		netdev_info(dev, "%s: link down\n", dev->name);
 		port->mac_data.flags &= ~MV_EMAC_F_LINK_UP;
 	}
 }
@@ -2193,7 +2193,7 @@ static int mv_pp2x_rx(struct mv_pp2x_port *port, struct napi_struct *napi,
 		 * comprised by the RX descriptor.
 		 */
 		if (rx_status & MVPP2_RXD_ERR_SUMMARY) {
-			pr_err("MVPP2_RXD_ERR_SUMMARY\n");
+			netdev_warn(port->dev, "MVPP2_RXD_ERR_SUMMARY\n");
 err_drop_frame:
 			dev->stats.rx_errors++;
 			mv_pp2x_rx_error(port, rx_desc);
@@ -2205,7 +2205,7 @@ static int mv_pp2x_rx(struct mv_pp2x_port *port, struct napi_struct *napi,
 		skb = build_skb(data, bm_pool->frag_size > PAGE_SIZE ? 0 :
 				bm_pool->frag_size);
 		if (!skb) {
-			pr_err("skb build failed\n");
+			netdev_warn(port->dev, "skb build failed\n");
 			goto err_drop_frame;
 		}
 
@@ -3545,7 +3545,7 @@ static int mv_pp2_init_emac_data(struct mv_pp2x_port *port,
 			break;
 
 		default:
-			pr_err("%s: incorrect phy-mode\n", __func__);
+			netdev_err(port->dev, "%s: incorrect phy-mode\n", __func__);
 			return -1;
 		}
 	}
@@ -3559,8 +3559,8 @@ static int mv_pp2_init_emac_data(struct mv_pp2x_port *port,
 		port->mac_data.phy_node = phy_node;
 		if (of_property_read_u32(phy_node, "reg",
 		    &port->mac_data.phy_addr))
-			pr_err("%s: NO PHY address on emac %d\n", __func__,
-			       port->mac_data.gop_index);
+			netdev_err(port->dev, "%s: NO PHY address on emac %d\n",
+				   __func__, port->mac_data.gop_index);
 
 		pr_debug("gop_mac(%d), phy_reg(%d)\n", id,
 			     port->mac_data.phy_addr);
@@ -3811,7 +3811,7 @@ static int mv_pp2x_port_probe(struct platform_device *pdev,
 	if (mv_pp2_num_cpu_irqs(port) < num_active_cpus() &&
 	    port->priv->pp2xdata->interrupt_tx_done == true) {
 		port->priv->pp2xdata->interrupt_tx_done = false;
-		pr_info("mvpp2x: interrupt_tx_done override to false\n");
+		dev_info(&pdev->dev, "mvpp2x: interrupt_tx_done override to false\n");
 	}
 
 	err = mv_pp2x_port_init(port);
@@ -4423,7 +4423,7 @@ static int mv_pp2x_probe(struct platform_device *pdev)
 
 	err = mv_pp2x_platform_data_get(pdev, priv, &cell_index, &port_count);
 	if (err) {
-		pr_crit("mvpp2: platform_data get failed\n");
+		dev_err(&pdev->dev, "mvpp2: platform_data get failed\n");
 		goto err_clk;
 	}
 	priv->pp2_version = priv->pp2xdata->pp2x_ver;
@@ -4431,7 +4431,7 @@ static int mv_pp2x_probe(struct platform_device *pdev)
 	/* DMA Configruation */
 	err = dma_set_mask_and_coherent(&pdev->dev, DMA_BIT_MASK(32));
 	if (err) {
-		pr_crit("mvpp2: cannot set dma_mask\n");
+		dev_err(&pdev->dev, "mvpp2: cannot set dma_mask\n");
 		goto err_clk;
 	}
 
-- 
1.7.9.5

