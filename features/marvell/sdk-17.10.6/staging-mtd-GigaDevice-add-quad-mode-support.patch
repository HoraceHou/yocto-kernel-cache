From e7538f36c39d1859fe6e514ae7ff17bbfa189465 Mon Sep 17 00:00:00 2001
From: Ken Ma <make@marvell.com>
Date: Mon, 3 Jul 2017 16:32:54 +0800
Subject: [PATCH 1063/1345] staging: mtd: GigaDevice: add quad mode support

commit  d23de123c15cde237bbe318d369935e4dfaa27e9 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Add quad mode support for GigaDevice.

Change-Id: I93cce85ec14ba370142200a36197f56ce6c0aa9f
Signed-off-by: Ken Ma <make@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/41128
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Victor Gu <xigu@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/gd5f_spinand/gd5f_spinand.c |   51 +++++++++++++++++++++++++--
 1 file changed, 49 insertions(+), 2 deletions(-)

diff --git a/drivers/staging/gd5f_spinand/gd5f_spinand.c b/drivers/staging/gd5f_spinand/gd5f_spinand.c
index 7638fcd..fb92765 100644
--- a/drivers/staging/gd5f_spinand/gd5f_spinand.c
+++ b/drivers/staging/gd5f_spinand/gd5f_spinand.c
@@ -98,12 +98,22 @@ static int spinand_cmd(struct spi_device *spi, struct spinand_cmd *cmd)
 	}
 	/* Data to be transmitted */
 	if (cmd->n_tx) {
+		if (cmd->cmd == SPI_NAND_PROGRAM_LOAD4_INS)
+			x[3].tx_nbits = SPI_NBITS_QUAD;
+		else
+			x[3].tx_nbits = SPI_NBITS_SINGLE;
 		x[3].len = cmd->n_tx;
 		x[3].tx_buf = cmd->tx_buf;
 		spi_message_add_tail(&x[3], &message);
 	}
 	/* Data to be received */
 	if (cmd->n_rx) {
+		if (cmd->cmd == SPI_NAND_READ_CACHE_X4_INS)
+			x[3].rx_nbits = SPI_NBITS_QUAD;
+		else if (cmd->cmd == SPI_NAND_READ_CACHE_X2_INS)
+			x[3].rx_nbits = SPI_NBITS_DUAL;
+		else
+			x[3].rx_nbits = SPI_NBITS_SINGLE;
 		x[3].len = cmd->n_rx;
 		x[3].rx_buf = cmd->rx_buf;
 		spi_message_add_tail(&x[3], &message);
@@ -391,7 +401,16 @@ static int spinand_read_from_cache(struct spi_device *spi_nand,
 {
 	struct spinand_cmd cmd = {0};
 
-	cmd.cmd = SPI_NAND_READ_CACHE_INS;
+	if (spi_nand->mode & (SPI_RX_DUAL | SPI_RX_QUAD))
+		cmd.n_dummy = 1;
+
+	if (spi_nand->mode & SPI_RX_QUAD)
+		cmd.cmd = SPI_NAND_READ_CACHE_X4_INS;
+	else if (spi_nand->mode & SPI_RX_DUAL)
+		cmd.cmd = SPI_NAND_READ_CACHE_X2_INS;
+	else
+		cmd.cmd = SPI_NAND_READ_CACHE_INS;
+
 	cmd.n_addr = 3;
 	cmd.addr[0] = 0;
 	cmd.addr[1] = (u8)((byte_id & 0x0000FF00) >> 8);
@@ -501,7 +520,11 @@ static int spinand_program_data_to_cache(struct spi_device *spi_nand,
 {
 	struct spinand_cmd cmd = {0};
 
-	cmd.cmd = SPI_NAND_PROGRAM_LOAD_INS;
+	if (spi_nand->mode & SPI_TX_QUAD)
+		cmd.cmd = SPI_NAND_PROGRAM_LOAD4_INS;
+	else
+		cmd.cmd = SPI_NAND_PROGRAM_LOAD_INS;
+
 	cmd.n_addr = 2;
 	cmd.addr[0] = (u8)((byte_id & 0x0000FF00) >> 8);
 	cmd.addr[1] = (u8)(byte_id & 0x000000FF);
@@ -921,6 +944,21 @@ static int gd5f_ecc_init(struct nand_ecc_ctrl *ecc, int strength,
 }
 
 /*
+ * spinand_enable_quad - send command to enable spi nand flash in quad mode
+ */
+static int spinand_enable_quad(struct spi_device *spi_nand)
+{
+	u8 feature_reg;
+
+	if ((spinand_get_feature_en(spi_nand, &feature_reg) < 0) ||
+	    (spinand_set_feature_en(spi_nand, feature_reg | SPI_NAND_QUAD_EN)
+	     < 0))
+		return -1;
+
+	return 0;
+}
+
+/*
  * spinand_probe - set up the device driver parameters to make
  * the device available.
  */
@@ -981,6 +1019,15 @@ static int spinand_probe(struct spi_device *spi_nand)
 	chip->options	|= NAND_CACHEPRG;
 	chip->select_chip = spinand_select_chip;
 
+	/* Set chip to quad mode */
+	if (spi_nand->mode & (SPI_TX_QUAD | SPI_RX_QUAD)) {
+		ret = spinand_enable_quad(spi_nand);
+		if (ret < 0) {
+			pr_info("%s: Failed to enable quad mode!\n", __func__);
+			return ret;
+		}
+	}
+
 	/* This should set up mtd->writesize, mtd->oobsize, etc. */
 	if (nand_scan(mtd, 1))
 		return -ENXIO;
-- 
1.7.9.5

