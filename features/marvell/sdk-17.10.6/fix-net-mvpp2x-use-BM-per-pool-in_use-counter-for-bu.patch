From 391f5439e8fbe77c39172670086eb2d52e08c083 Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Thu, 6 Jul 2017 14:54:42 +0300
Subject: [PATCH 1077/1345] fix: net: mvpp2x: use BM per pool in_use counter
 for buffer recycling

commit  4ec10d4cd2922ff1154a89b8dba54883a83a8fc3 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

BM in_use counter should be per pool and not common for all pools.
Using common in_use counter caused memory leakage.

Also in_use counter shouldn't be decremented for RX descriptors with
error, since it's skip RX loop in receive routine.

Change-Id: I0ba892b6dbd165af756b3c7670f8c30a9d61fc37
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/41272
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h      |    2 +-
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |   13 ++++++-------
 2 files changed, 7 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
index 9eaacef..9087852 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
@@ -597,7 +597,7 @@ struct mv_pp2x_port_pcpu {
 struct mv_pp2x_cp_pcpu {
 	struct list_head skb_port_list;
 	struct mv_pp2x_skb_pool *skb_pool;
-	int in_use;
+	int in_use[MVPP2_BM_POOLS_NUM];
 };
 
 struct queue_vector {
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index 94ece81..53075a5 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -330,7 +330,7 @@ static int mv_pp2x_rx_refill_new(struct mv_pp2x_port *port,
 	 * by recycling mechanism.
 	 */
 	if (is_recycle &&
-	    (cp_pcpu->in_use < bm_pool->in_use_thresh))
+	    (cp_pcpu->in_use[bm_pool->id] < bm_pool->in_use_thresh))
 		return 0;
 
 	data = mv_pp2x_frag_alloc(bm_pool);
@@ -350,7 +350,7 @@ static int mv_pp2x_rx_refill_new(struct mv_pp2x_port *port,
 
 	/* Decrement only if refill called from RX */
 	if (is_recycle)
-		cp_pcpu->in_use--;
+		cp_pcpu->in_use[bm_pool->id]--;
 
 	return 0;
 }
@@ -1088,7 +1088,7 @@ static void mv_pp2x_txq_bufs_free(struct mv_pp2x_port *port,
 			bm_pool = &port->priv->bm_pools[MVPP2X_SKB_BPID_GET(skb_rec)];
 			/* Do not release buffer of recycled skb */
 			skb_rec->head = NULL;
-			cp_pcpu->in_use--;
+			cp_pcpu->in_use[bm_pool->id]--;
 
 			mv_pp2_skb_pool_put(port, (struct sk_buff *)skb, txq_pcpu->cpu);
 
@@ -1312,7 +1312,7 @@ static void mv_pp2x_rxq_drop_pkts(struct mv_pp2x_port *port,
 
 		mv_pp2x_pool_refill(port->priv, MVPP2_RX_DESC_POOL(rx_desc),
 				    buf_phys_addr, cpu);
-		cp_pcpu->in_use--;
+		cp_pcpu->in_use[bm_pool->id]--;
 	}
 	put_cpu();
 	mv_pp2x_rxq_status_update(port, rxq->id, rx_received, rx_received);
@@ -2622,7 +2622,6 @@ static int mv_pp2x_rx(struct mv_pp2x_port *port, struct napi_struct *napi,
 			dev->stats.rx_errors++;
 			mv_pp2x_rx_error(port, rx_desc);
 			mv_pp2x_pool_refill(port->priv, pool, buf_phys_addr, cpu);
-			cp_pcpu->in_use--;
 			continue;
 		}
 		/* Try to get skb from CP skb pool
@@ -2647,7 +2646,7 @@ static int mv_pp2x_rx(struct mv_pp2x_port *port, struct napi_struct *napi,
 				 MVPP2_RX_BUF_SIZE(bm_pool->pkt_size),
 				 DMA_FROM_DEVICE);
 		refill_array[bm_pool->log_id]++;
-		cp_pcpu->in_use++;
+		cp_pcpu->in_use[bm_pool->id]++;
 
 #ifdef MVPP2_VERBOSE
 		mv_pp2x_skb_dump(skb, rx_desc->data_size, 4);
@@ -3180,7 +3179,7 @@ static inline int mv_pp2x_skb_recycle_check(struct mv_pp2x *priv, struct sk_buff
 	if ((skb->hash == MVPP2_UNIQUE_HASH) && (MVPP2X_SKB_PP2_CELL_GET(skb) == priv->pp2_cfg.cell_index)) {
 		bm_pool = mv_pp2x_skb_recycle_get_pool(priv, skb);
 		if (bm_pool)
-			if (mv_pp2x_skb_is_recycleable(skb, bm_pool->pkt_size) && (cp_pcpu->in_use > 0))
+			if (mv_pp2x_skb_is_recycleable(skb, bm_pool->pkt_size) && (cp_pcpu->in_use[bm_pool->id] > 0))
 				return bm_pool->id;
 	}
 
-- 
1.7.9.5

