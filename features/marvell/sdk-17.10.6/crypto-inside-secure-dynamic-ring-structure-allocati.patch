From 1764c19a158b534c67db7d34292ce9291d13c95c Mon Sep 17 00:00:00 2001
From: Ofer Heifetz <oferh@marvell.com>
Date: Thu, 23 Nov 2017 14:27:29 +0200
Subject: [PATCH 1277/1345] crypto: inside-secure: dynamic ring structure
 allocation

commit  c83966f528f6c6ca30d7179f083efef5b415131c from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

replace static ring array allocation with dynamic based on the
configured ring count per device

Change-Id: Id67eef92c8773e9a00c859697c8dc70c363427c6
Signed-off-by: Ofer Heifetz <oferh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/51658
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/inside-secure/ring.c     |   10 +++---
 drivers/crypto/inside-secure/safexcel.c |    6 ++++
 drivers/crypto/inside-secure/safexcel.h |   56 +++++++++++++++----------------
 3 files changed, 38 insertions(+), 34 deletions(-)

diff --git a/drivers/crypto/inside-secure/ring.c b/drivers/crypto/inside-secure/ring.c
index 3c68af6..4aa26eb 100644
--- a/drivers/crypto/inside-secure/ring.c
+++ b/drivers/crypto/inside-secure/ring.c
@@ -15,8 +15,8 @@
 
 /* Initialize the ring descriptors */
 int safexcel_init_ring_descriptors(struct safexcel_crypto_priv *priv,
-				   struct safexcel_ring *cdr,
-				   struct safexcel_ring *rdr)
+				   struct safexcel_desc_ring *cdr,
+				   struct safexcel_desc_ring *rdr)
 {
 	cdr->offset = sizeof(u32) * priv->config.cd_offset;
 	cdr->base = dmam_alloc_coherent(priv->dev,
@@ -44,7 +44,7 @@ int safexcel_init_ring_descriptors(struct safexcel_crypto_priv *priv,
 
 /* Return the next available descriptor for use (command/result) */
 static void *safexcel_ring_next_wptr(struct safexcel_crypto_priv *priv,
-				     struct safexcel_ring *ring)
+				     struct safexcel_desc_ring *ring)
 {
 	void *ptr = ring->write;
 
@@ -61,7 +61,7 @@ static void *safexcel_ring_next_wptr(struct safexcel_crypto_priv *priv,
 
 /* Return the last used descriptor (command/result) */
 void *safexcel_ring_next_rptr(struct safexcel_crypto_priv *priv,
-			      struct safexcel_ring *ring)
+			      struct safexcel_desc_ring *ring)
 {
 	void *ptr = ring->read;
 
@@ -78,7 +78,7 @@ void *safexcel_ring_next_rptr(struct safexcel_crypto_priv *priv,
 
 /* Rollback descriptor allocation (in a case of insufficient resources) */
 void safexcel_ring_rollback_wptr(struct safexcel_crypto_priv *priv,
-				 struct safexcel_ring *ring)
+				 struct safexcel_desc_ring *ring)
 {
 	if (!ring->nr)
 		return;
diff --git a/drivers/crypto/inside-secure/safexcel.c b/drivers/crypto/inside-secure/safexcel.c
index e381ecd..4c40a2d 100644
--- a/drivers/crypto/inside-secure/safexcel.c
+++ b/drivers/crypto/inside-secure/safexcel.c
@@ -1275,6 +1275,12 @@ static int safexcel_probe(struct platform_device *pdev)
 
 	safexcel_configure(priv);
 
+	priv->ring = devm_kzalloc(dev,
+				  (priv->config.rings * sizeof(*priv->ring)),
+				  GFP_KERNEL);
+	if (!priv->ring)
+		return -ENOMEM;
+
 	for (i = 0; i < priv->config.rings; i++) {
 		char irq_name[6] = {0}; /* "ringX\0" */
 		char wq_name[9] = {0}; /* "wq_ringX\0" */
diff --git a/drivers/crypto/inside-secure/safexcel.h b/drivers/crypto/inside-secure/safexcel.h
index af6c5c8..ee8a47c 100644
--- a/drivers/crypto/inside-secure/safexcel.h
+++ b/drivers/crypto/inside-secure/safexcel.h
@@ -30,13 +30,9 @@
 
 #define RINGS_UNINITIALIZED				0xff
 
-/* This could be retrieved from EIP97_HIA_OPTIONS */
-#define EIP97_MAX_RINGS					4
-
 /* Static configuration */
 #define EIP197_DEFAULT_RING_SIZE			300
 #define EIP197_MAX_TOKENS				5
-#define EIP197_MAX_RINGS				4
 
 #define EIP197_FETCH_COUNT				1
 #define EIP197_MAX_BATCH_SZ				32
@@ -537,7 +533,7 @@ enum safexcel_eip197_hw {
 	EIP197D,
 };
 
-struct safexcel_ring {
+struct safexcel_desc_ring {
 	void *base;
 	void *base_end;
 	dma_addr_t base_dma;
@@ -604,6 +600,27 @@ struct safexcel_work_data {
 	int ring;
 };
 
+struct safexcel_ring {
+	spinlock_t lock;
+	spinlock_t egress_lock;
+	int egress_cnt;
+
+	struct list_head list;
+	int busy;
+	struct crypto_async_request *req;
+	struct crypto_async_request *backlog;
+	struct workqueue_struct *workqueue;
+	struct safexcel_work_data work_data;
+
+	/* command/result rings */
+	struct safexcel_desc_ring cdr;
+	struct safexcel_desc_ring rdr;
+
+	spinlock_t queue_lock;
+	struct crypto_queue queue;
+};
+
+
 struct safexcel_crypto_priv {
 	void __iomem *base;
 	struct safexcel_unit_offset unit_off;
@@ -618,26 +635,7 @@ struct safexcel_crypto_priv {
 	struct dma_pool *context_pool;
 
 	atomic_t ring_used;
-
-	struct {
-		spinlock_t lock;
-		spinlock_t egress_lock;
-		int egress_cnt;
-
-		struct list_head list;
-		int busy;
-		struct crypto_async_request *req;
-		struct crypto_async_request *backlog;
-		struct workqueue_struct *workqueue;
-		struct safexcel_work_data work_data;
-
-		/* command/result rings */
-		struct safexcel_ring cdr;
-		struct safexcel_ring rdr;
-
-		spinlock_t queue_lock;
-		struct crypto_queue queue;
-	} ring[EIP197_MAX_RINGS];
+	struct safexcel_ring *ring;
 
 	int id;
 };
@@ -707,13 +705,13 @@ int safexcel_invalidate_cache(struct crypto_async_request *async,
 			      dma_addr_t ctxr_dma,
 			      int ring, struct safexcel_request *request);
 int safexcel_init_ring_descriptors(struct safexcel_crypto_priv *priv,
-				   struct safexcel_ring *cdr,
-				   struct safexcel_ring *rdr);
+				   struct safexcel_desc_ring *cdr,
+				   struct safexcel_desc_ring *rdr);
 int safexcel_select_ring(struct safexcel_crypto_priv *priv);
 void *safexcel_ring_next_rptr(struct safexcel_crypto_priv *priv,
-			      struct safexcel_ring *ring);
+			      struct safexcel_desc_ring *ring);
 void safexcel_ring_rollback_wptr(struct safexcel_crypto_priv *priv,
-				 struct safexcel_ring *ring);
+				 struct safexcel_desc_ring *ring);
 struct safexcel_command_desc *safexcel_add_cdesc(struct safexcel_crypto_priv *priv,
 						 int ring_id,
 						 bool first, bool last,
-- 
1.7.9.5

