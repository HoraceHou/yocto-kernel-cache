From 3d4e07ebe4b58f13df4e091fbf020cc30a53788e Mon Sep 17 00:00:00 2001
From: Dmitri Epshtein <dima@marvell.com>
Date: Wed, 6 Dec 2017 13:20:19 +0200
Subject: [PATCH 1273/1345] safexcel: Reset CDR and RDR rings on module unload

commit  3c558c17af5784388b817a5b5bf7a739f7603e54 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- Clear all pending interrupts
- Reset low and high parts of CDR/RDR base address

MUSDK SAM UIO module lay on ring base address to know which rings are
busy by kernel

Change-Id: Id46902227cbd08caff73884e8f902f4891ded883
Signed-off-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/47338
Reviewed-by: Omri Itach <omrii@marvell.com>
Reviewed-by: Ofer Heifetz <oferh@marvell.com>
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/51654
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/inside-secure/safexcel.c |   39 +++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/drivers/crypto/inside-secure/safexcel.c b/drivers/crypto/inside-secure/safexcel.c
index ccbb55c..b91e820 100644
--- a/drivers/crypto/inside-secure/safexcel.c
+++ b/drivers/crypto/inside-secure/safexcel.c
@@ -381,6 +381,42 @@ static void eip_priv_unit_offset_init(struct safexcel_crypto_priv *priv)
 	}
 }
 
+/* Reset the command descriptor rings */
+static void eip_hw_reset_cdesc_rings(struct safexcel_crypto_priv *priv)
+{
+	int i;
+
+	for (i = 0; i < priv->config.rings; i++) {
+		/* Reset ring base address */
+		writel(0x0,
+		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_RING_BASE_ADDR_LO);
+		writel(0x0,
+		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_RING_BASE_ADDR_HI);
+
+		/* clear any pending interrupt */
+		writel(EIP197_CDR_INTR_MASK,
+		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_STAT);
+	}
+}
+
+/* Reset the result descriptor rings */
+static void eip_hw_reset_rdesc_rings(struct safexcel_crypto_priv *priv)
+{
+	int i;
+
+	for (i = 0; i < priv->config.rings; i++) {
+		/* Reset ring base address */
+		writel(0x0,
+		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_RING_BASE_ADDR_LO);
+		writel(0x0,
+		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_RING_BASE_ADDR_HI);
+
+		/* clear any pending interrupt */
+		writel(EIP197_RDR_INTR_MASK,
+		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_STAT);
+	}
+}
+
 /* Configure the command descriptor ring manager */
 static int eip_hw_setup_cdesc_rings(struct safexcel_crypto_priv *priv)
 {
@@ -1363,6 +1399,9 @@ static int safexcel_remove(struct platform_device *pdev)
 	if (priv->id == eip_in_use)
 		safexcel_unregister_algorithms(priv);
 
+	eip_hw_reset_cdesc_rings(priv);
+	eip_hw_reset_rdesc_rings(priv);
+
 	clk_disable_unprepare(priv->clk);
 
 	for (i = 0; i < priv->config.rings; i++)
-- 
1.7.9.5

