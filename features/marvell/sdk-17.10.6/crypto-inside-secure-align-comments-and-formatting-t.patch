From 2032bf32b6fe9299b361bac783a3965b3c30b972 Mon Sep 17 00:00:00 2001
From: Ofer Heifetz <oferh@marvell.com>
Date: Mon, 15 Jan 2018 14:03:49 +0200
Subject: [PATCH 1298/1345] crypto: inside-secure: align comments and
 formatting to LKv4.15

commit  ac07e6dd1c9215a2ff1410e7e059fd9a1b3fc3e0 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Change-Id: I4d61a4b376513a3dc8522bc1b10e676b89cfb503
Signed-off-by: Ofer Heifetz <oferh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/49057
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/51679
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/inside-secure/cipher.c   |    4 +--
 drivers/crypto/inside-secure/hash.c     |    9 +++----
 drivers/crypto/inside-secure/safexcel.c |   42 ++++++++++++-------------------
 drivers/crypto/inside-secure/safexcel.h |    6 ++---
 4 files changed, 23 insertions(+), 38 deletions(-)

diff --git a/drivers/crypto/inside-secure/cipher.c b/drivers/crypto/inside-secure/cipher.c
index 6b938a1..312daa1 100644
--- a/drivers/crypto/inside-secure/cipher.c
+++ b/drivers/crypto/inside-secure/cipher.c
@@ -164,8 +164,8 @@ static int safexcel_context_control(struct safexcel_cipher_ctx *ctx,
 
 /* Handle a cipher result descriptor */
 static int safexcel_handle_req_result(struct safexcel_crypto_priv *priv, int ring,
-				  struct crypto_async_request *async,
-				  bool *should_complete, int *ret)
+				      struct crypto_async_request *async,
+				      bool *should_complete, int *ret)
 {
 	struct ablkcipher_request *req = ablkcipher_request_cast(async);
 	struct safexcel_result_desc *rdesc;
diff --git a/drivers/crypto/inside-secure/hash.c b/drivers/crypto/inside-secure/hash.c
index 12f8e57..59ff3e6 100644
--- a/drivers/crypto/inside-secure/hash.c
+++ b/drivers/crypto/inside-secure/hash.c
@@ -318,24 +318,21 @@ static int safexcel_ahash_send_req(struct crypto_async_request *async, int ring,
 
 send_command:
 	/* Setup the context options */
-	safexcel_context_control(ctx, req, first_cdesc,
-				 req->state_sz,
+	safexcel_context_control(ctx, req, first_cdesc, req->state_sz,
 				 crypto_ahash_blocksize(ahash));
 
 	/* Add the token */
 	safexcel_hash_token(first_cdesc, len, req->state_sz);
 
 	ctx->base.result_dma = dma_map_single(priv->dev, req->state,
-					      req->state_sz,
-					      DMA_FROM_DEVICE);
+					      req->state_sz, DMA_FROM_DEVICE);
 	if (dma_mapping_error(priv->dev, ctx->base.result_dma)) {
 		ret = -EINVAL;
 		goto cdesc_rollback;
 	}
 
 	/* Add a result descriptor */
-	rdesc = safexcel_add_rdesc(priv, ring, 1, 1,
-				   ctx->base.result_dma,
+	rdesc = safexcel_add_rdesc(priv, ring, 1, 1, ctx->base.result_dma,
 				   req->state_sz);
 	if (IS_ERR(rdesc)) {
 		ret = PTR_ERR(rdesc);
diff --git a/drivers/crypto/inside-secure/safexcel.c b/drivers/crypto/inside-secure/safexcel.c
index 47c2e3d..282c97e 100644
--- a/drivers/crypto/inside-secure/safexcel.c
+++ b/drivers/crypto/inside-secure/safexcel.c
@@ -532,9 +532,7 @@ static int safexcel_hw_init(struct safexcel_crypto_priv *priv)
 		val |= MST_CTRL_SUPPORT_PROT(AXI_NONE_SECURE_ACCESS);
 	writel(val, EIP197_HIA_GEN_CFG(priv) + EIP197_MST_CTRL);
 
-	/*
-	 * Interrupts reset
-	 */
+	/* Interrupts reset */
 
 	/* Disable all global interrupts */
 	writel(0, EIP197_HIA_AIC_G(priv) + EIP197_HIA_AIC_G_ENABLE_CTRL);
@@ -542,13 +540,9 @@ static int safexcel_hw_init(struct safexcel_crypto_priv *priv)
 	/* Clear any pending interrupt */
 	writel(EIP197_AIC_G_ACK_ALL_MASK, EIP197_HIA_AIC_G(priv) + EIP197_HIA_AIC_G_ACK);
 
-	/*
-	 * Processing Engine configuration
-	 */
+	/* Processing Engine configuration */
 	for (pe = 0; pe < priv->nr_pe; pe++) {
-		/*
-		 * Data Fetch Engine configuration
-		 */
+		/* Data Fetch Engine configuration */
 
 		/* Reset all DFE threads */
 		writel(EIP197_DxE_THR_CTRL_RESET_PE,
@@ -585,9 +579,7 @@ static int safexcel_hw_init(struct safexcel_crypto_priv *priv)
 			       EIP197_HIA_AIC(priv) + EIP197_HIA_RA_PE_CTRL(pe));
 		}
 
-		/*
-		 * Data Store Engine configuration
-		 */
+		/* Data Store Engine configuration */
 
 		/* Reset all DSE threads */
 		writel(EIP197_DxE_THR_CTRL_RESET_PE,
@@ -622,9 +614,7 @@ static int safexcel_hw_init(struct safexcel_crypto_priv *priv)
 		       EIP197_PE(priv) + EIP197_PE_OUT_DBUF_THRES(pe));
 	}
 
-	/*
-	 * Command Descriptor Rings prepare
-	 */
+	/* Command Descriptor Rings prepare */
 	for (i = 0; i < priv->config.hw_rings; i++) {
 		/* Clear interrupts for this ring */
 		writel(EIP197_HIA_AIC_R_ENABLE_CLR_ALL_MASK,
@@ -650,10 +640,7 @@ static int safexcel_hw_init(struct safexcel_crypto_priv *priv)
 		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_RING_SIZE);
 	}
 
-	/*
-	 * Result Descriptor Ring prepare
-	 */
-
+	/* Result Descriptor Ring prepare */
 	for (i = 0; i < priv->config.hw_rings; i++) {
 		/* Disable external triggering*/
 		writel(0, EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_CFG);
@@ -671,7 +658,7 @@ static int safexcel_hw_init(struct safexcel_crypto_priv *priv)
 		writel(0,
 		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_PROC_PNTR);
 
-		/* ring size */
+		/* Ring size */
 		writel((EIP197_DEFAULT_RING_SIZE * priv->config.rd_offset) << 2,
 		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_RING_SIZE);
 	}
@@ -818,8 +805,8 @@ inline int safexcel_select_ring(struct safexcel_crypto_priv *priv)
 
 /* Free crypto API result mapping */
 void safexcel_free_context(struct safexcel_crypto_priv *priv,
-				  struct crypto_async_request *req,
-				  int result_sz)
+			   struct crypto_async_request *req,
+			   int result_sz)
 {
 	struct safexcel_context *ctx = crypto_tfm_ctx(req->tfm);
 
@@ -867,8 +854,8 @@ void safexcel_inv_complete(struct crypto_async_request *req, int error)
 /* Context cache invalidation */
 int safexcel_invalidate_cache(struct crypto_async_request *async,
 			      struct safexcel_crypto_priv *priv,
-			      dma_addr_t ctxr_dma,
-			      int ring, struct safexcel_request *request)
+			      dma_addr_t ctxr_dma, int ring,
+			      struct safexcel_request *request)
 {
 	struct safexcel_command_desc *cdesc;
 	struct safexcel_result_desc *rdesc;
@@ -1027,7 +1014,7 @@ static irqreturn_t safexcel_irq_ring(int irq, void *data)
 
 		if (unlikely(stat & EIP197_xDR_ERR)) {
 			/*
-			 * Fatal error, the CDR is unusable and must be
+			 * Fatal error, the RDR is unusable and must be
 			 * reinitialized. This should not happen under
 			 * normal circumstances.
 			 */
@@ -1404,6 +1391,7 @@ static int safexcel_remove(struct platform_device *pdev)
 		.compatible = "inside-secure,safexcel-eip197",
 		.data = (void *)EIP197,
 	},
+	{},
 };
 
 
@@ -1420,5 +1408,7 @@ static int safexcel_remove(struct platform_device *pdev)
 MODULE_PARM_DESC(rings, "number of rings to be used by the driver");
 
 MODULE_AUTHOR("Antoine Tenart <antoine.tenart@free-electrons.com>");
-MODULE_DESCRIPTION("Support for SafeXcel Cryptographic Engines EIP97/197");
+MODULE_AUTHOR("Ofer Heifetz <oferh@marvell.com>");
+MODULE_AUTHOR("Igal Liberman <igall@marvell.com>");
+MODULE_DESCRIPTION("Support for SafeXcel cryptographic engine EIP197");
 MODULE_LICENSE("GPL v2");
diff --git a/drivers/crypto/inside-secure/safexcel.h b/drivers/crypto/inside-secure/safexcel.h
index c34a589..60c2749 100644
--- a/drivers/crypto/inside-secure/safexcel.h
+++ b/drivers/crypto/inside-secure/safexcel.h
@@ -159,8 +159,6 @@
 #define EIP197_TRC_RECORD_SIZE_OFFSET			18
 #define EIP197_TRC_RECORD_SIZE_MASK			(GENMASK(8, 0))
 
-
-
 /* EIP197_TRC_PARAMS2 */
 #define EIP197_TRC_HASH_TABLE_START_MASK		(GENMASK(9, 0))
 #define EIP197_TRC_DMA_WR_COMB_DLY_OFFSET		10
@@ -626,11 +624,11 @@ struct safexcel_crypto_priv {
 	void __iomem *base;
 	struct device *dev;
 	struct clk *clk;
-	enum safexcel_eip_type eip_type;
 	int nr_pe;
-	enum safexcel_eip197_hw eip197_hw_ver;
 	struct safexcel_config config;
 
+	enum safexcel_eip_type eip_type;
+	enum safexcel_eip197_hw eip197_hw_ver;
 	struct safexcel_register_offsets offsets;
 
 	/* context DMA pool */
-- 
1.7.9.5

