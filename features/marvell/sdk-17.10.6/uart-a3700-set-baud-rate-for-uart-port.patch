From f7b107861c02efbaaad884ff4c6d363ceee2793f Mon Sep 17 00:00:00 2001
From: allen yan <yanwei@marvell.com>
Date: Thu, 19 Jan 2017 17:46:50 +0800
Subject: [PATCH 0769/1345] uart: a3700: set baud-rate for uart port

commit  6191ee90d7c30866b459164eb4f67cdf7f5dd8e1 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- For the primary uart driver, the baud-rate was handled
  in U-boot. But it did nothing about baud-rate in kernel.
- This patch mainly set the baud-rate divisor for both uart
  port according the fixed-clock frequency and the target
  baud-rate.

Change-Id: I91d380294f9c0de248e694e25166eb292ab625fc
Signed-off-by: allen yan <yanwei@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/35617
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Wilson Ding <dingwei@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../devicetree/bindings/serial/mvebu-uart.txt      |    9 +++++
 drivers/tty/serial/mvebu-uart.c                    |   35 +++++++++++++++++---
 2 files changed, 40 insertions(+), 4 deletions(-)

diff --git a/Documentation/devicetree/bindings/serial/mvebu-uart.txt b/Documentation/devicetree/bindings/serial/mvebu-uart.txt
index 7beeae6..b0c5f24e 100644
--- a/Documentation/devicetree/bindings/serial/mvebu-uart.txt
+++ b/Documentation/devicetree/bindings/serial/mvebu-uart.txt
@@ -6,9 +6,17 @@ Required properties:
 - interrupts: device interrupt
 
 Example:
+	clocks {
+		osc: osc {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			clock-frequency = <25000000>;
+		};
+	};
 	serial@12000 {
 		compatible = "marvell,armada-3700-uart";
 		reg = <0x12000 0x200>;
+		clocks = <&osc>;
 		interrupts = <GIC_SPI 11 IRQ_TYPE_LEVEL_HIGH>;
 		interrupt-names = "irq_sum";
 	};
@@ -16,6 +24,7 @@ Example:
 		compatible = "marvell,armada-3700-uart-ext";
 		reg = <0x12200 0x30>,
 		      <0x8a00 0x30>;
+		clocks = <&osc>;
 		interrupts = <GIC_SPI 31 IRQ_TYPE_LEVEL_HIGH>,
 		             <GIC_SPI 30 IRQ_TYPE_LEVEL_HIGH>;
 		interrupt-names = "irq_rx", "irq_tx";
diff --git a/drivers/tty/serial/mvebu-uart.c b/drivers/tty/serial/mvebu-uart.c
index 9a9e64d..9fa8d35 100644
--- a/drivers/tty/serial/mvebu-uart.c
+++ b/drivers/tty/serial/mvebu-uart.c
@@ -545,6 +545,7 @@ static void mvebu_uart_shutdown(struct uart_port *port)
 	free_irq(port->irq, port);
 }
 
+static void mvebu_uart_baud_rate_set(struct uart_port *port, unsigned int baud);
 static void mvebu_uart_set_termios(struct uart_port *port,
 				   struct ktermios *termios,
 				   struct ktermios *old)
@@ -571,12 +572,10 @@ static void mvebu_uart_set_termios(struct uart_port *port,
 	if ((termios->c_cflag & CREAD) == 0)
 		port->ignore_status_mask |= stat_bit_rx_rdy | STAT_BRK_ERR;
 
-	if (old)
-		tty_termios_copy_hw(termios, old);
-
 	baud = uart_get_baud_rate(port, termios, old, 0, 460800);
 	uart_update_timeout(port, termios->c_cflag, baud);
-
+	/* Baud-rate set*/
+	mvebu_uart_baud_rate_set(port, baud);
 	spin_unlock_irqrestore(&port->lock, flags);
 }
 
@@ -750,6 +749,22 @@ static void mvebu_uart_console_write(struct console *co, const char *s,
 		spin_unlock_irqrestore(&port->lock, flags);
 }
 
+static void mvebu_uart_baud_rate_set(struct uart_port *port, unsigned int baud)
+{
+	unsigned int baud_rate_div;
+	struct mvebu_uart_data *uart_data = (struct mvebu_uart_data *)port->private_data;
+
+	/* The Uart clock is divided by the value of divisor to generate
+	 * UCLK_OUT clock, which must be 16 times faster than the target
+	 * baud rate:
+	 * UCLK_OUT = 16 times the taregt baud rate.
+	 */
+	if (!IS_ERR(uart_data->clk)) {
+		baud_rate_div = port->uartclk / (baud * 16);
+		writel(baud_rate_div, port->membase + REG_BRDV(uart_data));
+	}
+}
+
 static int mvebu_uart_console_setup(struct console *co, char *options)
 {
 	struct uart_port *port;
@@ -813,6 +828,7 @@ static int mvebu_uart_probe(struct platform_device *pdev)
 {
 	struct resource *reg = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	struct resource *uart_int_base = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+	struct device_node *np = pdev->dev.of_node;
 
 	int irq_sum = platform_get_irq_byname(pdev, "irq_sum");
 	int irq_rx = platform_get_irq_byname(pdev, "irq_rx");
@@ -881,6 +897,17 @@ static int mvebu_uart_probe(struct platform_device *pdev)
 		data->intr.irq_tx = irq_tx;
 	}
 
+	/* Get fixed-clock frequency*/
+	data->clk = of_clk_get(np, 0);
+	if (!IS_ERR(data->clk)) {
+		ret = clk_prepare_enable(data->clk);
+		if (ret) {
+			clk_put(data->clk);
+			dev_err(&pdev->dev, "failed to get the reference clock\n");
+		}
+		port->uartclk = clk_get_rate(data->clk);
+	}
+
 	/* Set interrupt register bits callbacks */
 	/* Todo:
 	 *     Set the callbacks according to the transfer mode.
-- 
1.7.9.5

