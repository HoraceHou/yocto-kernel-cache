From 095cc6fec365e678e547b9275884a7946ce017d2 Mon Sep 17 00:00:00 2001
From: allen yan <yanwei@marvell.com>
Date: Sat, 4 Mar 2017 00:34:16 +0800
Subject: [PATCH 0839/1345] fix: mtd: spi-nand: fixed the memory leak issue of
 giga device

commit  04fef9205ce35d9527726393180786e932e57af6 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- There is a kernel crash after dt/dd command on some
  larger partition. It is because of the memory leak
  in write page operation in giga spi-nand device driver.
- This patch fixed following problem:
  A3700-625 Kernel crash during DT long run test over SPI
  NAND flash.
  A3700-735 Crash and out of memory after dt/dd 100M/50M
  operation to SPI NAND.

Change-Id: Iaf98d5e6ec248b7b9b754bcdd61d6480c58a8f90
Signed-off-by: allen yan <yanwei@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/37184
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hua Jing <jinghua@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/gd5f_spinand/gd5f_spinand.c |   25 +++++++++++++++++--------
 1 file changed, 17 insertions(+), 8 deletions(-)

diff --git a/drivers/staging/gd5f_spinand/gd5f_spinand.c b/drivers/staging/gd5f_spinand/gd5f_spinand.c
index c673485..7638fcd 100644
--- a/drivers/staging/gd5f_spinand/gd5f_spinand.c
+++ b/drivers/staging/gd5f_spinand/gd5f_spinand.c
@@ -560,7 +560,7 @@ static int spinand_program_page(struct spi_device *spi_nand,
 	if (ret < 0) {
 		dev_err(&spi_nand->dev, "Error %d on page read.\n",
 			(int)ret);
-		return ret;
+		goto err_free_mem;
 	}
 	for (i = offset, j = 0; j < len; i++, j++)
 		wbuf[i] &= buf[j];
@@ -580,7 +580,7 @@ static int spinand_program_page(struct spi_device *spi_nand,
 	if (ret < 0) {
 		dev_err(&spi_nand->dev, "Error %d on write enable.\n",
 			(int)ret);
-		return ret;
+		goto err_free_mem;
 	}
 
 	/* Issue program cache command */
@@ -588,7 +588,7 @@ static int spinand_program_page(struct spi_device *spi_nand,
 	if (ret < 0) {
 		dev_err(&spi_nand->dev, "Error %d when programming cache.\n",
 			(int)ret);
-		return ret;
+		goto err_free_mem;
 	}
 
 	/* Issue program execute command */
@@ -596,7 +596,7 @@ static int spinand_program_page(struct spi_device *spi_nand,
 	if (ret < 0) {
 		dev_err(&spi_nand->dev, "Error %d when programming NAND cells.\n",
 			(int)ret);
-		return ret;
+		goto err_free_mem;
 	}
 
 	/* Wait until the operation completes or a timeout occurs. */
@@ -606,12 +606,13 @@ static int spinand_program_page(struct spi_device *spi_nand,
 			dev_err(&spi_nand->dev,
 				"%s: Wait execution complete failed!\n",
 				__func__);
-			return ret;
+			goto err_free_mem;
 		}
 			dev_err(&spi_nand->dev,
 				"%s Wait execution complete timedout!\n",
 				__func__);
-			return -1;
+			ret = -1;
+			goto err_free_mem;
 	}
 
 	/* Check status register for program fail bit */
@@ -619,11 +620,12 @@ static int spinand_program_page(struct spi_device *spi_nand,
 	if (ret < 0) {
 		dev_err(&spi_nand->dev, "Error %d reading status register.\n",
 			(int)ret);
-		return ret;
+		goto err_free_mem;
 	}
 	if (status & SPI_NAND_PF) {
 		dev_err(&spi_nand->dev, "Program failed on page %d\n", page_id);
-		return -1;
+		ret = -1;
+		goto err_free_mem;
 	}
 
 	/* Disable ECC if HW ECC available */
@@ -635,9 +637,16 @@ static int spinand_program_page(struct spi_device *spi_nand,
 			dev_err(&spi_nand->dev, "Disable HW ECC failed.");
 		enable_hw_ecc = 0;
 	}
+	devm_kfree(&spi_nand->dev, wbuf);
 #endif
 
 	return 0;
+
+err_free_mem:
+#ifdef CONFIG_MTD_SPINAND_ONDIEECC
+	devm_kfree(&spi_nand->dev, wbuf);
+#endif
+	return ret;
 }
 
 #ifdef CONFIG_MTD_SPINAND_ONDIEECC
-- 
1.7.9.5

