From 464e6ccfd34a0a96abe1688ab3a85c03b97cc5ba Mon Sep 17 00:00:00 2001
From: Igal Liberman <igall@marvell.com>
Date: Wed, 7 Dec 2016 18:20:46 +0200
Subject: [PATCH 0647/1345] fix: phy: comphy: cp110: clear comphy selector
 register during boot

commit  a157c375939e4b01869e466e5ed7c69ee44bc457 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Currently, we don't clear comphy selector register during boot,
so the configuration is based on what u-boot configured,
this can cause a bug, for example:
	- XFI can be on comphy 2 or 4
	- U-boot sets comphy2 to XFI
	- Linux uses different configuration and sets comphy4 to XFI
	  without clearing comphy2
In such case, XFI port won't be functional.

In order to avoid this case (and other similar cases)
Linux comphy driver MUST clear comphy register during boot.

This patch fixes SYSTEMSW-3053 JIRA.

Change-Id: I6357015c434b0dcbf3fa7bdbb6ed7d9f08c1b26e
Signed-off-by: Igal Liberman <igall@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/34467
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/phy/phy-mvebu-comphy.c |   29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/drivers/phy/phy-mvebu-comphy.c b/drivers/phy/phy-mvebu-comphy.c
index 1fe5860..a677a00 100644
--- a/drivers/phy/phy-mvebu-comphy.c
+++ b/drivers/phy/phy-mvebu-comphy.c
@@ -105,6 +105,32 @@ u32 __maybe_unused polling_with_timeout(void __iomem *addr, u32 val, u32 mask,
 	return 0;
 }
 
+/* Clear PHY selector - avoid collision with prior u-boot configuration */
+static void mvebu_comphy_clr_phy_selector(struct mvebu_comphy_priv *priv,
+					  struct mvebu_comphy *comphy)
+{
+	u32 reg, mask, field;
+	u32 comphy_offset = COMMON_SELECTOR_COMPHYN_FIELD_WIDTH * comphy->index;
+
+	mask = COMMON_SELECTOR_COMPHY_MASK << comphy_offset;
+	reg = readl(priv->comphy_regs + COMMON_SELECTOR_PHY_REG_OFFSET);
+	field = reg & mask;
+
+	/* We need to clear comphy selector for network protocols but we can't
+	 * clear the whole register because we don't support SATA initialization.
+	 * So we clear a comphy field only if two conditions present:
+	 *	1. The value of the comphy selector is NOT '0' (if it's '0',
+	 *	   comphy selector is unconnected, no need to update).
+	 *	2. The value of the comphy is NOT 0x4 (0x4 selects SATA).
+	 * If both condition present, set '0' for the specific comphy.
+	 */
+	if (field &&
+	    !(field == (COMMON_SELECTOR_COMPHYN_SATA << comphy_offset))) {
+		reg &= ~mask;
+		writel(reg, priv->comphy_regs + COMMON_SELECTOR_PHY_REG_OFFSET);
+	}
+}
+
 /* PHY selector configures SATA and Network modes */
 static void mvebu_comphy_set_phy_selector(struct mvebu_comphy_priv *priv,
 					  struct mvebu_comphy *comphy)
@@ -662,6 +688,9 @@ static int mvebu_comphy_power_off(struct phy *phy)
 
 	spin_lock(&priv->lock);
 
+	/* Clear comphy selector, can't rely on u-boot */
+	mvebu_comphy_clr_phy_selector(priv, comphy);
+
 	dev_dbg(priv->dev, "power off is not implemented\n");
 
 	spin_unlock(&priv->lock);
-- 
1.7.9.5

