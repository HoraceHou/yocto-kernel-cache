From 58d9d0b8dd5fd08797a09b77ada7d1aa651987b2 Mon Sep 17 00:00:00 2001
From: Wilson Ding <dingwei@marvell.com>
Date: Tue, 10 Jan 2017 19:55:57 +0800
Subject: [PATCH 0734/1345] uart: a3700: split rx readiness and exception
 interrupt mask

commit  ce7224be4b06055a77594e940ef6fa99e70c086b from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- This patch excludes UART_RX_RDY_INT from CTRL_RX_INT. And it
  renamed CTRL_RX_INT as CTRL_BRK_INT, which is dedicated to RX
  exceptions.
- The UART_RX_RDY_INT is mapped to the different register for
  the 4-bytes transfer mode. This patch added a new member
  'intr->ctrl_reg' to driver priv_data in order to differ the
  transfer modes in future.

Change-Id: Ie590e0f42ffde68a519f7b352e35181e76d22b69
Signed-off-by: Wilson Ding <dingwei@marvell.com>
Signed-off-by: allen yan <yanwei@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/35435
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/tty/serial/mvebu-uart.c |   46 +++++++++++++++++++++++++++++----------
 1 file changed, 35 insertions(+), 11 deletions(-)

diff --git a/drivers/tty/serial/mvebu-uart.c b/drivers/tty/serial/mvebu-uart.c
index e7f985d..5712db3 100644
--- a/drivers/tty/serial/mvebu-uart.c
+++ b/drivers/tty/serial/mvebu-uart.c
@@ -75,8 +75,8 @@ struct uart_regs_layout {
 #define  CTRL_FRM_ERR_INT	BIT(2)
 #define  CTRL_PAR_ERR_INT	BIT(1)
 #define  CTRL_OVR_ERR_INT	BIT(0)
-#define  CTRL_RX_INT			(CTRL_RX_RDY_INT | CTRL_BRK_DET_INT |\
-	CTRL_FRM_ERR_INT | CTRL_PAR_ERR_INT | CTRL_OVR_ERR_INT)
+#define  CTRL_BRK_INT		(CTRL_BRK_DET_INT | CTRL_FRM_ERR_INT\
+				 | CTRL_PAR_ERR_INT | CTRL_OVR_ERR_INT)
 
 #define UART_STAT		0x0c
 #define  STAT_TX_FIFO_EMP	BIT(13)
@@ -121,6 +121,10 @@ struct mvebu_uart_data {
 	struct clk              *clk;
 	struct uart_regs_layout *regs;
 	enum reg_uart_type       reg_type;
+
+	struct {
+		unsigned int ctrl_reg;
+	} intr;
 };
 
 #define REG_CTRL(uart_data)	((uart_data)->regs->uart_ctrl)
@@ -162,9 +166,9 @@ static void mvebu_uart_stop_tx(struct uart_port *port)
 	unsigned int ctl;
 	struct mvebu_uart_data *uart_data = (struct mvebu_uart_data *)port->private_data;
 
-	ctl = readl(port->membase + REG_CTRL(uart_data));
+	ctl = readl(port->membase + uart_data->intr.ctrl_reg);
 	ctl &= ~CTRL_TX_RDY_INT;
-	writel(ctl, port->membase + REG_CTRL(uart_data));
+	writel(ctl, port->membase + uart_data->intr.ctrl_reg);
 }
 
 static void mvebu_uart_start_tx(struct uart_port *port)
@@ -172,9 +176,9 @@ static void mvebu_uart_start_tx(struct uart_port *port)
 	unsigned int ctl;
 	struct mvebu_uart_data *uart_data = (struct mvebu_uart_data *)port->private_data;
 
-	ctl = readl(port->membase + REG_CTRL(uart_data));
+	ctl = readl(port->membase + uart_data->intr.ctrl_reg);
 	ctl |= CTRL_TX_RDY_INT;
-	writel(ctl, port->membase + REG_CTRL(uart_data));
+	writel(ctl, port->membase + uart_data->intr.ctrl_reg);
 }
 
 static void mvebu_uart_stop_rx(struct uart_port *port)
@@ -183,8 +187,12 @@ static void mvebu_uart_stop_rx(struct uart_port *port)
 	struct mvebu_uart_data *uart_data = (struct mvebu_uart_data *)port->private_data;
 
 	ctl = readl(port->membase + REG_CTRL(uart_data));
-	ctl &= ~CTRL_RX_INT;
+	ctl &= ~CTRL_BRK_INT;
 	writel(ctl, port->membase + REG_CTRL(uart_data));
+
+	ctl = readl(port->membase + uart_data->intr.ctrl_reg);
+	ctl &= ~CTRL_RX_RDY_INT;
+	writel(ctl, port->membase + uart_data->intr.ctrl_reg);
 }
 
 static void mvebu_uart_break_ctl(struct uart_port *port, int brk)
@@ -325,11 +333,15 @@ static int mvebu_uart_startup(struct uart_port *port)
 {
 	int ret;
 	struct mvebu_uart_data *uart_data = (struct mvebu_uart_data *)port->private_data;
+	unsigned int ctl;
 
 	writel(CTRL_TXFIFO_RST | CTRL_RXFIFO_RST,
 		port->membase + REG_CTRL(uart_data));
 	udelay(1);
-	writel(CTRL_RX_INT, port->membase + REG_CTRL(uart_data));
+	writel(CTRL_BRK_INT, port->membase + REG_CTRL(uart_data));
+	ctl = readl(port->membase + uart_data->intr.ctrl_reg);
+	ctl |= CTRL_RX_RDY_INT;
+	writel(ctl, port->membase + uart_data->intr.ctrl_reg);
 
 	ret = request_irq(port->irq, mvebu_uart_isr, port->irqflags, DRIVER_NAME,
 			  port);
@@ -346,6 +358,7 @@ static void mvebu_uart_shutdown(struct uart_port *port)
 	struct mvebu_uart_data *uart_data = (struct mvebu_uart_data *)port->private_data;
 
 	writel(0, port->membase + REG_CTRL(uart_data));
+	writel(0, port->membase + uart_data->intr.ctrl_reg);
 
 	free_irq(port->irq, port);
 }
@@ -520,7 +533,7 @@ static void mvebu_uart_console_write(struct console *co, const char *s,
 	struct uart_port *port = &mvebu_uart_ports[co->index];
 	struct mvebu_uart_data *uart_data = (struct mvebu_uart_data *)port->private_data;
 	unsigned long flags;
-	unsigned int ier;
+	unsigned int ier, intr, ctl;
 	int locked = 1;
 
 	if (oops_in_progress)
@@ -528,9 +541,12 @@ static void mvebu_uart_console_write(struct console *co, const char *s,
 	else
 		spin_lock_irqsave(&port->lock, flags);
 
-	ier = readl(port->membase + REG_CTRL(uart_data)) &
-		(CTRL_RX_INT | CTRL_TX_RDY_INT);
+	ier = readl(port->membase + REG_CTRL(uart_data)) & CTRL_BRK_INT;
+	intr = readl(port->membase + uart_data->intr.ctrl_reg);
+	intr &= (CTRL_RX_RDY_INT | CTRL_TX_RDY_INT);
+
 	writel(0, port->membase + REG_CTRL(uart_data));
+	writel(0, port->membase + uart_data->intr.ctrl_reg);
 
 	uart_console_write(port, s, count, mvebu_uart_console_putchar);
 
@@ -539,6 +555,11 @@ static void mvebu_uart_console_write(struct console *co, const char *s,
 	if (ier)
 		writel(ier, port->membase + REG_CTRL(uart_data));
 
+	if (intr) {
+		ctl = intr | readl(port->membase + uart_data->intr.ctrl_reg);
+		writel(ctl, port->membase + uart_data->intr.ctrl_reg);
+	}
+
 	if (locked)
 		spin_unlock_irqrestore(&port->lock, flags);
 }
@@ -655,6 +676,9 @@ static int mvebu_uart_probe(struct platform_device *pdev)
 	data->regs     = &uart_regs_layout[data->reg_type];
 	data->port     = port;
 
+	/* Set interrupt registers */
+	data->intr.ctrl_reg = REG_CTRL(data);
+
 	port->private_data = data;
 	platform_set_drvdata(pdev, data);
 
-- 
1.7.9.5

