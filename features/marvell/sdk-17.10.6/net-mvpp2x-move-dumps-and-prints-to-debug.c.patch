From 3cdf273cd06dca73a06eba48d6d5d510e5139218 Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Sun, 3 Jul 2016 11:10:09 +0300
Subject: [PATCH 0319/1345] net: mvpp2x: move dumps and prints to debug.c

commit  1d3bb9b64f94b19a7047fc4c7b50d84bb8e60c1c from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- move dumps and prints to debug.c file
- DBG_MSG only used in debug.c file
- fix CHECK issues in mv_pp2x_hw.h file alignment

Change-Id: Ifca058b454b85670dee6f8dcdcd4d97563943e88
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/30892
Reviewed-by: Yuval Caduri <cyuval@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../net/ethernet/marvell/mvpp2x/mv_pp2x_debug.c    |  530 ++++++++++++++++++++
 .../net/ethernet/marvell/mvpp2x/mv_pp2x_debug.h    |   21 +-
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c   |  430 +---------------
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h   |  160 +++---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |  126 +----
 5 files changed, 640 insertions(+), 627 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_debug.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_debug.c
index dba3f4b..08576d2 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_debug.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_debug.c
@@ -2032,3 +2032,533 @@ int	mv_pp2x_cls_c2_hw_dump(struct mv_pp2x_hw *hw)
 
 /*----------------------------------------------------------------------*/
 
+void mv_pp2x_pp2_basic_print(struct platform_device *pdev, struct mv_pp2x *priv)
+{
+	DBG_MSG("%s\n", __func__);
+
+	DBG_MSG("num_present_cpus(%d) num_act_cpus(%d) num_online_cpus(%d)\n",
+		num_present_cpus(), num_active_cpus(), num_online_cpus());
+	DBG_MSG("cpu_map(%x)\n", priv->cpu_map);
+
+	DBG_MSG("pdev->name(%s) pdev->id(%d)\n", pdev->name, pdev->id);
+	DBG_MSG("dev.init_name(%s) dev.id(%d)\n",
+		pdev->dev.init_name, pdev->dev.id);
+	DBG_MSG("dev.kobj.name(%s)\n", pdev->dev.kobj.name);
+	DBG_MSG("dev->bus.name(%s) pdev.dev->bus.dev_name(%s)\n",
+		pdev->dev.bus->name, pdev->dev.bus->dev_name);
+
+	DBG_MSG("Device dma_coherent(%d)\n", pdev->dev.archdata.dma_coherent);
+
+	DBG_MSG("pp2_ver(%d)\n", priv->pp2_version);
+	DBG_MSG("queue_mode(%d)\n", priv->pp2_cfg.queue_mode);
+	DBG_MSG("first_bm_pool(%d)\n", priv->pp2_cfg.first_bm_pool);
+	DBG_MSG("cell_index(%d) num_ports(%d)\n",
+		priv->pp2_cfg.cell_index, priv->num_ports);
+#ifdef CONFIG_64BIT
+	DBG_MSG("skb_base_addr(%p)\n", (void *)priv->pp2xdata->skb_base_addr);
+#endif
+	DBG_MSG("hw->base(%p)\n", priv->hw.base);
+	if (priv->pp2_version == PPV22) {
+		DBG_MSG("gop_addr: gmac(%p) xlg(%p) serdes(%p)\n",
+			priv->hw.gop.gop_110.gmac.base,
+			priv->hw.gop.gop_110.xlg_mac.base,
+			priv->hw.gop.gop_110.serdes.base);
+		DBG_MSG("gop_addr: xmib(%p) smi(%p) xsmi(%p)\n",
+			priv->hw.gop.gop_110.xmib.base,
+			priv->hw.gop.gop_110.smi_base,
+			priv->hw.gop.gop_110.xsmi_base);
+		DBG_MSG("gop_addr: mspg(%p) xpcs(%p) ptp(%p)\n",
+			priv->hw.gop.gop_110.mspg_base,
+			priv->hw.gop.gop_110.xpcs_base,
+			priv->hw.gop.gop_110.ptp.base);
+		DBG_MSG("gop_addr: rfu1(%p)\n",
+			priv->hw.gop.gop_110.rfu1_base);
+	}
+}
+EXPORT_SYMBOL(mv_pp2x_pp2_basic_print);
+
+void mv_pp2x_pp2_port_print(struct mv_pp2x_port *port)
+{
+	int i;
+
+	DBG_MSG("%s port_id(%d)\n", __func__, port->id);
+	DBG_MSG("\t ifname(%s)\n", port->dev->name);
+	DBG_MSG("\t first_rxq(%d)\n", port->first_rxq);
+	DBG_MSG("\t num_irqs(%d)\n", port->num_irqs);
+	for (i = 0; i < port->num_irqs; i++)
+		DBG_MSG("\t\t irq%d(%d)\n", i, port->of_irqs[i]);
+	DBG_MSG("\t pkt_size(%d)\n", port->pkt_size);
+	DBG_MSG("\t flags(%lx)\n", port->flags);
+	DBG_MSG("\t tx_ring_size(%d)\n", port->tx_ring_size);
+	DBG_MSG("\t rx_ring_size(%d)\n", port->rx_ring_size);
+	DBG_MSG("\t time_coal(%d)\n", port->tx_time_coal);
+	DBG_MSG("\t pool_long(%p)\n", port->pool_long);
+	DBG_MSG("\t pool_short(%p)\n", port->pool_short);
+	DBG_MSG("\t first_rxq(%d)\n", port->first_rxq);
+	DBG_MSG("\t num_rx_queues(%d)\n", port->num_rx_queues);
+	DBG_MSG("\t num_tx_queues(%d)\n", port->num_tx_queues);
+	DBG_MSG("\t num_qvector(%d)\n", port->num_qvector);
+
+	for (i = 0; i < port->num_qvector; i++) {
+		DBG_MSG("\t qvector_index(%d)\n", i);
+#if !defined(CONFIG_MV_PP2_POLLING)
+		DBG_MSG("\t\t irq(%d) irq_name:%s\n",
+			port->q_vector[i].irq, port->q_vector[i].irq_name);
+#endif
+		DBG_MSG("\t\t qv_type(%d)\n",
+			port->q_vector[i].qv_type);
+		DBG_MSG("\t\t sw_thread_id	(%d)\n",
+			port->q_vector[i].sw_thread_id);
+		DBG_MSG("\t\t sw_thread_mask(%d)\n",
+			port->q_vector[i].sw_thread_mask);
+		DBG_MSG("\t\t first_rx_queue(%d)\n",
+			port->q_vector[i].first_rx_queue);
+		DBG_MSG("\t\t num_rx_queues(%d)\n",
+			port->q_vector[i].num_rx_queues);
+		DBG_MSG("\t\t pending_cause_rx(%d)\n",
+			port->q_vector[i].pending_cause_rx);
+	}
+	DBG_MSG("\t GOP ind(%d) phy_mode(%d) phy_addr(%d)\n",
+		port->mac_data.gop_index, port->mac_data.phy_mode,
+		port->mac_data.phy_addr);
+	DBG_MSG("\t GOP force_link(%d) autoneg(%d) duplex(%d) speed(%d)\n",
+		port->mac_data.force_link, port->mac_data.autoneg,
+		port->mac_data.duplex, port->mac_data.speed);
+#if !defined(CONFIG_MV_PP2_POLLING)
+	DBG_MSG("\t GOP link_irq(%d) irq_name:%s\n", port->mac_data.link_irq,
+		port->mac_data.irq_name);
+#endif
+	DBG_MSG("\t GOP phy_dev(%p) phy_node(%p)\n", port->mac_data.phy_dev,
+		port->mac_data.phy_node);
+}
+EXPORT_SYMBOL(mv_pp2x_pp2_port_print);
+
+void mv_pp2x_pp2_ports_print(struct mv_pp2x *priv)
+{
+	int i;
+	struct mv_pp2x_port *port;
+
+	for (i = 0; i < priv->num_ports; i++) {
+		if (!priv->port_list[i]) {
+			pr_emerg("\t port_list[%d]= NULL!\n", i);
+			continue;
+		}
+		port = priv->port_list[i];
+		mv_pp2x_pp2_port_print(port);
+	}
+}
+EXPORT_SYMBOL(mv_pp2x_pp2_ports_print);
+
+int mv_pp2x_cls_hw_lkp_print(struct mv_pp2x_hw *hw, int lkpid, int way)
+{
+	unsigned int uint32bit;
+	int int32bit;
+	struct mv_pp2x_cls_lookup_entry lkp;
+
+	if (mv_pp2x_range_validate(way, 0, WAY_MAX) == MV_ERROR)
+		return MV_ERROR;
+
+	if (mv_pp2x_range_validate(lkpid, 0,
+				   MVPP2_CLS_FLOWS_TBL_SIZE) == MV_ERROR)
+		return MV_ERROR;
+
+	mv_pp2x_cls_hw_lkp_read(hw, lkpid, way, &lkp);
+
+	DBG_MSG(" 0x%2.2x  %1.1d\t", lkp.lkpid, lkp.way);
+	mv_pp2x_cls_sw_lkp_rxq_get(&lkp, &int32bit);
+	DBG_MSG("0x%2.2x\t", int32bit);
+	mv_pp2x_cls_sw_lkp_en_get(&lkp, &int32bit);
+	DBG_MSG("%1.1d\t", int32bit);
+	mv_pp2x_cls_sw_lkp_flow_get(&lkp, &int32bit);
+	DBG_MSG("0x%3.3x\t", int32bit);
+	mv_pp2x_cls_sw_lkp_mod_get(&lkp, &int32bit);
+	DBG_MSG(" 0x%2.2x\t", int32bit);
+	mv_pp2x_cls_hw_lkp_hit_get(hw, lkp.lkpid, way, &uint32bit);
+	DBG_MSG(" 0x%8.8x\n", uint32bit);
+	DBG_MSG("\n");
+
+	return MV_OK;
+}
+EXPORT_SYMBOL(mv_pp2x_cls_hw_lkp_print);
+
+/*----------------------------------------------------------------------*/
+
+int mv_pp2x_cls_sw_flow_dump(struct mv_pp2x_cls_flow_entry *fe)
+{
+	int	int32bit_1, int32bit_2, i;
+	int	fieldsArr[MVPP2_CLS_FLOWS_TBL_FIELDS_MAX];
+	int	status = MV_OK;
+
+	if (mv_pp2x_ptr_validate(fe) == MV_ERROR)
+		return MV_ERROR;
+
+	DBG_MSG(
+		"INDEX: F[0] F[1] F[2] F[3] PRT[T  ID] ENG LAST LKP_TYP  PRIO\n");
+
+	/*index*/
+	DBG_MSG("0x%3.3x  ", fe->index);
+
+	/*filed[0] filed[1] filed[2] filed[3]*/
+	status |= mv_pp2x_cls_sw_flow_hek_get(fe, &int32bit_1, fieldsArr);
+
+	for (i = 0 ; i < MVPP2_CLS_FLOWS_TBL_FIELDS_MAX; i++)
+		if (i < int32bit_1)
+			DBG_MSG("0x%2.2x ", fieldsArr[i]);
+		else
+			DBG_MSG(" NA  ");
+
+	/*port_type port_id*/
+	status |= mv_pp2x_cls_sw_flow_port_get(fe, &int32bit_1, &int32bit_2);
+	DBG_MSG("[%1d  0x%3.3x]  ", int32bit_1, int32bit_2);
+
+	/* engine_num last_bit*/
+	status |= mv_pp2x_cls_sw_flow_engine_get(fe, &int32bit_1, &int32bit_2);
+	DBG_MSG("%1d   %1d    ", int32bit_1, int32bit_2);
+
+	/* lookup_type priority*/
+	status |= mv_pp2x_cls_sw_flow_extra_get(fe, &int32bit_1, &int32bit_2);
+	DBG_MSG("0x%2.2x    0x%2.2x", int32bit_1, int32bit_2);
+
+	DBG_MSG("\n");
+	DBG_MSG("\n");
+	DBG_MSG("       PPPEO   VLAN   MACME   UDF7   SELECT SEQ_CTRL\n");
+	DBG_MSG("         %1d      %1d      %1d       %1d      %1d      %1d\n",
+		(fe->data[0] & MVPP2_FLOW_PPPOE_MASK) >> MVPP2_FLOW_PPPOE,
+		(fe->data[0] & MVPP2_FLOW_VLAN_MASK) >> MVPP2_FLOW_VLAN,
+		(fe->data[0] & MVPP2_FLOW_MACME_MASK) >> MVPP2_FLOW_MACME,
+		(fe->data[0] & MVPP2_FLOW_UDF7_MASK) >> MVPP2_FLOW_UDF7,
+		(fe->data[0] & MVPP2_FLOW_PORT_ID_SEL_MASK) >>
+		 MVPP2_FLOW_PORT_ID_SEL,
+		(fe->data[1] & MVPP2_FLOW_SEQ_CTRL_MASK) >>
+		 MVPP2_FLOW_SEQ_CTRL);
+	DBG_MSG("\n");
+
+	return MV_OK;
+}
+EXPORT_SYMBOL(mv_pp2x_cls_sw_flow_dump);
+
+/*----------------------------------------------------------------------*/
+
+/*----------------------------------------------------------------------*/
+/*	additional cls debug APIs					*/
+/*----------------------------------------------------------------------*/
+
+int mv_pp2x_cls_hw_regs_dump(struct mv_pp2x_hw *hw)
+{
+	int i = 0;
+	char reg_name[100];
+
+	mv_pp2x_print_reg(hw, MVPP2_CLS_MODE_REG,
+			  "MVPP2_CLS_MODE_REG");
+	mv_pp2x_print_reg(hw, MVPP2_CLS_PORT_WAY_REG,
+			  "MVPP2_CLS_PORT_WAY_REG");
+	mv_pp2x_print_reg(hw, MVPP2_CLS_LKP_INDEX_REG,
+			  "MVPP2_CLS_LKP_INDEX_REG");
+	mv_pp2x_print_reg(hw, MVPP2_CLS_LKP_TBL_REG,
+			  "MVPP2_CLS_LKP_TBL_REG");
+	mv_pp2x_print_reg(hw, MVPP2_CLS_FLOW_INDEX_REG,
+			  "MVPP2_CLS_FLOW_INDEX_REG");
+
+	mv_pp2x_print_reg(hw, MVPP2_CLS_FLOW_TBL0_REG,
+			  "MVPP2_CLS_FLOW_TBL0_REG");
+	mv_pp2x_print_reg(hw, MVPP2_CLS_FLOW_TBL1_REG,
+			  "MVPP2_CLS_FLOW_TBL1_REG");
+	mv_pp2x_print_reg(hw, MVPP2_CLS_FLOW_TBL2_REG,
+			  "MVPP2_CLS_FLOW_TBL2_REG");
+
+	mv_pp2x_print_reg(hw, MVPP2_CLS_PORT_SPID_REG,
+			  "MVPP2_CLS_PORT_SPID_REG");
+
+	for (i = 0; i < MVPP2_CLS_SPID_UNI_REGS; i++) {
+		sprintf(reg_name, "MVPP2_CLS_SPID_UNI_%d_REG", i);
+		mv_pp2x_print_reg(hw, (MVPP2_CLS_SPID_UNI_BASE_REG + (4 * i)),
+				  reg_name);
+	}
+	for (i = 0; i < MVPP2_CLS_GEM_VIRT_REGS_NUM; i++) {
+		/* indirect access */
+		mv_pp2x_write(hw, MVPP2_CLS_GEM_VIRT_INDEX_REG, i);
+		sprintf(reg_name, "MVPP2_CLS_GEM_VIRT_%d_REG", i);
+		mv_pp2x_print_reg(hw, MVPP2_CLS_GEM_VIRT_REG, reg_name);
+	}
+	for (i = 0; i < MVPP2_CLS_UDF_BASE_REGS; i++)	{
+		sprintf(reg_name, "MVPP2_CLS_UDF_REG_%d_REG", i);
+		mv_pp2x_print_reg(hw, MVPP2_CLS_UDF_REG(i), reg_name);
+	}
+	for (i = 0; i < 16; i++) {
+		sprintf(reg_name, "MVPP2_CLS_MTU_%d_REG", i);
+		mv_pp2x_print_reg(hw, MVPP2_CLS_MTU_REG(i), reg_name);
+	}
+	for (i = 0; i < MVPP2_MAX_PORTS; i++) {
+		sprintf(reg_name, "MVPP2_CLS_OVER_RXQ_LOW_%d_REG", i);
+		mv_pp2x_print_reg(hw, MVPP2_CLS_OVERSIZE_RXQ_LOW_REG(i),
+				  reg_name);
+	}
+	for (i = 0; i < MVPP2_MAX_PORTS; i++) {
+		sprintf(reg_name, "MVPP2_CLS_SWFWD_P2HQ_%d_REG", i);
+		mv_pp2x_print_reg(hw, MVPP2_CLS_SWFWD_P2HQ_REG(i), reg_name);
+	}
+
+	mv_pp2x_print_reg(hw, MVPP2_CLS_SWFWD_PCTRL_REG,
+			  "MVPP2_CLS_SWFWD_PCTRL_REG");
+	mv_pp2x_print_reg(hw, MVPP2_CLS_SEQ_SIZE_REG,
+			  "MVPP2_CLS_SEQ_SIZE_REG");
+
+	for (i = 0; i < MVPP2_MAX_PORTS; i++) {
+		sprintf(reg_name, "MVPP2_CLS_PCTRL_%d_REG", i);
+		mv_pp2x_print_reg(hw, MV_PP2_CLS_PCTRL_REG(i), reg_name);
+	}
+
+	return MV_OK;
+}
+EXPORT_SYMBOL(mv_pp2x_cls_hw_regs_dump);
+
+/*----------------------------------------------------------------------*/
+
+int mv_pp2x_cls_hw_flow_dump(struct mv_pp2x_hw *hw)
+{
+	int index;
+	unsigned int cnt;
+
+	struct mv_pp2x_cls_flow_entry fe;
+
+	for (index = 0; index < MVPP2_CLS_FLOWS_TBL_SIZE ; index++) {
+		mv_pp2x_cls_hw_flow_read(hw, index, &fe);
+		mv_pp2x_cls_sw_flow_dump(&fe);
+		mv_pp2x_cls_hw_flow_hit_get(hw, index, &cnt);
+		DBG_MSG("HITS = %d\n", cnt);
+		DBG_MSG("-------------------------------------------------\n");
+	}
+	return MV_OK;
+}
+EXPORT_SYMBOL(mv_pp2x_cls_hw_flow_dump);
+
+/*----------------------------------------------------------------------*/
+/*PPv2.1 new counters MAS 3.20*/
+int mv_pp2x_cls_hw_flow_hits_dump(struct mv_pp2x_hw *hw)
+{
+	int index;
+	unsigned int cnt;
+	struct mv_pp2x_cls_flow_entry fe;
+
+	for (index = 0; index < MVPP2_CLS_FLOWS_TBL_SIZE ; index++) {
+		mv_pp2x_cls_hw_flow_hit_get(hw, index, &cnt);
+		if (cnt != 0) {
+			mv_pp2x_cls_hw_flow_read(hw, index, &fe);
+			mv_pp2x_cls_sw_flow_dump(&fe);
+			DBG_MSG("HITS = %d\n", cnt);
+			DBG_MSG("\n");
+		}
+	}
+
+	return MV_OK;
+}
+EXPORT_SYMBOL(mv_pp2x_cls_hw_flow_hits_dump);
+
+/*----------------------------------------------------------------------*/
+/*PPv2.1 new counters MAS 3.20*/
+int mv_pp2x_cls_hw_lkp_hits_dump(struct mv_pp2x_hw *hw)
+{
+	int index, way, entry_ind;
+	unsigned int cnt;
+
+	DBG_MSG("< ID  WAY >:	HITS\n");
+	for (index = 0; index < MVPP2_CLS_LKP_TBL_SIZE ; index++)
+		for (way = 0; way < 2 ; way++)	{
+			entry_ind = (way << MVPP2_CLS_LKP_INDEX_WAY_OFFS) |
+				index;
+			mv_pp2x_cls_hw_lkp_hit_get(hw, index, way,  &cnt);
+			if (cnt != 0)
+				DBG_MSG(" 0x%2.2x  %1.1d\t0x%8.8x\n",
+					index, way, cnt);
+	}
+	return MV_OK;
+}
+EXPORT_SYMBOL(mv_pp2x_cls_hw_lkp_hits_dump);
+
+/*----------------------------------------------------------------------*/
+int mv_pp2x_cls_sw_lkp_dump(struct mv_pp2x_cls_lookup_entry *lkp)
+{
+	int int32bit;
+	int status = 0;
+
+	if (mv_pp2x_ptr_validate(lkp) == MV_ERROR)
+		return MV_ERROR;
+
+	DBG_MSG("< ID  WAY >:	RXQ	EN	FLOW	MODE_BASE\n");
+
+	/* id */
+	DBG_MSG(" 0x%2.2x  %1.1d\t", lkp->lkpid, lkp->way);
+
+	/*rxq*/
+	status |= mv_pp2x_cls_sw_lkp_rxq_get(lkp, &int32bit);
+	DBG_MSG("0x%2.2x\t", int32bit);
+
+	/*enabe bit*/
+	status |= mv_pp2x_cls_sw_lkp_en_get(lkp, &int32bit);
+	DBG_MSG("%1.1d\t", int32bit);
+
+	/*flow*/
+	status |= mv_pp2x_cls_sw_lkp_flow_get(lkp, &int32bit);
+	DBG_MSG("0x%3.3x\t", int32bit);
+
+	/*mode*/
+	status |= mv_pp2x_cls_sw_lkp_mod_get(lkp, &int32bit);
+	DBG_MSG(" 0x%2.2x\t", int32bit);
+
+	DBG_MSG("\n");
+
+	return MV_OK;
+}
+EXPORT_SYMBOL(mv_pp2x_cls_sw_lkp_dump);
+
+int mv_pp2x_cls_hw_lkp_dump(struct mv_pp2x_hw *hw)
+{
+	int index, way, int32bit, ind;
+	unsigned int uint32bit;
+
+	struct mv_pp2x_cls_lookup_entry lkp;
+
+	DBG_MSG("< ID  WAY >:	RXQ	EN	FLOW	MODE_BASE  HITS\n");
+	for (index = 0; index < MVPP2_CLS_LKP_TBL_SIZE ; index++)
+		for (way = 0; way < 2 ; way++)	{
+			ind = (way << MVPP2_CLS_LKP_INDEX_WAY_OFFS) | index;
+			mv_pp2x_cls_hw_lkp_read(hw, index, way, &lkp);
+			DBG_MSG(" 0x%2.2x  %1.1d\t", lkp.lkpid, lkp.way);
+			mv_pp2x_cls_sw_lkp_rxq_get(&lkp, &int32bit);
+			DBG_MSG("0x%2.2x\t", int32bit);
+			mv_pp2x_cls_sw_lkp_en_get(&lkp, &int32bit);
+			DBG_MSG("%1.1d\t", int32bit);
+			mv_pp2x_cls_sw_lkp_flow_get(&lkp, &int32bit);
+			DBG_MSG("0x%3.3x\t", int32bit);
+			mv_pp2x_cls_sw_lkp_mod_get(&lkp, &int32bit);
+			DBG_MSG(" 0x%2.2x\t", int32bit);
+			mv_pp2x_cls_hw_lkp_hit_get(hw, index, way, &uint32bit);
+			DBG_MSG(" 0x%8.8x\n", uint32bit);
+			DBG_MSG("\n");
+		}
+	return MV_OK;
+}
+EXPORT_SYMBOL(mv_pp2x_cls_hw_lkp_dump);
+
+/*----------------------------------------------------------------------*/
+
+int mv_pp2x_cls_c2_sw_words_dump(struct mv_pp2x_cls_c2_entry *c2)
+{
+	int i;
+
+	if (mv_pp2x_ptr_validate(c2) == MV_ERROR)
+		return MV_ERROR;
+
+	/* TODO check size */
+	/* hw entry id */
+	DBG_MSG("[0x%3.3x] ", c2->index);
+
+	i = MVPP2_CLS_C2_TCAM_WORDS - 1;
+
+	while (i >= 0)
+		DBG_MSG("%4.4x ", (c2->tcam.words[i--]) & 0xFFFF);
+
+	DBG_MSG("| ");
+
+	DBG_MSG("%8.8x %8.8x %8.8x %8.8x %8.8x", c2->sram.words[4],
+		c2->sram.words[3], c2->sram.words[2], c2->sram.words[1],
+		c2->sram.words[0]);
+
+	/*tcam inValid bit*/
+	DBG_MSG(" %s", (c2->inv == 1) ? "[inv]" : "[valid]");
+
+	DBG_MSG("\n        ");
+
+	i = MVPP2_CLS_C2_TCAM_WORDS - 1;
+
+	while (i >= 0)
+		DBG_MSG("%4.4x ", ((c2->tcam.words[i--] >> 16)  & 0xFFFF));
+
+	DBG_MSG("\n");
+
+	return MV_OK;
+}
+
+/*----------------------------------------------------------------------*/
+int mv_pp2x_cls_c2_hit_cntr_dump(struct mv_pp2x_hw *hw)
+{
+	int i;
+	unsigned int cnt;
+
+	for (i = 0; i < MVPP2_CLS_C2_TCAM_SIZE; i++) {
+		mv_pp2x_cls_c2_hit_cntr_read(hw, i, &cnt);
+		if (cnt != 0)
+			DBG_MSG("INDEX: 0x%8.8X	VAL: 0x%8.8X\n", i, cnt);
+	}
+	return MV_OK;
+}
+EXPORT_SYMBOL(mv_pp2x_cls_c2_hit_cntr_dump);
+
+/*----------------------------------------------------------------------*/
+
+int mv_pp2x_cls_c2_regs_dump(struct mv_pp2x_hw *hw)
+{
+	int i;
+	char reg_name[100];
+
+	mv_pp2x_print_reg(hw, MVPP2_CLS2_TCAM_IDX_REG,
+			  "MVPP2_CLS2_TCAM_IDX_REG");
+
+	for (i = 0; i < MVPP2_CLS_C2_TCAM_WORDS; i++) {
+		printk(reg_name, "MVPP2_CLS2_TCAM_DATA_%d_REG", i);
+		mv_pp2x_print_reg(hw, MVPP2_CLS2_TCAM_DATA_REG(i), reg_name);
+	}
+
+	mv_pp2x_print_reg(hw, MVPP2_CLS2_TCAM_INV_REG,
+			  "MVPP2_CLS2_TCAM_INV_REG");
+	mv_pp2x_print_reg(hw, MVPP2_CLS2_ACT_DATA_REG,
+			  "MVPP2_CLS2_ACT_DATA_REG");
+	mv_pp2x_print_reg(hw, MVPP2_CLS2_DSCP_PRI_INDEX_REG,
+			  "MVPP2_CLS2_DSCP_PRI_INDEX_REG");
+	mv_pp2x_print_reg(hw, MVPP2_CLS2_QOS_TBL_REG,
+			  "MVPP2_CLS2_QOS_TBL_REG");
+	mv_pp2x_print_reg(hw, MVPP2_CLS2_ACT_REG,
+			  "MVPP2_CLS2_ACT_REG");
+	mv_pp2x_print_reg(hw, MVPP2_CLS2_ACT_QOS_ATTR_REG,
+			  "MVPP2_CLS2_ACT_QOS_ATTR_REG");
+	mv_pp2x_print_reg(hw, MVPP2_CLS2_ACT_HWF_ATTR_REG,
+			  "MVPP2_CLS2_ACT_HWF_ATTR_REG");
+	mv_pp2x_print_reg(hw, MVPP2_CLS2_ACT_DUP_ATTR_REG,
+			  "MVPP2_CLS2_ACT_DUP_ATTR_REG");
+	mv_pp2x_print_reg(hw, MVPP22_CLS2_ACT_SEQ_ATTR_REG,
+			  "MVPP22_CLS2_ACT_SEQ_ATTR_REG");
+	return MV_OK;
+}
+EXPORT_SYMBOL(mv_pp2x_cls_c2_regs_dump);
+
+int mv_pp22_rss_hw_dump(struct mv_pp2x_hw *hw)
+{
+	int tbl_id, tbl_line;
+
+	struct mv_pp22_rss_entry rss_entry;
+
+	memset(&rss_entry, 0, sizeof(struct mv_pp22_rss_entry));
+
+	rss_entry.sel = MVPP22_RSS_ACCESS_TBL;
+
+	for (tbl_id = 0; tbl_id < MVPP22_RSS_TBL_NUM; tbl_id++) {
+		DBG_MSG("\n-------- RSS TABLE %d-----------\n", tbl_id);
+		DBG_MSG("HASH	QUEUE	WIDTH\n");
+
+		for (tbl_line = 0; tbl_line < MVPP22_RSS_TBL_LINE_NUM;
+			tbl_line++) {
+			rss_entry.u.entry.tbl_id = tbl_id;
+			rss_entry.u.entry.tbl_line = tbl_line;
+			mv_pp22_rss_tbl_entry_get(hw, &rss_entry);
+			DBG_MSG("0x%2.2x\t", rss_entry.u.entry.tbl_line);
+			DBG_MSG("0x%2.2x\t", rss_entry.u.entry.rxq);
+			DBG_MSG("0x%2.2x", rss_entry.u.entry.width);
+			DBG_MSG("\n");
+		}
+	}
+	return MV_OK;
+}
+EXPORT_SYMBOL(mv_pp22_rss_hw_dump);
+
+
+
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_debug.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_debug.h
index dcc6287..5ecc123 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_debug.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_debug.h
@@ -56,7 +56,6 @@
 /* This macro returns absolute value                                        */
 #define MV_ABS(number)  (((int)(number) < 0) ? -(int)(number) : (int)(number))
 
-
 void mv_pp2x_print_reg(struct mv_pp2x_hw *hw, unsigned int reg_addr,
 			   char *reg_name);
 void mv_pp2x_print_reg2(struct mv_pp2x_hw *hw, unsigned int reg_addr,
@@ -109,7 +108,6 @@ int mv_pp2x_wrap_cos_mode_set(struct mv_pp2x_port *port,
 int mv_pp2x_debug_param_set(u32 param);
 int mv_pp2x_debug_param_get(void);
 
-
 void mv_pp2x_bm_queue_map_dump_all(struct mv_pp2x_hw *hw);
 
 int mv_pp2x_cls_c2_qos_prio_set(struct mv_pp2x_cls_c2_qos_entry *qos, u8 pri);
@@ -130,6 +128,23 @@ int mv_pp2x_cls_c2_queue_set(struct mv_pp2x_cls_c2_entry *c2, int cmd,
 int mv_pp2x_cls_c2_qos_dscp_hw_dump(struct mv_pp2x_hw *hw);
 int mv_pp2x_cls_c2_qos_prio_hw_dump(struct mv_pp2x_hw *hw);
 
-
+void mv_pp2x_pp2_basic_print(struct platform_device *pdev,
+			     struct mv_pp2x *priv);
+void mv_pp2x_pp2_port_print(struct mv_pp2x_port *port);
+void mv_pp2x_pp2_ports_print(struct mv_pp2x *priv);
+
+int mv_pp2x_cls_hw_lkp_print(struct mv_pp2x_hw *hw, int lkpid, int way);
+int mv_pp2x_cls_sw_flow_dump(struct mv_pp2x_cls_flow_entry *fe);
+int mv_pp2x_cls_hw_regs_dump(struct mv_pp2x_hw *hw);
+int mv_pp2x_cls_hw_flow_dump(struct mv_pp2x_hw *hw);
+int mv_pp2x_cls_hw_flow_hits_dump(struct mv_pp2x_hw *hw);
+int mv_pp2x_cls_hw_lkp_hits_dump(struct mv_pp2x_hw *hw);
+int mv_pp2x_cls_sw_lkp_dump(struct mv_pp2x_cls_lookup_entry *lkp);
+int mv_pp2x_cls_hw_lkp_dump(struct mv_pp2x_hw *hw);
+
+int mv_pp2x_cls_c2_sw_words_dump(struct mv_pp2x_cls_c2_entry *c2);
+int mv_pp2x_cls_c2_hit_cntr_dump(struct mv_pp2x_hw *hw);
+int mv_pp2x_cls_c2_regs_dump(struct mv_pp2x_hw *hw);
+int mv_pp22_rss_hw_dump(struct mv_pp2x_hw *hw);
 
 #endif /* _MVPP2_DEBUG_H_ */
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
index 6df70ae..ef8f4c0 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
@@ -4451,38 +4451,6 @@ int mv_pp2x_cls_hw_lkp_write(struct mv_pp2x_hw *hw, int lkpid,
 }
 EXPORT_SYMBOL(mv_pp2x_cls_hw_lkp_write);
 
-int mv_pp2x_cls_hw_lkp_print(struct mv_pp2x_hw *hw, int lkpid, int way)
-{
-	unsigned int uint32bit;
-	int int32bit;
-	struct mv_pp2x_cls_lookup_entry lkp;
-
-	if (mv_pp2x_range_validate(way, 0, WAY_MAX) == MV_ERROR)
-		return MV_ERROR;
-
-	if (mv_pp2x_range_validate(lkpid, 0,
-	    MVPP2_CLS_FLOWS_TBL_SIZE) == MV_ERROR)
-		return MV_ERROR;
-
-	mv_pp2x_cls_hw_lkp_read(hw, lkpid, way, &lkp);
-
-	DBG_MSG(" 0x%2.2x  %1.1d\t", lkp.lkpid, lkp.way);
-	mv_pp2x_cls_sw_lkp_rxq_get(&lkp, &int32bit);
-	DBG_MSG("0x%2.2x\t", int32bit);
-	mv_pp2x_cls_sw_lkp_en_get(&lkp, &int32bit);
-	DBG_MSG("%1.1d\t", int32bit);
-	mv_pp2x_cls_sw_lkp_flow_get(&lkp, &int32bit);
-	DBG_MSG("0x%3.3x\t", int32bit);
-	mv_pp2x_cls_sw_lkp_mod_get(&lkp, &int32bit);
-	DBG_MSG(" 0x%2.2x\t", int32bit);
-	mv_pp2x_cls_hw_lkp_hit_get(hw, lkp.lkpid, way, &uint32bit);
-	DBG_MSG(" 0x%8.8x\n", uint32bit);
-	DBG_MSG("\n");
-
-	return MV_OK;
-}
-EXPORT_SYMBOL(mv_pp2x_cls_hw_lkp_print);
-
 /*----------------------------------------------------------------------*/
 
 int mv_pp2x_cls_sw_lkp_rxq_get(struct mv_pp2x_cls_lookup_entry *lkp, int *rxq)
@@ -4662,6 +4630,7 @@ int mv_pp2x_cls_sw_flow_hek_get(struct mv_pp2x_cls_flow_entry *fe,
 
 	return MV_OK;
 }
+EXPORT_SYMBOL(mv_pp2x_cls_sw_flow_hek_get);
 
 /*----------------------------------------------------------------------*/
 
@@ -4684,6 +4653,7 @@ int mv_pp2x_cls_sw_flow_port_get(struct mv_pp2x_cls_flow_entry *fe,
 
 	return MV_OK;
 }
+EXPORT_SYMBOL(mv_pp2x_cls_sw_flow_port_get);
 
 int mv_pp2x_cls_sw_flow_port_set(struct mv_pp2x_cls_flow_entry *fe,
 				 int type, int portid)
@@ -4822,6 +4792,7 @@ int mv_pp2x_cls_sw_flow_engine_get(struct mv_pp2x_cls_flow_entry *fe,
 
 	return MV_OK;
 }
+EXPORT_SYMBOL(mv_pp2x_cls_sw_flow_engine_get);
 
 /*----------------------------------------------------------------------*/
 int mv_pp2x_cls_sw_flow_engine_set(struct mv_pp2x_cls_flow_entry *fe,
@@ -4865,6 +4836,7 @@ int mv_pp2x_cls_sw_flow_extra_get(struct mv_pp2x_cls_flow_entry *fe,
 
 	return MV_OK;
 }
+EXPORT_SYMBOL(mv_pp2x_cls_sw_flow_extra_get);
 
 int mv_pp2x_cls_sw_flow_extra_set(struct mv_pp2x_cls_flow_entry *fe,
 				  int type, int prio)
@@ -4890,147 +4862,14 @@ int mv_pp2x_cls_sw_flow_extra_set(struct mv_pp2x_cls_flow_entry *fe,
 }
 EXPORT_SYMBOL(mv_pp2x_cls_sw_flow_extra_set);
 
-/*----------------------------------------------------------------------*/
-
-int mv_pp2x_cls_sw_flow_dump(struct mv_pp2x_cls_flow_entry *fe)
-{
-	int	int32bit_1, int32bit_2, i;
-	int	fieldsArr[MVPP2_CLS_FLOWS_TBL_FIELDS_MAX];
-	int	status = MV_OK;
-
-	if (mv_pp2x_ptr_validate(fe) == MV_ERROR)
-		return MV_ERROR;
-
-	DBG_MSG(
-	"INDEX: F[0] F[1] F[2] F[3] PRT[T  ID] ENG LAST LKP_TYP  PRIO\n");
-
-	/*index*/
-	DBG_MSG("0x%3.3x  ", fe->index);
-
-	/*filed[0] filed[1] filed[2] filed[3]*/
-	status |= mv_pp2x_cls_sw_flow_hek_get(fe, &int32bit_1, fieldsArr);
-
-	for (i = 0 ; i < MVPP2_CLS_FLOWS_TBL_FIELDS_MAX; i++)
-		if (i < int32bit_1)
-			DBG_MSG("0x%2.2x ", fieldsArr[i]);
-		else
-			DBG_MSG(" NA  ");
-
-	/*port_type port_id*/
-	status |= mv_pp2x_cls_sw_flow_port_get(fe, &int32bit_1, &int32bit_2);
-	DBG_MSG("[%1d  0x%3.3x]  ", int32bit_1, int32bit_2);
-
-	/* engine_num last_bit*/
-	status |= mv_pp2x_cls_sw_flow_engine_get(fe, &int32bit_1, &int32bit_2);
-	DBG_MSG("%1d   %1d    ", int32bit_1, int32bit_2);
-
-	/* lookup_type priority*/
-	status |= mv_pp2x_cls_sw_flow_extra_get(fe, &int32bit_1, &int32bit_2);
-	DBG_MSG("0x%2.2x    0x%2.2x", int32bit_1, int32bit_2);
-
-	DBG_MSG("\n");
-	DBG_MSG("\n");
-	DBG_MSG("       PPPEO   VLAN   MACME   UDF7   SELECT SEQ_CTRL\n");
-	DBG_MSG("         %1d      %1d      %1d       %1d      %1d      %1d\n",
-			(fe->data[0] & MVPP2_FLOW_PPPOE_MASK) >>
-					MVPP2_FLOW_PPPOE,
-			(fe->data[0] & MVPP2_FLOW_VLAN_MASK) >>
-					MVPP2_FLOW_VLAN,
-			(fe->data[0] & MVPP2_FLOW_MACME_MASK) >>
-					MVPP2_FLOW_MACME,
-			(fe->data[0] & MVPP2_FLOW_UDF7_MASK) >>
-					MVPP2_FLOW_UDF7,
-			(fe->data[0] & MVPP2_FLOW_PORT_ID_SEL_MASK) >>
-					MVPP2_FLOW_PORT_ID_SEL,
-			(fe->data[1] & MVPP2_FLOW_SEQ_CTRL_MASK) >>
-					MVPP2_FLOW_SEQ_CTRL);
-	DBG_MSG("\n");
-
-	return MV_OK;
-}
-EXPORT_SYMBOL(mv_pp2x_cls_sw_flow_dump);
-
-/*----------------------------------------------------------------------*/
 
 /*----------------------------------------------------------------------*/
 /*	Classifier Top Public length change table APIs			*/
 /*----------------------------------------------------------------------*/
 
 /*----------------------------------------------------------------------*/
-/*	additional cls debug APIs					*/
-/*----------------------------------------------------------------------*/
-
-int mv_pp2x_cls_hw_regs_dump(struct mv_pp2x_hw *hw)
-{
-	int i = 0;
-	char reg_name[100];
-
-	mv_pp2x_print_reg(hw, MVPP2_CLS_MODE_REG,
-			  "MVPP2_CLS_MODE_REG");
-	mv_pp2x_print_reg(hw, MVPP2_CLS_PORT_WAY_REG,
-			  "MVPP2_CLS_PORT_WAY_REG");
-	mv_pp2x_print_reg(hw, MVPP2_CLS_LKP_INDEX_REG,
-			  "MVPP2_CLS_LKP_INDEX_REG");
-	mv_pp2x_print_reg(hw, MVPP2_CLS_LKP_TBL_REG,
-			  "MVPP2_CLS_LKP_TBL_REG");
-	mv_pp2x_print_reg(hw, MVPP2_CLS_FLOW_INDEX_REG,
-			  "MVPP2_CLS_FLOW_INDEX_REG");
-
-	mv_pp2x_print_reg(hw, MVPP2_CLS_FLOW_TBL0_REG,
-			  "MVPP2_CLS_FLOW_TBL0_REG");
-	mv_pp2x_print_reg(hw, MVPP2_CLS_FLOW_TBL1_REG,
-			  "MVPP2_CLS_FLOW_TBL1_REG");
-	mv_pp2x_print_reg(hw, MVPP2_CLS_FLOW_TBL2_REG,
-			  "MVPP2_CLS_FLOW_TBL2_REG");
-
-	mv_pp2x_print_reg(hw, MVPP2_CLS_PORT_SPID_REG,
-			  "MVPP2_CLS_PORT_SPID_REG");
-
-	for (i = 0; i < MVPP2_CLS_SPID_UNI_REGS; i++) {
-		sprintf(reg_name, "MVPP2_CLS_SPID_UNI_%d_REG", i);
-		mv_pp2x_print_reg(hw, (MVPP2_CLS_SPID_UNI_BASE_REG + (4 * i)),
-				  reg_name);
-	}
-	for (i = 0; i < MVPP2_CLS_GEM_VIRT_REGS_NUM; i++) {
-		/* indirect access */
-		mv_pp2x_write(hw, MVPP2_CLS_GEM_VIRT_INDEX_REG, i);
-		sprintf(reg_name, "MVPP2_CLS_GEM_VIRT_%d_REG", i);
-		mv_pp2x_print_reg(hw, MVPP2_CLS_GEM_VIRT_REG, reg_name);
-	}
-	for (i = 0; i < MVPP2_CLS_UDF_BASE_REGS; i++)	{
-		sprintf(reg_name, "MVPP2_CLS_UDF_REG_%d_REG", i);
-		mv_pp2x_print_reg(hw, MVPP2_CLS_UDF_REG(i), reg_name);
-	}
-	for (i = 0; i < 16; i++) {
-		sprintf(reg_name, "MVPP2_CLS_MTU_%d_REG", i);
-		mv_pp2x_print_reg(hw, MVPP2_CLS_MTU_REG(i), reg_name);
-	}
-	for (i = 0; i < MVPP2_MAX_PORTS; i++) {
-		sprintf(reg_name, "MVPP2_CLS_OVER_RXQ_LOW_%d_REG", i);
-		mv_pp2x_print_reg(hw, MVPP2_CLS_OVERSIZE_RXQ_LOW_REG(i),
-				reg_name);
-	}
-	for (i = 0; i < MVPP2_MAX_PORTS; i++) {
-		sprintf(reg_name, "MVPP2_CLS_SWFWD_P2HQ_%d_REG", i);
-		mv_pp2x_print_reg(hw, MVPP2_CLS_SWFWD_P2HQ_REG(i), reg_name);
-	}
-
-	mv_pp2x_print_reg(hw, MVPP2_CLS_SWFWD_PCTRL_REG,
-			  "MVPP2_CLS_SWFWD_PCTRL_REG");
-	mv_pp2x_print_reg(hw, MVPP2_CLS_SEQ_SIZE_REG,
-			  "MVPP2_CLS_SEQ_SIZE_REG");
-
-	for (i = 0; i < MVPP2_MAX_PORTS; i++) {
-		sprintf(reg_name, "MVPP2_CLS_PCTRL_%d_REG", i);
-		mv_pp2x_print_reg(hw, MV_PP2_CLS_PCTRL_REG(i), reg_name);
-	}
-
-	return MV_OK;
-}
-EXPORT_SYMBOL(mv_pp2x_cls_hw_regs_dump);
-/*----------------------------------------------------------------------*/
-static int mv_pp2x_cls_hw_flow_hit_get(struct mv_pp2x_hw *hw,
-				       int index,  unsigned int *cnt)
+int mv_pp2x_cls_hw_flow_hit_get(struct mv_pp2x_hw *hw,
+				int index,  unsigned int *cnt)
 {
 	if (mv_pp2x_range_validate(index, 0,
 	    MVPP2_CLS_FLOWS_TBL_SIZE) == MV_ERROR)
@@ -5041,12 +4880,11 @@ static int mv_pp2x_cls_hw_flow_hit_get(struct mv_pp2x_hw *hw,
 
 	if (cnt)
 		*cnt = mv_pp2x_read(hw, MVPP2_CLS_FLOW_TBL_HIT_REG);
-	else
-		DBG_MSG("HITS = %d\n", mv_pp2x_read(hw,
-			MVPP2_CLS_FLOW_TBL_HIT_REG));
 
 	return MV_OK;
 }
+EXPORT_SYMBOL(mv_pp2x_cls_hw_flow_hit_get);
+
 /*----------------------------------------------------------------------*/
 
 int mv_pp2x_cls_hw_lkp_hit_get(struct mv_pp2x_hw *hw, int lkpid, int way,
@@ -5064,138 +4902,9 @@ int mv_pp2x_cls_hw_lkp_hit_get(struct mv_pp2x_hw *hw, int lkpid, int way,
 
 	if (cnt)
 		*cnt = mv_pp2x_read(hw, MVPP2_CLS_LKP_TBL_HIT_REG);
-	else
-		DBG_MSG("HITS: %d\n", mv_pp2x_read(hw,
-			MVPP2_CLS_LKP_TBL_HIT_REG));
-
-	return MV_OK;
-}
-/*----------------------------------------------------------------------*/
-
-int mv_pp2x_cls_hw_flow_dump(struct mv_pp2x_hw *hw)
-{
-	int index;
-
-	struct mv_pp2x_cls_flow_entry fe;
-
-	for (index = 0; index < MVPP2_CLS_FLOWS_TBL_SIZE ; index++) {
-		mv_pp2x_cls_hw_flow_read(hw, index, &fe);
-		mv_pp2x_cls_sw_flow_dump(&fe);
-		mv_pp2x_cls_hw_flow_hit_get(hw, index, NULL);
-		DBG_MSG("-------------------------------------------------\n");
-	}
-	return MV_OK;
-}
-EXPORT_SYMBOL(mv_pp2x_cls_hw_flow_dump);
-
-/*----------------------------------------------------------------------*/
-/*PPv2.1 new counters MAS 3.20*/
-int mv_pp2x_cls_hw_flow_hits_dump(struct mv_pp2x_hw *hw)
-{
-	int index;
-	unsigned int cnt;
-	struct mv_pp2x_cls_flow_entry fe;
-
-	for (index = 0; index < MVPP2_CLS_FLOWS_TBL_SIZE ; index++) {
-		mv_pp2x_cls_hw_flow_hit_get(hw, index, &cnt);
-		if (cnt != 0) {
-			mv_pp2x_cls_hw_flow_read(hw, index, &fe);
-			mv_pp2x_cls_sw_flow_dump(&fe);
-			DBG_MSG("HITS = %d\n", cnt);
-			DBG_MSG("\n");
-		}
-	}
-
-	return MV_OK;
-}
-EXPORT_SYMBOL(mv_pp2x_cls_hw_flow_hits_dump);
-
-/*----------------------------------------------------------------------*/
-/*PPv2.1 new counters MAS 3.20*/
-int mv_pp2x_cls_hw_lkp_hits_dump(struct mv_pp2x_hw *hw)
-{
-	int index, way, entryInd;
-	unsigned int cnt;
-
-	DBG_MSG("< ID  WAY >:	HITS\n");
-	for (index = 0; index < MVPP2_CLS_LKP_TBL_SIZE ; index++)
-		for (way = 0; way < 2 ; way++)	{
-			entryInd = (way << MVPP2_CLS_LKP_INDEX_WAY_OFFS) |
-				index;
-			mv_pp2x_cls_hw_lkp_hit_get(hw, index, way,  &cnt);
-			if (cnt != 0)
-				DBG_MSG(" 0x%2.2x  %1.1d\t0x%8.8x\n",
-					index, way, cnt);
-	}
-	return MV_OK;
-}
-EXPORT_SYMBOL(mv_pp2x_cls_hw_lkp_hits_dump);
-
-/*----------------------------------------------------------------------*/
-int mv_pp2x_cls_sw_lkp_dump(struct mv_pp2x_cls_lookup_entry *lkp)
-{
-	int int32bit;
-	int status = 0;
-
-	if (mv_pp2x_ptr_validate(lkp) == MV_ERROR)
-		return MV_ERROR;
-
-	DBG_MSG("< ID  WAY >:	RXQ	EN	FLOW	MODE_BASE\n");
-
-	/* id */
-	DBG_MSG(" 0x%2.2x  %1.1d\t", lkp->lkpid, lkp->way);
-
-	/*rxq*/
-	status |= mv_pp2x_cls_sw_lkp_rxq_get(lkp, &int32bit);
-	DBG_MSG("0x%2.2x\t", int32bit);
-
-	/*enabe bit*/
-	status |= mv_pp2x_cls_sw_lkp_en_get(lkp, &int32bit);
-	DBG_MSG("%1.1d\t", int32bit);
-
-	/*flow*/
-	status |= mv_pp2x_cls_sw_lkp_flow_get(lkp, &int32bit);
-	DBG_MSG("0x%3.3x\t", int32bit);
-
-	/*mode*/
-	status |= mv_pp2x_cls_sw_lkp_mod_get(lkp, &int32bit);
-	DBG_MSG(" 0x%2.2x\t", int32bit);
-
-	DBG_MSG("\n");
-
-	return MV_OK;
-}
-EXPORT_SYMBOL(mv_pp2x_cls_sw_lkp_dump);
-
-int mv_pp2x_cls_hw_lkp_dump(struct mv_pp2x_hw *hw)
-{
-	int index, way, int32bit, ind;
-	unsigned int uint32bit;
-
-	struct mv_pp2x_cls_lookup_entry lkp;
-
-	DBG_MSG("< ID  WAY >:	RXQ	EN	FLOW	MODE_BASE  HITS\n");
-	for (index = 0; index < MVPP2_CLS_LKP_TBL_SIZE ; index++)
-		for (way = 0; way < 2 ; way++)	{
-			ind = (way << MVPP2_CLS_LKP_INDEX_WAY_OFFS) | index;
-			mv_pp2x_cls_hw_lkp_read(hw, index, way, &lkp);
-			DBG_MSG(" 0x%2.2x  %1.1d\t", lkp.lkpid, lkp.way);
-			mv_pp2x_cls_sw_lkp_rxq_get(&lkp, &int32bit);
-			DBG_MSG("0x%2.2x\t", int32bit);
-			mv_pp2x_cls_sw_lkp_en_get(&lkp, &int32bit);
-			DBG_MSG("%1.1d\t", int32bit);
-			mv_pp2x_cls_sw_lkp_flow_get(&lkp, &int32bit);
-			DBG_MSG("0x%3.3x\t", int32bit);
-			mv_pp2x_cls_sw_lkp_mod_get(&lkp, &int32bit);
-			DBG_MSG(" 0x%2.2x\t", int32bit);
-			mv_pp2x_cls_hw_lkp_hit_get(hw, index, way, &uint32bit);
-			DBG_MSG(" 0x%8.8x\n", uint32bit);
-			DBG_MSG("\n");
 
-		}
 	return MV_OK;
 }
-EXPORT_SYMBOL(mv_pp2x_cls_hw_lkp_dump);
 
 /*----------------------------------------------------------------------*/
 /*	Classifier C2 engine QoS table Public APIs			*/
@@ -5385,44 +5094,6 @@ int mv_pp2x_cls_c2_hw_read(struct mv_pp2x_hw *hw, int index,
 	return MV_OK;
 }
 EXPORT_SYMBOL(mv_pp2x_cls_c2_hw_read);
-/*----------------------------------------------------------------------*/
-
-int mv_pp2x_cls_c2_sw_words_dump(struct mv_pp2x_cls_c2_entry *c2)
-{
-	int i;
-
-	if (mv_pp2x_ptr_validate(c2) == MV_ERROR)
-		return MV_ERROR;
-
-	/* TODO check size */
-	/* hw entry id */
-	DBG_MSG("[0x%3.3x] ", c2->index);
-
-	i = MVPP2_CLS_C2_TCAM_WORDS - 1;
-
-	while (i >= 0)
-		DBG_MSG("%4.4x ", (c2->tcam.words[i--]) & 0xFFFF);
-
-	DBG_MSG("| ");
-
-	DBG_MSG("%8.8x %8.8x %8.8x %8.8x %8.8x", c2->sram.words[4],
-		c2->sram.words[3], c2->sram.words[2], c2->sram.words[1],
-		c2->sram.words[0]);
-
-	/*tcam inValid bit*/
-	DBG_MSG(" %s", (c2->inv == 1) ? "[inv]" : "[valid]");
-
-	DBG_MSG("\n        ");
-
-	i = MVPP2_CLS_C2_TCAM_WORDS - 1;
-
-	while (i >= 0)
-		DBG_MSG("%4.4x ", ((c2->tcam.words[i--] >> 16)  & 0xFFFF));
-
-	DBG_MSG("\n");
-
-	return MV_OK;
-}
 
 /*----------------------------------------------------------------------*/
 
@@ -5476,7 +5147,7 @@ int mv_pp2x_cls_c2_hit_cntr_clear_all(struct mv_pp2x_hw *hw)
 
 	while (mv_pp2x_cls_c2_hit_cntr_is_busy(hw))
 		if (iter++ >= RETRIES_EXCEEDED) {
-			DBG_MSG("%s:Error - retries exceeded.\n", __func__);
+			pr_debug("%s:Error - retries exceeded.\n", __func__);
 			return MV_ERROR;
 		}
 
@@ -5497,66 +5168,11 @@ int mv_pp2x_cls_c2_hit_cntr_read(struct mv_pp2x_hw *hw, int index, u32 *cntr)
 
 	if (cntr)
 		*cntr = value;
-	else
-		DBG_MSG("INDEX: 0x%8.8X	VAL: 0x%8.8X\n", index, value);
 
 	return MV_OK;
 }
 EXPORT_SYMBOL(mv_pp2x_cls_c2_hit_cntr_read);
 
-
-/*----------------------------------------------------------------------*/
-int mv_pp2x_cls_c2_hit_cntr_dump(struct mv_pp2x_hw *hw)
-{
-	int i;
-	unsigned int cnt;
-
-	for (i = 0; i < MVPP2_CLS_C2_TCAM_SIZE; i++) {
-		mv_pp2x_cls_c2_hit_cntr_read(hw, i, &cnt);
-		if (cnt != 0)
-			DBG_MSG("INDEX: 0x%8.8X	VAL: 0x%8.8X\n", i, cnt);
-	}
-	return MV_OK;
-}
-EXPORT_SYMBOL(mv_pp2x_cls_c2_hit_cntr_dump);
-
-/*----------------------------------------------------------------------*/
-
-int mv_pp2x_cls_c2_regs_dump(struct mv_pp2x_hw *hw)
-{
-	int i;
-	char reg_name[100];
-
-	mv_pp2x_print_reg(hw, MVPP2_CLS2_TCAM_IDX_REG,
-			  "MVPP2_CLS2_TCAM_IDX_REG");
-
-	for (i = 0; i < MVPP2_CLS_C2_TCAM_WORDS; i++) {
-		printk(reg_name, "MVPP2_CLS2_TCAM_DATA_%d_REG", i);
-		mv_pp2x_print_reg(hw, MVPP2_CLS2_TCAM_DATA_REG(i), reg_name);
-	}
-
-	mv_pp2x_print_reg(hw, MVPP2_CLS2_TCAM_INV_REG,
-			  "MVPP2_CLS2_TCAM_INV_REG");
-	mv_pp2x_print_reg(hw, MVPP2_CLS2_ACT_DATA_REG,
-			  "MVPP2_CLS2_ACT_DATA_REG");
-	mv_pp2x_print_reg(hw, MVPP2_CLS2_DSCP_PRI_INDEX_REG,
-			  "MVPP2_CLS2_DSCP_PRI_INDEX_REG");
-	mv_pp2x_print_reg(hw, MVPP2_CLS2_QOS_TBL_REG,
-			  "MVPP2_CLS2_QOS_TBL_REG");
-	mv_pp2x_print_reg(hw, MVPP2_CLS2_ACT_REG,
-			  "MVPP2_CLS2_ACT_REG");
-	mv_pp2x_print_reg(hw, MVPP2_CLS2_ACT_QOS_ATTR_REG,
-			  "MVPP2_CLS2_ACT_QOS_ATTR_REG");
-	mv_pp2x_print_reg(hw, MVPP2_CLS2_ACT_HWF_ATTR_REG,
-			  "MVPP2_CLS2_ACT_HWF_ATTR_REG");
-	mv_pp2x_print_reg(hw, MVPP2_CLS2_ACT_DUP_ATTR_REG,
-			  "MVPP2_CLS2_ACT_DUP_ATTR_REG");
-	mv_pp2x_print_reg(hw, MVPP22_CLS2_ACT_SEQ_ATTR_REG,
-			  "MVPP22_CLS2_ACT_SEQ_ATTR_REG");
-	return MV_OK;
-}
-EXPORT_SYMBOL(mv_pp2x_cls_c2_regs_dump);
-
 void mv_pp2x_cls_flow_port_add(struct mv_pp2x_hw *hw, int index, int port_id)
 {
 	u32 data;
@@ -6489,34 +6105,6 @@ int mv_pp22_rss_tbl_entry_get(struct mv_pp2x_hw *hw,
 	return 0;
 }
 
-int mv_pp22_rss_hw_dump(struct mv_pp2x_hw *hw)
-{
-	int tbl_id, tbl_line;
-
-	struct mv_pp22_rss_entry rss_entry;
-
-	memset(&rss_entry, 0, sizeof(struct mv_pp22_rss_entry));
-
-	rss_entry.sel = MVPP22_RSS_ACCESS_TBL;
-
-	for (tbl_id = 0; tbl_id < MVPP22_RSS_TBL_NUM; tbl_id++) {
-		DBG_MSG("\n-------- RSS TABLE %d-----------\n", tbl_id);
-		DBG_MSG("HASH	QUEUE	WIDTH\n");
-
-		for (tbl_line = 0; tbl_line < MVPP22_RSS_TBL_LINE_NUM;
-			tbl_line++) {
-			rss_entry.u.entry.tbl_id = tbl_id;
-			rss_entry.u.entry.tbl_line = tbl_line;
-			mv_pp22_rss_tbl_entry_get(hw, &rss_entry);
-			DBG_MSG("0x%2.2x\t", rss_entry.u.entry.tbl_line);
-			DBG_MSG("0x%2.2x\t", rss_entry.u.entry.rxq);
-			DBG_MSG("0x%2.2x", rss_entry.u.entry.width);
-			DBG_MSG("\n");
-		}
-	}
-	return MV_OK;
-}
-EXPORT_SYMBOL(mv_pp22_rss_hw_dump);
 
 /* The function allocate a rss table for each phisical rxq,
  * they have same cos priority
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
index cc1f88a..4202df1 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
@@ -527,12 +527,12 @@ static inline void mv_pp2x_txdesc_phys_addr_set(enum mvppv2_version pp2_ver,
 int mv_pp2x_prs_hw_read(struct mv_pp2x_hw *hw, struct mv_pp2x_prs_entry *pe);
 
 int mv_pp2x_prs_default_init(struct platform_device *pdev,
-				  struct mv_pp2x_hw *hw);
+			     struct mv_pp2x_hw *hw);
 void mv_pp2x_prs_mac_promisc_set(struct mv_pp2x_hw *hw, int port, bool add);
 void mv_pp2x_prs_mac_multi_set(struct mv_pp2x_hw *hw, int port, int index,
-				      bool add);
+			       bool add);
 int mv_pp2x_prs_mac_da_accept(struct mv_pp2x_hw *hw, int port,
-				      const u8 *da, bool add);
+			      const u8 *da, bool add);
 int mv_pp2x_prs_def_flow(struct mv_pp2x_port *port);
 int mv_pp2x_prs_flow_set(struct mv_pp2x_port *port);
 void mv_pp2x_prs_mcast_del_all(struct mv_pp2x_hw *hw, int port);
@@ -546,11 +546,11 @@ int mv_pp2x_prs_mac_da_accept(struct mv_pp2x_hw *hw, int port,
 void mv_pp2x_cls_config(struct mv_pp2x_hw *hw);
 void mv_pp2x_cls_oversize_rxq_set(struct mv_pp2x_port *port);
 void mv_pp2x_cls_lookup_read(struct mv_pp2x_hw *hw, int lkpid, int way,
-				   struct mv_pp2x_cls_lookup_entry *le);
+			     struct mv_pp2x_cls_lookup_entry *le);
 void mv_pp2x_cls_flow_tbl_temp_copy(struct mv_pp2x_hw *hw, int lkpid,
-					    int *temp_flow_idx);
+				    int *temp_flow_idx);
 void mv_pp2x_cls_lkp_flow_set(struct mv_pp2x_hw *hw, int lkpid, int way,
-				    int flow_idx);
+			      int flow_idx);
 void mv_pp2x_cls_flow_port_add(struct mv_pp2x_hw *hw, int index, int port_id);
 void mv_pp2x_cls_flow_port_del(struct mv_pp2x_hw *hw, int index, int port_id);
 
@@ -559,36 +559,36 @@ void mv_pp2x_cls_lkp_flow_set(struct mv_pp2x_hw *hw, int lkpid, int way,
 void mv_pp21_gmac_max_rx_size_set(struct mv_pp2x_port *port);
 
 int mv_pp2x_txq_pend_desc_num_get(struct mv_pp2x_port *port,
-					    struct mv_pp2x_tx_queue *txq);
+				  struct mv_pp2x_tx_queue *txq);
 u32 mv_pp2x_txq_desc_csum(int l3_offs, int l3_proto,
-				  int ip_hdr_len, int l4_proto);
+			  int ip_hdr_len, int l4_proto);
 struct mv_pp2x_tx_desc *mv_pp2x_txq_next_desc_get(
 		struct mv_pp2x_aggr_tx_queue *aggr_txq);
 int mv_pp2x_txq_alloc_reserved_desc(struct mv_pp2x *priv,
-					    struct mv_pp2x_tx_queue *txq,
-					    int num);
+				    struct mv_pp2x_tx_queue *txq,
+				    int num);
 void mv_pp2x_aggr_txq_pend_desc_add(struct mv_pp2x_port *port, int pending);
 int mv_pp2x_aggr_desc_num_read(struct mv_pp2x *priv, int cpu);
 int mv_pp2x_aggr_desc_num_check(struct mv_pp2x *priv,
-					struct mv_pp2x_aggr_tx_queue *aggr_txq,
-					int num);
+				struct mv_pp2x_aggr_tx_queue *aggr_txq,
+				int num);
 void mv_pp2x_rxq_offset_set(struct mv_pp2x_port *port,
-				 int prxq, int offset);
+			    int prxq, int offset);
 void mv_pp2x_bm_pool_bufsize_set(struct mv_pp2x_hw *hw,
-					 struct mv_pp2x_bm_pool *bm_pool,
-					 int buf_size);
+				 struct mv_pp2x_bm_pool *bm_pool,
+				 int buf_size);
 void mv_pp2x_pool_refill(struct mv_pp2x *priv, u32 pool,
-			    dma_addr_t phys_addr, u8 *cookie);
+			 dma_addr_t phys_addr, u8 *cookie);
 
 void mv_pp21_rxq_long_pool_set(struct mv_pp2x_hw *hw,
-				     int prxq, int long_pool);
+			       int prxq, int long_pool);
 void mv_pp21_rxq_short_pool_set(struct mv_pp2x_hw *hw,
-				     int prxq, int short_pool);
+				int prxq, int short_pool);
 
 void mv_pp22_rxq_long_pool_set(struct mv_pp2x_hw *hw,
-				     int prxq, int long_pool);
+			       int prxq, int long_pool);
 void mv_pp22_rxq_short_pool_set(struct mv_pp2x_hw *hw,
-				     int prxq, int short_pool);
+				int prxq, int short_pool);
 
 void mv_pp21_port_mii_set(struct mv_pp2x_port *port);
 void mv_pp21_port_fc_adv_enable(struct mv_pp2x_port *port);
@@ -605,125 +605,128 @@ void mv_pp22_rxq_short_pool_set(struct mv_pp2x_hw *hw,
 void mv_pp21_port_reset(struct mv_pp2x_port *port);
 
 void mv_pp2x_rx_pkts_coal_set(struct mv_pp2x_port *port,
-				    struct mv_pp2x_rx_queue *rxq, u32 pkts);
+			      struct mv_pp2x_rx_queue *rxq, u32 pkts);
 void mv_pp2x_rx_time_coal_set(struct mv_pp2x_port *port,
-				   struct mv_pp2x_rx_queue *rxq, u32 usec);
+			      struct mv_pp2x_rx_queue *rxq, u32 usec);
 void mv_pp2x_tx_done_pkts_coal_set(void *arg);
 void mv_pp2x_cause_error(struct net_device *dev, int cause);
 void mv_pp2x_rx_error(struct mv_pp2x_port *port,
-			  struct mv_pp2x_rx_desc *rx_desc);
+		      struct mv_pp2x_rx_desc *rx_desc);
 void mv_pp2x_rx_csum(struct mv_pp2x_port *port, u32 status,
-			   struct sk_buff *skb);
+		     struct sk_buff *skb);
 void mv_pp21_get_mac_address(struct mv_pp2x_port *port, unsigned char *addr);
 
 int mv_pp2x_c2_init(struct platform_device *pdev, struct mv_pp2x_hw *hw);
 
 int mv_pp2x_prs_sw_sram_shift_set(struct mv_pp2x_prs_entry *pe, int shift,
-					  unsigned int op);
+				  unsigned int op);
 int mv_pp2x_prs_sw_sram_shift_get(struct mv_pp2x_prs_entry *pe, int *shift);
 int mv_pp2x_prs_sw_sram_next_lu_get(struct mv_pp2x_prs_entry *pe,
-					     unsigned int *lu);
+				    unsigned int *lu);
 int mv_pp2x_prs_sram_bit_get(struct mv_pp2x_prs_entry *pe, int bitNum,
-				   unsigned int *bit);
+			     unsigned int *bit);
 int mv_pp2x_prs_sw_sram_lu_done_get(struct mv_pp2x_prs_entry *pe,
-					      unsigned int *bit);
+				    unsigned int *bit);
 int mv_pp2x_prs_sw_sram_flowid_gen_get(struct mv_pp2x_prs_entry *pe,
-						 unsigned int *bit);
+				       unsigned int *bit);
 int mv_pp2x_prs_sw_sram_ri_get(struct mv_pp2x_prs_entry *pe,
-				       unsigned int *bits,
-				       unsigned int *enable);
+			       unsigned int *bits,
+			       unsigned int *enable);
 int mv_pp2x_prs_sw_sram_ai_get(struct mv_pp2x_prs_entry *pe,
-				       unsigned int *bits,
-				       unsigned int *enable);
+			       unsigned int *bits,
+			       unsigned int *enable);
 int mv_pp2x_prs_sw_sram_offset_set(struct mv_pp2x_prs_entry *pe,
-					   unsigned int type,
-					   int offset, unsigned int op);
+				   unsigned int type,
+				   int offset, unsigned int op);
 int mv_pp2x_prs_sw_sram_offset_get(struct mv_pp2x_prs_entry *pe,
-					   unsigned int *type,
-					   int *offset, unsigned int *op);
+				   unsigned int *type,
+				   int *offset, unsigned int *op);
 void mv_pp2x_prs_hw_port_init(struct mv_pp2x_hw *hw, int port,
-				    int lu_first, int lu_max, int offset);
+			      int lu_first, int lu_max, int offset);
 void mv_pp2x_prs_sw_clear(struct mv_pp2x_prs_entry *pe);
 void mv_pp2x_prs_hw_inv(struct mv_pp2x_hw *hw, int index);
 void mv_pp2x_prs_tcam_lu_set(struct mv_pp2x_prs_entry *pe, unsigned int lu);
 void mv_pp2x_prs_tcam_port_set(struct mv_pp2x_prs_entry *pe,
-				      unsigned int port, bool add);
+			       unsigned int port, bool add);
 void mv_pp2x_prs_tcam_port_map_set(struct mv_pp2x_prs_entry *pe,
-					    unsigned int ports);
+				   unsigned int ports);
 void mv_pp2x_prs_tcam_data_byte_set(struct mv_pp2x_prs_entry *pe,
-					    unsigned int offs,
-					    unsigned char byte,
-					    unsigned char enable);
+				   unsigned int offs,
+				   unsigned char byte,
+				   unsigned char enable);
 void mv_pp2x_prs_tcam_ai_update(struct mv_pp2x_prs_entry *pe,
-					unsigned int bits,
-					unsigned int enable);
+				unsigned int bits,
+				unsigned int enable);
 void mv_pp2x_prs_sram_ri_update(struct mv_pp2x_prs_entry *pe,
-					unsigned int bits, unsigned int mask);
+				unsigned int bits, unsigned int mask);
 void mv_pp2x_prs_sram_ai_update(struct mv_pp2x_prs_entry *pe,
-					unsigned int bits, unsigned int mask);
+				unsigned int bits, unsigned int mask);
 void mv_pp2x_prs_sram_next_lu_set(struct mv_pp2x_prs_entry *pe,
-					unsigned int lu);
+				  unsigned int lu);
 void mv_pp2x_prs_sw_sram_lu_done_set(struct mv_pp2x_prs_entry *pe);
 void mv_pp2x_prs_sw_sram_lu_done_clear(struct mv_pp2x_prs_entry *pe);
 void mv_pp2x_prs_sw_sram_flowid_set(struct mv_pp2x_prs_entry *pe);
 void mv_pp2x_prs_sw_sram_flowid_clear(struct mv_pp2x_prs_entry *pe);
 int mv_pp2x_prs_hw_write(struct mv_pp2x_hw *hw, struct mv_pp2x_prs_entry *pe);
 int mv_pp2x_cls_hw_lkp_read(struct mv_pp2x_hw *hw, int lkpid, int way,
-				   struct mv_pp2x_cls_lookup_entry *fe);
+			    struct mv_pp2x_cls_lookup_entry *fe);
 int mv_pp2x_cls_hw_lkp_write(struct mv_pp2x_hw *hw, int lkpid, int way,
-				   struct mv_pp2x_cls_lookup_entry *fe);
+			     struct mv_pp2x_cls_lookup_entry *fe);
 int mv_pp2x_cls_lkp_port_way_set(struct mv_pp2x_hw *hw, int port, int way);
-int mv_pp2x_cls_hw_lkp_print(struct mv_pp2x_hw *hw, int lkpid, int way);
 int mv_pp2x_cls_sw_lkp_rxq_get(struct mv_pp2x_cls_lookup_entry *lkp, int *rxq);
 int mv_pp2x_cls_sw_lkp_rxq_set(struct mv_pp2x_cls_lookup_entry *fe, int rxq);
 int mv_pp2x_cls_sw_lkp_en_get(struct mv_pp2x_cls_lookup_entry *lkp, int *en);
 int mv_pp2x_cls_sw_lkp_en_set(struct mv_pp2x_cls_lookup_entry *lkp, int en);
 int mv_pp2x_cls_sw_lkp_flow_get(struct mv_pp2x_cls_lookup_entry *lkp,
-				       int *flow_idx);
+				int *flow_idx);
 int mv_pp2x_cls_sw_lkp_flow_set(struct mv_pp2x_cls_lookup_entry *lkp,
-				       int flow_idx);
+				int flow_idx);
 int mv_pp2x_cls_sw_lkp_mod_get(struct mv_pp2x_cls_lookup_entry *lkp,
-				       int *mod_base);
+			       int *mod_base);
 int mv_pp2x_cls_sw_lkp_mod_set(struct mv_pp2x_cls_lookup_entry *lkp,
-				       int mod_base);
+			       int mod_base);
 int mv_pp2x_cls_hw_flow_read(struct mv_pp2x_hw *hw, int index,
-				    struct mv_pp2x_cls_flow_entry *fe);
-int mv_pp2x_cls_sw_flow_dump(struct mv_pp2x_cls_flow_entry *fe);
-int mv_pp2x_cls_hw_regs_dump(struct mv_pp2x_hw *hw);
+			     struct mv_pp2x_cls_flow_entry *fe);
+int mv_pp2x_cls_sw_flow_hek_get(struct mv_pp2x_cls_flow_entry *fe,
+				int *num_of_fields, int field_ids[]);
+int mv_pp2x_cls_sw_flow_port_get(struct mv_pp2x_cls_flow_entry *fe,
+				 int *type, int *portid);
+
 int mv_pp2x_cls_hw_lkp_hit_get(struct mv_pp2x_hw *hw, int lkpid, int way,
-				     unsigned int *cnt);
-int mv_pp2x_cls_hw_flow_dump(struct mv_pp2x_hw *hw);
-int mv_pp2x_cls_hw_flow_hits_dump(struct mv_pp2x_hw *hw);
+			       unsigned int *cnt);
 void mv_pp2x_cls_flow_write(struct mv_pp2x_hw *hw,
-				 struct mv_pp2x_cls_flow_entry *fe);
+			    struct mv_pp2x_cls_flow_entry *fe);
 int mv_pp2x_cls_sw_flow_port_set(struct mv_pp2x_cls_flow_entry *fe,
-					int type, int portid);
+				 int type, int portid);
 int mv_pp2x_cls_sw_flow_hek_num_set(struct mv_pp2x_cls_flow_entry *fe,
-					      int num_of_fields);
+				    int num_of_fields);
 int mv_pp2x_cls_sw_flow_hek_set(struct mv_pp2x_cls_flow_entry *fe,
-					int field_index, int field_id);
+				int field_index, int field_id);
 int mv_pp2x_cls_sw_flow_portid_select(struct mv_pp2x_cls_flow_entry *fe,
-					     int from);
+				      int from);
 int mv_pp2x_cls_sw_flow_pppoe_set(struct mv_pp2x_cls_flow_entry *fe, int mode);
 int mv_pp2x_cls_sw_flow_vlan_set(struct mv_pp2x_cls_flow_entry *fe, int mode);
 int mv_pp2x_cls_sw_flow_macme_set(struct mv_pp2x_cls_flow_entry *fe, int mode);
 int mv_pp2x_cls_sw_flow_udf7_set(struct mv_pp2x_cls_flow_entry *fe, int mode);
 int mv_pp2x_cls_sw_flow_seq_ctrl_set(struct mv_pp2x_cls_flow_entry *fe,
-					    int mode);
+				     int mode);
+int mv_pp2x_cls_sw_flow_engine_get(struct mv_pp2x_cls_flow_entry *fe,
+				   int *engine, int *is_last);
 int mv_pp2x_cls_sw_flow_engine_set(struct mv_pp2x_cls_flow_entry *fe,
-					   int engine, int is_last);
+				   int engine, int is_last);
+int mv_pp2x_cls_sw_flow_extra_get(struct mv_pp2x_cls_flow_entry *fe,
+				  int *type, int *prio);
 int mv_pp2x_cls_sw_flow_extra_set(struct mv_pp2x_cls_flow_entry *fe,
-					 int type, int prio);
-int mv_pp2x_cls_hw_lkp_hits_dump(struct mv_pp2x_hw *hw);
-int mv_pp2x_cls_sw_lkp_dump(struct mv_pp2x_cls_lookup_entry *lkp);
-int mv_pp2x_cls_hw_lkp_dump(struct mv_pp2x_hw *hw);
+				  int type, int prio);
+int mv_pp2x_cls_hw_flow_hit_get(struct mv_pp2x_hw *hw,
+				int index,  unsigned int *cnt);
 int mv_pp2x_cls_hw_udf_set(struct mv_pp2x_hw *hw, int udf_no, int offs_id,
-				 int offs_bits, int size_bits);
+			   int offs_bits, int size_bits);
 int mv_pp2x_cls_c2_qos_hw_read(struct mv_pp2x_hw *hw, int tbl_id, int tbl_sel,
-					int tbl_line,
-					struct mv_pp2x_cls_c2_qos_entry *qos);
+			       int tbl_line,
+			       struct mv_pp2x_cls_c2_qos_entry *qos);
 int mv_pp2x_cls_c2_qos_hw_write(struct mv_pp2x_hw *hw,
-					struct mv_pp2x_cls_c2_qos_entry *qos);
+				struct mv_pp2x_cls_c2_qos_entry *qos);
 int mvPp2ClsC2QosPrioGet(struct mv_pp2x_cls_c2_qos_entry *qos, int *prio);
 int mvPp2ClsC2QosDscpGet(struct mv_pp2x_cls_c2_qos_entry *qos, int *dscp);
 int mvPp2ClsC2QosColorGet(struct mv_pp2x_cls_c2_qos_entry *qos, int *color);
@@ -735,11 +738,8 @@ int mv_pp2x_cls_c2_hw_write(struct mv_pp2x_hw *hw, int index,
 				  struct mv_pp2x_cls_c2_entry *c2);
 int mv_pp2x_cls_c2_hw_read(struct mv_pp2x_hw *hw, int index,
 				  struct mv_pp2x_cls_c2_entry *c2);
-int mv_pp2x_cls_c2_sw_words_dump(struct mv_pp2x_cls_c2_entry *c2);
 int mv_pp2x_cls_c2_hit_cntr_clear_all(struct mv_pp2x_hw *hw);
 int mv_pp2x_cls_c2_hit_cntr_read(struct mv_pp2x_hw *hw, int index, u32 *cntr);
-int mv_pp2x_cls_c2_hit_cntr_dump(struct mv_pp2x_hw *hw);
-int mv_pp2x_cls_c2_regs_dump(struct mv_pp2x_hw *hw);
 int mv_pp2x_cls_c2_rule_set(struct mv_pp2x_port *port, u8 start_queue);
 u8 mv_pp2x_cls_c2_rule_queue_get(struct mv_pp2x_hw *hw, u32 rule_idx);
 void mv_pp2x_cls_c2_rule_queue_set(struct mv_pp2x_hw *hw, u32 rule_idx,
@@ -780,7 +780,7 @@ int mv_pp22_rss_tbl_entry_get(struct mv_pp2x_hw *hw,
 int mv_pp22_rss_rxq_set(struct mv_pp2x_port *port, u32 cos_width);
 
 void mv_pp22_rss_c2_enable(struct mv_pp2x_port *port, bool en);
-int mv_pp22_rss_hw_dump(struct mv_pp2x_hw *hw);
+
 void mv_pp2x_tx_fifo_set(struct mv_pp2x_hw *hw, u32 port_id, u32 val);
 
 #endif /* _MVPP2_HW_H_ */
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index 4c483f4..efedb68 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -409,8 +409,8 @@ int mv_pp2x_bm_pool_ext_add(struct device *dev, struct mv_pp2x *priv,
 	struct mv_pp2x_hw *hw = &priv->hw;
 
 	if ((priv->num_pools + 1) >= MVPP2_BM_POOLS_MAX_ALLOC_NUM) {
-		DBG_MSG("Unable to add pool. Max BM pool alloc reached %d\n",
-			priv->num_pools + 1);
+		pr_err("Unable to add pool. Max BM pool alloc reached %d\n",
+		       priv->num_pools + 1);
 		return -ENOMEM;
 	}
 
@@ -419,7 +419,7 @@ int mv_pp2x_bm_pool_ext_add(struct device *dev, struct mv_pp2x *priv,
 		MVPP2_BM_STATE_MASK;
 
 	if (enabled) {
-		DBG_MSG("%s pool %d already enabled. Ignoring request\n",
+		pr_info("%s pool %d already enabled. Ignoring request\n",
 			__func__, pool);
 		return 0;
 	}
@@ -444,9 +444,6 @@ int mv_pp2x_bm_pool_ext_add(struct device *dev, struct mv_pp2x *priv,
 
 	*pool_num = pool;
 	priv->num_pools++;
-	DBG_MSG("log_id %d, id %d, pool_num %d, num_pools %d\n",
-		bm_pool->log_id, bm_pool->id, *pool_num, priv->num_pools);
-
 	return 0;
 }
 
@@ -4191,123 +4188,6 @@ static void mv_pp2x_init_rxfhindir(struct mv_pp2x *pp2)
 		pp2->rx_indir_table[i] = i%online_cpus;
 }
 
-void mv_pp2x_pp2_basic_print(struct platform_device *pdev, struct mv_pp2x *priv)
-{
-	DBG_MSG("%s\n", __func__);
-
-	DBG_MSG("num_present_cpus(%d) num_act_cpus(%d) num_online_cpus(%d)\n",
-		num_present_cpus(), num_active_cpus(), num_online_cpus());
-	DBG_MSG("cpu_map(%x)\n", priv->cpu_map);
-
-	DBG_MSG("pdev->name(%s) pdev->id(%d)\n", pdev->name, pdev->id);
-	DBG_MSG("dev.init_name(%s) dev.id(%d)\n",
-		pdev->dev.init_name, pdev->dev.id);
-	DBG_MSG("dev.kobj.name(%s)\n", pdev->dev.kobj.name);
-	DBG_MSG("dev->bus.name(%s) pdev.dev->bus.dev_name(%s)\n",
-		pdev->dev.bus->name, pdev->dev.bus->dev_name);
-
-	DBG_MSG("Device dma_coherent(%d)\n", pdev->dev.archdata.dma_coherent);
-
-	DBG_MSG("pp2_ver(%d)\n", priv->pp2_version);
-	DBG_MSG("queue_mode(%d)\n", priv->pp2_cfg.queue_mode);
-	DBG_MSG("cell_index(%d) num_ports(%d)\n",
-		priv->pp2_cfg.cell_index, priv->num_ports);
-#ifdef CONFIG_64BIT
-	DBG_MSG("skb_base_addr(%p)\n", (void *)priv->pp2xdata->skb_base_addr);
-#endif
-	DBG_MSG("hw->base(%p)\n", priv->hw.base);
-	if (priv->pp2_version == PPV22) {
-		DBG_MSG("gop_addr: gmac(%p) xlg(%p) serdes(%p)\n",
-			priv->hw.gop.gop_110.gmac.base,
-			priv->hw.gop.gop_110.xlg_mac.base,
-			priv->hw.gop.gop_110.serdes.base);
-		DBG_MSG("gop_addr: xmib(%p) smi(%p) xsmi(%p)\n",
-			priv->hw.gop.gop_110.xmib.base,
-			priv->hw.gop.gop_110.smi_base,
-			priv->hw.gop.gop_110.xsmi_base);
-		DBG_MSG("gop_addr: mspg(%p) xpcs(%p) ptp(%p)\n",
-			priv->hw.gop.gop_110.mspg_base,
-			priv->hw.gop.gop_110.xpcs_base,
-			priv->hw.gop.gop_110.ptp.base);
-		DBG_MSG("gop_addr: rfu1(%p)\n",
-			priv->hw.gop.gop_110.rfu1_base);
-	}
-}
-EXPORT_SYMBOL(mv_pp2x_pp2_basic_print);
-
-void mv_pp2x_pp2_port_print(struct mv_pp2x_port *port)
-{
-	int i;
-
-	DBG_MSG("%s port_id(%d)\n", __func__, port->id);
-	DBG_MSG("\t ifname(%s)\n", port->dev->name);
-	DBG_MSG("\t first_rxq(%d)\n", port->first_rxq);
-	DBG_MSG("\t num_irqs(%d)\n", port->num_irqs);
-	for (i = 0; i < port->num_irqs; i++)
-		DBG_MSG("\t\t irq%d(%d)\n", i, port->of_irqs[i]);
-	DBG_MSG("\t pkt_size(%d)\n", port->pkt_size);
-	DBG_MSG("\t flags(%lx)\n", port->flags);
-	DBG_MSG("\t tx_ring_size(%d)\n", port->tx_ring_size);
-	DBG_MSG("\t rx_ring_size(%d)\n", port->rx_ring_size);
-	DBG_MSG("\t time_coal(%d)\n", port->tx_time_coal);
-	DBG_MSG("\t pool_long(%p)\n", port->pool_long);
-	DBG_MSG("\t pool_short(%p)\n", port->pool_short);
-	DBG_MSG("\t first_rxq(%d)\n", port->first_rxq);
-	DBG_MSG("\t num_rx_queues(%d)\n", port->num_rx_queues);
-	DBG_MSG("\t num_tx_queues(%d)\n", port->num_tx_queues);
-	DBG_MSG("\t num_qvector(%d)\n", port->num_qvector);
-
-	for (i = 0; i < port->num_qvector; i++) {
-		DBG_MSG("\t qvector_index(%d)\n", i);
-#if !defined(CONFIG_MV_PP2_POLLING)
-		DBG_MSG("\t\t irq(%d) irq_name:%s\n",
-			port->q_vector[i].irq, port->q_vector[i].irq_name);
-#endif
-		DBG_MSG("\t\t qv_type(%d)\n",
-			port->q_vector[i].qv_type);
-		DBG_MSG("\t\t sw_thread_id	(%d)\n",
-			port->q_vector[i].sw_thread_id);
-		DBG_MSG("\t\t sw_thread_mask(%d)\n",
-			port->q_vector[i].sw_thread_mask);
-		DBG_MSG("\t\t first_rx_queue(%d)\n",
-			port->q_vector[i].first_rx_queue);
-		DBG_MSG("\t\t num_rx_queues(%d)\n",
-			port->q_vector[i].num_rx_queues);
-		DBG_MSG("\t\t pending_cause_rx(%d)\n",
-			port->q_vector[i].pending_cause_rx);
-	}
-	DBG_MSG("\t GOP ind(%d) phy_mode(%d) phy_addr(%d)\n",
-		port->mac_data.gop_index, port->mac_data.phy_mode,
-		port->mac_data.phy_addr);
-	DBG_MSG("\t GOP force_link(%d) autoneg(%d) duplex(%d) speed(%d)\n",
-		port->mac_data.force_link, port->mac_data.autoneg,
-		port->mac_data.duplex, port->mac_data.speed);
-#if !defined(CONFIG_MV_PP2_POLLING)
-	DBG_MSG("\t GOP link_irq(%d) irq_name:%s\n", port->mac_data.link_irq,
-		port->mac_data.irq_name);
-#endif
-	DBG_MSG("\t GOP phy_dev(%p) phy_node(%p)\n", port->mac_data.phy_dev,
-		port->mac_data.phy_node);
-
-}
-EXPORT_SYMBOL(mv_pp2x_pp2_port_print);
-
-void mv_pp2x_pp2_ports_print(struct mv_pp2x *priv)
-{
-	int i;
-	struct mv_pp2x_port *port;
-
-	for (i = 0; i < priv->num_ports; i++) {
-		if (priv->port_list[i] == NULL) {
-			pr_emerg("\t port_list[%d]= NULL!\n", i);
-			continue;
-		}
-		port = priv->port_list[i];
-		mv_pp2x_pp2_port_print(port);
-	}
-}
-EXPORT_SYMBOL(mv_pp2x_pp2_ports_print);
-
 static int mv_pp2x_platform_data_get(struct platform_device *pdev,
 		struct mv_pp2x *priv,	u32 *cell_index, int *port_count)
 {
-- 
1.7.9.5

