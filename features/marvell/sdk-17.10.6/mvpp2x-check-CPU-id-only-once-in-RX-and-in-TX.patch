From 4e5c27dbed577fbd2bd552533f3d7dc4dc5e7f90 Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Thu, 22 Sep 2016 15:37:47 +0300
Subject: [PATCH 0521/1345] mvpp2x: check CPU id only once in RX and in TX

commit  75b12393a84c5a32e7a08395a6b5b10a5795bff0 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- check only once CPU id for in RX and in TX, CPU didn't changed during
  Napi

Change-Id: I8438d71b97e79e5e6e44438cac740abf5a7b4bc5
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/33078
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h      |    2 +-
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c   |   19 +++---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h   |   34 +++++-----
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |   65 ++++++++++----------
 4 files changed, 61 insertions(+), 59 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
index 0e28bfc..066548f 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
@@ -811,7 +811,7 @@ int mv_pp2x_cos_classifier_set(struct mv_pp2x_port *port,
 int mv_pp2x_txq_reserved_desc_num_proc(struct mv_pp2x *priv,
 				       struct mv_pp2x_tx_queue *txq,
 				       struct mv_pp2x_txq_pcpu *txq_pcpu,
-				       int num);
+				       int num, int cpu);
 
 #endif /*_MVPP2_H_*/
 
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
index 8bc0829..798553a 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
@@ -3680,13 +3680,12 @@ int mv_pp2x_aggr_desc_num_read(struct mv_pp2x *priv, int cpu)
  */
 int mv_pp2x_aggr_desc_num_check(struct mv_pp2x *priv,
 				struct mv_pp2x_aggr_tx_queue *aggr_txq,
-				int num)
+				int num, int cpu)
 {
 	if ((aggr_txq->count + num) > aggr_txq->size) {
 		/* Update number of occupied aggregated Tx descriptors */
-		int cpu = smp_processor_id();
 		u32 val = mv_pp2x_relaxed_read(&priv->hw,
-				MVPP2_AGGR_TXQ_STATUS_REG(cpu));
+				MVPP2_AGGR_TXQ_STATUS_REG(cpu), cpu);
 
 		aggr_txq->count = val & MVPP2_AGGR_TXQ_PENDING_MASK;
 
@@ -3699,14 +3698,14 @@ int mv_pp2x_aggr_desc_num_check(struct mv_pp2x *priv,
 
 /* Reserved Tx descriptors allocation request */
 int mv_pp2x_txq_alloc_reserved_desc(struct mv_pp2x *priv,
-				    struct mv_pp2x_tx_queue *txq, int num)
+				    struct mv_pp2x_tx_queue *txq, int num, int cpu)
 {
 	u32 val;
 
 	val = (txq->id << MVPP2_TXQ_RSVD_REQ_Q_OFFSET) | num;
-	mv_pp2x_relaxed_write(&priv->hw, MVPP2_TXQ_RSVD_REQ_REG, val);
+	mv_pp2x_relaxed_write(&priv->hw, MVPP2_TXQ_RSVD_REQ_REG, val, cpu);
 
-	val = mv_pp2x_relaxed_read(&priv->hw, MVPP2_TXQ_RSVD_RSLT_REG);
+	val = mv_pp2x_relaxed_read(&priv->hw, MVPP2_TXQ_RSVD_RSLT_REG, cpu);
 
 	return val & MVPP2_TXQ_RSVD_RSLT_MASK;
 }
@@ -3825,15 +3824,17 @@ void mv_pp21_port_reset(struct mv_pp2x_port *port)
 
 /* Refill BM pool */
 void mv_pp2x_pool_refill(struct mv_pp2x *priv, u32 pool,
-			 dma_addr_t phys_addr)
+			 dma_addr_t phys_addr, int cpu)
 {
-	mv_pp2x_bm_pool_put(&priv->hw, pool, phys_addr);
+	mv_pp2x_bm_pool_put(&priv->hw, pool, phys_addr, cpu);
 }
 
 void mv_pp2x_pool_refill_virtual(struct mv_pp2x *priv, u32 pool,
 			 dma_addr_t phys_addr, u8 *cookie)
 {
-	mv_pp2x_bm_pool_put_virtual(&priv->hw, pool, phys_addr, cookie);
+	int cpu = smp_processor_id();
+
+	mv_pp2x_bm_pool_put_virtual(&priv->hw, pool, phys_addr, cookie, cpu);
 }
 
 /* Set pool buffer size */
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
index 70975ff..89af7bb 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
@@ -34,9 +34,10 @@ static inline void mv_pp2x_write(struct mv_pp2x_hw *hw, u32 offset, u32 data)
 	put_cpu();
 }
 
-static inline void mv_pp2x_relaxed_write(struct mv_pp2x_hw *hw, u32 offset, u32 data)
+static inline void mv_pp2x_relaxed_write(struct mv_pp2x_hw *hw, u32 offset, u32 data,
+					int cpu)
 {
-	void *reg_ptr = hw->cpu_base[smp_processor_id()] + offset;
+	void *reg_ptr = hw->cpu_base[cpu] + offset;
 
 	writel_relaxed(data, reg_ptr);
 }
@@ -53,9 +54,9 @@ static inline u32 mv_pp2x_read(struct mv_pp2x_hw *hw, u32 offset)
 	return val;
 }
 
-static inline u32 mv_pp2x_relaxed_read(struct mv_pp2x_hw *hw, u32 offset)
+static inline u32 mv_pp2x_relaxed_read(struct mv_pp2x_hw *hw, u32 offset, int cpu)
 {
-	void *reg_ptr = hw->cpu_base[smp_processor_id()] + offset;
+	void *reg_ptr = hw->cpu_base[cpu] + offset;
 	u32 val;
 
 	val = readl_relaxed(reg_ptr);
@@ -286,34 +287,34 @@ static inline void mv_pp2x_bm_hw_pool_create(struct mv_pp2x_hw *hw,
 
 static inline void mv_pp2x_bm_pool_put_virtual(struct mv_pp2x_hw *hw, u32 pool,
 					      dma_addr_t buf_phys_addr,
-					      u8 *buf_virt_addr)
+					      u8 *buf_virt_addr, int cpu)
 {
 	mv_pp2x_relaxed_write(hw, MVPP2_BM_VIRT_RLS_REG,
-			      lower_32_bits((uintptr_t)buf_virt_addr));
+			      lower_32_bits((uintptr_t)buf_virt_addr), cpu);
 
 	mv_pp2x_relaxed_write(hw, MVPP2_BM_PHY_RLS_REG(pool),
-				lower_32_bits(buf_phys_addr));
+				lower_32_bits(buf_phys_addr), cpu);
 }
 
 /* Release buffer to BM */
 static inline void mv_pp2x_bm_pool_put(struct mv_pp2x_hw *hw, u32 pool,
-					      dma_addr_t buf_phys_addr)
+					      dma_addr_t buf_phys_addr, int cpu)
 {
 
 #if defined(CONFIG_ARCH_DMA_ADDR_T_64BIT) && defined(CONFIG_PHYS_ADDR_T_64BIT)
 	mv_pp2x_relaxed_write(hw, MVPP22_BM_PHY_VIRT_HIGH_RLS_REG,
-			upper_32_bits(buf_phys_addr));
+			upper_32_bits(buf_phys_addr), cpu);
 #endif
 
 	mv_pp2x_relaxed_write(hw, MVPP2_BM_PHY_RLS_REG(pool),
-				lower_32_bits(buf_phys_addr));
+				lower_32_bits(buf_phys_addr), cpu);
 }
 
 /* Release multicast buffer */
 static inline void mv_pp2x_bm_pool_mc_put(struct mv_pp2x_port *port, int pool,
 						   u32 buf_phys_addr,
 						   u32 buf_virt_addr,
-						   int mc_id)
+						   int mc_id, int cpu)
 {
 	u32 val = 0;
 
@@ -324,7 +325,7 @@ static inline void mv_pp2x_bm_pool_mc_put(struct mv_pp2x_port *port, int pool,
 	 */
 	mv_pp2x_bm_pool_put(&(port->priv->hw), pool,
 			    (dma_addr_t)(buf_phys_addr |
-			    MVPP2_BM_PHY_RLS_MC_BUFF_MASK));
+			    MVPP2_BM_PHY_RLS_MC_BUFF_MASK), cpu);
 }
 
 static inline void mv_pp2x_port_interrupts_enable(struct mv_pp2x_port *port)
@@ -573,23 +574,22 @@ struct mv_pp2x_tx_desc *mv_pp2x_txq_prev_desc_get(
 		struct mv_pp2x_aggr_tx_queue *aggr_txq);
 int mv_pp2x_txq_alloc_reserved_desc(struct mv_pp2x *priv,
 				    struct mv_pp2x_tx_queue *txq,
-				    int num);
+				    int num, int cpu);
 void mv_pp2x_aggr_txq_pend_desc_add(struct mv_pp2x_port *port, int pending);
 int mv_pp2x_aggr_desc_num_read(struct mv_pp2x *priv, int cpu);
 int mv_pp2x_aggr_desc_num_check(struct mv_pp2x *priv,
 				struct mv_pp2x_aggr_tx_queue *aggr_txq,
-				int num);
+				int num, int cpu);
 void mv_pp2x_rxq_offset_set(struct mv_pp2x_port *port,
 			    int prxq, int offset);
 void mv_pp2x_bm_pool_bufsize_set(struct mv_pp2x_hw *hw,
 				 struct mv_pp2x_bm_pool *bm_pool,
 				 int buf_size);
 void mv_pp2x_pool_refill(struct mv_pp2x *priv, u32 pool,
-			 dma_addr_t phys_addr);
+			 dma_addr_t phys_addr, int cpu);
 
 void mv_pp2x_pool_refill_virtual(struct mv_pp2x *priv, u32 pool,
-			 dma_addr_t phys_addr, u8 *cookie);
-
+				dma_addr_t phys_addr, u8 *cookie);
 void mv_pp21_rxq_long_pool_set(struct mv_pp2x_hw *hw,
 			       int prxq, int long_pool);
 void mv_pp21_rxq_short_pool_set(struct mv_pp2x_hw *hw,
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index 1eab444..9baecbf 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -297,7 +297,7 @@ static void mv_pp2x_frag_free(const struct mv_pp2x_bm_pool *pool, void *data)
 
 static int mv_pp2x_rx_refill_new(struct mv_pp2x_port *port,
 			   struct mv_pp2x_bm_pool *bm_pool,
-			   u32 pool, int is_recycle)
+			   u32 pool, int is_recycle, int cpu)
 {
 	dma_addr_t phys_addr;
 	void *data;
@@ -315,7 +315,7 @@ static int mv_pp2x_rx_refill_new(struct mv_pp2x_port *port,
 		return -ENOMEM;
 	}
 
-	mv_pp2x_pool_refill(port->priv, pool, phys_addr);
+	mv_pp2x_pool_refill(port->priv, pool, phys_addr, cpu);
 	return 0;
 }
 
@@ -360,7 +360,6 @@ static int mv_pp2x_bm_pool_create(struct device *dev,
 	mv_pp2x_bm_pool_bufsize_set(hw, bm_pool,
 				    MVPP2_RX_BUF_SIZE(bm_pool->pkt_size));
 
-
 	return 0;
 }
 
@@ -533,7 +532,7 @@ static int mv_pp2x_bm_init(struct platform_device *pdev, struct mv_pp2x *priv)
 int mv_pp2x_bm_bufs_add(struct mv_pp2x_port *port,
 			       struct mv_pp2x_bm_pool *bm_pool, int buf_num)
 {
-	int i, buf_size, total_size;
+	int i, buf_size, total_size, cpu;
 
 	buf_size = MVPP2_RX_BUF_SIZE(bm_pool->pkt_size);
 	total_size = MVPP2_RX_TOTAL_SIZE(buf_size);
@@ -546,10 +545,10 @@ int mv_pp2x_bm_bufs_add(struct mv_pp2x_port *port,
 		return 0;
 	}
 
-	preempt_disable();
+	cpu = get_cpu();
 	for (i = 0; i < buf_num; i++)
-		mv_pp2x_rx_refill_new(port, bm_pool, (u32)bm_pool->id, 0);
-	preempt_enable();
+		mv_pp2x_rx_refill_new(port, bm_pool, (u32)bm_pool->id, 0, cpu);
+	put_cpu();
 
 	/* Update BM driver with number of buffers added to pool */
 	bm_pool->buf_num += i;
@@ -855,7 +854,7 @@ int mv_pp2x_txq_reserved_desc_num_proc(
 					struct mv_pp2x *priv,
 					struct mv_pp2x_tx_queue *txq,
 					struct mv_pp2x_txq_pcpu *txq_pcpu,
-					int num)
+					int num, int cpu)
 {
 	int req;
 
@@ -899,7 +898,7 @@ int mv_pp2x_txq_reserved_desc_num_proc(
 #endif
 
 	txq_pcpu->reserved_num += mv_pp2x_txq_alloc_reserved_desc(priv, txq,
-								  req);
+							req, cpu);
 
 	/* OK, the descriptor cound has been updated: check again. */
 	if (txq_pcpu->reserved_num < num)
@@ -1117,7 +1116,7 @@ static int mv_pp2x_rxq_init(struct mv_pp2x_port *port,
 static void mv_pp2x_rxq_drop_pkts(struct mv_pp2x_port *port,
 					struct mv_pp2x_rx_queue *rxq)
 {
-	int rx_received, i;
+	int rx_received, i, cpu;
 	u8 *buf_cookie;
 	dma_addr_t buf_phys_addr;
 
@@ -1127,7 +1126,7 @@ static void mv_pp2x_rxq_drop_pkts(struct mv_pp2x_port *port,
 	if (!rx_received)
 		return;
 
-	preempt_disable();
+	cpu = get_cpu();
 	for (i = 0; i < rx_received; i++) {
 		struct mv_pp2x_rx_desc *rx_desc =
 			mv_pp2x_rxq_next_desc_get(rxq);
@@ -1140,9 +1139,9 @@ static void mv_pp2x_rxq_drop_pkts(struct mv_pp2x_port *port,
 			buf_phys_addr = mv_pp22_rxdesc_phys_addr_get(rx_desc);
 		}
 		mv_pp2x_pool_refill(port->priv, MVPP2_RX_DESC_POOL(rx_desc),
-			buf_phys_addr);
+			buf_phys_addr, cpu);
 	}
-	preempt_enable();
+	put_cpu();
 	mv_pp2x_rxq_status_update(port, rxq->id, rx_received, rx_received);
 }
 
@@ -2134,7 +2133,7 @@ int mv_pp22_rss_default_cpu_set(struct mv_pp2x_port *port, int default_cpu)
 /* Reuse skb if possible, or allocate a new skb and add it to BM pool */
 static int mv_pp2x_rx_refill(struct mv_pp2x_port *port,
 			   struct mv_pp2x_bm_pool *bm_pool,
-			   u32 pool, int is_recycle)
+			   u32 pool, int is_recycle, int cpu)
 {
 	struct sk_buff *skb;
 	dma_addr_t phys_addr;
@@ -2144,7 +2143,7 @@ static int mv_pp2x_rx_refill(struct mv_pp2x_port *port,
 	if (!skb)
 		return -ENOMEM;
 
-	mv_pp2x_pool_refill(port->priv, pool, phys_addr, skb);
+	mv_pp2x_pool_refill(port->priv, pool, phys_addr, skb, cpu);
 	return 0;
 }
 #endif
@@ -2181,7 +2180,7 @@ static u32 mv_pp2x_skb_tx_csum(struct mv_pp2x_port *port, struct sk_buff *skb)
 }
 
 static void mv_pp2x_buff_hdr_rx(struct mv_pp2x_port *port,
-			      struct mv_pp2x_rx_desc *rx_desc)
+			      struct mv_pp2x_rx_desc *rx_desc, int cpu)
 {
 	struct mv_pp2x_buff_hdr *buff_hdr;
 	struct sk_buff *skb;
@@ -2212,7 +2211,7 @@ static void mv_pp2x_buff_hdr_rx(struct mv_pp2x_port *port,
 
 		/* Release buffer */
 		mv_pp2x_bm_pool_mc_put(port, pool_id, buff_phys_addr,
-				     buff_virt_addr, mc_id);
+				     buff_virt_addr, mc_id, cpu);
 
 		buff_phys_addr = buff_phys_addr_next;
 		buff_virt_addr = buff_virt_addr_next;
@@ -2243,6 +2242,7 @@ static int mv_pp2x_rx(struct mv_pp2x_port *port, struct napi_struct *napi,
 	u32 refill_array[MVPP2_BM_POOLS_NUM] = {0};
 	u8  first_bm_pool = port->priv->pp2_cfg.first_bm_pool;
 	u8  num_pool = MVPP2_BM_SWF_NUM_POOLS;
+	int cpu = smp_processor_id();
 
 #ifdef DEV_NETMAP
 		if (port->flags & MVPP2_F_IFCAP_NETMAP) {
@@ -2287,7 +2287,7 @@ static int mv_pp2x_rx(struct mv_pp2x_port *port, struct napi_struct *napi,
 		bm_pool = &port->priv->bm_pools[pool - first_bm_pool];
 		/* Check if buffer header is used */
 		if (rx_status & MVPP2_RXD_BUF_HDR) {
-			mv_pp2x_buff_hdr_rx(port, rx_desc);
+			mv_pp2x_buff_hdr_rx(port, rx_desc, cpu);
 			continue;
 		}
 
@@ -2315,7 +2315,7 @@ static int mv_pp2x_rx(struct mv_pp2x_port *port, struct napi_struct *napi,
 err_drop_frame:
 			dev->stats.rx_errors++;
 			mv_pp2x_rx_error(port, rx_desc);
-			mv_pp2x_pool_refill(port->priv, pool, buf_phys_addr);
+			mv_pp2x_pool_refill(port->priv, pool, buf_phys_addr, cpu);
 			continue;
 		}
 
@@ -2368,7 +2368,7 @@ static int mv_pp2x_rx(struct mv_pp2x_port *port, struct napi_struct *napi,
 		refill_bm_pool = &port->priv->bm_pools[i];
 		while (refill_array[i]--) {
 			err = mv_pp2x_rx_refill_new(port, refill_bm_pool,
-				refill_bm_pool->log_id + first_bm_pool, 0);
+				refill_bm_pool->log_id + first_bm_pool, 0, cpu);
 			if (err) {
 				netdev_err(port->dev, "failed to refill BM pools\n");
 				refill_array[i]++;
@@ -2634,7 +2634,7 @@ static inline int mv_pp2_tso_build_data_desc(struct mv_pp2x_port *port,
 /* send tso packet */
 static inline int mv_pp2_tx_tso(struct sk_buff *skb, struct net_device *dev,
 			 struct mv_pp2x_tx_queue *txq,
-			 struct mv_pp2x_aggr_tx_queue *aggr_txq)
+			 struct mv_pp2x_aggr_tx_queue *aggr_txq, int cpu)
 {
 	int frag = 0, i;
 	int total_len, hdr_len, size, frag_size, data_left;
@@ -2655,9 +2655,9 @@ static inline int mv_pp2_tx_tso(struct sk_buff *skb, struct net_device *dev,
 	max_desc_num = skb_shinfo(skb)->gso_segs * 2 + skb_shinfo(skb)->nr_frags;
 
 	/* Check number of available descriptors */
-	if (mv_pp2x_aggr_desc_num_check(port->priv, aggr_txq, max_desc_num) ||
+	if (mv_pp2x_aggr_desc_num_check(port->priv, aggr_txq, max_desc_num, cpu) ||
 	    mv_pp2x_txq_reserved_desc_num_proc(port->priv, txq,
-					     txq_pcpu, max_desc_num)) {
+					     txq_pcpu, max_desc_num, cpu)) {
 		return 0;
 	}
 
@@ -2815,16 +2815,17 @@ static int mv_pp2x_tx(struct sk_buff *skb, struct net_device *dev)
 	int frags = 0;
 	u16 txq_id;
 	u32 tx_cmd;
+	int cpu = smp_processor_id();
 
 	txq_id = skb_get_queue_mapping(skb);
 	nq = netdev_get_tx_queue(dev, txq_id);
 	txq = port->txqs[txq_id];
 	txq_pcpu = this_cpu_ptr(txq->pcpu);
-	aggr_txq = &port->priv->aggr_txqs[smp_processor_id()];
+	aggr_txq = &port->priv->aggr_txqs[cpu];
 
 	/* GSO/TSO */
 	if (skb_is_gso(skb)) {
-		frags = mv_pp2_tx_tso(skb, dev, txq, aggr_txq);
+		frags = mv_pp2_tx_tso(skb, dev, txq, aggr_txq, cpu);
 		goto out;
 	}
 
@@ -2832,9 +2833,9 @@ static int mv_pp2x_tx(struct sk_buff *skb, struct net_device *dev)
 	pr_debug("txq_id=%d, frags=%d\n", txq_id, frags);
 
 	/* Check number of available descriptors */
-	if (mv_pp2x_aggr_desc_num_check(port->priv, aggr_txq, frags) ||
+	if (mv_pp2x_aggr_desc_num_check(port->priv, aggr_txq, frags, cpu) ||
 	    mv_pp2x_txq_reserved_desc_num_proc(port->priv, txq,
-					     txq_pcpu, frags)) {
+					     txq_pcpu, frags, cpu)) {
 		netif_tx_stop_queue(nq);
 		frags = 0;
 		goto out;
@@ -3037,7 +3038,7 @@ static int mv_pp21_poll(struct napi_struct *napi, int budget)
 static int mv_pp22_poll(struct napi_struct *napi, int budget)
 {
 	u32 cause_rx_tx, cause_rx, cause_tx;
-	int rx_done = 0, txq_cpu;
+	int rx_done = 0, cpu;
 	struct mv_pp2x_port *port = netdev_priv(napi->dev);
 	struct mv_pp2x_hw *hw = &port->priv->hw;
 	struct queue_vector *q_vec = container_of(napi,
@@ -3052,7 +3053,7 @@ static int mv_pp22_poll(struct napi_struct *napi, int budget)
 			MVPP2_ISR_RX_TX_CAUSE_REG(port->id));
 	pr_debug("%s port_id(%d), q_vec(%d), cpuId(%d), sw_thread_id(%d), isr_tx_rx(0x%x)\n",
 		__func__, port->id, (int)(q_vec - port->q_vector),
-		smp_processor_id(), q_vec->sw_thread_id, cause_rx_tx);
+		QV_THR_2_CPU(q_vec->sw_thread_id), q_vec->sw_thread_id, cause_rx_tx);
 
 	/*Process misc errors */
 	mv_pp2x_cause_misc_handle(port, hw, cause_rx_tx);
@@ -3061,9 +3062,9 @@ static int mv_pp22_poll(struct napi_struct *napi, int budget)
 	cause_tx = (cause_rx_tx & MVPP2_CAUSE_TXQ_OCCUP_DESC_ALL_MASK) >>
 			MVPP2_CAUSE_TXQ_OCCUP_DESC_ALL_OFFSET;
 	if (cause_tx) {
-		txq_cpu = QV_THR_2_CPU(q_vec->sw_thread_id);
-		mv_pp2x_tx_done(port, cause_tx, txq_cpu);
-	}
+		cpu = QV_THR_2_CPU(q_vec->sw_thread_id);
+		mv_pp2x_tx_done(port, cause_tx, cpu);
+		}
 
 	/* Process RX packets */
 	cause_rx = cause_rx_tx & MVPP2_CAUSE_RXQ_OCCUP_DESC_ALL_MASK;
-- 
1.7.9.5

