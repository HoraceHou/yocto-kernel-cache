From ef1738ff3b434b75c9d6ed435d0a4fbd41eb947a Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Tue, 16 Aug 2016 14:34:07 +0300
Subject: [PATCH 0422/1345] net: mvpp2x: add queue delayed work for periodic
 statistics update

commit  790cd7e07288db0887226673bed83fb1e9fef5d9 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- delayed queue is 248 msec

Change-Id: I122696dbde8e4434761efa4524c65fdd2660a470
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/31980
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yuval Caduri <cyuval@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h      |    5 ++
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |   49 ++++++++++++++++++++
 2 files changed, 54 insertions(+)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
index 727309a..7bcb70a 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
@@ -33,6 +33,8 @@
 
 #define IRQ_NAME_SIZE (36)
 
+#define STATS_DELAY	250
+
 #define MV_ETH_SKB_SHINFO_SIZE	SKB_DATA_ALIGN(sizeof(struct skb_shared_info))
 
 /* START - Taken from mvPp2Commn.h, need to order TODO */
@@ -525,6 +527,9 @@ struct mv_pp2x {
 	*/
 	u32 rx_indir_table[MVPP22_RSS_TBL_LINE_NUM];
 	u32 l4_chksum_jumbo_port;
+
+	struct delayed_work stats_task;
+	struct workqueue_struct *workqueue;
 };
 
 struct mv_pp2x_pcpu_stats {
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index 634d655..9b2ebe4 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -86,6 +86,8 @@
 static u8 first_addr_space;
 static u8 first_log_rxq_queue;
 static u8 uc_filter_max = 4;
+static u16 stats_delay_msec = STATS_DELAY;
+static u16 stats_delay;
 
 u32 debug_param;
 
@@ -144,6 +146,9 @@ struct mv_pp2x_pool_attributes mv_pp2x_pools[] = {
 MODULE_PARM_DESC(debug_param,
 	"Ad-hoc parameter, which can be used for various debug operations.");
 
+module_param(stats_delay_msec, ushort, S_IRUGO);
+MODULE_PARM_DESC(stats_delay_msec, "Set statistic delay in msec, def=250");
+
 module_param_named(short_pool, mv_pp2x_pools[MVPP2_BM_SWF_SHORT_POOL].buf_num, uint, S_IRUGO);
 MODULE_PARM_DESC(short_pool, "Short pool size (0-8192), def=2048");
 
@@ -3698,6 +3703,35 @@ static u32 mvp_pp2x_gop110_netc_cfg_create(struct mv_pp2x *priv)
 	return val;
 }
 
+static void mv_pp2x_get_port_stats(struct mv_pp2x_port *port)
+{
+	bool link_is_up;
+	struct mv_mac_data *mac = &port->mac_data;
+	struct gop_hw *gop = &port->priv->hw.gop;
+	int gop_port = mac->gop_index;
+	struct gop_stat	*gop_statistics = &mac->gop_statistics;
+
+	link_is_up = mv_gop110_port_is_link_up(gop, &port->mac_data);
+
+	if (link_is_up)
+		mv_gop110_mib_counters_stat_update(gop, gop_port, gop_statistics);
+}
+
+static void mv_pp2x_get_device_stats(struct work_struct *work)
+{
+	struct delayed_work *delay = to_delayed_work(work);
+	struct mv_pp2x *priv = container_of(delay, struct mv_pp2x,
+						 stats_task);
+	int i;
+
+	for (i = 0; i < priv->num_ports; i++) {
+		if (priv->port_list[i])
+			mv_pp2x_get_port_stats(priv->port_list[i]);
+	}
+
+	queue_delayed_work(priv->workqueue, &priv->stats_task, stats_delay);
+}
+
 /* Initialize port HW */
 static int mv_pp2x_port_init(struct mv_pp2x_port *port)
 {
@@ -4048,6 +4082,9 @@ static int mv_pp2x_init(struct platform_device *pdev, struct mv_pp2x *priv)
 	u8 pp2_ver = priv->pp2xdata->pp2x_ver;
 	struct mv_pp2x_hw *hw = &priv->hw;
 
+	/* Set statistic delay */
+	stats_delay = (stats_delay_msec * HZ) / 1000;
+
 	/* Checks for hardware constraints */
 	if (mv_pp2x_num_cos_queues <= 0 || mv_pp2x_num_cos_queues > MVPP2_MAX_TXQ) {
 		dev_err(&pdev->dev, "Illegal num_cos_queue parameter\n");
@@ -4607,6 +4644,14 @@ static int mv_pp2x_probe(struct platform_device *pdev)
 		err = -ENOMEM;
 		goto err_clk;
 	}
+	priv->workqueue = create_singlethread_workqueue("mv_pp2x");
+
+	if (!priv->workqueue) {
+		err = -ENOMEM;
+		goto err_clk;
+	}
+
+	INIT_DELAYED_WORK(&priv->stats_task, mv_pp2x_get_device_stats);
 
 	/* Init PP22 rxfhindir table evenly in probe */
 	mv_pp2x_init_rxfhindir(priv);
@@ -4628,6 +4673,7 @@ static int mv_pp2x_probe(struct platform_device *pdev)
 				MV_NETC_SECOND_PHASE);
 
 	platform_set_drvdata(pdev, priv);
+	queue_delayed_work(priv->workqueue, &priv->stats_task, stats_delay);
 	pr_debug("Platform Device Name : %s\n", kobject_name(&pdev->dev.kobj));
 	return 0;
 
@@ -4646,6 +4692,9 @@ static int mv_pp2x_remove(struct platform_device *pdev)
 	struct mv_pp2x_hw *hw = &priv->hw;
 	int i;
 
+	flush_workqueue(priv->workqueue);
+	destroy_workqueue(priv->workqueue);
+
 	for (i = 0; i < priv->num_ports; i++) {
 		if (priv->port_list[i])
 			mv_pp2x_port_remove(priv->port_list[i]);
-- 
1.7.9.5

