From 7c8310f37511cab19fbcfd2761ee935be74286fc Mon Sep 17 00:00:00 2001
From: Victor Gu <xigu@marvell.com>
Date: Wed, 8 Mar 2017 16:02:25 +0800
Subject: [PATCH 0820/1345] pinctrl: a3700: add PM support for pinctrl driver

commit  64172845a87e6fd5e8996895fabee4e4ee8e59d7 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- In order to keep all pinctrl regs setting, this patch saves north
  and south bridge pinctrl regs(RD0013830h and RD0018830h) status
  into local variable in DRAM and restore them during resume after
  warm reset.
- Since pinctrl is an infrastucture module, its resume should be
  issued prior to other IO drivers. The pinctrl PM is registered
  as syscore level to make sure of it. The original module_platform_driver
  is replaced with separated init and exit routines in order to
  register syscore operation. The init call is enhanced to postcore
  level to make sure the pinctrl is executed prior to other IO modules
  during cold booting.

Change-Id: Iace0fa1e81b802043684a344c855c25747ca857b
Signed-off-by: Victor Gu <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/37157
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/pinctrl/mvebu/pinctrl-armada-3700.c |   50 ++++++++++++++++++++++++++-
 1 file changed, 49 insertions(+), 1 deletion(-)

diff --git a/drivers/pinctrl/mvebu/pinctrl-armada-3700.c b/drivers/pinctrl/mvebu/pinctrl-armada-3700.c
index 0dcc752..f08ae35 100644
--- a/drivers/pinctrl/mvebu/pinctrl-armada-3700.c
+++ b/drivers/pinctrl/mvebu/pinctrl-armada-3700.c
@@ -18,6 +18,7 @@
 #include <linux/of.h>
 #include <linux/of_device.h>
 #include <linux/platform_device.h>
+#include <linux/syscore_ops.h>
 #include <linux/pinctrl/pinctrl.h>
 #include "pinctrl-mvebu.h"
 
@@ -52,6 +53,7 @@ struct  armada_3700_mpp_setting_bitmap {
 };
 
 static void __iomem *mpp_base[I_MAXCONTROLLER];/* north & south bridge mpp base */
+static unsigned int mpp_saved_regs[I_MAXCONTROLLER];/* north & south bridge mpp status, for suspend/resume usage */
 
 struct  armada_3700_mpp_conf {
 	struct mvebu_pinctrl_soc_info *soc_info;
@@ -974,6 +976,32 @@ static int armada_3700_pinctrl_remove(struct platform_device *pdev)
 	return mvebu_pinctrl_remove(pdev);
 }
 
+#ifdef CONFIG_PM
+static int armada_3700_pinctrl_suspend(void)
+{
+	int i;
+
+	for (i = 0; i < I_MAXCONTROLLER; i++)
+		if (mpp_base[i] && (!IS_ERR(mpp_base[i])))
+			mpp_saved_regs[i] = readl(mpp_base[i]);
+	return 0;
+}
+
+static void armada_3700_pinctrl_resume(void)
+{
+	int i;
+
+	for (i = 0; i < I_MAXCONTROLLER; i++)
+		if (mpp_base[i] && (!IS_ERR(mpp_base[i])))
+			writel(mpp_saved_regs[i], mpp_base[i]);
+}
+
+static struct syscore_ops armada_3700_pinctrl_syscore_ops = {
+	.suspend = armada_3700_pinctrl_suspend,
+	.resume = armada_3700_pinctrl_resume,
+};
+#endif
+
 static struct platform_driver armada_3700_pinctrl_driver = {
 	.driver = {
 		.name = "armada-3700-pinctrl",
@@ -983,7 +1011,27 @@ static int armada_3700_pinctrl_remove(struct platform_device *pdev)
 	.remove = armada_3700_pinctrl_remove,
 };
 
-module_platform_driver(armada_3700_pinctrl_driver);
+static int __init armada_3700_pinctrl_init(void)
+{
+#ifdef CONFIG_PM
+	/*
+	 * Register syscore ops for save/restore of registers across suspend.
+	 * It's important to ensure that this driver is running at an earlier
+	 * initcall level than any arch-specific init calls.
+	 */
+	register_syscore_ops(&armada_3700_pinctrl_syscore_ops);
+#endif
+	return platform_driver_register(&armada_3700_pinctrl_driver);
+}
+
+postcore_initcall(armada_3700_pinctrl_init);
+
+static void __exit armada_3700_pinctrl_exit(void)
+{
+	platform_driver_unregister(&armada_3700_pinctrl_driver);
+}
+
+module_exit(armada_3700_pinctrl_exit);
 
 MODULE_AUTHOR("Terry Zhou <bjzhou@marvell.com>");
 MODULE_DESCRIPTION("Marvell Armada 3700 pinctrl driver");
-- 
1.7.9.5

