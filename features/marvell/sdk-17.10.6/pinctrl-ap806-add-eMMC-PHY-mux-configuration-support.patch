From 7f379b8db636f17d5949c077ded048906467f17b Mon Sep 17 00:00:00 2001
From: Evan Wang <xswang@marvell.com>
Date: Thu, 3 Aug 2017 15:16:35 +0800
Subject: [PATCH 1199/1345] pinctrl: ap806: add eMMC PHY mux configuration
 support

commit  870bea8026268c9a083f97a5a318775a2bda3c2f from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Before this patch the eMMC PHY mux configured is done in
uboot, and in order to remove the dependency, the kernel
should also support it.

Change-Id: I20751537bba09848b891d8f246c3bc69724a24e0
Signed-off-by: Evan Wang <xswang@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/42567
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Marcin Wojtas <mw@semihalf.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../pinctrl/marvell,armada-ap806-pinctrl.txt       |    5 ++-
 drivers/pinctrl/mvebu/pinctrl-armada-ap806.c       |   36 ++++++++++++++++++++
 2 files changed, 40 insertions(+), 1 deletion(-)

diff --git a/Documentation/devicetree/bindings/pinctrl/marvell,armada-ap806-pinctrl.txt b/Documentation/devicetree/bindings/pinctrl/marvell,armada-ap806-pinctrl.txt
index f94f4cc..d00ac6d 100644
--- a/Documentation/devicetree/bindings/pinctrl/marvell,armada-ap806-pinctrl.txt
+++ b/Documentation/devicetree/bindings/pinctrl/marvell,armada-ap806-pinctrl.txt
@@ -5,7 +5,10 @@ part and usage.
 
 Required properties:
 - compatible: "marvell,ap806-pinctrl"
-- reg: register specifier of MPP registers
+- reg: register ranges as listed in the reg-names property
+- reg-names: include the following entries:
+             "pinctrl": pinctrl registers, which is mandatory and must be first one.
+             "mmcio": eMMC PHY IO Control 0 Register.
 
 Available MPP pins/groups and functions:
 Note: Brackets (x) are not part of the MPP name for the Marvell function and are
diff --git a/drivers/pinctrl/mvebu/pinctrl-armada-ap806.c b/drivers/pinctrl/mvebu/pinctrl-armada-ap806.c
index ba585170..d4a15f6 100644
--- a/drivers/pinctrl/mvebu/pinctrl-armada-ap806.c
+++ b/drivers/pinctrl/mvebu/pinctrl-armada-ap806.c
@@ -20,10 +20,14 @@
 #include <linux/of.h>
 #include <linux/of_device.h>
 #include <linux/pinctrl/pinctrl.h>
+#include <linux/of_address.h>
 
 #include "pinctrl-mvebu.h"
 
+#define EMMC_PHY_CTRL_SDPHY_EN	BIT(0)
+
 static void __iomem *mpp_base;
+static void __iomem *emmc_phy_ctrl_reg;
 
 static int armada_ap806_mpp_ctrl_get(unsigned pid, unsigned long *config)
 {
@@ -32,6 +36,26 @@ static int armada_ap806_mpp_ctrl_get(unsigned pid, unsigned long *config)
 
 static int armada_ap806_mpp_ctrl_set(unsigned pid, unsigned long config)
 {
+	/* To enable SDIO/eMMC in Armada-APN806, need to configure PHY mux.
+	 * eMMC/SD PHY register responsible for muxing between MPPs and SD/eMMC
+	 * controller:
+	 * - Bit0 enabled SDIO/eMMC PHY is used as a MPP muxltiplexer,
+	 * - Bit0 disabled SDIO/eMMC PHY is connected to SDIO/eMMC controller
+	 * If pin function is set to eMMC/SD, then configure the eMMC/SD PHY
+	 * muxltiplexer register to be on SDIO/eMMC controller
+	 * If the MPP is configured to sdio, the pin0 as clk is mandatory,
+	 * to avoid config eMMC/SD PHY register repeatly, it is ok to set the
+	 * register only when MPP pin0(pid==0) is configured as "sdio"
+	 * (config == 0x1).
+	 */
+	if (emmc_phy_ctrl_reg && pid == 0 && config == 0x1) {
+		u32 reg;
+
+		reg = readl(emmc_phy_ctrl_reg);
+		reg &= ~EMMC_PHY_CTRL_SDPHY_EN;
+		writel(reg, emmc_phy_ctrl_reg);
+	}
+
 	return default_mpp_ctrl_set(mpp_base, pid, config);
 }
 
@@ -135,6 +159,18 @@ static int armada_ap806_pinctrl_probe(struct platform_device *pdev)
 	if (IS_ERR(mpp_base))
 		return PTR_ERR(mpp_base);
 
+	/* Get the eMMC PHY IO Control 0 Register base
+	 * Usage of this reg will be required in case MMC is enabled.
+	 */
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "mmcio");
+	if (res) {
+		emmc_phy_ctrl_reg = devm_ioremap_resource(&pdev->dev, res);
+		if (IS_ERR(emmc_phy_ctrl_reg))
+			return PTR_ERR(emmc_phy_ctrl_reg);
+	} else {
+		dev_warn(&pdev->dev, "mmcio reg not present in DT\n");
+	}
+
 	soc->variant = 0; /* no variants for Armada AP806 */
 	soc->controls = armada_ap806_mpp_controls;
 	soc->ncontrols = ARRAY_SIZE(armada_ap806_mpp_controls);
-- 
1.7.9.5

