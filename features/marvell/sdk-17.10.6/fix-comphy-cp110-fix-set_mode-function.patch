From 938d0e9a42181502cb1915ff91f1914cc9a25c29 Mon Sep 17 00:00:00 2001
From: Igal Liberman <igall@marvell.com>
Date: Tue, 24 Jan 2017 19:59:05 +0200
Subject: [PATCH 0757/1345] fix: comphy: cp110: fix set_mode function

commit  98d403a19c0c72660821e3e7df3bfb832214d888 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Recent comphy updates changed the handling on the mode.
mvebu_comphy_set_mode() was not updated accordingly.

This patch fixes mvebu_comphy_set_mode() by changing
the lookup method, taking into account new mode and
id entries.

In addition, improve comment in mvebu_comphy_of_xlate.

Change-Id: I0ff0b14f44e1b6c009fb8e3540a1a3846e4860f9
Signed-off-by: Igal Liberman <igall@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/36000
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/phy/phy-comphy-mvebu.c |   18 +++++++++++++++---
 1 file changed, 15 insertions(+), 3 deletions(-)

diff --git a/drivers/phy/phy-comphy-mvebu.c b/drivers/phy/phy-comphy-mvebu.c
index 7ab99a6..bc466ec 100644
--- a/drivers/phy/phy-comphy-mvebu.c
+++ b/drivers/phy/phy-comphy-mvebu.c
@@ -31,9 +31,17 @@ int mvebu_comphy_set_mode(struct phy *phy, enum phy_mode mode)
 
 	dev_dbg(priv->dev, "%s: Enter\n", __func__);
 
-	for (i = 0; i < MVEBU_COMPHY_FUNC_MAX; i++)
-		if (priv->soc_info->functions[comphy->index][i] == (int)mode)
+	for (i = 0; i < MVEBU_COMPHY_FUNC_MAX; i++) {
+		/* We need to find a match between requested mode and
+		 * the SoC configuration which is stored in
+		 * mvebu_comphy_soc_info.
+		 */
+		int functions = priv->soc_info->functions[comphy->index][i];
+
+		if (COMPHY_GET_MODE(functions) == COMPHY_GET_MODE((int)mode) &&
+		    COMPHY_GET_ID(functions) == COMPHY_GET_ID((int)mode))
 			break;
+	}
 
 	if (i == MVEBU_COMPHY_FUNC_MAX) {
 		dev_err(priv->dev, "can't set mode 0x%x for COMPHY%d\n",
@@ -104,8 +112,12 @@ static struct phy *mvebu_comphy_of_xlate(struct device *dev,
 	}
 
 	for (i = 0; i < MVEBU_COMPHY_FUNC_MAX; i++) {
+		/* We need to find a match between requested mode and
+		 * the SoC configuration which is stored in
+		 * mvebu_comphy_soc_info.
+		 */
 		int functions = priv->soc_info->functions[lane][i];
-		/* Only comphy mode and id are checked here */
+
 		if (COMPHY_GET_MODE(functions) == COMPHY_GET_MODE(mode) &&
 		    COMPHY_GET_ID(functions) == COMPHY_GET_ID(mode))
 			break;
-- 
1.7.9.5

