From 12a18341ea7e6f3a551e58721e23e87f27b56885 Mon Sep 17 00:00:00 2001
From: Yelena Krivosheev <yelena@marvell.com>
Date: Sun, 25 Jun 2017 13:20:49 +0300
Subject: [PATCH 1042/1345] net: fix internal BM SRAM oversize definition

commit  74c54179836e0ea53495ae951f641021d3a17baf from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

This cause to eMMC cannot be probed.
Fix also for armv7 driver.

Change-Id: I2099db23b5a40c3052a441570ad5e2d0efb0d869
Signed-off-by: Yelena Krivosheev <yelena@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/40774
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Wilson Ding <dingwei@marvell.com>
Verified-Armada37x0: Wilson Ding <dingwei@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/boot/dts/armada-38x.dtsi            |    4 ++--
 arch/arm64/boot/dts/marvell/armada-37xx.dtsi |    2 +-
 drivers/net/ethernet/marvell/mvneta_bm.c     |   22 +++++++++++++++++++---
 drivers/net/ethernet/marvell/mvneta_bm.h     |    4 ++--
 4 files changed, 24 insertions(+), 8 deletions(-)

diff --git a/arch/arm/boot/dts/armada-38x.dtsi b/arch/arm/boot/dts/armada-38x.dtsi
index c181ec0..936c158 100644
--- a/arch/arm/boot/dts/armada-38x.dtsi
+++ b/arch/arm/boot/dts/armada-38x.dtsi
@@ -681,8 +681,8 @@
 
 		bm_bppi: bm-bppi {
 			compatible = "mmio-sram";
-			reg = <MBUS_ID(0x0c, 0x04) 0 0x100000>;
-			ranges = <0 MBUS_ID(0x0c, 0x04) 0 0x100000>;
+			reg = <MBUS_ID(0x0c, 0x04) 0 0x1000>;
+			ranges = <0 MBUS_ID(0x0c, 0x04) 0 0x1000>;
 			#address-cells = <1>;
 			#size-cells = <1>;
 			clocks = <&gateclk 13>;
diff --git a/arch/arm64/boot/dts/marvell/armada-37xx.dtsi b/arch/arm64/boot/dts/marvell/armada-37xx.dtsi
index 36e2afc..c7d4874 100644
--- a/arch/arm64/boot/dts/marvell/armada-37xx.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-37xx.dtsi
@@ -520,7 +520,7 @@
 
 			bm_bppi: bm-bppi {
 				compatible = "mmio-sram";
-				reg = <0xc8000 0x100000>;
+				reg = <0xc8000 0x1000>;
 				clocks = <&sgateclk 9>;
 				no-memory-wc;
 				status = "disabled";
diff --git a/drivers/net/ethernet/marvell/mvneta_bm.c b/drivers/net/ethernet/marvell/mvneta_bm.c
index 2d54fea..4363802 100644
--- a/drivers/net/ethernet/marvell/mvneta_bm.c
+++ b/drivers/net/ethernet/marvell/mvneta_bm.c
@@ -18,6 +18,7 @@
 #include <linux/module.h>
 #include <linux/netdevice.h>
 #include <linux/of.h>
+#include <linux/of_platform.h>
 #include <linux/platform_device.h>
 #include <linux/skbuff.h>
 #include <net/hwbm.h>
@@ -386,6 +387,22 @@ static int mvneta_bm_init(struct mvneta_bm *priv)
 static int mvneta_bm_get_sram(struct device_node *dn,
 			      struct mvneta_bm *priv)
 {
+	struct platform_device *pdev;
+	struct device_node *np_pool;
+	struct resource *res;
+
+	np_pool = of_parse_phandle(dn, "internal-mem", 0);
+	if (!np_pool)
+		return -1;
+	pdev = of_find_device_by_node(np_pool);
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		pr_err("%s:: found no memory resource\n", __func__);
+		return -EINVAL;
+	}
+	/* get size of internal SRAM access region */
+	priv->bppi_size = resource_size(res);
+
 	priv->bppi_pool = of_gen_pool_get(dn, "internal-mem", 0);
 	if (!priv->bppi_pool) {
 		pr_err("%s:: no internal-mem node found\n", __func__);
@@ -393,7 +410,7 @@ static int mvneta_bm_get_sram(struct device_node *dn,
 	}
 
 	priv->bppi_virt_addr = gen_pool_dma_alloc(priv->bppi_pool,
-						  MVNETA_BM_BPPI_SIZE,
+						  priv->bppi_size,
 						  &priv->bppi_phys_addr);
 	if (!priv->bppi_virt_addr)
 		return -ENOMEM;
@@ -403,8 +420,7 @@ static int mvneta_bm_get_sram(struct device_node *dn,
 
 static void mvneta_bm_put_sram(struct mvneta_bm *priv)
 {
-	gen_pool_free(priv->bppi_pool, priv->bppi_phys_addr,
-		      MVNETA_BM_BPPI_SIZE);
+	gen_pool_free(priv->bppi_pool, priv->bppi_phys_addr, priv->bppi_size);
 }
 
 static int mvneta_bm_probe(struct platform_device *pdev)
diff --git a/drivers/net/ethernet/marvell/mvneta_bm.h b/drivers/net/ethernet/marvell/mvneta_bm.h
index a1c3a74..7de0fe5 100644
--- a/drivers/net/ethernet/marvell/mvneta_bm.h
+++ b/drivers/net/ethernet/marvell/mvneta_bm.h
@@ -88,8 +88,6 @@
 
 #define MVNETA_BM_POOL_ACCESS_OFFS		8
 
-#define MVNETA_BM_BPPI_SIZE			0x100000
-
 #define MVNETA_RX_BUF_SIZE(pkt_size)   ((pkt_size) + NET_SKB_PAD)
 
 enum mvneta_bm_type {
@@ -109,6 +107,8 @@ struct mvneta_bm {
 	void __iomem *bppi_virt_addr;
 	/* BPPI physical base address */
 	dma_addr_t bppi_phys_addr;
+	/* BPPI size */
+	size_t bppi_size;
 
 	/* BM pools */
 	struct mvneta_bm_pool *bm_pools;
-- 
1.7.9.5

