From b7851caac162d085ede96e54886452fa72a93fb2 Mon Sep 17 00:00:00 2001
From: Igal Liberman <igall@marvell.com>
Date: Sun, 13 Nov 2016 15:44:21 +0200
Subject: [PATCH 0572/1345] phy: add phy_get_mode callback

commit  676c3e58d66bad502a18abed8b6d532a493df965 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

get_mode call back will allow phy consumer to be aware of the
operation mode of a specific phy.

Change-Id: I5b92e05e661bd37b94fc382943d4482bb0e378a5
Signed-off-by: Igal Liberman <igall@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/33723
Reviewed-by: Omri Itach <omrii@marvell.com>
Tested-by: Omri Itach <omrii@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/phy/phy-core.c  |   15 +++++++++++++++
 include/linux/phy/phy.h |   10 ++++++++++
 2 files changed, 25 insertions(+)

diff --git a/drivers/phy/phy-core.c b/drivers/phy/phy-core.c
index a268f4d..bf1e931 100644
--- a/drivers/phy/phy-core.c
+++ b/drivers/phy/phy-core.c
@@ -372,6 +372,21 @@ int phy_reset(struct phy *phy)
 }
 EXPORT_SYMBOL_GPL(phy_reset);
 
+enum phy_mode phy_get_mode(struct phy *phy)
+{
+	int ret;
+
+	if (!phy || !phy->ops->get_mode)
+		return 0;
+
+	mutex_lock(&phy->mutex);
+	ret = phy->ops->get_mode(phy);
+	mutex_unlock(&phy->mutex);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(phy_get_mode);
+
 /**
  * _of_phy_get() - lookup and obtain a reference to a phy by phandle
  * @np: device_node for which to get the phy
diff --git a/include/linux/phy/phy.h b/include/linux/phy/phy.h
index 78bb0d7..fbbe7f5 100644
--- a/include/linux/phy/phy.h
+++ b/include/linux/phy/phy.h
@@ -37,6 +37,7 @@ enum phy_mode {
  * @power_off: powering off the phy
  * @set_mode: set the mode of the phy
  * @reset: resetting the phy
+ * @get_mode: get the mode of the phy
  * @owner: the module owner containing the ops
  */
 struct phy_ops {
@@ -46,6 +47,7 @@ struct phy_ops {
 	int	(*power_off)(struct phy *phy);
 	int	(*set_mode)(struct phy *phy, enum phy_mode mode);
 	int	(*reset)(struct phy *phy);
+	enum phy_mode	(*get_mode)(struct phy *phy);
 	struct module *owner;
 };
 
@@ -139,6 +141,7 @@ static inline void *phy_get_drvdata(struct phy *phy)
 int phy_power_off(struct phy *phy);
 int phy_set_mode(struct phy *phy, enum phy_mode mode);
 int phy_reset(struct phy *phy);
+enum phy_mode phy_get_mode(struct phy *phy);
 static inline int phy_get_bus_width(struct phy *phy)
 {
 	return phy->attrs.bus_width;
@@ -260,6 +263,13 @@ static inline int phy_reset(struct phy *phy)
 	return -ENOSYS;
 }
 
+static inline enum phy_mode phy_get_mode(struct phy *phy)
+{
+	if (!phy)
+		return 0;
+	return -ENOSYS;
+}
+
 static inline int phy_get_bus_width(struct phy *phy)
 {
 	return -ENOSYS;
-- 
1.7.9.5

