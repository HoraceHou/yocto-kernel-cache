From b06495d07b46e3f0ca75b48e09c4c540063a2e32 Mon Sep 17 00:00:00 2001
From: Igal Liberman <igall@marvell.com>
Date: Sun, 23 Apr 2017 18:44:46 +0300
Subject: [PATCH 0979/1345] fix: crypto: inside-secure: fix EIP197 driver DMA
 handling

commit  0a0bf11564a2755255b5519a14a05c60259523e2 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

According to a review received for EIP197 driver:
Drivers which use DMA API calls must use only DMA addresses
and not physical addresses as used now in EIP197 driver
(when using physical addresses there's no guarantee that
the physical addresses will give the expected result).

Change-Id: Iaa9d3355a9db6ed6a6aafd87c07090ad3e51fcd7
Signed-off-by: Igal Liberman <igall@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/38844
Reviewed-by: Omri Itach <omrii@marvell.com>
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/inside-secure/cipher.c   |   12 +++++-------
 drivers/crypto/inside-secure/hash.c     |   14 ++++++--------
 drivers/crypto/inside-secure/ring.c     |    6 +++---
 drivers/crypto/inside-secure/safexcel.c |    7 ++-----
 drivers/crypto/inside-secure/safexcel.h |    6 +++---
 5 files changed, 19 insertions(+), 26 deletions(-)

diff --git a/drivers/crypto/inside-secure/cipher.c b/drivers/crypto/inside-secure/cipher.c
index 94050a1..f3df43a 100644
--- a/drivers/crypto/inside-secure/cipher.c
+++ b/drivers/crypto/inside-secure/cipher.c
@@ -186,7 +186,6 @@ static int safexcel_aes_send(struct crypto_async_request *async,
 	struct safexcel_command_desc *cdesc;
 	struct safexcel_result_desc *rdesc;
 	struct scatterlist *sg;
-	phys_addr_t ctxr_phys;
 	int nr_src, nr_dst, n_cdesc = 0, n_rdesc = 0, queued = req->nbytes;
 	int i, ret = 0;
 
@@ -210,15 +209,12 @@ static int safexcel_aes_send(struct crypto_async_request *async,
 		}
 	}
 
-	ctxr_phys = dma_to_phys(priv->dev, ctx->base.ctxr_dma);
-
 	memcpy(ctx->base.ctxr->data, ctx->key, ctx->key_len);
 
 	spin_lock_bh(&priv->ring[ring].egress_lock);
 
 	/* command descriptors */
 	for_each_sg(req->src, sg, nr_src, i) {
-		phys_addr_t sg_phys = dma_to_phys(priv->dev, sg_dma_address(sg));
 		int len = sg_dma_len(sg);
 
 		/* Do not overflow the request */
@@ -226,7 +222,9 @@ static int safexcel_aes_send(struct crypto_async_request *async,
 			len = queued;
 
 		cdesc = safexcel_add_cdesc(priv, ring, !n_cdesc, !(queued - len),
-					   sg_phys, len, req->nbytes, ctxr_phys);
+					   sg_dma_address(sg), len, req->nbytes,
+					   ctx->base.ctxr_dma);
+
 		if (IS_ERR(cdesc)) {
 			/* No space left in the command descriptor ring */
 			ret = PTR_ERR(cdesc);
@@ -247,10 +245,10 @@ static int safexcel_aes_send(struct crypto_async_request *async,
 	/* result descriptors */
 	for_each_sg(req->dst, sg, nr_dst, i) {
 		bool first = !i, last = (i == nr_dst - 1);
-		phys_addr_t sg_phys = dma_to_phys(priv->dev, sg_dma_address(sg));
 		u32 len = sg_dma_len(sg);
 
-		rdesc = safexcel_add_rdesc(priv, ring, first, last, sg_phys, len);
+		rdesc = safexcel_add_rdesc(priv, ring, first, last,
+					   sg_dma_address(sg), len);
 		if (IS_ERR(rdesc)) {
 			/* No space left in the result descriptor ring */
 			ret = PTR_ERR(rdesc);
diff --git a/drivers/crypto/inside-secure/hash.c b/drivers/crypto/inside-secure/hash.c
index 4fd654f..9611dd8 100644
--- a/drivers/crypto/inside-secure/hash.c
+++ b/drivers/crypto/inside-secure/hash.c
@@ -177,7 +177,6 @@ static int safexcel_ahash_send(struct crypto_async_request *async, int ring,
 	struct scatterlist *sg;
 	int i, nents, queued, len = req->len, n_cdesc = 0, ret = 0;
 	int cache_len = do_div(len, crypto_ahash_blocksize(ahash));
-	phys_addr_t ctxr_phys = 0;
 
 	if (req->last_req) {
 		if (!cache_len)
@@ -189,8 +188,6 @@ static int safexcel_ahash_send(struct crypto_async_request *async, int ring,
 			       ~(crypto_ahash_blocksize(ahash) - 1);
 	}
 
-	ctxr_phys = dma_to_phys(priv->dev, ctx->base.ctxr_dma);
-
 	spin_lock_bh(&priv->ring[ring].egress_lock);
 
 	/* Add a command descriptor for the cached data, if any */
@@ -205,8 +202,9 @@ static int safexcel_ahash_send(struct crypto_async_request *async, int ring,
 		ctx->base.cache_sz = cache_len;
 		first_cdesc = safexcel_add_cdesc(priv, ring, 1,
 						 (cache_len == len),
-						 dma_to_phys(priv->dev, ctx->base.cache_dma),
-						 cache_len, len, ctxr_phys);
+						 ctx->base.cache_dma,
+						 cache_len, len,
+						 ctx->base.ctxr_dma);
 		if (IS_ERR(first_cdesc)) {
 			ret = PTR_ERR(first_cdesc);
 			goto free_cache;
@@ -226,7 +224,6 @@ static int safexcel_ahash_send(struct crypto_async_request *async, int ring,
 	}
 
 	for_each_sg(areq->src, sg, nents, i) {
-		phys_addr_t sg_phys = dma_to_phys(priv->dev, sg_dma_address(sg));
 		int sglen = sg_dma_len(sg);
 
 		/* Do not overflow the request */
@@ -234,8 +231,9 @@ static int safexcel_ahash_send(struct crypto_async_request *async, int ring,
 			sglen = queued;
 
 		cdesc = safexcel_add_cdesc(priv, ring, !n_cdesc,
-					   !(queued - sglen), sg_phys, sglen,
-					   len, ctxr_phys);
+					   !(queued - sglen), sg_dma_address(sg),
+					   sglen, len, ctx->base.ctxr_dma);
+
 		if (IS_ERR(cdesc)) {
 			ret = PTR_ERR(cdesc);
 			goto cdesc_rollback;
diff --git a/drivers/crypto/inside-secure/ring.c b/drivers/crypto/inside-secure/ring.c
index 7d0d66c..6ca3ec1 100644
--- a/drivers/crypto/inside-secure/ring.c
+++ b/drivers/crypto/inside-secure/ring.c
@@ -111,9 +111,9 @@ void safexcel_ring_rollback_wptr(struct safexcel_crypto_priv *priv,
 struct safexcel_command_desc *safexcel_add_cdesc(struct safexcel_crypto_priv *priv,
 						 int ring_id,
 						 bool first, bool last,
-						 phys_addr_t data, u32 data_len,
+						 dma_addr_t data, u32 data_len,
 						 u32 full_data_len,
-						 phys_addr_t context) {
+						 dma_addr_t context) {
 	struct safexcel_command_desc *cdesc;
 	int i;
 
@@ -158,7 +158,7 @@ struct safexcel_command_desc *safexcel_add_cdesc(struct safexcel_crypto_priv *pr
 struct safexcel_result_desc *safexcel_add_rdesc(struct safexcel_crypto_priv *priv,
 						int ring_id,
 						bool first, bool last,
-						phys_addr_t data, u32 len)
+						dma_addr_t data, u32 len)
 {
 	struct safexcel_result_desc *rdesc;
 
diff --git a/drivers/crypto/inside-secure/safexcel.c b/drivers/crypto/inside-secure/safexcel.c
index 5b45c8b..ed8441a 100644
--- a/drivers/crypto/inside-secure/safexcel.c
+++ b/drivers/crypto/inside-secure/safexcel.c
@@ -791,16 +791,13 @@ int safexcel_invalidate_cache(struct crypto_async_request *async,
 {
 	struct safexcel_command_desc *cdesc;
 	struct safexcel_result_desc *rdesc;
-	phys_addr_t ctxr_phys;
 	int ret;
 
-	ctxr_phys = dma_to_phys(priv->dev, ctxr_dma);
-
 	spin_lock_bh(&priv->ring[ring].egress_lock);
 
 	/* prepare command descriptor */
 	cdesc = safexcel_add_cdesc(priv, ring, true, true,
-				   0, 0, 0, ctxr_phys);
+				   0, 0, 0, ctxr_dma);
 
 	if (IS_ERR(cdesc)) {
 		ret = PTR_ERR(cdesc);
@@ -814,7 +811,7 @@ int safexcel_invalidate_cache(struct crypto_async_request *async,
 				       CONTEXT_CONTROL_HW_SERVICES_OFFSET;
 
 	/* prepare result descriptor */
-	rdesc = safexcel_add_rdesc(priv, ring, true, true, ctxr_phys, 0);
+	rdesc = safexcel_add_rdesc(priv, ring, true, true, ctxr_dma, 0);
 
 	if (IS_ERR(rdesc)) {
 		ret = PTR_ERR(rdesc);
diff --git a/drivers/crypto/inside-secure/safexcel.h b/drivers/crypto/inside-secure/safexcel.h
index 04445ea..b4b68ca 100644
--- a/drivers/crypto/inside-secure/safexcel.h
+++ b/drivers/crypto/inside-secure/safexcel.h
@@ -693,13 +693,13 @@ void safexcel_ring_rollback_wptr(struct safexcel_crypto_priv *priv,
 struct safexcel_command_desc *safexcel_add_cdesc(struct safexcel_crypto_priv *priv,
 						 int ring_id,
 						 bool first, bool last,
-						 phys_addr_t data, u32 len,
+						 dma_addr_t data, u32 len,
 						 u32 full_data_len,
-						 phys_addr_t context);
+						 dma_addr_t context);
 struct safexcel_result_desc *safexcel_add_rdesc(struct safexcel_crypto_priv *priv,
 						 int ring_id,
 						bool first, bool last,
-						phys_addr_t data, u32 len);
+						dma_addr_t data, u32 len);
 void safexcel_inv_complete(struct crypto_async_request *req, int error);
 
 /* available algorithms */
-- 
1.7.9.5

