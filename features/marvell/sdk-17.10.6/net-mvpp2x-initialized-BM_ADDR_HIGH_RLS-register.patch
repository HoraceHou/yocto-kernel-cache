From fba1db24992cba6fccccae6ca3bfb577d238a3fb Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Wed, 7 Dec 2016 14:17:12 +0200
Subject: [PATCH 0651/1345] net: mvpp2x: initialized BM_ADDR_HIGH_RLS register

commit  c5c7b0c72be23e8ac502831448d7ca980c57cb31 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- Initialized 0 for BM_ADDR_HIGH_RLS register.
  BM_ADDR_HIGH_RLS save high 32 Bits for 64 Bit address system
  If BM_ADDR_HIGH_RLS not initialized to 0 on 32 Bit address system could
  lead to writing to the random addresses.

Change-Id: I3eb3caa3a2f6fc3dbd443a1ecd1fafbfbb6c15e9
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/34448
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |   13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index 395bbfa..dda0e63 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -510,7 +510,7 @@ static int mv_pp2x_bm_pools_init(struct platform_device *pdev,
 
 static int mv_pp2x_bm_init(struct platform_device *pdev, struct mv_pp2x *priv)
 {
-	int i, err;
+	int i, err, cpu;
 	u8 first_pool = mv_pp2x_first_pool_get(priv);
 	u8 num_pools = MVPP2_BM_SWF_NUM_POOLS;
 
@@ -528,6 +528,17 @@ static int mv_pp2x_bm_init(struct platform_device *pdev, struct mv_pp2x *priv)
 	if (!priv->bm_pools)
 		return -ENOMEM;
 
+	/* On PPV22 high virtual and physical address buffer manager register should be
+	 * initialized to 0 to avoid writing to the random addresses an 32 Bit systems.
+	 */
+	if (priv->pp2_version == PPV22) {
+		for_each_online_cpu(cpu) {
+			/* Reset the BM virtual and physical address high register */
+			mv_pp2x_relaxed_write(&priv->hw, MVPP22_BM_PHY_VIRT_HIGH_RLS_REG,
+					      0, cpu);
+		}
+	}
+
 	err = mv_pp2x_bm_pools_init(pdev, priv, first_pool, num_pools);
 	if (err < 0)
 		return err;
-- 
1.7.9.5

