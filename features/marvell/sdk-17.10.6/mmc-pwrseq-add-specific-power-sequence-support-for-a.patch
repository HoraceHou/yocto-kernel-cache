From 2ddc0ac7e26dfc0d375cf7cce7c7a946bac6e380 Mon Sep 17 00:00:00 2001
From: Zhoujie Wu <zjwu@marvell.com>
Date: Tue, 22 Aug 2017 16:01:35 -0700
Subject: [PATCH 1220/1345] mmc: pwrseq: add specific power sequence support
 for a3700 sd

commit  22858ee79da7516f392eec8cfef2baeb5215371c from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Armada3700 board needs special SD power sequence to do power cycle before
init SD card. A3700 doesn't have separate power supply for SD vdd,
instead it only has a gpio expander IO pin PWR_EN_SD used to control the
enable of power supply for whole SD module, including VDD and SD card
detection.

The specific SD pwerseq for a3700 will do a power cycle when mmc_power_up,
but keep PWR_EN_SD as high when mmc_power_off for card detection.

Change-Id: I821337be09dd090f6f6de1958aa775fd30c79c6b
Signed-off-by: Zhoujie Wu <zjwu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/43543
Reviewed-by: Kostya Porotchkin <kostap@marvell.com>
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../bindings/mmc/mmc-pwrseq-a3700-sd.txt           |   13 +++
 drivers/mmc/core/Makefile                          |    2 +-
 drivers/mmc/core/pwrseq_a3700_sd.c                 |  102 ++++++++++++++++++++
 3 files changed, 116 insertions(+), 1 deletion(-)
 create mode 100644 Documentation/devicetree/bindings/mmc/mmc-pwrseq-a3700-sd.txt
 create mode 100644 drivers/mmc/core/pwrseq_a3700_sd.c

diff --git a/Documentation/devicetree/bindings/mmc/mmc-pwrseq-a3700-sd.txt b/Documentation/devicetree/bindings/mmc/mmc-pwrseq-a3700-sd.txt
new file mode 100644
index 0000000..7640e91
--- /dev/null
+++ b/Documentation/devicetree/bindings/mmc/mmc-pwrseq-a3700-sd.txt
@@ -0,0 +1,13 @@
+* Marvell armada3700 SD power sequence provider
+
+Required properties:
+- compatible: must be "mmc-pwrseq-a3700-sd".
+- pwren-gpios: contains a pwren GPIO specifier with the
+		   default active state
+
+Example:
+
+	sd_pwrseq: sd_pwrseq {
+		compatible = "mmc-pwrseq-a3700-sd";
+		pwren-gpios = <&expander0 4 GPIO_ACTIVE_HIGH>;
+	}
diff --git a/drivers/mmc/core/Makefile b/drivers/mmc/core/Makefile
index 7e3ed1a..41eca03 100644
--- a/drivers/mmc/core/Makefile
+++ b/drivers/mmc/core/Makefile
@@ -8,7 +8,7 @@ mmc_core-y			:= core.o bus.o host.o \
 				   sdio.o sdio_ops.o sdio_bus.o \
 				   sdio_cis.o sdio_io.o sdio_irq.o \
 				   slot-gpio.o
-mmc_core-$(CONFIG_OF)		+= pwrseq.o
+mmc_core-$(CONFIG_OF)		+= pwrseq.o pwrseq_a3700_sd.o
 obj-$(CONFIG_PWRSEQ_SIMPLE)	+= pwrseq_simple.o
 obj-$(CONFIG_PWRSEQ_SD8787)	+= pwrseq_sd8787.o
 obj-$(CONFIG_PWRSEQ_EMMC)	+= pwrseq_emmc.o
diff --git a/drivers/mmc/core/pwrseq_a3700_sd.c b/drivers/mmc/core/pwrseq_a3700_sd.c
new file mode 100644
index 0000000..2ce67ef
--- /dev/null
+++ b/drivers/mmc/core/pwrseq_a3700_sd.c
@@ -0,0 +1,102 @@
+/*
+ * Driver for Marvell armada3700 SD power sequence
+ *
+ * Copyright (C) 2017 Marvell, All Rights Reserved.
+ *
+ * Author:      Zhoujie Wu <zjwu@marvell.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ */
+
+#include <linux/delay.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/err.h>
+#include <linux/of_gpio.h>
+#include <linux/gpio/consumer.h>
+#include <linux/platform_device.h>
+
+#include <linux/mmc/host.h>
+
+#include "pwrseq.h"
+
+struct mmc_pwrseq_a3700 {
+	struct mmc_pwrseq pwrseq;
+	struct gpio_desc *pwren_gpio;
+};
+
+static void mmc_pwrseq_a3700_pre_power_on(struct mmc_host *host)
+{
+	struct mmc_pwrseq_a3700 *pwrseq = container_of(host->pwrseq,
+					struct mmc_pwrseq_a3700, pwrseq);
+
+	gpiod_set_value_cansleep(pwrseq->pwren_gpio, 0);
+	msleep(50);
+}
+
+static void mmc_pwrseq_a3700_post_power_on(struct mmc_host *host)
+{
+	struct mmc_pwrseq_a3700 *pwrseq = container_of(host->pwrseq,
+					struct mmc_pwrseq_a3700, pwrseq);
+
+	gpiod_set_value_cansleep(pwrseq->pwren_gpio, 1);
+}
+
+static struct mmc_pwrseq_ops mmc_pwrseq_a3700_ops = {
+	.pre_power_on = mmc_pwrseq_a3700_pre_power_on,
+	.post_power_on = mmc_pwrseq_a3700_post_power_on,
+};
+
+static int mmc_pwrseq_a3700_sd_probe(struct platform_device *pdev)
+{
+	struct mmc_pwrseq_a3700 *pwrseq;
+	struct device *dev = &pdev->dev;
+
+	pwrseq = devm_kzalloc(dev, sizeof(*pwrseq), GFP_KERNEL);
+	if (!pwrseq)
+		return -ENOMEM;
+
+	pwrseq->pwren_gpio = devm_gpiod_get(dev, "pwren", GPIOD_OUT_HIGH);
+	if (IS_ERR(pwrseq->pwren_gpio))
+		return PTR_ERR(pwrseq->pwren_gpio);
+
+	pwrseq->pwrseq.ops = &mmc_pwrseq_a3700_ops;
+	pwrseq->pwrseq.dev = dev;
+	pwrseq->pwrseq.owner = THIS_MODULE;
+	platform_set_drvdata(pdev, pwrseq);
+
+	return mmc_pwrseq_register(&pwrseq->pwrseq);
+}
+
+static int mmc_pwrseq_a3700_sd_remove(struct platform_device *pdev)
+{
+	struct mmc_pwrseq_a3700 *pwrseq = platform_get_drvdata(pdev);
+
+	mmc_pwrseq_unregister(&pwrseq->pwrseq);
+
+	return 0;
+}
+
+static const struct of_device_id mmc_pwrseq_a3700_sd_of_match[] = {
+	{ .compatible = "mmc-pwrseq-a3700-sd",},
+	{/* sentinel */},
+};
+
+MODULE_DEVICE_TABLE(of, mmc_pwrseq_a3700_sd_of_match);
+
+static struct platform_driver mmc_pwrseq_a3700_sd_driver = {
+	.probe = mmc_pwrseq_a3700_sd_probe,
+	.remove = mmc_pwrseq_a3700_sd_remove,
+	.driver = {
+		.name = "pwrseq_a3700_sd",
+		.of_match_table = mmc_pwrseq_a3700_sd_of_match,
+	},
+};
+
+module_platform_driver(mmc_pwrseq_a3700_sd_driver);
+MODULE_LICENSE("GPL v2");
-- 
1.7.9.5

