From 3292e8307775692a81e1ecd2395322685d94a965 Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Tue, 16 Aug 2016 14:31:08 +0300
Subject: [PATCH 0420/1345] net: mvpp2x: validate RX and TX queue size

commit  7045261a7c1b039dd4f84b58f3345dbc3bab1a73 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Change-Id: I5804f6f72563f9bcff281d8f5d3460f56e22a154
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/31978
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yuval Caduri <cyuval@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |   33 ++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index a7e69a1..b6bb098 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -2837,6 +2837,37 @@ int mv_pp2x_check_ringparam_valid(struct net_device *dev,
 	return 0;
 }
 
+void mv_pp2x_check_queue_size_valid(struct mv_pp2x_port *port)
+{
+	u16 tx_queue_size = port->tx_ring_size;
+	u16 rx_queue_size = port->rx_ring_size;
+
+	if (tx_queue_size == 0)
+		port->tx_ring_size = MVPP2_MAX_TXD;
+
+	if (rx_queue_size == 0)
+		port->rx_ring_size = MVPP2_MAX_RXD;
+
+	if (port->tx_ring_size > MVPP2_MAX_TXD)
+		port->tx_ring_size = MVPP2_MAX_TXD;
+	else if (!IS_ALIGNED(port->tx_ring_size, 16))
+		port->tx_ring_size = ALIGN(port->tx_ring_size, 16);
+
+	if (port->rx_ring_size > MVPP2_MAX_RXD)
+		port->rx_ring_size = MVPP2_MAX_RXD;
+	else if (!IS_ALIGNED(port->rx_ring_size, 16))
+		port->rx_ring_size = ALIGN(port->rx_ring_size, 16);
+
+	if (tx_queue_size != port->tx_ring_size)
+		pr_err("illegal Tx queue size value %d, round to %d\n",
+			    tx_queue_size, port->tx_ring_size);
+
+	if (rx_queue_size != port->rx_ring_size)
+		pr_err("illegal Rx queue size value %d, round to %d\n",
+			    rx_queue_size, port->rx_ring_size);
+
+}
+
 static int mv_pp2x_phy_connect(struct mv_pp2x_port *port)
 {
 	struct phy_device *phy_dev;
@@ -3869,6 +3900,8 @@ static int mv_pp2x_port_probe(struct platform_device *pdev,
 	port->tx_ring_size = tx_queue_size;
 	port->rx_ring_size = rx_queue_size;
 
+	mv_pp2x_check_queue_size_valid(port);
+
 	if (mv_pp2_num_cpu_irqs(port) < num_active_cpus() &&
 	    port->priv->pp2xdata->interrupt_tx_done == true) {
 		port->priv->pp2xdata->interrupt_tx_done = false;
-- 
1.7.9.5

