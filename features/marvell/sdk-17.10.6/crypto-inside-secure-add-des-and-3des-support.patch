From a841dc93e6781f5182c93f3413ff3cb663382e8c Mon Sep 17 00:00:00 2001
From: Ofer Heifetz <oferh@marvell.com>
Date: Thu, 11 Jan 2018 16:10:12 +0200
Subject: [PATCH 1292/1345] crypto: inside-secure: add des and 3des support

commit  cd02863c03594644413e400c33d30486f57ba647 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Change-Id: I58f8e627e85609586fddff53d5bce5ffa348fbd4
Signed-off-by: Ofer Heifetz <oferh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/48933
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/51673
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/inside-secure/cipher.c   |  324 +++++++++++++++++++++++++++----
 drivers/crypto/inside-secure/safexcel.c |    4 +
 drivers/crypto/inside-secure/safexcel.h |    7 +
 3 files changed, 301 insertions(+), 34 deletions(-)

diff --git a/drivers/crypto/inside-secure/cipher.c b/drivers/crypto/inside-secure/cipher.c
index 035f6f8..6b938a1 100644
--- a/drivers/crypto/inside-secure/cipher.c
+++ b/drivers/crypto/inside-secure/cipher.c
@@ -9,6 +9,7 @@
  */
 
 #include <crypto/aes.h>
+#include <crypto/des.h>
 #include <linux/dmapool.h>
 
 #include "safexcel.h"
@@ -18,11 +19,18 @@ enum safexcel_cipher_direction {
 	SAFEXCEL_DECRYPT,
 };
 
+enum safexcel_cipher_algo {
+	SAFEXCEL_DES,
+	SAFEXCEL_3DES,
+	SAFEXCEL_AES,
+};
+
 struct safexcel_cipher_ctx {
 	struct safexcel_context base;
 	struct safexcel_crypto_priv *priv;
 
 	u32 mode;
+	enum safexcel_cipher_algo algo;
 
 	__le32 key[8];
 	unsigned int key_len;
@@ -44,10 +52,25 @@ static void safexcel_cipher_token(struct safexcel_cipher_ctx *ctx,
 	unsigned offset = 0;
 
 	if (ctx->mode == CONTEXT_CONTROL_CRYPTO_MODE_CBC) {
-		offset = AES_BLOCK_SIZE / sizeof(u32);
-		memcpy(cdesc->control_data.token, req->info, AES_BLOCK_SIZE);
+		switch (ctx->algo) {
+		case SAFEXCEL_DES:
+			offset = DES_BLOCK_SIZE / sizeof(u32);
+			memcpy(cdesc->control_data.token, req->info, DES_BLOCK_SIZE);
+			cdesc->control_data.options |= EIP197_OPTION_2_TOKEN_IV_CMD;
+			break;
+
+		case SAFEXCEL_3DES:
+			offset = DES3_EDE_BLOCK_SIZE / sizeof(u32);
+			memcpy(cdesc->control_data.token, req->info, DES3_EDE_BLOCK_SIZE);
+			cdesc->control_data.options |= EIP197_OPTION_2_TOKEN_IV_CMD;
+			break;
 
-		cdesc->control_data.options |= EIP197_OPTION_4_TOKEN_IV_CMD;
+		case SAFEXCEL_AES:
+			offset = AES_BLOCK_SIZE / sizeof(u32);
+			memcpy(cdesc->control_data.token, req->info, AES_BLOCK_SIZE);
+			cdesc->control_data.options |= EIP197_OPTION_4_TOKEN_IV_CMD;
+			break;
+		}
 	}
 
 	token = (struct safexcel_token *)(cdesc->control_data.token + offset);
@@ -102,7 +125,7 @@ static int safexcel_context_control(struct safexcel_cipher_ctx *ctx,
 	struct safexcel_crypto_priv *priv = ctx->priv;
 	struct ablkcipher_request *req = ablkcipher_request_cast(async);
 	struct safexcel_cipher_req *sreq = ablkcipher_request_ctx(req);
-	int ctrl_size;
+	int ctrl_size = ctx->key_len / sizeof(u32);
 
 	if (sreq->direction == SAFEXCEL_ENCRYPT)
 		cdesc->control_data.control0 |= CONTEXT_CONTROL_TYPE_CRYPTO_OUT;
@@ -112,24 +135,28 @@ static int safexcel_context_control(struct safexcel_cipher_ctx *ctx,
 	cdesc->control_data.control0 |= CONTEXT_CONTROL_KEY_EN;
 	cdesc->control_data.control1 |= ctx->mode;
 
-	switch (ctx->key_len) {
-	case AES_KEYSIZE_128:
-		cdesc->control_data.control0 |= CONTEXT_CONTROL_CRYPTO_ALG_AES128;
-		ctrl_size = 4;
-		break;
-	case AES_KEYSIZE_192:
-		cdesc->control_data.control0 |= CONTEXT_CONTROL_CRYPTO_ALG_AES192;
-		ctrl_size = 6;
-		break;
-	case AES_KEYSIZE_256:
-		cdesc->control_data.control0 |= CONTEXT_CONTROL_CRYPTO_ALG_AES256;
-		ctrl_size = 8;
-		break;
-	default:
-		dev_err(priv->dev, "aes keysize not supported: %u\n",
-			ctx->key_len);
-		return -EINVAL;
+	if (ctx->algo == SAFEXCEL_AES) {
+		switch (ctx->key_len) {
+		case AES_KEYSIZE_128:
+			cdesc->control_data.control0 |= CONTEXT_CONTROL_CRYPTO_ALG_AES128;
+			break;
+		case AES_KEYSIZE_192:
+			cdesc->control_data.control0 |= CONTEXT_CONTROL_CRYPTO_ALG_AES192;
+			break;
+		case AES_KEYSIZE_256:
+			cdesc->control_data.control0 |= CONTEXT_CONTROL_CRYPTO_ALG_AES256;
+			break;
+		default:
+			dev_err(priv->dev, "aes keysize not supported: %u\n",
+				ctx->key_len);
+			return -EINVAL;
+		}
+	} else if (ctx->algo == SAFEXCEL_DES) {
+		cdesc->control_data.control0 |= CONTEXT_CONTROL_CRYPTO_ALG_DES;
+	} else if (ctx->algo == SAFEXCEL_3DES) {
+		cdesc->control_data.control0 |= CONTEXT_CONTROL_CRYPTO_ALG_3DES;
 	}
+
 	cdesc->control_data.control0 |= CONTEXT_CONTROL_SIZE(ctrl_size);
 
 	return 0;
@@ -188,7 +215,7 @@ static int safexcel_handle_req_result(struct safexcel_crypto_priv *priv, int rin
 }
 
 /* Send cipher command to the engine */
-static int safexcel_aes_send(struct crypto_async_request *async,
+static int safexcel_send_req(struct crypto_async_request *async,
 			     int ring, struct safexcel_request *request,
 			     int *commands, int *results)
 {
@@ -412,7 +439,7 @@ static int safexcel_send(struct crypto_async_request *async,
 		ret = safexcel_cipher_send_inv(async, ring, request,
 					       commands, results);
 	else
-		ret = safexcel_aes_send(async, ring, request,
+		ret = safexcel_send_req(async, ring, request,
 					commands, results);
 	return ret;
 }
@@ -459,17 +486,19 @@ static int safexcel_cipher_exit_inv(struct crypto_tfm *tfm)
 }
 
 /* Encrypt/Decrypt operation - Insert request to Crypto API queue */
-static int safexcel_aes(struct ablkcipher_request *req,
-			enum safexcel_cipher_direction dir, u32 mode)
+static int safexcel_queue_req(struct ablkcipher_request *req,
+			      enum safexcel_cipher_direction dir, u32 mode,
+			      enum safexcel_cipher_algo algo)
 {
 	struct safexcel_cipher_ctx *ctx = crypto_tfm_ctx(req->base.tfm);
 	struct safexcel_cipher_req *sreq = ablkcipher_request_ctx(req);
 	struct safexcel_crypto_priv *priv = ctx->priv;
 	int ret, ring;
 
-	sreq->direction = dir;
 	sreq->needs_inv = false;
+	sreq->direction = dir;
 	ctx->mode = mode;
+	ctx->algo = algo;
 
 	/*
 	 * Check if the context exists, if yes:
@@ -507,14 +536,16 @@ static int safexcel_aes(struct ablkcipher_request *req,
 
 static int safexcel_ecb_aes_encrypt(struct ablkcipher_request *req)
 {
-	return safexcel_aes(req, SAFEXCEL_ENCRYPT,
-			    CONTEXT_CONTROL_CRYPTO_MODE_ECB);
+	return safexcel_queue_req(req, SAFEXCEL_ENCRYPT,
+				  CONTEXT_CONTROL_CRYPTO_MODE_ECB,
+				  SAFEXCEL_AES);
 }
 
 static int safexcel_ecb_aes_decrypt(struct ablkcipher_request *req)
 {
-	return safexcel_aes(req, SAFEXCEL_DECRYPT,
-			    CONTEXT_CONTROL_CRYPTO_MODE_ECB);
+	return safexcel_queue_req(req, SAFEXCEL_DECRYPT,
+				  CONTEXT_CONTROL_CRYPTO_MODE_ECB,
+				  SAFEXCEL_AES);
 }
 
 static int safexcel_ablkcipher_cra_init(struct crypto_tfm *tfm)
@@ -594,14 +625,16 @@ struct safexcel_alg_template safexcel_alg_ecb_aes = {
 
 static int safexcel_cbc_aes_encrypt(struct ablkcipher_request *req)
 {
-	return safexcel_aes(req, SAFEXCEL_ENCRYPT,
-			    CONTEXT_CONTROL_CRYPTO_MODE_CBC);
+	return safexcel_queue_req(req, SAFEXCEL_ENCRYPT,
+				  CONTEXT_CONTROL_CRYPTO_MODE_CBC,
+				  SAFEXCEL_AES);
 }
 
 static int safexcel_cbc_aes_decrypt(struct ablkcipher_request *req)
 {
-	return safexcel_aes(req, SAFEXCEL_DECRYPT,
-			    CONTEXT_CONTROL_CRYPTO_MODE_CBC);
+	return safexcel_queue_req(req, SAFEXCEL_DECRYPT,
+				  CONTEXT_CONTROL_CRYPTO_MODE_CBC,
+				  SAFEXCEL_AES);
 }
 
 struct safexcel_alg_template safexcel_alg_cbc_aes = {
@@ -631,3 +664,226 @@ struct safexcel_alg_template safexcel_alg_cbc_aes = {
 		},
 	},
 };
+
+static int safexcel_cbc_des_encrypt(struct ablkcipher_request *req)
+{
+	return safexcel_queue_req(req, SAFEXCEL_ENCRYPT,
+				  CONTEXT_CONTROL_CRYPTO_MODE_CBC,
+				  SAFEXCEL_DES);
+}
+
+static int safexcel_cbc_des_decrypt(struct ablkcipher_request *req)
+{
+	return safexcel_queue_req(req, SAFEXCEL_DECRYPT,
+				  CONTEXT_CONTROL_CRYPTO_MODE_CBC,
+				  SAFEXCEL_DES);
+}
+
+static int safexcel_des_setkey(struct crypto_ablkcipher *cipher, const u8 *key,
+			       unsigned int len)
+{
+	struct crypto_tfm *tfm = crypto_ablkcipher_tfm(cipher);
+	struct safexcel_cipher_ctx *ctx = crypto_tfm_ctx(tfm);
+	u32 tmp[DES_EXPKEY_WORDS];
+	int ret;
+
+	if (len != DES_KEY_SIZE) {
+		crypto_ablkcipher_set_flags(cipher, CRYPTO_TFM_RES_BAD_KEY_LEN);
+		return -EINVAL;
+	}
+
+	ret = des_ekey(tmp, key);
+	if (!ret && (tfm->crt_flags & CRYPTO_TFM_REQ_WEAK_KEY)) {
+		tfm->crt_flags |= CRYPTO_TFM_RES_WEAK_KEY;
+		return -EINVAL;
+	}
+
+	/* if context exits and key changed, need to invalidate it */
+	if (ctx->base.ctxr_dma) {
+		if (memcmp(ctx->key, key, len))
+			ctx->base.needs_inv = true;
+	}
+
+	memcpy(ctx->key, key, len);
+
+	ctx->key_len = len;
+
+	return 0;
+}
+
+struct safexcel_alg_template safexcel_alg_cbc_des = {
+	.type = SAFEXCEL_ALG_TYPE_CIPHER,
+	.alg.crypto = {
+		.cra_name = "cbc(des)",
+		.cra_driver_name = "safexcel-cbc-des",
+		.cra_priority = 300,
+		.cra_flags = CRYPTO_ALG_TYPE_ABLKCIPHER | CRYPTO_ALG_ASYNC |
+			     CRYPTO_ALG_KERN_DRIVER_ONLY,
+		.cra_blocksize = DES_BLOCK_SIZE,
+		.cra_ctxsize = sizeof(struct safexcel_cipher_ctx),
+		.cra_alignmask = 0,
+		.cra_type = &crypto_ablkcipher_type,
+		.cra_module = THIS_MODULE,
+		.cra_init = safexcel_ablkcipher_cra_init,
+		.cra_exit = safexcel_ablkcipher_cra_exit,
+		.cra_u = {
+			.ablkcipher = {
+				.min_keysize = DES_KEY_SIZE,
+				.max_keysize = DES_KEY_SIZE,
+				.ivsize = DES_BLOCK_SIZE,
+				.setkey = safexcel_des_setkey,
+				.encrypt = safexcel_cbc_des_encrypt,
+				.decrypt = safexcel_cbc_des_decrypt,
+			},
+		},
+	},
+};
+
+static int safexcel_ecb_des_encrypt(struct ablkcipher_request *req)
+{
+	return safexcel_queue_req(req, SAFEXCEL_ENCRYPT,
+				  CONTEXT_CONTROL_CRYPTO_MODE_ECB,
+				  SAFEXCEL_DES);
+}
+
+static int safexcel_ecb_des_decrypt(struct ablkcipher_request *req)
+{
+	return safexcel_queue_req(req, SAFEXCEL_DECRYPT,
+				  CONTEXT_CONTROL_CRYPTO_MODE_ECB,
+				  SAFEXCEL_DES);
+}
+
+struct safexcel_alg_template safexcel_alg_ecb_des = {
+	.type = SAFEXCEL_ALG_TYPE_CIPHER,
+	.alg.crypto = {
+		.cra_name = "ecb(des)",
+		.cra_driver_name = "safexcel-ecb-des",
+		.cra_priority = 300,
+		.cra_flags = CRYPTO_ALG_TYPE_ABLKCIPHER | CRYPTO_ALG_ASYNC |
+			     CRYPTO_ALG_KERN_DRIVER_ONLY,
+		.cra_blocksize = DES_BLOCK_SIZE,
+		.cra_ctxsize = sizeof(struct safexcel_cipher_ctx),
+		.cra_alignmask = 0,
+		.cra_type = &crypto_ablkcipher_type,
+		.cra_module = THIS_MODULE,
+		.cra_init = safexcel_ablkcipher_cra_init,
+		.cra_exit = safexcel_ablkcipher_cra_exit,
+		.cra_u = {
+			.ablkcipher = {
+				.min_keysize = DES_KEY_SIZE,
+				.max_keysize = DES_KEY_SIZE,
+				.setkey = safexcel_des_setkey,
+				.encrypt = safexcel_ecb_des_encrypt,
+				.decrypt = safexcel_ecb_des_decrypt,
+			},
+		},
+	},
+};
+
+static int safexcel_cbc_des3_ede_encrypt(struct ablkcipher_request *req)
+{
+	return safexcel_queue_req(req, SAFEXCEL_ENCRYPT,
+				  CONTEXT_CONTROL_CRYPTO_MODE_CBC,
+				  SAFEXCEL_3DES);
+}
+
+static int safexcel_cbc_des3_ede_decrypt(struct ablkcipher_request *req)
+{
+	return safexcel_queue_req(req, SAFEXCEL_DECRYPT,
+				  CONTEXT_CONTROL_CRYPTO_MODE_CBC,
+				  SAFEXCEL_3DES);
+}
+
+static int safexcel_des3_ede_setkey(struct crypto_ablkcipher *cipher,
+				   const u8 *key, unsigned int len)
+{
+	struct crypto_tfm *tfm = crypto_ablkcipher_tfm(cipher);
+	struct safexcel_cipher_ctx *ctx = crypto_tfm_ctx(tfm);
+
+	if (len != DES3_EDE_KEY_SIZE) {
+		crypto_ablkcipher_set_flags(cipher, CRYPTO_TFM_RES_BAD_KEY_LEN);
+		return -EINVAL;
+	}
+
+	/* if context exits and key changed, need to invalidate it */
+	if (ctx->base.ctxr_dma) {
+		if (memcmp(ctx->key, key, len))
+			ctx->base.needs_inv = true;
+	}
+
+	memcpy(ctx->key, key, len);
+
+	ctx->key_len = len;
+
+	return 0;
+}
+
+struct safexcel_alg_template safexcel_alg_cbc_des3_ede = {
+	.type = SAFEXCEL_ALG_TYPE_CIPHER,
+	.alg.crypto = {
+		.cra_name = "cbc(des3_ede)",
+		.cra_driver_name = "safexcel-cbc-des3-ede",
+		.cra_priority = 300,
+		.cra_flags = CRYPTO_ALG_TYPE_ABLKCIPHER | CRYPTO_ALG_ASYNC |
+			     CRYPTO_ALG_KERN_DRIVER_ONLY,
+		.cra_blocksize = DES3_EDE_BLOCK_SIZE,
+		.cra_ctxsize = sizeof(struct safexcel_cipher_ctx),
+		.cra_alignmask = 0,
+		.cra_type = &crypto_ablkcipher_type,
+		.cra_module = THIS_MODULE,
+		.cra_init = safexcel_ablkcipher_cra_init,
+		.cra_exit = safexcel_ablkcipher_cra_exit,
+		.cra_u = {
+			.ablkcipher = {
+				.min_keysize = DES3_EDE_KEY_SIZE,
+				.max_keysize = DES3_EDE_KEY_SIZE,
+				.ivsize = DES3_EDE_BLOCK_SIZE,
+				.setkey = safexcel_des3_ede_setkey,
+				.encrypt = safexcel_cbc_des3_ede_encrypt,
+				.decrypt = safexcel_cbc_des3_ede_decrypt,
+			},
+		},
+	},
+};
+
+static int safexcel_ecb_des3_ede_encrypt(struct ablkcipher_request *req)
+{
+	return safexcel_queue_req(req, SAFEXCEL_ENCRYPT,
+				  CONTEXT_CONTROL_CRYPTO_MODE_ECB,
+				  SAFEXCEL_3DES);
+}
+
+static int safexcel_ecb_des3_ede_decrypt(struct ablkcipher_request *req)
+{
+	return safexcel_queue_req(req, SAFEXCEL_DECRYPT,
+				  CONTEXT_CONTROL_CRYPTO_MODE_ECB,
+				  SAFEXCEL_3DES);
+}
+
+struct safexcel_alg_template safexcel_alg_ecb_des3_ede = {
+	.type = SAFEXCEL_ALG_TYPE_CIPHER,
+	.alg.crypto = {
+		.cra_name = "ecb(des3_ede)",
+		.cra_driver_name = "safexcel-ecb-des3-ede",
+		.cra_priority = 300,
+		.cra_flags = CRYPTO_ALG_TYPE_ABLKCIPHER | CRYPTO_ALG_ASYNC |
+			     CRYPTO_ALG_KERN_DRIVER_ONLY,
+		.cra_blocksize = DES3_EDE_BLOCK_SIZE,
+		.cra_ctxsize = sizeof(struct safexcel_cipher_ctx),
+		.cra_alignmask = 0,
+		.cra_type = &crypto_ablkcipher_type,
+		.cra_module = THIS_MODULE,
+		.cra_init = safexcel_ablkcipher_cra_init,
+		.cra_exit = safexcel_ablkcipher_cra_exit,
+		.cra_u = {
+			.ablkcipher = {
+				.min_keysize = DES3_EDE_KEY_SIZE,
+				.max_keysize = DES3_EDE_KEY_SIZE,
+				.setkey = safexcel_des3_ede_setkey,
+				.encrypt = safexcel_ecb_des3_ede_encrypt,
+				.decrypt = safexcel_ecb_des3_ede_decrypt,
+			},
+		},
+	},
+};
+
diff --git a/drivers/crypto/inside-secure/safexcel.c b/drivers/crypto/inside-secure/safexcel.c
index a12a8b9..a7f3309 100644
--- a/drivers/crypto/inside-secure/safexcel.c
+++ b/drivers/crypto/inside-secure/safexcel.c
@@ -1146,6 +1146,10 @@ static int safexcel_request_ring_irq(struct platform_device *pdev, const char *n
 static struct safexcel_alg_template *safexcel_algs[] = {
 	&safexcel_alg_ecb_aes,
 	&safexcel_alg_cbc_aes,
+	&safexcel_alg_cbc_des,
+	&safexcel_alg_cbc_des3_ede,
+	&safexcel_alg_ecb_des,
+	&safexcel_alg_ecb_des3_ede,
 	&safexcel_alg_sha1,
 	&safexcel_alg_sha224,
 	&safexcel_alg_sha256,
diff --git a/drivers/crypto/inside-secure/safexcel.h b/drivers/crypto/inside-secure/safexcel.h
index 8946fac..1d9f0c8 100644
--- a/drivers/crypto/inside-secure/safexcel.h
+++ b/drivers/crypto/inside-secure/safexcel.h
@@ -385,6 +385,8 @@ struct safexcel_context_record {
 #define CONTEXT_CONTROL_NO_FINISH_HASH		BIT(5)
 #define CONTEXT_CONTROL_SIZE(n)			((n) << 8)
 #define CONTEXT_CONTROL_KEY_EN			BIT(16)
+#define CONTEXT_CONTROL_CRYPTO_ALG_DES		(0x0 << 17)
+#define CONTEXT_CONTROL_CRYPTO_ALG_3DES		(0x2 << 17)
 #define CONTEXT_CONTROL_CRYPTO_ALG_AES128	(0x5 << 17)
 #define CONTEXT_CONTROL_CRYPTO_ALG_AES192	(0x6 << 17)
 #define CONTEXT_CONTROL_CRYPTO_ALG_AES256	(0x7 << 17)
@@ -509,6 +511,7 @@ struct safexcel_control_data_desc {
 #define EIP197_OPTION_64BIT_CTX		BIT(1)
 #define EIP197_OPTION_CTX_CTRL_IN_CMD	BIT(8)
 #define EIP197_OPTION_4_TOKEN_IV_CMD	(GENMASK(11, 9))
+#define EIP197_OPTION_2_TOKEN_IV_CMD	(GENMASK(11, 10))
 
 /* Basic Command Descriptor format */
 struct safexcel_command_desc {
@@ -725,6 +728,10 @@ struct safexcel_result_desc *safexcel_add_rdesc(struct safexcel_crypto_priv *pri
 /* available algorithms */
 extern struct safexcel_alg_template safexcel_alg_ecb_aes;
 extern struct safexcel_alg_template safexcel_alg_cbc_aes;
+extern struct safexcel_alg_template safexcel_alg_cbc_des;
+extern struct safexcel_alg_template safexcel_alg_cbc_des3_ede;
+extern struct safexcel_alg_template safexcel_alg_ecb_des;
+extern struct safexcel_alg_template safexcel_alg_ecb_des3_ede;
 extern struct safexcel_alg_template safexcel_alg_sha1;
 extern struct safexcel_alg_template safexcel_alg_sha224;
 extern struct safexcel_alg_template safexcel_alg_sha256;
-- 
1.7.9.5

