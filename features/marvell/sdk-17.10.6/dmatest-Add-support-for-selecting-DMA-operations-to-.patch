From cff1a89d5f38d4fdff55744a51e0ed4b77cf8af2 Mon Sep 17 00:00:00 2001
From: Shadi Ammouri <shadi@marvell.com>
Date: Wed, 31 Aug 2016 12:56:03 +0300
Subject: [PATCH 0473/1345] dmatest: Add support for selecting DMA operations
 to be tested

commit  3e1c0983ea5c449b8fa06fc40d10fbdb0999fc26 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

This enabled selecting one of the Copy, XOR or PQ operations to be
tested by dmatest, and not necessarily use whatever is provided by
the DMA driver.

Change-Id: I0cd9dfa52d5870d468f3387c537472e5c4840575
Signed-off-by: Shadi Ammouri <shadi@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/32371
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/dma/dmatest.c |   17 +++++++++++++----
 1 file changed, 13 insertions(+), 4 deletions(-)

diff --git a/drivers/dma/dmatest.c b/drivers/dma/dmatest.c
index 2b47822..56ff548 100644
--- a/drivers/dma/dmatest.c
+++ b/drivers/dma/dmatest.c
@@ -85,6 +85,10 @@
 module_param(verbose, bool, S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(verbose, "Enable \"success\" result messages (default: off)");
 
+static unsigned int caps_mask = 0x7;
+module_param(caps_mask, uint, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(caps_mask, "Mask of required DMA capabilities to be tested. COPY=0x1, XOR=0x2, PQ=0x4  (default: 0x7 [all])");
+
 /**
  * struct dmatest_params - test parameters.
  * @buf_size:		size of the memcpy test buffer
@@ -877,25 +881,30 @@ static int dmatest_add_channel(struct dmatest_info *info,
 	dtc->chan = chan;
 	INIT_LIST_HEAD(&dtc->threads);
 
-	if (dma_has_cap(DMA_MEMCPY, dma_dev->cap_mask)) {
+	if ((caps_mask & (1 << DMA_MEMCPY)) &&
+	    dma_has_cap(DMA_MEMCPY, dma_dev->cap_mask)) {
 		if (dmatest == 0) {
 			cnt = dmatest_add_threads(info, dtc, DMA_MEMCPY);
 			thread_count += cnt > 0 ? cnt : 0;
 		}
 	}
 
-	if (dma_has_cap(DMA_SG, dma_dev->cap_mask)) {
+	if ((caps_mask & (1 << DMA_SG)) &&
+	    dma_has_cap(DMA_SG, dma_dev->cap_mask)) {
 		if (dmatest == 1) {
 			cnt = dmatest_add_threads(info, dtc, DMA_SG);
 			thread_count += cnt > 0 ? cnt : 0;
 		}
 	}
 
-	if (dma_has_cap(DMA_XOR, dma_dev->cap_mask)) {
+	if ((caps_mask & (1 << DMA_XOR)) &&
+	    dma_has_cap(DMA_XOR, dma_dev->cap_mask)) {
 		cnt = dmatest_add_threads(info, dtc, DMA_XOR);
 		thread_count += cnt > 0 ? cnt : 0;
 	}
-	if (dma_has_cap(DMA_PQ, dma_dev->cap_mask)) {
+
+	if ((caps_mask & (1 << DMA_PQ)) &&
+	    dma_has_cap(DMA_PQ, dma_dev->cap_mask)) {
 		cnt = dmatest_add_threads(info, dtc, DMA_PQ);
 		thread_count += cnt > 0 ? cnt : 0;
 	}
-- 
1.7.9.5

