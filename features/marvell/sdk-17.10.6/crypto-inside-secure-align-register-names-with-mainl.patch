From 6d4550c25de1ecd96cb41fd8b2d355b2b2cb8fc4 Mon Sep 17 00:00:00 2001
From: Ofer Heifetz <oferh@marvell.com>
Date: Mon, 15 Jan 2018 13:48:57 +0200
Subject: [PATCH 1293/1345] crypto: inside-secure: align register names with
 mainline LKv4.15

commit  ad063f1b8a20c16b8f580e910f7047c948822113 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Mainline driver implemented register offset differently than LSP
driver, this commit alignes the names according to LKv4.15

Change-Id: Ia406b81926d88d992bd88e3fc82d5c374a43394b
Signed-off-by: Ofer Heifetz <oferh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/49055
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/51674
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/inside-secure/safexcel.c |  222 +++++++++++------------
 drivers/crypto/inside-secure/safexcel.h |  298 +++++++++++++++----------------
 2 files changed, 254 insertions(+), 266 deletions(-)

diff --git a/drivers/crypto/inside-secure/safexcel.c b/drivers/crypto/inside-secure/safexcel.c
index a7f3309..1292959 100644
--- a/drivers/crypto/inside-secure/safexcel.c
+++ b/drivers/crypto/inside-secure/safexcel.c
@@ -185,7 +185,7 @@ static int eip197_trc_cache_init(struct device *dev,
 	 */
 	for (i = 0; i < rc_record_cnt; i++) {
 		/* Calculate byte offset for the current record */
-		reg_addr = EIP197_CLASSIF_RAM_ACCESS_SPACE + i * EIP197_RC_HEADER_WC * sizeof(u32);
+		reg_addr = EIP197_CLASSIFICATION_RAMS + i * EIP197_RC_HEADER_WC * sizeof(u32);
 
 		/* Write word 0 */
 		writel((EIP197_RC_NULL << EIP197_RC_HASH_COLLISION_PREV) | /* Hash_Collision_Prev */
@@ -222,7 +222,7 @@ static int eip197_trc_cache_init(struct device *dev,
 	}
 
 	/* Calculate byte offset for hash table */
-	rc_ht_byte_offset = EIP197_CLASSIF_RAM_ACCESS_SPACE +
+	rc_ht_byte_offset = EIP197_CLASSIFICATION_RAMS +
 			    rc_record_cnt * EIP197_RC_HEADER_WC * sizeof(u32);
 
 	/* Clear all hash table words */
@@ -262,11 +262,11 @@ static int eip197_trc_cache_init(struct device *dev,
 /* Load EIP197 firmare into the engine */
 static int eip197_load_fw(struct device *dev, struct safexcel_crypto_priv *priv)
 {
-	const struct firmware	*fw[MAX_FW_NR] = {0};
+	const struct firmware	*fw[FW_NB] = {0};
 	const u32		*fw_data;
-	int			i, ret, pe;
+	int			i, j, ret = 0, pe;
 	u32			fw_size, reg;
-	const char		*fw_file_name[MAX_FW_NR] = {"ifpp.bin",
+	const char		*fw_file_name[FW_NB] = {"ifpp.bin",
 							    "ipue.bin"};
 	char			fw_base[13] = {0};	/* "eip197/197X/\0" */
 	char			fw_full_name[25] = {0};
@@ -274,7 +274,7 @@ static int eip197_load_fw(struct device *dev, struct safexcel_crypto_priv *priv)
 	snprintf(fw_base, 13, "eip197/197%s/",
 		 (priv->eip197_hw_ver == EIP197B) ? "b" : "d");
 
-	for (i = 0; i < MAX_FW_NR; i++) {
+	for (i = 0; i < FW_NB; i++) {
 		snprintf(fw_full_name, 21, "%s%s", fw_base, fw_file_name[i]);
 		ret = request_firmware(&fw[i], fw_full_name, dev);
 		if (ret) {
@@ -313,13 +313,13 @@ static int eip197_load_fw(struct device *dev, struct safexcel_crypto_priv *priv)
 	}
 
 	/* Save pointer to the data and the size of the data */
-	fw_data = (const u32 *)fw[IFPP_FW]->data;
-	fw_size = fw[IFPP_FW]->size / sizeof(u32);
+	fw_data = (const u32 *)fw[FW_IFPP]->data;
+	fw_size = fw[FW_IFPP]->size / sizeof(u32);
 
 	/* Write the Input Flow post-Processor micro-Engine firmware */
 	for (i = 0; i < fw_size; i++)
 		writel(be32_to_cpu(*(fw_data + i)),
-		       priv->base + EIP197_CLASSIF_RAM_ACCESS_SPACE + (i * 4));
+		       priv->base + EIP197_CLASSIFICATION_RAMS + (i * 4));
 
 	for (pe = 0; pe < priv->nr_pe; pe++) {
 		/* Disable access to IFPP Program RAM
@@ -339,12 +339,13 @@ static int eip197_load_fw(struct device *dev, struct safexcel_crypto_priv *priv)
 	}
 
 	/* Save pointer to the data and the size of the data */
-	fw_data = (const u32 *)fw[IPUE_FW]->data;
-	fw_size = fw[IPUE_FW]->size / sizeof(u32);
+	fw_data = (const u32 *)fw[FW_IPUE]->data;
+	fw_size = fw[FW_IPUE]->size / sizeof(u32);
 
 	/* Write the Input Flow post-Processor micro-Engine firmware */
 	for (i = 0; i < fw_size; i++)
-		writel(be32_to_cpu(*(fw_data + i)), EIP197_RAM(priv) + (i * 4));
+		writel(be32_to_cpu(*(fw_data + i)),
+		       priv->base + EIP197_CLASSIFICATION_RAMS + (i * sizeof(u32)));
 
 	for (pe = 0; pe < priv->nr_pe; pe++) {
 		/* Disable access to IPUE Program RAM */
@@ -362,48 +363,13 @@ static int eip197_load_fw(struct device *dev, struct safexcel_crypto_priv *priv)
 		writel(reg, EIP197_PE(priv) + EIP197_PE_ICE_PUE_CTRL(pe));
 	}
 
-	for (i = 0; i < MAX_FW_NR; i++)
-		release_firmware(fw[i]);
-
-	return 0;
-
 release_fw:
-	for (i = 0; i < MAX_FW_NR; i++)
-		release_firmware(fw[i]);
+	for (j = 0; j < i; j++)
+		release_firmware(fw[j]);
 
 	return ret;
 }
 
-/* Store offset of each configurable unit in the engine */
-static void eip_priv_unit_offset_init(struct safexcel_crypto_priv *priv)
-{
-	struct safexcel_unit_offset *unit_off = &priv->unit_off;
-
-	if (priv->eip_type == EIP197) {
-		unit_off->hia_aic = EIP197_HIA_AIC_ADDR;
-		unit_off->hia_aic_g = EIP197_HIA_AIC_G_ADDR;
-		unit_off->hia_aic_r = EIP197_HIA_AIC_R_ADDR;
-		unit_off->hia_xdr = EIP197_HIA_AIC_xDR_ADDR;
-		unit_off->hia_dfe = EIP197_HIA_AIC_DFE_ADDR;
-		unit_off->hia_dfe_thrd = EIP197_HIA_AIC_DFE_THRD_ADDR;
-		unit_off->hia_dse = EIP197_HIA_AIC_DSE_ADDR;
-		unit_off->hia_dse_thrd = EIP197_HIA_AIC_DSE_THRD_ADDR;
-		unit_off->hia_gen_cfg = EIP197_HIA_GC;
-		unit_off->pe = EIP197_HIA_PE_ADDR;
-	} else {
-		unit_off->hia_aic = EIP97_HIA_AIC_ADDR;
-		unit_off->hia_aic_g = EIP97_HIA_AIC_G_ADDR;
-		unit_off->hia_aic_r = EIP97_HIA_AIC_R_ADDR;
-		unit_off->hia_xdr = EIP97_HIA_AIC_xDR_ADDR;
-		unit_off->hia_dfe = EIP97_HIA_AIC_DFE_ADDR;
-		unit_off->hia_dfe_thrd = EIP97_HIA_AIC_DFE_THRD_ADDR;
-		unit_off->hia_dse = EIP97_HIA_AIC_DSE_ADDR;
-		unit_off->hia_dse_thrd = EIP97_HIA_AIC_DSE_THRD_ADDR;
-		unit_off->hia_gen_cfg = EIP97_HIA_GC;
-		unit_off->pe = EIP97_HIA_PE_ADDR;
-	}
-}
-
 /* Reset the command descriptor rings */
 static void eip_hw_reset_cdesc_rings(struct safexcel_crypto_priv *priv)
 {
@@ -412,13 +378,13 @@ static void eip_hw_reset_cdesc_rings(struct safexcel_crypto_priv *priv)
 	for (i = 0; i < priv->config.rings; i++) {
 		/* Reset ring base address */
 		writel(0x0,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_RING_BASE_ADDR_LO);
+		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_RING_BASE_ADDR_LO);
 		writel(0x0,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_RING_BASE_ADDR_HI);
+		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_RING_BASE_ADDR_HI);
 
 		/* clear any pending interrupt */
 		writel(EIP197_CDR_INTR_MASK,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_STAT);
+		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_STAT);
 	}
 }
 
@@ -430,13 +396,13 @@ static void eip_hw_reset_rdesc_rings(struct safexcel_crypto_priv *priv)
 	for (i = 0; i < priv->config.rings; i++) {
 		/* Reset ring base address */
 		writel(0x0,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_RING_BASE_ADDR_LO);
+		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_RING_BASE_ADDR_LO);
 		writel(0x0,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_RING_BASE_ADDR_HI);
+		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_RING_BASE_ADDR_HI);
 
 		/* clear any pending interrupt */
 		writel(EIP197_RDR_INTR_MASK,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_STAT);
+		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_STAT);
 	}
 }
 
@@ -454,17 +420,17 @@ static int eip_hw_setup_cdesc_rings(struct safexcel_crypto_priv *priv)
 	for (i = 0; i < priv->config.rings; i++) {
 		/* ring base address */
 		writel(lower_32_bits(priv->ring[i].cdr.base_dma),
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_RING_BASE_ADDR_LO);
+		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_RING_BASE_ADDR_LO);
 		writel(upper_32_bits(priv->ring[i].cdr.base_dma),
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_RING_BASE_ADDR_HI);
+		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_RING_BASE_ADDR_HI);
 
 		writel(EIP197_xDR_DESC_MODE_64BIT |
 		       (priv->config.cd_offset << EIP197_xDR_DESC_CD_OFFSET) |
 		       priv->config.cd_size,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_DESC_SIZE);
+		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_DESC_SIZE);
 		writel(((EIP197_FETCH_COUNT * (cd_size_rnd << hdw)) << EIP197_XDR_CD_FETCH_THRESH) |
 		       (EIP197_FETCH_COUNT * priv->config.cd_offset),
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_CFG);
+		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_CFG);
 
 		/* Configure DMA tx control */
 		val = EIP197_HIA_xDR_CFG_WR_CACHE(WR_CACHE_3BITS);
@@ -476,11 +442,11 @@ static int eip_hw_setup_cdesc_rings(struct safexcel_crypto_priv *priv)
 			val |= EIP197_HIA_xDR_CFG_DATA_PROT(AXI_NONE_SECURE_ACCESS);
 			val |= EIP197_HIA_xDR_CFG_ACD_PROT(AXI_NONE_SECURE_ACCESS);
 		}
-		writel(val, EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_DMA_CFG);
+		writel(val, EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_DMA_CFG);
 
 		/* clear any pending interrupt */
 		writel(EIP197_CDR_INTR_MASK,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_STAT);
+		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_STAT);
 	}
 
 	return 0;
@@ -500,18 +466,18 @@ static int eip_hw_setup_rdesc_rings(struct safexcel_crypto_priv *priv)
 	for (i = 0; i < priv->config.rings; i++) {
 		/* ring base address */
 		writel(lower_32_bits(priv->ring[i].rdr.base_dma),
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_RING_BASE_ADDR_LO);
+		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_RING_BASE_ADDR_LO);
 		writel(upper_32_bits(priv->ring[i].rdr.base_dma),
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_RING_BASE_ADDR_HI);
+		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_RING_BASE_ADDR_HI);
 
 		writel(EIP197_xDR_DESC_MODE_64BIT |
 		       priv->config.rd_offset << EIP197_xDR_DESC_CD_OFFSET |
 		       priv->config.rd_size,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_DESC_SIZE);
+		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_DESC_SIZE);
 
 		writel((EIP197_FETCH_COUNT * (rd_size_rnd << hdw)) << EIP197_XDR_CD_FETCH_THRESH |
 		       (EIP197_FETCH_COUNT * priv->config.rd_offset),
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_CFG);
+		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_CFG);
 
 		/* Configure DMA tx control */
 		val = EIP197_HIA_xDR_CFG_WR_CACHE(WR_CACHE_3BITS);
@@ -523,11 +489,11 @@ static int eip_hw_setup_rdesc_rings(struct safexcel_crypto_priv *priv)
 			val |= EIP197_HIA_xDR_CFG_xD_PROT(AXI_NONE_SECURE_ACCESS);
 			val |= EIP197_HIA_xDR_CFG_DATA_PROT(AXI_NONE_SECURE_ACCESS);
 		}
-		writel(val, EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_DMA_CFG);
+		writel(val, EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_DMA_CFG);
 
 		/* clear any pending interrupt */
 		writel(EIP197_RDR_INTR_MASK,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_STAT);
+		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_STAT);
 
 		/* enable ring interrupt */
 		val = readl(EIP197_HIA_AIC_R(priv) + EIP197_HIA_AIC_R_ENABLE_CTRL(i));
@@ -548,15 +514,15 @@ static int eip197_hw_init(struct device *dev, struct safexcel_crypto_priv *priv)
 	val = readl(EIP197_HIA_AIC(priv) + EIP197_HIA_MST_CTRL);
 
 	if ((version & 0xffff) == EIP197_HIA_VERSION_BE)
-		val |= EIP197_HIA_SLAVE_BYTE_SWAP;
+		val |= EIP197_MST_CTRL_BYTE_SWAP;
 	else if (((version >> 16) & 0xffff) == EIP197_HIA_VERSION_LE)
-		val |= (EIP197_HIA_SLAVE_NO_BYTE_SWAP);
+		val |= (EIP197_MST_CTRL_NO_BYTE_SWAP >> 24);
 
 	writel(val, EIP197_HIA_AIC(priv) + EIP197_HIA_MST_CTRL);
 
 	/* configure wr/rd cache values */
-	val = MST_CTRL_RD_CACHE(RD_CACHE_4BITS) |
-		MST_CTRL_WD_CACHE(WR_CACHE_4BITS);
+	val = EIP197_MST_CTRL_RD_CACHE(RD_CACHE_4BITS) |
+		EIP197_MST_CTRL_WD_CACHE(WR_CACHE_4BITS);
 
 	if (priv->eip_type == EIP197 &&
 	    priv->eip197_hw_ver == EIP197D)
@@ -583,7 +549,7 @@ static int eip197_hw_init(struct device *dev, struct safexcel_crypto_priv *priv)
 
 		/* Reset all DFE threads */
 		writel(EIP197_DxE_THR_CTRL_RESET_PE,
-		       EIP197_HIA_DFE_THRD(priv) + EIP197_HIA_DFE_THR_CTRL(pe));
+		       EIP197_HIA_DFE_THR(priv) + EIP197_HIA_DFE_THR_CTRL(pe));
 
 		/* Configure ring arbiter, available only for EIP197 */
 		if (priv->eip_type == EIP197) {
@@ -601,7 +567,7 @@ static int eip197_hw_init(struct device *dev, struct safexcel_crypto_priv *priv)
 		writel(val, EIP197_HIA_DFE(priv) + EIP197_HIA_DFE_CFG(pe));
 
 		/* Leave the DFE threads reset state */
-		writel(0, EIP197_HIA_DFE_THRD(priv) + EIP197_HIA_DFE_THR_CTRL(pe));
+		writel(0, EIP197_HIA_DFE_THR(priv) + EIP197_HIA_DFE_THR_CTRL(pe));
 
 		/* Configure the procesing engine thresholds */
 		writel(EIP197_PE_IN_xBUF_THRES_MIN(5) | EIP197_PE_IN_xBUF_THRES_MAX(9),
@@ -622,10 +588,10 @@ static int eip197_hw_init(struct device *dev, struct safexcel_crypto_priv *priv)
 
 		/* Reset all DSE threads */
 		writel(EIP197_DxE_THR_CTRL_RESET_PE,
-		       EIP197_HIA_DSE_THRD(priv) + EIP197_HIA_DSE_THR_CTRL(pe));
+		       EIP197_HIA_DSE_THR(priv) + EIP197_HIA_DSE_THR_CTRL(pe));
 
 		/* Wait for all DSE threads to complete */
-		while ((readl(EIP197_HIA_DSE_THRD(priv) + EIP197_HIA_DSE_THR_STAT(pe)) &
+		while ((readl(EIP197_HIA_DSE_THR(priv) + EIP197_HIA_DSE_THR_STAT(pe)) &
 		       EIP197_DSE_THR_RDR_ID_MASK) != EIP197_DSE_THR_RDR_ID_MASK)
 			;
 
@@ -647,7 +613,7 @@ static int eip197_hw_init(struct device *dev, struct safexcel_crypto_priv *priv)
 		writel(val, EIP197_HIA_DSE(priv) + EIP197_HIA_DSE_CFG(pe));
 
 		/* Leave the DSE threads reset state */
-		writel(0, EIP197_HIA_DSE_THRD(priv) + EIP197_HIA_DSE_THR_CTRL(pe));
+		writel(0, EIP197_HIA_DSE_THR(priv) + EIP197_HIA_DSE_THR_CTRL(pe));
 
 		/* Configure the procesing engine thresholds */
 		writel(EIP197_PE_OUT_DBUF_THRES_MIN(7) | EIP197_PE_OUT_DBUF_THRES_MAX(8),
@@ -662,22 +628,24 @@ static int eip197_hw_init(struct device *dev, struct safexcel_crypto_priv *priv)
 		writel(EIP197_HIA_AIC_R_ENABLE_CLR_ALL_MASK,
 		       EIP197_HIA_AIC_R(priv) + EIP197_HIA_AIC_R_ENABLE_CLR(i));
 
-		/* disable external triggering */
-		writel(0, EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_CFG);
+		/* Disable external triggering */
+		writel(0, EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_CFG);
 
 		/* Clear the pending prepared counter */
 		writel(EIP197_xDR_PREP_CLR_COUNT,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_PREP_COUNT);
+		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_PREP_COUNT);
 
 		/* Clear the pending processed counter */
 		writel(EIP197_xDR_PROC_CLR_COUNT,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_PROC_COUNT);
+		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_PROC_COUNT);
 
-		writel(0, EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_PREP_PNTR);
-		writel(0, EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_PROC_PNTR);
+		writel(0,
+		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_PREP_PNTR);
+		writel(0,
+		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_PROC_PNTR);
 
 		writel((EIP197_DEFAULT_RING_SIZE * priv->config.cd_offset) << 2,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(i) + EIP197_HIA_xDR_RING_SIZE);
+		       EIP197_HIA_CDR(priv, i) + EIP197_HIA_xDR_RING_SIZE);
 	}
 
 	/*
@@ -685,33 +653,35 @@ static int eip197_hw_init(struct device *dev, struct safexcel_crypto_priv *priv)
 	 */
 
 	for (i = 0; i < priv->config.hw_rings; i++) {
-		/* disable external triggering*/
-		writel(0, EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_CFG);
+		/* Disable external triggering*/
+		writel(0, EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_CFG);
 
 		/* Clear the pending prepared counter */
 		writel(EIP197_xDR_PREP_CLR_COUNT,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_PREP_COUNT);
+		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_PREP_COUNT);
 
 		/* Clear the pending processed counter */
 		writel(EIP197_xDR_PROC_CLR_COUNT,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_PROC_COUNT);
+		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_PROC_COUNT);
 
-		writel(0, EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_PREP_PNTR);
-		writel(0, EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_PROC_PNTR);
+		writel(0,
+		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_PREP_PNTR);
+		writel(0,
+		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_PROC_PNTR);
 
 		/* ring size */
 		writel((EIP197_DEFAULT_RING_SIZE * priv->config.rd_offset) << 2,
-		       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(i) + EIP197_HIA_xDR_RING_SIZE);
+		       EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_RING_SIZE);
 	}
 
 	for (pe = 0; pe < priv->nr_pe; pe++) {
 		/* Enable command descriptor rings */
 		writel(EIP197_DxE_THR_CTRL_EN | GENMASK(priv->config.hw_rings - 1, 0),
-		       EIP197_HIA_DFE_THRD(priv) + EIP197_HIA_DFE_THR_CTRL(pe));
+		       EIP197_HIA_DFE_THR(priv) + EIP197_HIA_DFE_THR_CTRL(pe));
 
 		/* Enable result descriptor rings */
 		writel(EIP197_DxE_THR_CTRL_EN | GENMASK(priv->config.hw_rings - 1, 0),
-		       EIP197_HIA_DSE_THRD(priv) + EIP197_HIA_DSE_THR_CTRL(pe));
+		       EIP197_HIA_DSE_THR(priv) + EIP197_HIA_DSE_THR_CTRL(pe));
 	}
 
 	/* Clear any HIA interrupt */
@@ -822,7 +792,7 @@ void safexcel_dequeue(struct safexcel_crypto_priv *priv, int ring)
 		val = EIP197_HIA_RDR_THRESH_PKT_MODE |
 			EIP197_HIA_RDR_THRESH_PROC_PKT(min_t(int, priv->ring[ring].egress_cnt,
 							   EIP197_MAX_BATCH_SZ));
-		writel(val, EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(ring) + EIP197_HIA_xDR_THRESH);
+		writel(val, EIP197_HIA_RDR(priv, ring) + EIP197_HIA_xDR_THRESH);
 	}
 
 	spin_unlock_bh(&priv->ring[ring].egress_lock);
@@ -830,11 +800,11 @@ void safexcel_dequeue(struct safexcel_crypto_priv *priv, int ring)
 	if (nreq) {
 		/* let the RDR know we have pending descriptors */
 		writel_relaxed((rdesc * priv->config.rd_offset) << EIP197_xDR_PREP_xD_COUNT_INCR_OFFSET,
-			       EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(ring) + EIP197_HIA_xDR_PREP_COUNT);
+			       EIP197_HIA_RDR(priv, ring) + EIP197_HIA_xDR_PREP_COUNT);
 
 		/* let the CDR know we have pending descriptors */
 		writel((cdesc * priv->config.cd_offset) << EIP197_xDR_PREP_xD_COUNT_INCR_OFFSET,
-			EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(ring) + EIP197_HIA_xDR_PREP_COUNT);
+			EIP197_HIA_CDR(priv, ring) + EIP197_HIA_xDR_PREP_COUNT);
 	}
 }
 
@@ -904,22 +874,19 @@ int safexcel_invalidate_cache(struct crypto_async_request *async,
 
 	spin_lock_bh(&priv->ring[ring].egress_lock);
 
-	/* prepare command descriptor */
-	cdesc = safexcel_add_cdesc(priv, ring, true, true,
-				   0, 0, 0, ctxr_dma);
-
+	/* Prepare command descriptor */
+	cdesc = safexcel_add_cdesc(priv, ring, true, true, 0, 0, 0, ctxr_dma);
 	if (IS_ERR(cdesc)) {
 		ret = PTR_ERR(cdesc);
 		goto unlock;
 	}
 
-	cdesc->control_data.type = CONTEXT_CONTROL_TYPE_AUTONOMUS_TOKEN;
+	cdesc->control_data.type = EIP197_TYPE_EXTENDED;
 	cdesc->control_data.options = 0;
 	cdesc->control_data.refresh = 0;
-	cdesc->control_data.control0 = CONTEXT_CONTROL_INV_TR <<
-				       CONTEXT_CONTROL_HW_SERVICES_OFFSET;
+	cdesc->control_data.control0 = CONTEXT_CONTROL_INV_TR;
 
-	/* prepare result descriptor */
+	/* Prepare result descriptor */
 	rdesc = safexcel_add_rdesc(priv, ring, true, true, 0, 0);
 
 	if (IS_ERR(rdesc)) {
@@ -957,7 +924,7 @@ static void safexcel_handle_result_descriptor(struct safexcel_crypto_priv *priv,
 	int egress_cnt;
 
 more_results:
-	results = readl(EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(ring) + EIP197_HIA_xDR_PROC_COUNT);
+	results = readl(EIP197_HIA_RDR(priv, ring) + EIP197_HIA_xDR_PROC_COUNT);
 	results = (results >> EIP197_xDR_PROC_xD_PKT_OFFSET) & EIP197_xDR_PROC_xD_PKT_MASK;
 
 	nreq_cnt = 0;
@@ -996,7 +963,7 @@ static void safexcel_handle_result_descriptor(struct safexcel_crypto_priv *priv,
 		val = EIP197_xDR_PROC_xD_PKT(nreq_cnt) |
 			EIP197_xDR_PROC_xD_COUNT(ndesc_tot * priv->config.rd_offset);
 
-		writel(val, EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(ring) +
+		writel(val, EIP197_HIA_RDR(priv, ring) +
 		       EIP197_HIA_xDR_PROC_COUNT);
 	}
 
@@ -1021,7 +988,7 @@ static void safexcel_handle_result_descriptor(struct safexcel_crypto_priv *priv,
 	val = EIP197_HIA_RDR_THRESH_PKT_MODE |
 		EIP197_HIA_RDR_THRESH_PROC_PKT(egress_cnt);
 
-	writel(val, EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_RDR(ring) +
+	writel(val, EIP197_HIA_RDR(priv, ring) +
 	       EIP197_HIA_xDR_THRESH);
 
 	spin_unlock_bh(&priv->ring[ring].egress_lock);
@@ -1074,7 +1041,7 @@ static irqreturn_t safexcel_irq_ring(int irq, void *data)
 
 	/* CDR interrupts */
 	if (status & EIP197_CDR_IRQ(ring)) {
-		stat = readl_relaxed(EIP197_HIA_AIC_xDR(priv) + EIP197_HIA_CDR(ring) + EIP197_HIA_xDR_STAT);
+		stat = readl_relaxed(EIP197_HIA_CDR(priv, ring) + EIP197_HIA_xDR_STAT);
 
 		if (unlikely(stat & EIP197_xDR_ERR)) {
 			/*
@@ -1086,14 +1053,12 @@ static irqreturn_t safexcel_irq_ring(int irq, void *data)
 		}
 
 		/* ACK the interrupts */
-		writel_relaxed(stat & 0xff, EIP197_HIA_AIC_xDR(priv) +
-			       EIP197_HIA_CDR(ring) + EIP197_HIA_xDR_STAT);
+		writel_relaxed(stat & 0xff, EIP197_HIA_CDR(priv, ring) + EIP197_HIA_xDR_STAT);
 	}
 
 	/* RDR interrupts */
 	if (status & EIP197_RDR_IRQ(ring)) {
-		stat = readl_relaxed(EIP197_HIA_AIC_xDR(priv) +
-				     EIP197_HIA_RDR(ring) + EIP197_HIA_xDR_STAT);
+		stat = readl(EIP197_HIA_RDR(priv, ring) + EIP197_HIA_xDR_STAT);
 
 		if (unlikely(stat & EIP197_xDR_ERR)) {
 			/*
@@ -1108,8 +1073,8 @@ static irqreturn_t safexcel_irq_ring(int irq, void *data)
 			rc = IRQ_WAKE_THREAD;
 
 		/* ACK the interrupts */
-		writel_relaxed(stat & 0xff, EIP197_HIA_AIC_xDR(priv) +
-			       EIP197_HIA_RDR(ring) + EIP197_HIA_xDR_STAT);
+		writel(stat & 0xff,
+		       EIP197_HIA_RDR(priv, ring) + EIP197_HIA_xDR_STAT);
 	}
 
 	/* ACK the interrupts */
@@ -1246,6 +1211,35 @@ static void safexcel_configure(struct safexcel_crypto_priv *priv)
 	priv->config.rd_offset = (priv->config.rd_size + mask) & ~mask;
 }
 
+static void safexcel_init_register_offsets(struct safexcel_crypto_priv *priv)
+{
+	struct safexcel_register_offsets *offsets = &priv->offsets;
+
+	if (priv->eip_type == EIP197) {
+		offsets->hia_aic	= EIP197_HIA_AIC_BASE;
+		offsets->hia_aic_g	= EIP197_HIA_AIC_G_BASE;
+		offsets->hia_aic_r	= EIP197_HIA_AIC_R_BASE;
+		offsets->hia_aic_xdr	= EIP197_HIA_AIC_xDR_BASE;
+		offsets->hia_dfe	= EIP197_HIA_DFE_BASE;
+		offsets->hia_dfe_thr	= EIP197_HIA_DFE_THR_BASE;
+		offsets->hia_dse	= EIP197_HIA_DSE_BASE;
+		offsets->hia_dse_thr	= EIP197_HIA_DSE_THR_BASE;
+		offsets->hia_gen_cfg	= EIP197_HIA_GEN_CFG_BASE;
+		offsets->pe		= EIP197_PE_BASE;
+	} else {
+		offsets->hia_aic	= EIP97_HIA_AIC_BASE;
+		offsets->hia_aic_g	= EIP97_HIA_AIC_G_BASE;
+		offsets->hia_aic_r	= EIP97_HIA_AIC_R_BASE;
+		offsets->hia_aic_xdr	= EIP97_HIA_AIC_xDR_BASE;
+		offsets->hia_dfe	= EIP97_HIA_DFE_BASE;
+		offsets->hia_dfe_thr	= EIP97_HIA_DFE_THR_BASE;
+		offsets->hia_dse	= EIP97_HIA_DSE_BASE;
+		offsets->hia_dse_thr	= EIP97_HIA_DSE_THR_BASE;
+		offsets->hia_gen_cfg	= EIP97_HIA_GEN_CFG_BASE;
+		offsets->pe		= EIP97_PE_BASE;
+	}
+}
+
 static int safexcel_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -1262,7 +1256,7 @@ static int safexcel_probe(struct platform_device *pdev)
 	priv->dev = dev;
 	priv->eip_type = (enum safexcel_eip_type)of_device_get_match_data(dev);
 
-	eip_priv_unit_offset_init(priv);
+	safexcel_init_register_offsets(priv);
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	priv->base = devm_ioremap_resource(dev, res);
diff --git a/drivers/crypto/inside-secure/safexcel.h b/drivers/crypto/inside-secure/safexcel.h
index 1d9f0c8..3fc4048 100644
--- a/drivers/crypto/inside-secure/safexcel.h
+++ b/drivers/crypto/inside-secure/safexcel.h
@@ -22,8 +22,8 @@
 #include <linux/spinlock.h>
 #include <linux/workqueue.h>
 
-#define EIP197_HIA_VERSION_LE				0xca35
-#define EIP197_HIA_VERSION_BE				0x35ca
+#define EIP197_HIA_VERSION_LE			0xca35
+#define EIP197_HIA_VERSION_BE			0x35ca
 
 /* Number of eip devices */
 #define MAX_EIP_DEVICE					2
@@ -40,11 +40,93 @@
 #define EIP197_GFP_FLAGS(base)	((base).flags & CRYPTO_TFM_REQ_MAY_SLEEP ? \
 				 GFP_KERNEL : GFP_ATOMIC)
 
-/* READ and WRITE cache control */
-#define RD_CACHE_3BITS				0x5
-#define WR_CACHE_3BITS				0x3
-#define RD_CACHE_4BITS				(RD_CACHE_3BITS << 1 | 0x1)
-#define WR_CACHE_4BITS				(WR_CACHE_3BITS << 1 | 0x1)
+/* Register base offsets */
+#define EIP197_HIA_AIC(priv)		((priv)->base + (priv)->offsets.hia_aic)
+#define EIP197_HIA_AIC_G(priv)		((priv)->base + (priv)->offsets.hia_aic_g)
+#define EIP197_HIA_AIC_R(priv)		((priv)->base + (priv)->offsets.hia_aic_r)
+#define EIP197_HIA_AIC_xDR(priv)	((priv)->base + (priv)->offsets.hia_aic_xdr)
+#define EIP197_HIA_DFE(priv)		((priv)->base + (priv)->offsets.hia_dfe)
+#define EIP197_HIA_DFE_THR(priv)	((priv)->base + (priv)->offsets.hia_dfe_thr)
+#define EIP197_HIA_DSE(priv)		((priv)->base + (priv)->offsets.hia_dse)
+#define EIP197_HIA_DSE_THR(priv)	((priv)->base + (priv)->offsets.hia_dse_thr)
+#define EIP197_HIA_GEN_CFG(priv)	((priv)->base + (priv)->offsets.hia_gen_cfg)
+#define EIP197_PE(priv)			((priv)->base + (priv)->offsets.pe)
+
+/* EIP197 base offsets */
+#define EIP197_HIA_AIC_BASE		0x90000
+#define EIP197_HIA_AIC_G_BASE		0x90000
+#define EIP197_HIA_AIC_R_BASE		0x90800
+#define EIP197_HIA_AIC_xDR_BASE		0x80000
+#define EIP197_HIA_DFE_BASE		0x8c000
+#define EIP197_HIA_DFE_THR_BASE		0x8c040
+#define EIP197_HIA_DSE_BASE		0x8d000
+#define EIP197_HIA_DSE_THR_BASE		0x8d040
+#define EIP197_HIA_GEN_CFG_BASE		0xf0000
+#define EIP197_PE_BASE			0xa0000
+
+/* EIP97 base offsets */
+#define EIP97_HIA_AIC_BASE		0x0
+#define EIP97_HIA_AIC_G_BASE		0x0
+#define EIP97_HIA_AIC_R_BASE		0x0
+#define EIP97_HIA_AIC_xDR_BASE		0x0
+#define EIP97_HIA_DFE_BASE		0xf000
+#define EIP97_HIA_DFE_THR_BASE		0xf200
+#define EIP97_HIA_DSE_BASE		0xf400
+#define EIP97_HIA_DSE_THR_BASE		0xf600
+#define EIP97_HIA_GEN_CFG_BASE		0x10000
+#define EIP97_PE_BASE			0x10000
+
+/* CDR/RDR register offsets */
+#define EIP197_HIA_xDR_OFF(priv, r)		(EIP197_HIA_AIC_xDR(priv) + (r) * 0x1000)
+#define EIP197_HIA_CDR(priv, r)			(EIP197_HIA_xDR_OFF(priv, r))
+#define EIP197_HIA_RDR(priv, r)			(EIP197_HIA_xDR_OFF(priv, r) + 0x800)
+#define EIP197_HIA_xDR_RING_BASE_ADDR_LO	0x0000
+#define EIP197_HIA_xDR_RING_BASE_ADDR_HI	0x0004
+#define EIP197_HIA_xDR_RING_SIZE		0x0018
+#define EIP197_HIA_xDR_DESC_SIZE		0x001c
+#define EIP197_HIA_xDR_CFG			0x0020
+#define EIP197_HIA_xDR_DMA_CFG			0x0024
+#define EIP197_HIA_xDR_THRESH			0x0028
+#define EIP197_HIA_xDR_PREP_COUNT		0x002c
+#define EIP197_HIA_xDR_PROC_COUNT		0x0030
+#define EIP197_HIA_xDR_PREP_PNTR		0x0034
+#define EIP197_HIA_xDR_PROC_PNTR		0x0038
+#define EIP197_HIA_xDR_STAT			0x003c
+
+/* register offsets */
+#define EIP197_HIA_DFE_CFG(n)			(0x000 + (128 * n))
+#define EIP197_HIA_DFE_THR_CTRL(n)		(0x000 + (128 * n))
+#define EIP197_HIA_DFE_THR_STAT(n)		(0x004 + (128 * n))
+#define EIP197_HIA_DSE_CFG(n)			(0x000 + (128 * n))
+#define EIP197_HIA_DSE_THR_CTRL(n)		(0x000 + (128 * n))
+#define EIP197_HIA_DSE_THR_STAT(n)		(0x004 + (128 * n))
+#define EIP197_HIA_RA_PE_CTRL(n)		(0x010 + (8 * n))
+#define EIP197_HIA_RA_PE_STAT			0x0014
+#define EIP197_HIA_AIC_R_OFF(r)			((r) * 0x1000)
+#define EIP197_HIA_AIC_R_ENABLE_CTRL(r)		(0xe008 - EIP197_HIA_AIC_R_OFF(r))
+#define EIP197_HIA_AIC_R_ENABLED_STAT(r)	(0xe010 - EIP197_HIA_AIC_R_OFF(r))
+#define EIP197_HIA_AIC_R_ACK(r)			(0xe010 - EIP197_HIA_AIC_R_OFF(r))
+#define EIP197_HIA_AIC_R_ENABLE_CLR(r)		(0xe014 - EIP197_HIA_AIC_R_OFF(r))
+#define EIP197_HIA_AIC_G_ENABLE_CTRL		0xf808
+#define EIP197_HIA_AIC_G_ENABLED_STAT		0xf810
+#define EIP197_HIA_AIC_G_ACK			0xf810
+#define EIP197_HIA_MST_CTRL			0xfff4
+#define EIP197_HIA_OPTIONS			0xfff8
+#define EIP197_HIA_VERSION			0xfffc
+#define EIP197_PE_IN_DBUF_THRES(n)		(0x0000 + (0x2000 * n))
+#define EIP197_PE_IN_TBUF_THRES(n)		(0x0100 + (0x2000 * n))
+#define EIP197_PE_ICE_SCRATCH_RAM(x, n)		((0x800 + (x * 4)) + \
+						 (0x2000 * n))
+#define EIP197_PE_ICE_PUE_CTRL(n)		(0xc80 + (0x2000 * n))
+#define EIP197_PE_ICE_SCRATCH_CTRL		0x0d04
+#define EIP197_PE_ICE_FPP_CTRL(n)		(0xd80 + (0x2000 * n))
+#define EIP197_PE_ICE_RAM_CTRL(n)		(0xff0 + (0x2000 * n))
+#define EIP197_PE_EIP96_FUNCTION_EN		0x1004
+#define EIP197_PE_EIP96_CONTEXT_CTRL		0x1008
+#define EIP197_PE_EIP96_CONTEXT_STAT		0x100c
+#define EIP197_PE_OUT_DBUF_THRES(n)		(0x1c00 + (0x2000 * n))
+#define EIP197_PE_OUT_TBUF_THRES(n)		(0x1d00 + (0x2000 * n))
+#define EIP197_MST_CTRL				0xfff4
 
 /* AXI protection fields */
 #define AXI_NONE_SECURE_ACCESS				BIT(1)
@@ -96,22 +178,23 @@
 #define EIP197_TRC_TAIL_PTR_OFFSET			16
 #define EIP197_TRC_TAIL_PTR_MASK			(GENMASK(9, 0))
 
+#define EIP197_CLASSIFICATION_RAMS		0xe0000
+
 /* Transformation Record Cache address */
-#define EIP197_TRC_CTRL					0xf0800
-#define EIP197_TRC_LASTRES				0xf0804
-#define EIP197_TRC_REGINDEX				0xf0808
-#define EIP197_TRC_PARAMS				0xf0820
-#define EIP197_TRC_FREECHAIN				0xf0824
-#define EIP197_TRC_PARAMS2				0xf0828
-#define EIP197_TRC_ECCCTRL				0xf0830
-#define EIP197_TRC_ECCSTAT				0xf0834
-#define EIP197_TRC_ECCADMINSTAT				0xf0838
-#define EIP197_TRC_ECCDATASTAT				0xf083c
-#define EIP197_TRC_ECCDATA				0xf0840
+#define EIP197_TRC_CTRL				0xf0800
+#define EIP197_TRC_LASTRES			0xf0804
+#define EIP197_TRC_REGINDEX			0xf0808
+#define EIP197_TRC_PARAMS			0xf0820
+#define EIP197_TRC_FREECHAIN			0xf0824
+#define EIP197_TRC_PARAMS2			0xf0828
+#define EIP197_TRC_ECCCTRL			0xf0830
+#define EIP197_TRC_ECCSTAT			0xf0834
+#define EIP197_TRC_ECCADMINSTAT			0xf0838
+#define EIP197_TRC_ECCDATASTAT			0xf083c
+#define EIP197_TRC_ECCDATA			0xf0840
 
 /* Classification regs */
-#define EIP197_CS_RAM_CTRL				0xf7ff0
-#define EIP197_CLASSIF_RAM_ACCESS_SPACE			0xe0000
+#define EIP197_CS_RAM_CTRL			0xf7ff0
 
 #define EIP197_TRC_SW_RESET				(BIT(0))
 #define EIP197_TRC_ENABLE(c)				(BIT(4) << c)
@@ -143,8 +226,6 @@
 #define EIP197_PE_EIP96_PRNG_LFSR_H_VAL			0xd008c4b4
 
 /* Firmware */
-#define EIP197_PE_ICE_SCRATCH_RAM(x, n)			((0x800 + (x * 4)) + \
-							 (0x2000 * n))
 #define EIP197_NUM_OF_SCRATCH_BLOCKS			32
 
 #define EIP197_PE_ICE_SCRATCH_CTRL_OFFSET(n)		(0xd04 + (0x2000 * n))
@@ -155,43 +236,18 @@
 #define EIP197_PE_ICE_SCRATCH_CTRL_SCRATCH_ACCESS_OFFSET	25
 #define EIP197_PE_ICE_SCRATCH_CTRL_SCRATCH_ACCESS_MASK	(GENMASK(28, 25))
 
-#define EIP197_PE_ICE_PUE_CTRL(n)			(0xc80 + (0x2000 * n))
 #define EIP197_PE_ICE_PUE_CTRL_SW_RESET			BIT(0)
 #define EIP197_PE_ICE_PUE_CTRL_CLR_ECC_CORR		BIT(14)
 #define EIP197_PE_ICE_PUE_CTRL_CLR_ECC_NON_CORR		BIT(15)
 
-#define EIP197_PE_ICE_FPP_CTRL(n)			(0xd80 + (0x2000 * n))
 #define EIP197_PE_ICE_FPP_CTRL_SW_RESET			BIT(0)
 #define EIP197_PE_ICE_FPP_CTRL_CLR_ECC_NON_CORR		BIT(14)
 #define EIP197_PE_ICE_FPP_CTRL_CLR_ECC_CORR		BIT(15)
 
-#define EIP197_PE_ICE_RAM_CTRL(n)			(0xff0 + (0x2000 * n))
 #define EIP197_PE_ICE_RAM_CTRL_DFLT			0x00000000
 #define EIP197_PE_ICE_RAM_CTRL_PUE_PROG_EN		BIT(0)
 #define EIP197_PE_ICE_RAM_CTRL_FPP_PROG_EN		BIT(1)
 
-/* EIP197_MST_CTRL values */
-#define MST_CTRL_RD_CACHE(n)				(((n) & 0xf) << 0)
-#define MST_CTRL_WD_CACHE(n)				(((n) & 0xf) << 4)
-#define MST_CTRL_SUPPORT_PROT(n)			(((n) & 0xf) << 12)
-
-/* CDR/RDR register offsets */
-#define EIP197_HIA_xDR_OFF(r)				((r) * 0x1000)
-#define EIP197_HIA_CDR(r)				(EIP197_HIA_xDR_OFF(r))
-#define EIP197_HIA_RDR(r)				(0x800 + EIP197_HIA_xDR_OFF(r))
-#define EIP197_HIA_xDR_RING_BASE_ADDR_LO		0x0
-#define EIP197_HIA_xDR_RING_BASE_ADDR_HI		0x4
-#define EIP197_HIA_xDR_RING_SIZE			0x18
-#define EIP197_HIA_xDR_DESC_SIZE			0x1c
-#define EIP197_HIA_xDR_CFG				0x20
-#define EIP197_HIA_xDR_DMA_CFG				0x24
-#define EIP197_HIA_xDR_THRESH				0x28
-#define EIP197_HIA_xDR_PREP_COUNT			0x2c
-#define EIP197_HIA_xDR_PROC_COUNT			0x30
-#define EIP197_HIA_xDR_PREP_PNTR			0x34
-#define EIP197_HIA_xDR_PROC_PNTR			0x38
-#define EIP197_HIA_xDR_STAT				0x3c
-
 /* EIP197_HIA_xDR_DESC_SIZE */
 #define EIP197_xDR_DESC_MODE_64BIT			BIT(31)
 #define EIP197_xDR_DESC_CD_OFFSET			16
@@ -246,61 +302,6 @@
 
 /* Register offsets */
 
-/* unit offsets */
-#define EIP197_HIA_AIC_ADDR				0x90000
-#define EIP197_HIA_AIC_G_ADDR				0x90000
-#define EIP197_HIA_AIC_R_ADDR				0x90800
-#define EIP197_HIA_AIC_xDR_ADDR				0x80000
-#define EIP197_HIA_AIC_DFE_ADDR				0x8c000
-#define EIP197_HIA_AIC_DFE_THRD_ADDR			0x8c040
-#define EIP197_HIA_AIC_DSE_ADDR				0x8d000
-#define EIP197_HIA_AIC_DSE_THRD_ADDR			0x8d040
-#define EIP197_HIA_PE_ADDR				0xa0000
-#define EIP197_CLASSIFICATION_RAMS			0xe0000
-#define EIP197_HIA_GC					0xf0000
-
-#define EIP97_HIA_AIC_ADDR				0x00000
-#define EIP97_HIA_AIC_G_ADDR				0x00000
-#define EIP97_HIA_AIC_R_ADDR				0x00000
-#define EIP97_HIA_AIC_xDR_ADDR				0x00000
-#define EIP97_HIA_AIC_DFE_ADDR				0x0f000
-#define EIP97_HIA_AIC_DFE_THRD_ADDR			0x0f200
-#define EIP97_HIA_AIC_DSE_ADDR				0x0f400
-#define EIP97_HIA_AIC_DSE_THRD_ADDR			0x0f600
-#define EIP97_HIA_PE_ADDR				0x10000
-#define EIP97_HIA_GC					0x10000
-
-#define EIP197_HIA_AIC_R_OFF(r)			((r) * 0x1000)
-#define EIP197_HIA_AIC_R_ENABLE_CTRL(r)		(0xe008 - EIP197_HIA_AIC_R_OFF(r))
-#define EIP197_HIA_AIC_R_ENABLED_STAT(r)	(0xe010 - EIP197_HIA_AIC_R_OFF(r))
-#define EIP197_HIA_AIC_R_ACK(r)			(0xe010 - EIP197_HIA_AIC_R_OFF(r))
-#define EIP197_HIA_AIC_R_ENABLE_CLR(r)		(0xe014 - EIP197_HIA_AIC_R_OFF(r))
-
-#define EIP197_HIA_RA_PE_CTRL(n)		(0x010 + (8 * n))
-
-#define EIP197_HIA_DFE_CFG(n)			(0x000 + (128 * n))
-#define EIP197_HIA_DFE_THR_CTRL(n)		(0x000 + (128 * n))
-#define EIP197_HIA_DFE_THR_STAT(n)		(0x004 + (128 * n))
-
-#define EIP197_HIA_DSE_CFG(n)			(0x000 + (128 * n))
-#define EIP197_HIA_DSE_THR_CTRL(n)		(0x000 + (128 * n))
-#define EIP197_HIA_DSE_THR_STAT(n)		(0x004 + (128 * n))
-
-#define EIP197_HIA_AIC_G_ENABLE_CTRL		0xf808
-#define EIP197_HIA_AIC_G_ENABLED_STAT		0xf810
-#define EIP197_HIA_AIC_G_ACK			0xf810
-#define EIP197_HIA_MST_CTRL			0xfff4
-#define EIP197_HIA_OPTIONS			0xfff8
-#define EIP197_HIA_VERSION			0xfffc
-#define EIP197_PE_IN_DBUF_THRES(n)		(0x0000 + (0x2000 * n))
-#define EIP197_PE_IN_TBUF_THRES(n)		(0x0100 + (0x2000 * n))
-#define EIP197_PE_OUT_DBUF_THRES(n)		(0x1c00 + (0x2000 * n))
-#define EIP197_FUNCTION_EN			0x1004
-#define EIP197_CONTEXT_CTRL			0x11008
-#define EIP197_OPTIONS				0x1fff8
-#define EIP197_IP_VERSION			0x1fffc
-#define EIP197_MST_CTRL				0xfff4
-
 /* EIP197_HIA_DSE_THR_STAT */
 #define EIP197_DSE_THR_RDR_ID_MASK		(GENMASK(15, 12))
 
@@ -320,13 +321,13 @@
 #define EIP197_HIA_DxE_CFG_MIN_DATA_SIZE(n)	((n) << 0)
 #define EIP197_HIA_DxE_CFG_DATA_CACHE_CTRL(n)	(((n) & 0x7) << 4)
 #define EIP197_HIA_DxE_CFG_MAX_DATA_SIZE(n)	((n) << 8)
+#define EIP197_HIA_DSE_CFG_ALLWAYS_BUFFERABLE	GENMASK(15, 14)
 #define EIP197_HIA_DxE_CFG_MIN_CTRL_SIZE(n)	((n) << 16)
 #define EIP197_HIA_DxE_CFG_CTRL_CACHE_CTRL(n)	(((n) & 0x7) << 20)
 #define EIP197_HIA_DxE_CFG_MAX_CTRL_SIZE(n)	((n) << 24)
 #define EIP197_HIA_DFE_CFG_DIS_DEBUG		(BIT(31) | BIT(29))
-#define EIP197_HIA_DSE_CFG_DIS_DEBUG		BIT(31)
-#define EIP197_HIA_DSE_CFG_ALLWAYS_BUFFERABLE	(GENMASK(15, 14))
 #define EIP197_HIA_DSE_CFG_EN_SINGLE_WR		BIT(29)
+#define EIP197_HIA_DSE_CFG_DIS_DEBUG		BIT(31)
 
 /* EIP197_HIA_DFE/DSE_THR_CTRL */
 #define EIP197_DxE_THR_CTRL_EN			BIT(30)
@@ -339,8 +340,15 @@
 #define EIP197_G_IRQ_PE(n)			BIT((n) + 20)
 
 /* EIP197_HIA_MST_CTRL */
-#define EIP197_HIA_SLAVE_BYTE_SWAP		BIT(24)
-#define EIP197_HIA_SLAVE_NO_BYTE_SWAP		BIT(25)
+#define RD_CACHE_3BITS				0x5
+#define WR_CACHE_3BITS				0x3
+#define RD_CACHE_4BITS				(RD_CACHE_3BITS << 1 | BIT(0))
+#define WR_CACHE_4BITS				(WR_CACHE_3BITS << 1 | BIT(0))
+#define EIP197_MST_CTRL_RD_CACHE(n)		(((n) & 0xf) << 0)
+#define EIP197_MST_CTRL_WD_CACHE(n)		(((n) & 0xf) << 4)
+#define MST_CTRL_SUPPORT_PROT(n)		(((n) & 0xf) << 12)
+#define EIP197_MST_CTRL_BYTE_SWAP		BIT(24)
+#define EIP197_MST_CTRL_NO_BYTE_SWAP		BIT(25)
 
 /* EIP197_PE_IN_DBUF/TBUF_THRES */
 #define EIP197_PE_IN_xBUF_THRES_MIN(n)		((n) << 8)
@@ -357,7 +365,7 @@
 /* EIP197_HIA_AIC_R_ENABLE_CLR */
 #define EIP197_HIA_AIC_R_ENABLE_CLR_ALL_MASK	(GENMASK(31, 0))
 
-/* EIP197_CONTEXT_CTRL */
+/* EIP197_PE_EIP96_CONTEXT_CTRL */
 #define EIP197_CONTEXT_SIZE(n)			(n)
 #define EIP197_ADDRESS_MODE			BIT(8)
 #define EIP197_CONTROL_MODE			BIT(9)
@@ -371,7 +379,7 @@ struct safexcel_context_record {
 } __packed;
 
 /* control0 */
-#define CONTEXT_CONTROL_TYPE_NULL_OUT		0
+#define CONTEXT_CONTROL_TYPE_NULL_OUT		0x0
 #define CONTEXT_CONTROL_TYPE_NULL_IN		0x1
 #define CONTEXT_CONTROL_TYPE_HASH_OUT		0x2
 #define CONTEXT_CONTROL_TYPE_HASH_IN		0x3
@@ -396,10 +404,8 @@ struct safexcel_context_record {
 #define CONTEXT_CONTROL_CRYPTO_ALG_SHA1		(0x2 << 23)
 #define CONTEXT_CONTROL_CRYPTO_ALG_SHA224	(0x4 << 23)
 #define CONTEXT_CONTROL_CRYPTO_ALG_SHA256	(0x3 << 23)
-
-#define CONTEXT_CONTROL_TYPE_AUTONOMUS_TOKEN	3
-#define CONTEXT_CONTROL_HW_SERVICES_OFFSET	24
-#define CONTEXT_CONTROL_INV_TR			0x6
+#define CONTEXT_CONTROL_INV_FR			(0x5 << 24)
+#define CONTEXT_CONTROL_INV_TR			(0x6 << 24)
 
 /* control1 */
 #define CONTEXT_CONTROL_CRYPTO_MODE_ECB		(0 << 0)
@@ -512,6 +518,7 @@ struct safexcel_control_data_desc {
 #define EIP197_OPTION_CTX_CTRL_IN_CMD	BIT(8)
 #define EIP197_OPTION_4_TOKEN_IV_CMD	(GENMASK(11, 9))
 #define EIP197_OPTION_2_TOKEN_IV_CMD	(GENMASK(11, 10))
+#define EIP197_TYPE_EXTENDED		0x3
 
 /* Basic Command Descriptor format */
 struct safexcel_command_desc {
@@ -534,19 +541,9 @@ struct safexcel_command_desc {
  */
 
 enum eip197_fw {
-	IFPP_FW = 0,
-	IPUE_FW,
-	MAX_FW_NR
-};
-
-enum safexcel_eip_type {
-	EIP197,
-	EIP97,
-};
-
-enum safexcel_eip197_hw {
-	EIP197B,
-	EIP197D,
+	FW_IFPP = 0,
+	FW_IPUE,
+	FW_NB
 };
 
 struct safexcel_desc_ring {
@@ -573,32 +570,6 @@ struct safexcel_request {
 	struct crypto_async_request *req;
 };
 
-/* internal unit register offset */
-struct safexcel_unit_offset {
-	u32 hia_aic;
-	u32 hia_aic_g;
-	u32 hia_aic_r;
-	u32 hia_xdr;
-	u32 hia_dfe;
-	u32 hia_dfe_thrd;
-	u32 hia_dse;
-	u32 hia_dse_thrd;
-	u32 hia_gen_cfg;
-	u32 pe;
-};
-
-#define EIP197_HIA_AIC(priv)		((priv)->base + (priv)->unit_off.hia_aic)
-#define EIP197_HIA_AIC_G(priv)		((priv)->base + (priv)->unit_off.hia_aic_g)
-#define EIP197_HIA_AIC_R(priv)		((priv)->base + (priv)->unit_off.hia_aic_r)
-#define EIP197_HIA_AIC_xDR(priv)	((priv)->base + (priv)->unit_off.hia_xdr)
-#define EIP197_HIA_DFE(priv)		((priv)->base + (priv)->unit_off.hia_dfe)
-#define EIP197_HIA_DFE_THRD(priv)	((priv)->base + (priv)->unit_off.hia_dfe_thrd)
-#define EIP197_HIA_DSE(priv)		((priv)->base + (priv)->unit_off.hia_dse)
-#define EIP197_HIA_DSE_THRD(priv)	((priv)->base + (priv)->unit_off.hia_dse_thrd)
-#define EIP197_HIA_GEN_CFG(priv)	((priv)->base + (priv)->unit_off.hia_gen_cfg)
-#define EIP197_PE(priv)			((priv)->base + (priv)->unit_off.pe)
-#define EIP197_RAM(priv)		((priv)->base + EIP197_CLASSIFICATION_RAMS)
-
 struct safexcel_config {
 	u32 rings;
 	u32 hw_rings;
@@ -636,10 +607,31 @@ struct safexcel_ring {
 	struct crypto_queue queue;
 };
 
+enum safexcel_eip_type {
+	EIP197,
+	EIP97,
+};
+
+enum safexcel_eip197_hw {
+	EIP197B,
+	EIP197D,
+};
+
+struct safexcel_register_offsets {
+	u32 hia_aic;
+	u32 hia_aic_g;
+	u32 hia_aic_r;
+	u32 hia_aic_xdr;
+	u32 hia_dfe;
+	u32 hia_dfe_thr;
+	u32 hia_dse;
+	u32 hia_dse_thr;
+	u32 hia_gen_cfg;
+	u32 pe;
+};
 
 struct safexcel_crypto_priv {
 	void __iomem *base;
-	struct safexcel_unit_offset unit_off;
 	struct device *dev;
 	struct clk *clk;
 	enum safexcel_eip_type eip_type;
@@ -647,6 +639,8 @@ struct safexcel_crypto_priv {
 	enum safexcel_eip197_hw eip197_hw_ver;
 	struct safexcel_config config;
 
+	struct safexcel_register_offsets offsets;
+
 	/* context DMA pool */
 	struct dma_pool *context_pool;
 
-- 
1.7.9.5

