From 2dd9e11a928ede9b507e97dd50b409f9ab0b74b3 Mon Sep 17 00:00:00 2001
From: Alan Winkowski <walan@marvell.com>
Date: Sun, 20 Aug 2017 17:23:40 +0300
Subject: [PATCH 1189/1345] fix: net: mvpp2x: init cls high queue fwrd policy

commit  0309a95020412c1d585505d852c1dbd986cbfc28 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- Before the change: when creating a classification rule,
  it is possible to set the target rx queue. This setting
  is divided into low queue bits (3 bits) and high queue bits
  (5 bits). In addition, the source of the high queue bits are
  controlled by the CLS_SWFWD_PCTRL register. By default this
  register is configured to take the high queue bits from the
  physical port from which the packet is received and discard
  the value set by the classifier
- After the change: the CLS_SWFWD_PCTRL register is set to take
  the high queue bits from the classifier and not from the
  received physical port.
- This change is needed to allow more than 8 rx queues per port
  when creating classification rules

Signed-off-by: Alan Winkowski <walan@marvell.com>

Change-Id: Id4c2973f91148678f090c902e4cef715a010a305
Reviewed-on: http://vgitil04.il.marvell.com:8080/43215
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-by: Yuval Caduri <cyuval@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |    5 +++++
 1 file changed, 5 insertions(+)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index d8627ef..84b3dc7 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -872,6 +872,11 @@ static void mv_pp2x_defaults_set(struct mv_pp2x_port *port)
 		mv_pp2x_write(hw, MVPP2_RXQ_CONFIG_REG(queue), val);
 	}
 
+	/* Enable classifier high queue in forwarding port control*/
+	val = mv_pp2x_read(hw, MVPP2_CLS_SWFWD_PCTRL_REG);
+	val &= ~(MVPP2_CLS_SWFWD_PCTRL_MASK(port->id));
+	mv_pp2x_write(hw, MVPP2_CLS_SWFWD_PCTRL_REG, val);
+
 	/* At default, mask all interrupts to all present cpus */
 	mv_pp2x_port_interrupts_disable(port);
 }
-- 
1.7.9.5

