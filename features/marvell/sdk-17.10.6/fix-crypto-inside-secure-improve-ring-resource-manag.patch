From a35eaa865c6e1e6d2ef1c8519ab4686881044b4b Mon Sep 17 00:00:00 2001
From: Ofer Heifetz <oferh@marvell.com>
Date: Mon, 15 May 2017 11:39:15 +0300
Subject: [PATCH 1005/1345] fix: crypto: inside-secure: improve ring resource
 management

commit  c8716616d2e11778f18a8b422d021eee0b2c0ab5 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

current code enqueues a request when there is no space left on
ring, this causes a lock for application that waits on completion.
Crypto API queue is a FIFO and pushing poped request into it`s tail
breaks the API, to overcome this issue we save per ring a request
and a backlog pointers, they are used by the dequeue routine and
when a resource failure happens, the next dequeue call will use the
saved request/backlog.

Change-Id: Idaa67c8cbe4ccefde071200720dcec2ab43635bd
Signed-off-by: Ofer Heifetz <oferh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/39480
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/39531
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/inside-secure/safexcel.c |   51 +++++++++++++++++++------------
 drivers/crypto/inside-secure/safexcel.h |    2 ++
 2 files changed, 34 insertions(+), 19 deletions(-)

diff --git a/drivers/crypto/inside-secure/safexcel.c b/drivers/crypto/inside-secure/safexcel.c
index 03d3cc5..f6b79d0 100644
--- a/drivers/crypto/inside-secure/safexcel.c
+++ b/drivers/crypto/inside-secure/safexcel.c
@@ -680,17 +680,25 @@ void safexcel_dequeue(struct safexcel_crypto_priv *priv, int ring)
 	int commands, results;
 	u32 val;
 
+	req = priv->ring[ring].req;
+	backlog = priv->ring[ring].backlog;
+
 	do {
-		spin_lock_bh(&priv->ring[ring].queue_lock);
-		req = crypto_dequeue_request(&priv->ring[ring].queue);
-		backlog = crypto_get_backlog(&priv->ring[ring].queue);
-		spin_unlock_bh(&priv->ring[ring].queue_lock);
+		/* get a new request if no ring saved req */
+		if (!req) {
+			spin_lock_bh(&priv->ring[ring].queue_lock);
+			backlog = crypto_get_backlog(&priv->ring[ring].queue);
+			req = crypto_dequeue_request(&priv->ring[ring].queue);
+			spin_unlock_bh(&priv->ring[ring].queue_lock);
+		}
 
-		if (!req)
+		/* no more requests, update ring saved req */
+		if (!req) {
+			/* no more requests, clear */
+			priv->ring[ring].req = NULL;
+			priv->ring[ring].backlog = NULL;
 			goto finalize;
-
-		if (backlog)
-			backlog->complete(backlog, -EINPROGRESS);
+		}
 
 		request = kzalloc(sizeof(*request), EIP197_GFP_FLAGS(*req));
 		if (!request) {
@@ -705,24 +713,26 @@ void safexcel_dequeue(struct safexcel_crypto_priv *priv, int ring)
 			goto resource_fail;
 		}
 
+		if (backlog)
+			backlog->complete(backlog, -EINPROGRESS);
+
+		backlog = NULL;
+		req = NULL;
+
 		cdesc += commands;
 		rdesc += results;
-
-		if (++nreq > EIP197_MAX_BATCH_SZ) {
-			priv->ring[ring].need_dequeue = true;
-			goto finalize;
-		}
+		nreq++;
 	} while (true);
 
 resource_fail:
-	/* resource alloc fail, bail out, complete the request and */
-	/* leave dequeue enabled since we have not cleaned it all  */
+	/*
+	 * resource alloc fail, bail out, save the request and backlog
+	 * for later dequeue handling
+	 */
+	priv->ring[ring].req = req;
+	priv->ring[ring].backlog = backlog;
 	priv->ring[ring].need_dequeue = true;
 
-	local_bh_disable();
-	req->complete(req, ret);
-	local_bh_enable();
-
 finalize:
 	if (!nreq)
 		return;
@@ -1241,6 +1251,9 @@ static int safexcel_probe(struct platform_device *pdev)
 			goto err_pool;
 		}
 
+		priv->ring[i].req = NULL;
+		priv->ring[i].backlog = NULL;
+
 		INIT_LIST_HEAD(&priv->ring[i].list);
 		spin_lock_init(&priv->ring[i].lock);
 		spin_lock_init(&priv->ring[i].egress_lock);
diff --git a/drivers/crypto/inside-secure/safexcel.h b/drivers/crypto/inside-secure/safexcel.h
index a2027bb..011dd53 100644
--- a/drivers/crypto/inside-secure/safexcel.h
+++ b/drivers/crypto/inside-secure/safexcel.h
@@ -612,6 +612,8 @@ struct safexcel_crypto_priv {
 		spinlock_t egress_lock;
 
 		struct list_head list;
+		struct crypto_async_request *req;
+		struct crypto_async_request *backlog;
 		struct workqueue_struct *workqueue;
 		struct safexcel_work_data work_data;
 
-- 
1.7.9.5

