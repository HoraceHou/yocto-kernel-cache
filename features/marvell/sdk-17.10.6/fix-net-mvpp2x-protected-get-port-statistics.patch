From f91d5f78c1e63cf479a32ba3ea2a8b0a31e7ea26 Mon Sep 17 00:00:00 2001
From: Yan Markman <ymarkman@marvell.com>
Date: Wed, 14 Mar 2018 18:58:53 +0200
Subject: [PATCH 1320/1345] fix: net: mvpp2x: protected get port statistics

commit  6b689501c5c65c82ef0681bedec66027ec810c88 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Problem:
We have 2 statistic contexts
- statistic workqueue/task
- ethtool -S statistic request
(Could be also sysfs or User over exported functions).
Access to HW register and statistic-accumulator should be mutual.

Solution:
Use stats-spinlock inside get statistic procedures.

Change-Id: Idb93fd21ff47a555cd34bf9680e10077534edb5d
Signed-off-by: Yan Markman <ymarkman@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/52209
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c |   11 +++++++++++
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h      |    3 +++
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c   |    7 +++++--
 3 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
index 9d0aa4c..31915d6 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
@@ -2565,8 +2565,17 @@ void mv_gop110_mib_counters_show(struct gop_hw *gop, int port)
 
 void mv_gop110_mib_counters_stat_update(struct gop_hw *gop, int port, struct gop_stat *gop_statistics)
 {
+	struct	mv_pp2x_hw *hw;
+	struct mv_pp2x *pp2;
+	struct mv_pp2x_port *pp_port;
+	unsigned long flags;
 	u64 val;
 
+	hw = container_of(gop, struct mv_pp2x_hw, gop);
+	pp2 = container_of(hw, struct mv_pp2x, hw);
+	pp_port = mv_pp2x_port_struct_get_by_gop_index(pp2, port);
+	spin_lock_irqsave(&pp_port->mac_data.stats_spinlock, flags);
+
 	gop_statistics->rx_byte += mv_gop110_mib_read64(gop, port,
 							MV_MIB_GOOD_OCTETS_RECEIVED_LOW);
 
@@ -2664,6 +2673,8 @@ void mv_gop110_mib_counters_stat_update(struct gop_hw *gop, int port, struct gop
 	/* This counter must be read last. Read it clear all the counters */
 	gop_statistics->late_collision += mv_gop110_mib_read64(gop, port,
 							MV_MIB_LATE_COLLISION);
+
+	spin_unlock_irqrestore(&pp_port->mac_data.stats_spinlock, flags);
 }
 
 void mv_gop110_mib_counters_clear(struct gop_hw *gop, int port)
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
index b92d441..82eee59 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
@@ -290,6 +290,9 @@ struct mv_mac_data {
 	u32			link;
 	u32			duplex;
 	u32			speed;
+
+	/* Protect gop_statistics update by concurrent workqueue and ethtool */
+	spinlock_t		stats_spinlock;
 };
 
 /* Masks used for pp3_emac flags */
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
index 27b6b0a..7eaf5c8 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
@@ -6540,6 +6540,9 @@ void mv_pp2x_counters_stat_update(struct mv_pp2x_port *port,
 {
 	struct mv_pp2x_hw *hw = &port->priv->hw;
 	int val, queue;
+	unsigned long flags;
+
+	spin_lock_irqsave(&port->mac_data.stats_spinlock, flags);
 
 	val = mv_pp2x_read(hw, MV_PP2_OVERRUN_DROP_REG(port->id));
 	gop_statistics->rx_ppv2_overrun += val;
@@ -6550,7 +6553,6 @@ void mv_pp2x_counters_stat_update(struct mv_pp2x_port *port,
 	gop_statistics->rx_cls_drop += val;
 	gop_statistics->rx_hw_drop += val;
 
-	preempt_disable();
 	for (queue = port->first_rxq; queue < (port->first_rxq +
 			port->num_rx_queues); queue++) {
 		mv_pp2x_write(hw, MVPP2_CNT_IDX_REG, queue);
@@ -6566,7 +6568,8 @@ void mv_pp2x_counters_stat_update(struct mv_pp2x_port *port,
 		gop_statistics->rx_bm_drop += val;
 		gop_statistics->rx_hw_drop += val;
 	}
-	preempt_enable();
+
+	spin_unlock_irqrestore(&port->mac_data.stats_spinlock, flags);
 }
 
 /*  Clear Mvpp2x counter statistic */
-- 
1.7.9.5

