From 4e6de13495236dabf8cf2d3787779619f90deeb9 Mon Sep 17 00:00:00 2001
From: Ofer Heifetz <oferh@marvell.com>
Date: Mon, 15 May 2017 10:41:11 +0300
Subject: [PATCH 0998/1345] crypto: inside-secure: move cipher crypto mode to
 request context

commit  1a9cd89946779a385407455d02eb1bdbcfdabf80 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

a request to driver could be encrypt or decrypt, this direction
is request oriented and should not be done in the context scope.

Change-Id: I01f44c4252f005727c998de6c369d98615997eef
Signed-off-by: Ofer Heifetz <oferh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/39476
Reviewed-by: Igal Liberman <igall@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/39527
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/inside-secure/cipher.c |   17 +++++++++++++----
 1 file changed, 13 insertions(+), 4 deletions(-)

diff --git a/drivers/crypto/inside-secure/cipher.c b/drivers/crypto/inside-secure/cipher.c
index 0b5f7d3..1add296 100644
--- a/drivers/crypto/inside-secure/cipher.c
+++ b/drivers/crypto/inside-secure/cipher.c
@@ -22,13 +22,16 @@ struct safexcel_cipher_ctx {
 	struct safexcel_context base;
 	struct safexcel_crypto_priv *priv;
 
-	enum safexcel_cipher_direction direction;
 	u32 mode;
 
 	__le32 key[8];
 	unsigned int key_len;
 };
 
+struct safexcel_cipher_reqctx {
+	enum safexcel_cipher_direction direction;
+};
+
 /* Build cipher token */
 static void safexcel_cipher_token(struct safexcel_cipher_ctx *ctx,
 				  struct crypto_async_request *async,
@@ -87,12 +90,15 @@ static int safexcel_aes_setkey(struct crypto_ablkcipher *ctfm, const u8 *key,
 
 /* Build cipher context control data */
 static int safexcel_context_control(struct safexcel_cipher_ctx *ctx,
+				    struct crypto_async_request *async,
 				    struct safexcel_command_desc *cdesc)
 {
 	struct safexcel_crypto_priv *priv = ctx->priv;
+	struct ablkcipher_request *req = ablkcipher_request_cast(async);
+	struct safexcel_cipher_reqctx *rctx = ablkcipher_request_ctx(req);
 	int ctrl_size;
 
-	if (ctx->direction == SAFEXCEL_ENCRYPT)
+	if (rctx->direction == SAFEXCEL_ENCRYPT)
 		cdesc->control_data.control0 |= CONTEXT_CONTROL_TYPE_CRYPTO_OUT;
 	else
 		cdesc->control_data.control0 |= CONTEXT_CONTROL_TYPE_CRYPTO_IN;
@@ -233,7 +239,7 @@ static int safexcel_aes_send(struct crypto_async_request *async,
 		n_cdesc++;
 
 		if (n_cdesc == 1) {
-			safexcel_context_control(ctx, cdesc);
+			safexcel_context_control(ctx, async, cdesc);
 			safexcel_cipher_token(ctx, async, cdesc, req->nbytes);
 		}
 
@@ -417,10 +423,11 @@ static int safexcel_aes(struct ablkcipher_request *req,
 			enum safexcel_cipher_direction dir, u32 mode)
 {
 	struct safexcel_cipher_ctx *ctx = crypto_tfm_ctx(req->base.tfm);
+	struct safexcel_cipher_reqctx *rctx = ablkcipher_request_ctx(req);
 	struct safexcel_crypto_priv *priv = ctx->priv;
 	int ret;
 
-	ctx->direction = dir;
+	rctx->direction = dir;
 	ctx->mode = mode;
 
 	/*
@@ -474,6 +481,8 @@ static int safexcel_ablkcipher_cra_init(struct crypto_tfm *tfm)
 
 	ctx->priv = tmpl->priv;
 
+	tfm->crt_ablkcipher.reqsize = sizeof(struct safexcel_cipher_reqctx);
+
 	return 0;
 }
 
-- 
1.7.9.5

