From d47a1772dc92744c2a931f8e5d8a595964bcfe99 Mon Sep 17 00:00:00 2001
From: David Sniatkiwicz <davidsn@marvell.com>
Date: Mon, 28 Aug 2017 17:11:11 +0300
Subject: [PATCH 1210/1345] phy: comphy: add skip pcie power-off feature

commit  bb42bcd225645ef0e49e87b58cedcaed1628ec0e from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

This feature allows us to skip all pcie lanes shutdowns if needed.
e.g in case using PCIe as End point, thus link must be always kept alive.

Change-Id: If682d1defece188b1d756361e9fabeb135e15e2c
Signed-off-by: David Sniatkiwicz <davidsn@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/43425
Reviewed-by: Igal Liberman <igall@marvell.com>
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../devicetree/bindings/phy/phy-comphy-mvebu.txt   |   28 +++++++++++---------
 drivers/phy/phy-comphy-cp110.c                     |    7 ++++-
 drivers/phy/phy-comphy-mvebu.c                     |   27 +++++++++++++++++++
 drivers/phy/phy-comphy-mvebu.h                     |    2 ++
 4 files changed, 51 insertions(+), 13 deletions(-)

diff --git a/Documentation/devicetree/bindings/phy/phy-comphy-mvebu.txt b/Documentation/devicetree/bindings/phy/phy-comphy-mvebu.txt
index dec26a3..851d1dd 100644
--- a/Documentation/devicetree/bindings/phy/phy-comphy-mvebu.txt
+++ b/Documentation/devicetree/bindings/phy/phy-comphy-mvebu.txt
@@ -9,19 +9,22 @@ to support various modes:
 SATA, USB, PCIE, Network modes, etc.
 
 Required properties for comphy node:
-	- compatible:	Should be "marvell,cp110-comphy"
+	- compatible:		Should be "marvell,cp110-comphy"
 	- reg:			Address and length of register sets
-				    for each device in "reg-names"
-	- reg-names:	The names of the register addresses
-					corresponding to the registers filled in "reg".
-	- #phy-cells:	Standard property (Documentation: phy-bindings.txt)
-					Should be 2.
-	- dfx-reg:	Address and length of DFX register which is needed when PCIe
-			COMPHY initialization on CP110. It is optional, and should not
-			be modified if it exist.
-	- sar-data:	The phandle to Sample At Reset(SAR), which is needed when PCIe
-			COMPHY initialization on CP110. It is optional, and should not
-			be modified if it exist.
+				for each device in "reg-names"
+	- reg-names:		The names of the register addresses
+				corresponding to the registers filled in "reg".
+	- #phy-cells:		Standard property (Documentation: phy-bindings.txt)
+				Should be 2.
+	- dfx-reg:		Address and length of DFX register which is needed when PCIe
+				COMPHY initialization on CP110. It is optional, and should not
+				be modified if it exist.
+	- sar-data:		The phandle to Sample At Reset(SAR), which is needed when PCIe
+				COMPHY initialization on CP110. It is optional, and should not
+				be modified if it exist.
+	- skip_pcie_power_off:	This flag allows us to skip all pcie lanes shutdowns if needed.
+				e.g in case using PCIe as End point, thus link must be always kept alive.
+				It is optional property.
 	Example will be provided in the end of this file.
 
 Each device using Comphy should have handle with the following properties:
@@ -87,6 +90,7 @@ Comphy Node:
 		dfx-reg = <0x400280 4>;
 		#phy-cells = <2>;
 		sar-data = <&cpm_sar>;
+		skip_pcie_power_off; /* skip power off at pcie lanes*/
 		status = "okay";
 	};
 
diff --git a/drivers/phy/phy-comphy-cp110.c b/drivers/phy/phy-comphy-cp110.c
index e1c477c..73764c3 100644
--- a/drivers/phy/phy-comphy-cp110.c
+++ b/drivers/phy/phy-comphy-cp110.c
@@ -1805,6 +1805,11 @@ static int mvebu_cp110_comphy_power_off(struct phy *phy)
 
 	dev_dbg(priv->dev, "%s: Enter\n", __func__);
 
+	if (comphy->skip_pcie_power_off) {
+		dev_dbg(priv->dev, "skip_pcie_power_off indicated, so avoid powering off lane\n");
+		goto exit;
+	}
+
 	spin_lock(&priv->lock);
 
 	switch (mode) {
@@ -1836,8 +1841,8 @@ static int mvebu_cp110_comphy_power_off(struct phy *phy)
 
 	spin_unlock(&priv->lock);
 
+exit:
 	dev_dbg(priv->dev, "%s: Exit\n", __func__);
-
 	return 0;
 }
 
diff --git a/drivers/phy/phy-comphy-mvebu.c b/drivers/phy/phy-comphy-mvebu.c
index 33fd513..6ec4afd 100644
--- a/drivers/phy/phy-comphy-mvebu.c
+++ b/drivers/phy/phy-comphy-mvebu.c
@@ -146,6 +146,7 @@ static int mvebu_comphy_probe(struct platform_device *pdev)
 	struct resource *res;
 	struct phy_provider *phy_provider;
 	const struct mvebu_comphy_soc_info *soc_info;
+	bool skip_pcie_power_off;
 	int i;
 
 	dev_dbg(priv->dev, "%s: Enter\n", __func__);
@@ -166,12 +167,17 @@ static int mvebu_comphy_probe(struct platform_device *pdev)
 	if (IS_ERR(priv->comphy_pipe_regs))
 		return PTR_ERR(priv->comphy_pipe_regs);
 
+	/* check if skip_pcie_power_off flag exist */
+	skip_pcie_power_off = of_property_read_bool(pdev->dev.of_node,
+						    "skip_pcie_power_off");
+
 	priv->soc_info = soc_info;
 	priv->dev = &pdev->dev;
 	spin_lock_init(&priv->lock);
 
 	for (i = 0; i < soc_info->num_of_lanes; i++) {
 		struct phy *phy;
+		u32 reg_data;
 
 		phy = devm_phy_create(&pdev->dev, NULL, soc_info->comphy_ops);
 		if (IS_ERR(phy)) {
@@ -188,6 +194,27 @@ static int mvebu_comphy_probe(struct platform_device *pdev)
 		priv->lanes[i].phy = phy;
 		priv->lanes[i].index = i;
 		priv->lanes[i].mode = COMPHY_UNUSED;
+
+		/* In case PCIe is in End point mode,
+		 * link must be always kept alive vs the remote host,
+		 * so we can't power off the SerDes as part of the
+		 * initialization flow, thus end point PCIe ports must set this
+		 * boolean to true in device tree, to avoid being powered off.
+		 */
+		if (skip_pcie_power_off) {
+			/* If a port is set to PCIe and indicated in device
+			 * tree to skip PCIe power off, than we assume it's
+			 * an End point PCIe port that can't be powered off
+			 */
+			reg_data = readl(priv->comphy_regs +
+					 COMMON_SELECTOR_PIPE_REG_OFFSET);
+			reg_data = reg_data >>
+				   (COMMON_SELECTOR_COMPHYN_FIELD_WIDTH * i);
+			reg_data &= COMMON_SELECTOR_COMPHY_MASK;
+			if (reg_data == COMMON_SELECTOR_PIPE_COMPHY_PCIE)
+				priv->lanes[i].skip_pcie_power_off = true;
+		}
+
 		phy_set_drvdata(phy, &priv->lanes[i]);
 
 		soc_info->comphy_ops->power_off(phy);
diff --git a/drivers/phy/phy-comphy-mvebu.h b/drivers/phy/phy-comphy-mvebu.h
index e4a5820..10570ce 100644
--- a/drivers/phy/phy-comphy-mvebu.h
+++ b/drivers/phy/phy-comphy-mvebu.h
@@ -32,6 +32,8 @@ struct mvebu_comphy_priv {
 		struct phy *phy;
 		int mode;
 		int index;
+		/* in case PCIe is in End point mode */
+		bool skip_pcie_power_off;
 		struct misc_info {
 			int pcie_width: 8;
 			int pcie_is_ep: 1;
-- 
1.7.9.5

