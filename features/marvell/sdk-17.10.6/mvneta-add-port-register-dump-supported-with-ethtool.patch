From 6e6faa193c0ffb2f5cc89ad886cfcb963d30bfea Mon Sep 17 00:00:00 2001
From: Evan Wang <xswang@marvell.com>
Date: Tue, 23 Aug 2016 19:15:44 +0800
Subject: [PATCH 0434/1345] mvneta: add port register dump supported with
 ethtool

commit  dd9596de07c5150645981303ce0ad3fb33b3cd38 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

This patch added the support to dump register of GMAC port.

Change-Id: I9026a520cb02eb7828e3250b0b32b1d2ec04905f
Signed-off-by: Evan Wang <xswang@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/32131
Reviewed-by: Wilson Ding <dingwei@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvneta.c |  121 +++++++++++++++++++++++++++++++++
 1 file changed, 121 insertions(+)

diff --git a/drivers/net/ethernet/marvell/mvneta.c b/drivers/net/ethernet/marvell/mvneta.c
index 6d108f7..7d294dc 100644
--- a/drivers/net/ethernet/marvell/mvneta.c
+++ b/drivers/net/ethernet/marvell/mvneta.c
@@ -239,6 +239,8 @@
 
 #define MVNETA_CAUSE_TXQ_SENT_DESC_ALL_MASK	 0xff
 
+#define MVNETA_REGS_GMAC_LEN                     0xAC9
+
 /* Descriptor ring Macros */
 #define MVNETA_QUEUE_NEXT_DESC(q, index)	\
 	(((index) < (q)->last_desc) ? ((index) + 1) : 0)
@@ -4078,6 +4080,123 @@ static int mvneta_ethtool_set_wol(struct net_device *dev,
 	return ret;
 }
 
+static int mvneta_ethtool_get_regs_len(struct net_device *netdev)
+{
+	return MVNETA_REGS_GMAC_LEN * sizeof(u32);
+}
+
+/*ethtool get registers function */
+static void mvneta_ethtool_get_regs(struct net_device *dev,
+				    struct ethtool_regs *regs, void *p)
+{
+	struct mvneta_port *pp = netdev_priv(dev);
+	u32 *regs_buff = p;
+	u32 reg_base = MVNETA_RXQ_CONFIG_REG(0);
+	int i, reg_index;
+
+	memset(p, 0, MVNETA_REGS_GMAC_LEN * sizeof(u32));
+
+	for (i = 0; i < rxq_number; i++) {
+		reg_index = ((MVNETA_RXQ_CONFIG_REG(i) - reg_base) >> 2);
+		regs_buff[reg_index] = mvreg_read(pp, MVNETA_RXQ_CONFIG_REG(i));
+
+		reg_index = ((MVNETA_RXQ_THRESHOLD_REG(i) - reg_base) >> 2);
+		regs_buff[reg_index] = mvreg_read(pp,
+						  MVNETA_RXQ_THRESHOLD_REG(i));
+
+		reg_index = ((MVNETA_RXQ_BASE_ADDR_REG(i) - reg_base) >> 2);
+		regs_buff[reg_index] = mvreg_read(pp,
+						  MVNETA_RXQ_BASE_ADDR_REG(i));
+
+		reg_index = ((MVNETA_RXQ_SIZE_REG(i) - reg_base) >> 2);
+		regs_buff[reg_index] = mvreg_read(pp, MVNETA_RXQ_SIZE_REG(i));
+
+		reg_index = ((MVNETA_RXQ_STATUS_REG(i) - reg_base) >> 2);
+		regs_buff[reg_index] = mvreg_read(pp, MVNETA_RXQ_STATUS_REG(i));
+
+		reg_index = ((MVNETA_RXQ_STATUS_UPDATE_REG(i) - reg_base) >> 2);
+		regs_buff[reg_index] =
+				mvreg_read(pp, MVNETA_RXQ_STATUS_UPDATE_REG(i));
+	}
+
+	reg_index = ((MVNETA_PORT_RX_RESET - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_PORT_RX_RESET);
+
+	reg_index = ((MVNETA_PHY_ADDR - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_PHY_ADDR);
+
+	reg_index = ((MVNETA_MBUS_RETRY - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_MBUS_RETRY);
+
+	reg_index = ((MVNETA_UNIT_INTR_CAUSE - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_UNIT_INTR_CAUSE);
+
+	reg_index = ((MVNETA_UNIT_CONTROL - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_UNIT_CONTROL);
+
+	reg_index = ((MVNETA_UNIT_CONTROL - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_UNIT_CONTROL);
+
+	for (i = 0; i < 6; i++) {
+		reg_index = ((MVNETA_WIN_BASE(i) - reg_base) >> 2);
+		regs_buff[reg_index] = mvreg_read(pp, MVNETA_WIN_BASE(i));
+
+		reg_index = ((MVNETA_WIN_SIZE(i) - reg_base) >> 2);
+		regs_buff[reg_index] = mvreg_read(pp, MVNETA_WIN_SIZE(i));
+
+		reg_index = ((MVNETA_WIN_REMAP(i) - reg_base) >> 2);
+		regs_buff[reg_index] = mvreg_read(pp, MVNETA_WIN_REMAP(i));
+	}
+
+	reg_index = ((MVNETA_BASE_ADDR_ENABLE - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_BASE_ADDR_ENABLE);
+
+	reg_index = ((MVNETA_ACCESS_PROTECT_ENABLE - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_ACCESS_PROTECT_ENABLE);
+
+	reg_index = ((MVNETA_PORT_CONFIG - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_PORT_CONFIG);
+
+	reg_index = ((MVNETA_PORT_CONFIG_EXTEND - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_PORT_CONFIG_EXTEND);
+
+	reg_index = ((MVNETA_MAC_ADDR_LOW - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_MAC_ADDR_LOW);
+
+	reg_index = ((MVNETA_MAC_ADDR_HIGH - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_MAC_ADDR_HIGH);
+
+	reg_index = ((MVNETA_SDMA_CONFIG - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_SDMA_CONFIG);
+
+	reg_index = ((MVNETA_PORT_STATUS - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_PORT_STATUS);
+
+	reg_index = ((MVNETA_RX_MIN_FRAME_SIZE - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_RX_MIN_FRAME_SIZE);
+
+	reg_index = ((MVNETA_SERDES_CFG - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_SERDES_CFG);
+
+	reg_index = ((MVNETA_TYPE_PRIO - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_TYPE_PRIO);
+
+	reg_index = ((MVNETA_ACC_MODE - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_ACC_MODE);
+
+	reg_index = ((MVNETA_GMAC_CTRL_0 - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_GMAC_CTRL_0);
+
+	reg_index = ((MVNETA_GMAC_CTRL_2 - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_GMAC_CTRL_2);
+
+	reg_index = ((MVNETA_GMAC_STATUS - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_GMAC_STATUS);
+
+	reg_index = ((MVNETA_GMAC_AUTONEG_CONFIG - reg_base) >> 2);
+	regs_buff[reg_index] = mvreg_read(pp, MVNETA_GMAC_AUTONEG_CONFIG);
+}
+
 static const struct net_device_ops mvneta_netdev_ops = {
 	.ndo_open            = mvneta_open,
 	.ndo_stop            = mvneta_stop,
@@ -4109,6 +4228,8 @@ static int mvneta_ethtool_set_wol(struct net_device *dev,
 	.set_link_ksettings = mvneta_ethtool_set_link_ksettings,
 	.get_wol        = mvneta_ethtool_get_wol,
 	.set_wol        = mvneta_ethtool_set_wol,
+	.get_regs_len	= mvneta_ethtool_get_regs_len,
+	.get_regs	= mvneta_ethtool_get_regs,
 };
 
 /* Initialize hw */
-- 
1.7.9.5

