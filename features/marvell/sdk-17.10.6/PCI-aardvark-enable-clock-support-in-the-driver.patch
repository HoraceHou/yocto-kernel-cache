From 35d8c8f795a9cf959013867c052aac5b3a401dbf Mon Sep 17 00:00:00 2001
From: Marcin Wojtas <mw@semihalf.com>
Date: Tue, 23 Aug 2016 16:41:32 +0200
Subject: [PATCH 0431/1345] PCI: aardvark: enable clock support in the driver

commit  be64189c0505dc2b0dbefcb878c60ae3a0a126ea from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Since Marvell Armada 3700 SoC supports gated clock for both north and
south bridges, PCI controller driver requires appropriate extension.
This patch enables handling of the PCI controller's reference clock.
According documentation is updated, as well as Armada 3700 DT.

Change-Id: I1fb45e9c16fa7f7aa11df200365457f4af1e3530
Signed-off-by: Marcin Wojtas <mw@semihalf.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/32143
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Wilson Ding <dingwei@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/pci/host/pci-aardvark.c |   27 +++++++++++++++++++++++----
 1 file changed, 23 insertions(+), 4 deletions(-)

diff --git a/drivers/pci/host/pci-aardvark.c b/drivers/pci/host/pci-aardvark.c
index 37d0bcd..665963f 100644
--- a/drivers/pci/host/pci-aardvark.c
+++ b/drivers/pci/host/pci-aardvark.c
@@ -11,6 +11,7 @@
  * warranty of any kind, whether express or implied.
  */
 
+#include <linux/clk.h>
 #include <linux/delay.h>
 #include <linux/interrupt.h>
 #include <linux/irq.h>
@@ -886,6 +887,7 @@ static int advk_pcie_probe(struct platform_device *pdev)
 	struct advk_pcie *pcie;
 	struct resource *res;
 	struct pci_bus *bus, *child;
+	struct clk *clk;
 	int ret, irq;
 
 	pcie = devm_kzalloc(dev, sizeof(struct advk_pcie), GFP_KERNEL);
@@ -908,10 +910,22 @@ static int advk_pcie_probe(struct platform_device *pdev)
 		return ret;
 	}
 
+	clk = devm_clk_get(&pdev->dev, NULL);
+	if (IS_ERR(clk)) {
+		dev_err(&pdev->dev, "Failed to obtain clock from DT\n");
+		return PTR_ERR(clk);
+	}
+
+	ret = clk_prepare_enable(clk);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to enable clock\n");
+		return ret;
+	}
+
 	ret = advk_pcie_parse_request_of_pci_ranges(pcie);
 	if (ret) {
 		dev_err(dev, "Failed to parse resources\n");
-		return ret;
+		goto err_clk;
 	}
 
 	advk_pcie_setup_hw(pcie);
@@ -919,14 +933,14 @@ static int advk_pcie_probe(struct platform_device *pdev)
 	ret = advk_pcie_init_irq_domain(pcie);
 	if (ret) {
 		dev_err(dev, "Failed to initialize irq\n");
-		return ret;
+		goto err_clk;
 	}
 
 	ret = advk_pcie_init_msi_irq_domain(pcie);
 	if (ret) {
 		dev_err(dev, "Failed to initialize irq\n");
 		advk_pcie_remove_irq_domain(pcie);
-		return ret;
+		goto err_clk;
 	}
 
 	bus = pci_scan_root_bus(dev, 0, &advk_pcie_ops,
@@ -934,7 +948,8 @@ static int advk_pcie_probe(struct platform_device *pdev)
 	if (!bus) {
 		advk_pcie_remove_msi_irq_domain(pcie);
 		advk_pcie_remove_irq_domain(pcie);
-		return -ENOMEM;
+		ret = -ENOMEM;
+		goto err_clk;
 	}
 
 	pci_bus_assign_resources(bus);
@@ -944,6 +959,10 @@ static int advk_pcie_probe(struct platform_device *pdev)
 
 	pci_bus_add_devices(bus);
 	return 0;
+
+err_clk:
+	clk_disable_unprepare(clk);
+	return ret;
 }
 
 static const struct of_device_id advk_pcie_of_match_table[] = {
-- 
1.7.9.5

