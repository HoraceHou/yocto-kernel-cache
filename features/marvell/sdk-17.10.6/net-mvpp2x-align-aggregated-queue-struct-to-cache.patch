From 83ce559019c0efb3eb7fc5a54a5bf8faf165fbf2 Mon Sep 17 00:00:00 2001
From: Yan Markman <ymarkman@marvell.com>
Date: Wed, 27 Dec 2017 12:01:19 +0200
Subject: [PATCH 1251/1345] net: mvpp2x: align aggregated queue struct to
 cache

commit  fb51a381abdff1df5f1ea1c7b82beddd7de4719c from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

This patch is FIX and Optimization.

The Aggregated TX queue descriptors are allocated and
referenced as array of descriptors/structures "per CPU".
The size of an entry in the array is 56B.
To avoid "cache line interference " on array's entry
the descriptor address and size should be be aligned to the
cache-line-size.
This alignment also improves the performance since 1 cache-line
used by CPU instead of 2 cache-lines.

Change-Id: I10f9ab1f2607bbc233fec69e7fe25a05cac3c4b8
Signed-off-by: Yan Markman <ymarkman@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/48404
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-by: Yuval Caduri <cyuval@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h      |    3 ++-
 .../net/ethernet/marvell/mvpp2x/mv_pp2x_hw_type.h  |    3 +++
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |   27 +++++++++++++++-----
 3 files changed, 26 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
index daafa1f0..8db00ff 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
@@ -397,7 +397,7 @@ struct mv_pp2x_aggr_tx_queue {
 
 	/* XPS mask */
 	cpumask_t affinity_mask;
-};
+} __aligned(MVPP2_CACHE_LINE_SIZE);
 
 struct mv_pp2x_rx_queue {
 	/* RX queue number, in the range 0-31 for physical RXQs */
@@ -555,6 +555,7 @@ struct mv_pp2x {
 	/* Aggregated TXQs */
 	u16 num_aggr_qs;
 	struct mv_pp2x_aggr_tx_queue *aggr_txqs;
+	u16 aggr_txqs_align_offs;
 
 	/* BM pools */
 	u16 num_pools;
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw_type.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw_type.h
index 7255fcf..be40a17 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw_type.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw_type.h
@@ -1183,6 +1183,9 @@
 /* Lbtd 802.3 type */
 #define MVPP2_IP_LBDT_TYPE		0xfffa
 
+#define MVPP2_CACHE_LINE_SIZE		L1_CACHE_BYTES
+#define MVPP2_CACHE_LINE_MASK		(L1_CACHE_BYTES - 1)
+
 #define MVPP2_CPU_D_CACHE_LINE_SIZE	32
 #define MVPP2_TX_CSUM_MAX_SIZE		9800
 
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index 09e660f..82cb482 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -5437,13 +5437,27 @@ static int mv_pp2x_init(struct platform_device *pdev, struct mv_pp2x *priv)
 		       hw->lms_base + MVPP2_MNG_EXTENDED_GLOBAL_CTRL_REG);
 	}
 
-	/* Allocate and initialize aggregated TXQs */
-	priv->aggr_txqs = devm_kcalloc(&pdev->dev, num_active_cpus(),
-				       sizeof(struct mv_pp2x_aggr_tx_queue),
-				       GFP_KERNEL);
-
+	/* Allocate and initialize aggregated TXQs
+	 * The aggr_txqs area should be aligned onto cache-line-size.
+	 * So allocate cache-line-size more than needed, round-up the pointer
+	 * but keep the offset between aligned and original pointers
+	 * for further usage in free(aligned - offset).
+	 * (offset is used instead of origin-ptr since it is more compact)
+	 */
+	val = sizeof(struct mv_pp2x_aggr_tx_queue) * num_present_cpus() +
+		MVPP2_CACHE_LINE_SIZE;
+	priv->aggr_txqs = devm_kcalloc(&pdev->dev, 1, val, GFP_KERNEL);
 	if (!priv->aggr_txqs)
 		return -ENOMEM;
+	val = (dma_addr_t)priv->aggr_txqs & MVPP2_CACHE_LINE_MASK;
+	if (!val) {
+		priv->aggr_txqs_align_offs = 0;
+	} else {
+		priv->aggr_txqs_align_offs = sizeof(struct mv_pp2x_aggr_tx_queue) - val;
+		priv->aggr_txqs = (void *)((u8 *)priv->aggr_txqs +
+			priv->aggr_txqs_align_offs);
+	}
+
 	priv->num_aggr_qs = num_active_cpus();
 
 	i = 0;
@@ -6234,7 +6248,8 @@ static int mvpp2x_suspend(struct device *dev)
 	devm_kfree(&pdev->dev, priv->hw.prs_shadow);
 	devm_kfree(&pdev->dev, priv->hw.cls_shadow);
 	devm_kfree(&pdev->dev, priv->hw.c2_shadow);
-	devm_kfree(&pdev->dev, priv->aggr_txqs);
+	/* aggr_txqs is aligned round-up; restore the original by -offset */
+	devm_kfree(&pdev->dev, ((u8 *)priv->aggr_txqs - priv->aggr_txqs_align_offs));
 
 	for (i = 0; i < priv->num_pools; i++) {
 		struct mv_pp2x_bm_pool *bm_pool = &priv->bm_pools[i];
-- 
1.7.9.5

