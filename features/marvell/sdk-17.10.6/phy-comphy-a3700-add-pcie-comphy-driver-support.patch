From 8ac61acf37389d3f9455e11db210c3dce47e05a9 Mon Sep 17 00:00:00 2001
From: Evan Wang <xswang@marvell.com>
Date: Mon, 16 Jan 2017 16:37:38 +0800
Subject: [PATCH 0792/1345] phy: comphy: a3700: add pcie comphy driver support

commit  001ea163e2470751b7ff5481b62c2bc956740b8e from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Change-Id: Icee8b17cbdbaaf2bcc24b3078bc242b018f13028
Signed-off-by: Evan Wang <xswang@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/35605
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Victor Gu <xigu@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/phy/phy-comphy-a3700.c |   92 +++++++++++++++++++++--
 drivers/phy/phy-comphy-a3700.h |  159 +++++++++++++++++++++++++++++++++-------
 2 files changed, 218 insertions(+), 33 deletions(-)

diff --git a/drivers/phy/phy-comphy-a3700.c b/drivers/phy/phy-comphy-a3700.c
index 3376839..93ec316 100644
--- a/drivers/phy/phy-comphy-a3700.c
+++ b/drivers/phy/phy-comphy-a3700.c
@@ -149,7 +149,7 @@ static int mvebu_a3700_comphy_sata_power_on(struct mvebu_comphy_priv *priv,
 	reg_offset = COMPHY_LOOPBACK_REG0 + SATAPHY_LANE2_REG_BASE_OFFSET;
 	mvebu_comphy_reg_set_indirect(comphy_indir_regs,
 				      reg_offset,
-				      (DATA_WIDTH_40BIT << SEL_DATA_WIDTH_OFFSET),
+				      DATA_WIDTH_40BIT,
 				      SEL_DATA_WIDTH_MASK,
 				      mode);
 
@@ -159,8 +159,7 @@ static int mvebu_a3700_comphy_sata_power_on(struct mvebu_comphy_priv *priv,
 	reg_offset = COMPHY_POWER_PLL_CTRL + SATAPHY_LANE2_REG_BASE_OFFSET;
 	mvebu_comphy_reg_set_indirect(comphy_indir_regs,
 				      reg_offset,
-				      ((REF_CLOCK_SPEED_25M << REF_FREF_SEL_OFFSET) |
-				       (PHY_MODE_SATA << PHY_MODE_OFFSET)),
+				      REF_CLOCK_SPEED_25M | PHY_MODE_SATA,
 				      REF_FREF_SEL_MASK | PHY_MODE_MASK,
 				      mode);
 
@@ -235,13 +234,96 @@ static int mvebu_a3700_comphy_usb3_power_on(struct mvebu_comphy_priv *priv,
 static int mvebu_a3700_comphy_pcie_power_on(struct mvebu_comphy_priv *priv,
 					    struct mvebu_comphy *comphy)
 {
+	int ret;
+	int invert = COMPHY_GET_POLARITY_INVERT(priv->lanes[comphy->index].mode);
+
 	dev_dbg(priv->dev, "%s: Enter\n", __func__);
 
-	dev_err(priv->dev, "PCIE mode is not implemented\n");
+	/*
+	 * 1. Enable max PLL.
+	 */
+	reg_set16(LANE_CFG1_ADDR(PCIE) + priv->comphy_pipe_regs, USE_MAX_PLL_RATE_EN, 0x0);
+
+	/*
+	 * 2. Select 20 bit SERDES interface.
+	 */
+	reg_set16(GLOB_CLK_SRC_LO_ADDR(PCIE) + priv->comphy_pipe_regs, CFG_SEL_20B, 0);
+
+	/*
+	 * 3. Force to use reg setting for PCIe mode
+	 */
+	reg_set16(MISC_REG1_ADDR(PCIE) + priv->comphy_pipe_regs, SEL_BITS_PCIE_FORCE, 0);
+
+	/*
+	 * 4. Change RX wait
+	 */
+	reg_set16(PWR_MGM_TIM1_ADDR(PCIE) + priv->comphy_pipe_regs,
+		  CFG_PM_RXDEN_WAIT_1_UNIT | CFG_PM_RXDLOZ_WAIT_12_UNIT,
+		  CFG_PM_OSCCLK_WAIT_MASK | CFG_PM_RXDEN_WAIT_MASK | CFG_PM_RXDLOZ_WAIT_MASK);
+
+	/*
+	 * 5. Enable idle sync
+	 */
+	reg_set16(UNIT_CTRL_ADDR(PCIE) + priv->comphy_pipe_regs,
+		  UNIT_CTRL_DEFAULT_VALUE | IDLE_SYNC_EN, REG_16_BIT_MASK);
+
+	/*
+	 * 6. Enable the output of 100M/125M/500M clock
+	 */
+	reg_set16(MISC_REG0_ADDR(PCIE) + priv->comphy_pipe_regs,
+		  MISC_REG0_DEFAULT_VALUE | CLK500M_EN | CLK100M_125M_EN,
+		  REG_16_BIT_MASK);
+
+	/*
+	 * 7. Enable TX, PCIE global register, 0xd0074814, it is done in  PCI-E driver
+	 */
+
+	/*
+	 * 8. Check crystal jumper setting and program the Power and PLL Control accordingly
+	 */
+	reg_set16(PWR_PLL_CTRL_ADDR(PCIE) + priv->comphy_pipe_regs,
+		  (PU_IVREF_BIT | PU_PLL_BIT | PU_RX_BIT | PU_TX_BIT |
+		   PU_TX_INTP_BIT | PU_DFE_BIT | PCIE_REF_CLOCK_SPEED_25M | PHY_MODE_PCIE),
+		   REG_16_BIT_MASK);
+
+	/*
+	 * 9. Override Speed_PLL value and use MAC PLL
+	 */
+	reg_set16(KVCO_CAL_CTRL_ADDR(PCIE) + priv->comphy_pipe_regs,
+		  SPEED_PLL_VALUE_16 | USE_MAX_PLL_RATE_BIT, REG_16_BIT_MASK);
+
+	/*
+	 * 10. Check the Polarity invert bit
+	 */
+	if (invert & COMPHY_POLARITY_TXD_INVERT)
+		reg_set16(SYNC_PATTERN_REG_ADDR(PCIE) + priv->comphy_pipe_regs,
+			  TXD_INVERT_BIT, 0x0);
+
+	if (invert & COMPHY_POLARITY_RXD_INVERT)
+		reg_set16(SYNC_PATTERN_REG_ADDR(PCIE) + priv->comphy_pipe_regs,
+			  RXD_INVERT_BIT, 0x0);
+
+	/*
+	 * 11. Release SW reset
+	 */
+	reg_set16(GLOB_PHY_CTRL0_ADDR(PCIE) + priv->comphy_pipe_regs,
+		  MODE_CORE_CLK_FREQ_SEL | MODE_PIPE_WIDTH_32,
+		  SOFT_RESET | MODE_REFDIV);
+
+	/* Wait for > 55 us to allow PCLK be enabled */
+	udelay(PLL_SET_DELAY_US);
+
+	ret = polling_with_timeout(LANE_STATUS1_ADDR(PCIE) + priv->comphy_pipe_regs,
+				   TXDCLK_PCLK_EN,
+				   TXDCLK_PCLK_EN,
+				   A3700_COMPHY_PLL_LOCK_TIMEOUT,
+				   REG_16BIT);
+	if (ret)
+		dev_err(priv->dev, "Failed to lock PCIE PLL\n");
 
 	dev_dbg(priv->dev, "%s: Exit\n", __func__);
 
-	return -ENOTSUPP;
+	return ret;
 }
 
 static int mvebu_a3700_comphy_power_on(struct phy *phy)
diff --git a/drivers/phy/phy-comphy-a3700.h b/drivers/phy/phy-comphy-a3700.h
index fbbe39f..44e18a8 100644
--- a/drivers/phy/phy-comphy-a3700.h
+++ b/drivers/phy/phy-comphy-a3700.h
@@ -5,6 +5,7 @@
 
 #define PLL_SET_DELAY_US		600
 #define A3700_COMPHY_PLL_LOCK_TIMEOUT	1000
+#define REG_16_BIT_MASK			0xFFFF
 
 enum {
 	COMPHY_LANE0 = 0,
@@ -35,52 +36,154 @@ enum {
 	PCIE = 1,
 	USB3,
 };
-#define PCIEPHY_SHFT			2
-#define USB3PHY_SHFT			2
-#define PHY_SHFT(unit)			((unit == PCIE) ? PCIEPHY_SHFT : USB3PHY_SHFT)
+
+#define PCIEPHY_SHFT				2
+#define USB3PHY_SHFT				2
+#define PHY_SHFT(unit)				((unit == PCIE) ? PCIEPHY_SHFT : USB3PHY_SHFT)
 
 /* PHY register */
-#define COMPHY_POWER_PLL_CTRL			0x01
-#define PWR_PLL_CTRL_ADDR(unit)			(COMPHY_POWER_PLL_CTRL * PHY_SHFT(unit))
+#define COMPHY_POWER_PLL_CTRL		0x01
+#define PWR_PLL_CTRL_ADDR(unit)		(COMPHY_POWER_PLL_CTRL * PHY_SHFT(unit))
+#define PU_IVREF_BIT				BIT(15)
+#define PU_PLL_BIT					BIT(14)
+#define PU_RX_BIT					BIT(13)
+#define PU_TX_BIT					BIT(12)
+#define PU_TX_INTP_BIT				BIT(11)
+#define PU_DFE_BIT					BIT(10)
+#define RESET_DTL_RX_BIT			BIT(9)
+#define PLL_LOCK_BIT				BIT(8)
 #define REF_FREF_SEL_OFFSET			0
 #define REF_FREF_SEL_MASK			(0x1F << REF_FREF_SEL_OFFSET)
-#define REF_CLOCK_SPEED_25M			0x1
-#define REF_CLOCK_SPEED_40M			0x3
+#define REF_CLOCK_SPEED_25M			(0x1 << REF_FREF_SEL_OFFSET)
+#define REF_CLOCK_SPEED_30M			(0x2 << REF_FREF_SEL_OFFSET)
+#define PCIE_REF_CLOCK_SPEED_25M	REF_CLOCK_SPEED_30M
+#define REF_CLOCK_SPEED_40M			(0x3 << REF_FREF_SEL_OFFSET)
 #define PHY_MODE_OFFSET				5
 #define PHY_MODE_MASK				(7 << PHY_MODE_OFFSET)
-#define PHY_MODE_SATA				0x0
-#define PHY_MODE_SGMII				0x4
-#define PHY_MODE_USB3				0x5
-
-#define COMPHY_KVCO_CAL_CTRL			0x02
-#define KVCO_CAL_CTRL_ADDR(unit)		(COMPHY_KVCO_CAL_CTRL * PHY_SHFT(unit))
-#define USE_MAX_PLL_RATE_BIT			BIT(12)
+#define PHY_MODE_SATA				(0x0 << PHY_MODE_OFFSET)
+#define PHY_MODE_PCIE				(0x3 << PHY_MODE_OFFSET)
+#define PHY_MODE_SGMII				(0x4 << PHY_MODE_OFFSET)
+#define PHY_MODE_USB3				(0x5 << PHY_MODE_OFFSET)
+
+#define COMPHY_KVCO_CAL_CTRL		0x02
+#define KVCO_CAL_CTRL_ADDR(unit)	(COMPHY_KVCO_CAL_CTRL * PHY_SHFT(unit))
+#define USE_MAX_PLL_RATE_BIT		BIT(12)
+#define SPEED_PLL_OFFSET			2
+#define SPEED_PLL_MASK				(0x3F << SPEED_PLL_OFFSET)
+#define SPEED_PLL_VALUE_16			(0x10 << SPEED_PLL_OFFSET)
 
 #define COMPHY_RESERVED_REG			0x0e
 #define PHYCTRL_FRM_PIN_BIT			BIT(13)
 
-#define COMPHY_LOOPBACK_REG0			0x23
-#define DIG_LB_EN_ADDR(unit)			(COMPHY_LOOPBACK_REG0 * PHY_SHFT(unit))
-#define SEL_DATA_WIDTH_OFFSET			10
+#define COMPHY_LOOPBACK_REG0		0x23
+#define DIG_LB_EN_ADDR(unit)		(COMPHY_LOOPBACK_REG0 * PHY_SHFT(unit))
+#define SEL_DATA_WIDTH_OFFSET		10
 #define SEL_DATA_WIDTH_MASK			(0x3 << SEL_DATA_WIDTH_OFFSET)
-#define DATA_WIDTH_10BIT			0x0
-#define DATA_WIDTH_20BIT			0x1
-#define DATA_WIDTH_40BIT			0x2
+#define DATA_WIDTH_10BIT			(0x0 << SEL_DATA_WIDTH_OFFSET)
+#define DATA_WIDTH_20BIT			(0x1 << SEL_DATA_WIDTH_OFFSET)
+#define DATA_WIDTH_40BIT			(0x2 << SEL_DATA_WIDTH_OFFSET)
 #define PLL_READY_TX_BIT			BIT(4)
 
-#define COMPHY_SYNC_PATTERN_REG			0x24
-#define SYNC_PATTERN_REG_ADDR(unit)		(COMPHY_SYNC_PATTERN_REG * PHY_SHFT(unit))
+#define COMPHY_SYNC_PATTERN_REG		0x24
+#define SYNC_PATTERN_REG_ADDR(unit)	(COMPHY_SYNC_PATTERN_REG * PHY_SHFT(unit))
 #define TXD_INVERT_BIT				BIT(10)
 #define RXD_INVERT_BIT				BIT(11)
 
-#define COMPHY_MISC_REG0_ADDR			0x4F
-#define MISC_REG0_ADDR(unit)			(COMPHY_MISC_REG0_ADDR * PHY_SHFT(unit))
+#define COMPHY_MISC_REG0_ADDR		0x4F
+#define MISC_REG0_ADDR(unit)		(COMPHY_MISC_REG0_ADDR * PHY_SHFT(unit))
 #define CLK100M_125M_EN				BIT(4)
-#define CLK500M_EN				BIT(7)
+#define CLK500M_EN					BIT(7)
 #define PHY_REF_CLK_SEL				BIT(10)
-
-
-
+#define MISC_REG0_DEFAULT_VALUE		0xA00D
+
+#define COMPHY_REG_GEN2_SETTINGS_2	0x3e
+#define GEN2_SETTING_2_ADDR(unit)	(COMPHY_REG_GEN2_SETTINGS_2 * PHY_SHFT(unit))
+#define G2_TX_SSC_AMP_VALUE_20		BIT(14)
+#define G2_TX_SSC_AMP_OFF			9
+#define G2_TX_SSC_AMP_LEN			7
+#define G2_TX_SSC_AMP_MASK			(((1 << G2_TX_SSC_AMP_LEN) - 1) << G2_TX_SSC_AMP_OFF)
+
+#define COMPHY_REG_GEN2_SETTINGS_3	0x3f
+#define GEN2_SETTING_3_ADDR(unit)	(COMPHY_REG_GEN2_SETTINGS_3 * PHY_SHFT(unit))
+#define G3_TX_SSC_AMP_OFF			9
+#define G3_TX_SSC_AMP_LEN			7
+#define G3_TX_SSC_AMP_MASK			(((1 << G2_TX_SSC_AMP_LEN) - 1) << G2_TX_SSC_AMP_OFF)
+#define G3_VREG_RXTX_MAS_ISET_OFF	7
+#define G3_VREG_RXTX_MAS_ISET_60U	(0 << G3_VREG_RXTX_MAS_ISET_OFF)
+#define G3_VREG_RXTX_MAS_ISET_80U	(1 << G3_VREG_RXTX_MAS_ISET_OFF)
+#define G3_VREG_RXTX_MAS_ISET_100U	(2 << G3_VREG_RXTX_MAS_ISET_OFF)
+#define G3_VREG_RXTX_MAS_ISET_120U	(3 << G3_VREG_RXTX_MAS_ISET_OFF)
+#define G3_VREG_RXTX_MAS_ISET_MASK	(BIT(7) | BIT(8))
+#define RSVD_PH03FH_6_0_OFF			0
+#define RSVD_PH03FH_6_0_LEN			7
+#define RSVD_PH03FH_6_0_MASK		(((1 << RSVD_PH03FH_6_0_LEN) - 1) << RSVD_PH03FH_6_0_OFF)
+
+#define COMPHY_REG_UNIT_CTRL_ADDR	0x48
+#define UNIT_CTRL_ADDR(unit)		(COMPHY_REG_UNIT_CTRL_ADDR * PHY_SHFT(unit))
+#define IDLE_SYNC_EN				BIT(12)
+#define UNIT_CTRL_DEFAULT_VALUE		0x60
+
+#define COMPHY_MISC_REG1_ADDR		0x73
+#define MISC_REG1_ADDR(unit)		(COMPHY_MISC_REG1_ADDR * PHY_SHFT(unit))
+#define SEL_BITS_PCIE_FORCE			BIT(15)
+
+#define COMPHY_REG_LANE_CFG0_ADDR	0x180
+#define LANE_CFG0_ADDR(unit)		(COMPHY_REG_LANE_CFG0_ADDR * PHY_SHFT(unit))
+#define PRD_TXDEEMPH_MASK			BIT(0)
+#define PRD_TXMARGIN_MASK			(BIT(1) | BIT(2) | BIT(3))
+#define PRD_TXSWING_MASK			BIT(4)
+#define CFG_TX_ALIGN_POS_MASK		(BIT(5) | BIT(6) | BIT(7) | BIT(8))
+
+#define COMPHY_REG_LANE_CFG1_ADDR		0x181
+#define LANE_CFG1_ADDR(unit)			(COMPHY_REG_LANE_CFG1_ADDR * PHY_SHFT(unit))
+#define USE_MAX_PLL_RATE_EN				BIT(9)
+
+#define COMPHY_REG_LANE_STATUS1_ADDR	0x183
+#define LANE_STATUS1_ADDR(unit)			(COMPHY_REG_LANE_STATUS1_ADDR * PHY_SHFT(unit))
+#define TXDCLK_PCLK_EN					BIT(0)
+
+#define COMPHY_REG_LANE_CFG4_ADDR		0x188
+#define LANE_CFG4_ADDR(unit)			(COMPHY_REG_LANE_CFG4_ADDR * PHY_SHFT(unit))
+#define SPREAD_SPECTRUM_CLK_EN			BIT(7)
+
+#define COMPHY_REG_GLOB_PHY_CTRL0_ADDR	0x1C1
+#define GLOB_PHY_CTRL0_ADDR(unit)		(COMPHY_REG_GLOB_PHY_CTRL0_ADDR * PHY_SHFT(unit))
+#define SOFT_RESET						BIT(0)
+#define MODE_REFDIV						0x30
+#define MODE_CORE_CLK_FREQ_SEL			BIT(9)
+#define MODE_PIPE_WIDTH_32				BIT(3)
+#define MODE_REFDIV_OFFSET				4
+#define MODE_REFDIV_LEN					2
+#define MODE_REFDIV_MASK				(0x3 << MODE_REFDIV_OFFSET)
+#define MODE_REFDIV_BY_4				(0x2 << MODE_REFDIV_OFFSET)
+
+#define COMPHY_REG_TEST_MODE_CTRL_ADDR		0x1C2
+#define TEST_MODE_CTRL_ADDR(unit)			(COMPHY_REG_TEST_MODE_CTRL_ADDR * PHY_SHFT(unit))
+#define MODE_MARGIN_OVERRIDE				BIT(2)
+
+#define COMPHY_REG_GLOB_CLK_SRC_LO_ADDR		0x1C3
+#define GLOB_CLK_SRC_LO_ADDR(unit)			(COMPHY_REG_GLOB_CLK_SRC_LO_ADDR * PHY_SHFT(unit))
+#define MODE_CLK_SRC						BIT(0)
+#define BUNDLE_PERIOD_SEL					BIT(1)
+#define BUNDLE_PERIOD_SCALE					(BIT(2) | BIT(3))
+#define BUNDLE_SAMPLE_CTRL					BIT(4)
+#define PLL_READY_DLY						(BIT(5) | BIT(6) | BIT(7))
+#define CFG_SEL_20B							BIT(15)
+
+#define COMPHY_REG_PWR_MGM_TIM1_ADDR		0x1D0
+#define PWR_MGM_TIM1_ADDR(unit)				(COMPHY_REG_PWR_MGM_TIM1_ADDR * PHY_SHFT(unit))
+#define CFG_PM_OSCCLK_WAIT_OFF				12
+#define CFG_PM_OSCCLK_WAIT_LEN				4
+#define CFG_PM_OSCCLK_WAIT_MASK				(((1 << CFG_PM_OSCCLK_WAIT_LEN) - 1) << CFG_PM_OSCCLK_WAIT_OFF)
+#define CFG_PM_RXDEN_WAIT_OFF				8
+#define CFG_PM_RXDEN_WAIT_LEN				4
+#define CFG_PM_RXDEN_WAIT_MASK				(((1 << CFG_PM_RXDEN_WAIT_LEN) - 1) << CFG_PM_RXDEN_WAIT_OFF)
+#define CFG_PM_RXDEN_WAIT_1_UNIT			(1 << CFG_PM_RXDEN_WAIT_OFF)
+#define CFG_PM_RXDLOZ_WAIT_OFF				0
+#define CFG_PM_RXDLOZ_WAIT_LEN				8
+#define CFG_PM_RXDLOZ_WAIT_MASK				(((1 << CFG_PM_RXDEN_WAIT_LEN) - 1) << CFG_PM_RXDEN_WAIT_OFF)
+#define CFG_PM_RXDLOZ_WAIT_7_UNIT			(7 << CFG_PM_RXDLOZ_WAIT_OFF)
+#define CFG_PM_RXDLOZ_WAIT_12_UNIT			(0xC << CFG_PM_RXDLOZ_WAIT_OFF)
 
 #endif /* _COMPHY_A3700_H */
 
-- 
1.7.9.5

