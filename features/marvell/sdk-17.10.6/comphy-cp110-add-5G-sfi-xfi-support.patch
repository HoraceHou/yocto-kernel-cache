From ae3dd9fe6397a5dfb2cbbe5327ef344d285988b2 Mon Sep 17 00:00:00 2001
From: Igal Liberman <igall@marvell.com>
Date: Tue, 24 Jan 2017 20:58:57 +0200
Subject: [PATCH 0758/1345] comphy: cp110: add 5G sfi/xfi support

commit  cb2303cc56856ab71eb0b6408f178b8917149b70 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

This patch adds the option to configure comphy to
low speed xfi/sfi (comphy speed 5.15626G, network speed is 5Gbps).

In order to set a comphy to 5G xfi use the following example:
	emac0_1: mac0 {
		phy-mode = "sfi"; /* lane-2 */
		phys = <&comphy0 2 COMPHY_DEF(COMPHY_SFI_MODE,
					      COMPHY_UNIT_ID0,
					      COMPHY_SPEED_10_3125G,
					      COMPHY_POLARITY_NO_INVERT)>;
		phy-names = "comphy";
	};

Binding document was updated accordingly (with some cosmetic updates).

NOTE:
- COMPHY_SPEED_DEFAULT will configure comphy to 10.3125G.
- In order to use the new 5.15625G mode, Marvell pp2v driver needs
  to adopt the new changes, currently, all SFI comphys will be configured
  to 10.3125G as before.

Change-Id: I6f05358f7d2a66f1ba1b450cdc864a11a08cfc1b
Signed-off-by: Igal Liberman <igall@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/36001
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../devicetree/bindings/phy/phy-comphy-mvebu.txt   |  106 ++++++++++++--------
 drivers/phy/phy-comphy-cp110.c                     |   49 +++++++--
 drivers/phy/phy-comphy-cp110.h                     |   10 ++
 include/dt-bindings/phy/phy-comphy-mvebu.h         |    2 +
 4 files changed, 119 insertions(+), 48 deletions(-)

diff --git a/Documentation/devicetree/bindings/phy/phy-comphy-mvebu.txt b/Documentation/devicetree/bindings/phy/phy-comphy-mvebu.txt
index f67a8a5c..015e5e8 100644
--- a/Documentation/devicetree/bindings/phy/phy-comphy-mvebu.txt
+++ b/Documentation/devicetree/bindings/phy/phy-comphy-mvebu.txt
@@ -29,15 +29,15 @@ Each device using Comphy should have handle with the following properties:
 	     configures default speed and no polarity invert for COMPHY lane.
 	     Default speed is for COMPHYs with configurable speed, such as SGMII - 1Gbps/2.5Gbps
 	     - Simplified usage options:
-					COMPHY_SATA0 COMPHY_SATA1
-					COMPHY_SGMII0 COMPHY_SGMII1 COMPHY_SGMII2
-					COMPHY_HS_SGMII0 COMPHY_HS_SGMII1 COMPHY_HS_SGMII2
-					COMPHY_USB3H0 COMPHY_USB3H1
-					COMPHY_USB3D0
-					COMPHY_PCIE0 COMPHY_PCIE1 COMPHY_PCIE2 COMPHY_PCIE3
-					COMPHY_RXAUI0 COMPHY_RXAUI1
-					COMPHY_XFI
-					COMPHY_SFI
+				- COMPHY_SATA0 COMPHY_SATA1
+				- COMPHY_SGMII0 COMPHY_SGMII1 COMPHY_SGMII2
+				- COMPHY_HS_SGMII0 COMPHY_HS_SGMII1 COMPHY_HS_SGMII2
+				- COMPHY_USB3H0 COMPHY_USB3H1
+				- COMPHY_USB3D0
+				- COMPHY_PCIE0 COMPHY_PCIE1 COMPHY_PCIE2 COMPHY_PCIE3
+				- COMPHY_RXAUI0 COMPHY_RXAUI1
+				- COMPHY_XFI
+				- COMPHY_SFI
 	  2. Complex description (for specific speed and/or polarity invert settings)
 	     With this approach, comphy settings are selected by the macro COMPHY_DEF,
 	     which defines comphy mode, unit index, comphy speed, and comphy RX/TX invert settings.
@@ -60,6 +60,8 @@ Each device using Comphy should have handle with the following properties:
 				- COMPHY_SPEED_DEFAULT: for COMPHY type uses fixed speed
 				- COMPHY_SPEED_1_25: for SMGII works at 1Gbps
 				- COMPHY_SPEED_3_125: for SMGII works at 2.5Gbps
+				- COMPHY_SPEED_5_15625G for sfi/xfi works at 5Gbps
+				- COMPHY_SPEED_10_3125G for sfi/xfi works at 10Gbps
 			COMPHY_INVERT: polarity invert
 				- COMPHY_POLARITY_NO_INVERT:  there is no polarity inverted
 				- COMPHY_POLARITY_TXD_INVERT: there is TX polarity inverted
@@ -70,53 +72,73 @@ Each device using Comphy should have handle with the following properties:
 Example:
 Comphy Node:
 ============
-		comphy0: comphy {
-				compatible = "marvell,cp110-comphy";
-				reg = <0x441000 0x100>, <0x120000 0x6000>;
-				reg-names = "comphy", "serdes";
-				#phy-cells = <2>;
-				status = "okay";
-		};
+	comphy0: comphy {
+		compatible = "marvell,cp110-comphy";
+		reg = <0x441000 0x100>, <0x120000 0x6000>;
+		reg-names = "comphy", "serdes";
+		#phy-cells = <2>;
+		status = "okay";
+	};
 
-		comphy1: comphy {
-				compatible = "marvell,cp110-comphy";
-				reg = <0x441000 0x100>, <0x120000 0x6000>;
-				reg-names = "comphy", "serdes";
-				#phy-cells = <2>;
-				status = "okay";
-		};
+	comphy1: comphy {
+		compatible = "marvell,cp110-comphy";
+		reg = <0x441000 0x100>, <0x120000 0x6000>;
+		reg-names = "comphy", "serdes";
+		#phy-cells = <2>;
+		status = "okay";
+	};
 
 Comphy consumer:
-=============
+===============
 	(1) The example with simplified option of comphy description:
 		sata@540000 {
-				phys = <&comphy0 4 COMPHY_SATA0>
-				status = "okay";
+			phys = <&comphy0 4 COMPHY_SATA0>
+			status = "okay";
 		};
 
 		Explain for above sata example:
-			- phy handler is comphy0
-			- the sata interface uses lane 4 of comphy
-			- COMPHY description:
-					- the comphy works at SATA mode
-					- the unit index of the sata interface is 0
-					- the speed is default
-					- the invert is also default without polarity inverted
+		- phy handler is comphy0
+		- the sata interface uses lane 4 of comphy
+		- COMPHY description:
+			- the comphy works at SATA mode
+			- the unit index of the sata interface is 0
+			- the speed is default
+			- the invert is also default without polarity inverted
 
-	(2) The example with complex option of comphy description:
-		emac2: mac2 {
+	(2) Examples with complex option of comphy description:
+		(2.1)	emac2: mac2 {
 				phys = <&comphy0 0 COMPHY_DEF(COMPHY_SGMII_MODE,
-							      1,
+							      COMPHY_UNIT_ID1,
 							      COMPHY_SPEED_1_25G,
 							      COMPHY_POLARITY_RXD_INVERT)>;
 				phy-names = "comphy";
-		};
+			};
 
-		Explain for above SGMII example:
+			Explain for above SGMII example:
 			- phy handler is comphy0
 			- the SGMII interface uses lane 0 of comphy
 			- COMPHY description:
-					- the comphy works at SGMII mode
-					- the unit index of the sata interface is 1
-					- the speed is 1Gbps
-					- the comphy has rx polarity inverted
+				- the comphy works at SGMII mode
+				- the unit index of the sata interface is 1
+				- the comphy speed is 1.25G (network speed is 1Gbps)
+				- the comphy has rx polarity inverted
+
+		(2.2)	emac0_1: mac0 {
+				phy-mode = "sfi";
+		                phys = <&comphy0 2 COMPHY_DEF(COMPHY_SFI_MODE,
+							      COMPHY_UNIT_ID0,
+							      COMPHY_SPEED_10_3125G,
+							      COMPHY_POLARITY_NO_INVERT)>;
+				phy-names = "comphy";
+			};
+
+			Explain for above SFI example:
+			- phy handler is comphy0
+			- the SFI interface uses lane 2 of comphy
+			- COMPHY description:
+				- the comphy works at SFI mode
+				- the unit index of the sata interface is 0
+				- the speed is 10.3125G (network speed is 10Gbps)
+				- the comphy has no polarity invertion
+
+
diff --git a/drivers/phy/phy-comphy-cp110.c b/drivers/phy/phy-comphy-cp110.c
index 87f08d3..0bea466 100644
--- a/drivers/phy/phy-comphy-cp110.c
+++ b/drivers/phy/phy-comphy-cp110.c
@@ -472,11 +472,19 @@ static int mvebu_cp110_comphy_xfi_power_on(struct mvebu_comphy_priv *priv,
 					   struct mvebu_comphy *comphy)
 {
 	void __iomem *hpipe_addr, *sd_ip_addr, *comphy_addr, *addr;
-	u32 mask, data;
+	u32 mask, data, speed = COMPHY_GET_SPEED(priv->lanes[comphy->index].mode);
 	int ret = 0;
 
 	dev_dbg(priv->dev, "%s: Enter\n", __func__);
 
+	if ((speed != COMPHY_SPEED_5_15625G) &&
+	     (speed != COMPHY_SPEED_10_3125G) &&
+	     (speed != COMPHY_SPEED_DEFAULT)) {
+		dev_err(priv->dev, "comphy:%d: unsupported sfi/xfi speed\n",
+			comphy->index);
+		return -EINVAL;
+	}
+
 	hpipe_addr = HPIPE_ADDR(priv->comphy_pipe_regs, comphy->index);
 	sd_ip_addr = SD_ADDR(priv->comphy_pipe_regs, comphy->index);
 	comphy_addr = COMPHY_ADDR(priv->comphy_regs, comphy->index);
@@ -537,7 +545,9 @@ static int mvebu_cp110_comphy_xfi_power_on(struct mvebu_comphy_priv *priv,
 	dev_dbg(priv->dev, "stage: Comphy configuration\n");
 	/* set reference clock */
 	mask = HPIPE_MISC_ICP_FORCE_MASK;
-	data = 0x1 << HPIPE_MISC_ICP_FORCE_OFFSET;
+	data = (speed == COMPHY_SPEED_5_15625G) ?
+		(0x0 << HPIPE_MISC_ICP_FORCE_OFFSET) :
+		(0x1 << HPIPE_MISC_ICP_FORCE_OFFSET);
 	mask |= HPIPE_MISC_REFCLK_SEL_MASK;
 	data |= 0x0 << HPIPE_MISC_REFCLK_SEL_OFFSET;
 	reg_set(hpipe_addr + HPIPE_MISC_REG, data, mask);
@@ -562,6 +572,19 @@ static int mvebu_cp110_comphy_xfi_power_on(struct mvebu_comphy_priv *priv,
 	data = 0x1 << HPIPE_PWR_CTR_DTL_FLOOP_EN_OFFSET;
 	reg_set(hpipe_addr + HPIPE_PWR_CTR_DTL_REG, data, mask);
 
+	/* Transmitter/Receiver Speed Divider Force */
+	if (speed == COMPHY_SPEED_5_15625G) {
+		mask = HPIPE_SPD_DIV_FORCE_RX_SPD_DIV_MASK;
+		data = 1 << HPIPE_SPD_DIV_FORCE_RX_SPD_DIV_OFFSET;
+		mask |= HPIPE_SPD_DIV_FORCE_RX_SPD_DIV_FORCE_MASK;
+		data |= 1 << HPIPE_SPD_DIV_FORCE_RX_SPD_DIV_FORCE_OFFSET;
+		mask |= HPIPE_SPD_DIV_FORCE_TX_SPD_DIV_MASK;
+		data |= 1 << HPIPE_SPD_DIV_FORCE_TX_SPD_DIV_OFFSET;
+		mask |= HPIPE_SPD_DIV_FORCE_TX_SPD_DIV_FORCE_MASK;
+		data |= 1 << HPIPE_SPD_DIV_FORCE_TX_SPD_DIV_FORCE_OFFSET;
+		reg_set(hpipe_addr + HPIPE_SPD_DIV_FORCE_REG, data, mask);
+	}
+
 	/* Set analog parameters from ETP(HW) */
 	dev_dbg(priv->dev, "stage: Analog parameters from ETP(HW)\n");
 	/* SERDES External Configuration 2 */
@@ -573,10 +596,15 @@ static int mvebu_cp110_comphy_xfi_power_on(struct mvebu_comphy_priv *priv,
 	data = 0x1 << HPIPE_DFE_RES_FORCE_OFFSET;
 	reg_set(hpipe_addr + HPIPE_DFE_REG0, data, mask);
 	/* 0xd-G1_Setting_0 */
-	mask = HPIPE_G1_SET_0_G1_TX_AMP_MASK;
-	data = 0x1c << HPIPE_G1_SET_0_G1_TX_AMP_OFFSET;
-	mask |= HPIPE_G1_SET_0_G1_TX_EMPH1_MASK;
-	data |= 0xe << HPIPE_G1_SET_0_G1_TX_EMPH1_OFFSET;
+	if (speed == COMPHY_SPEED_5_15625G) {
+		mask = HPIPE_G1_SET_0_G1_TX_EMPH1_MASK;
+		data = 0x6 << HPIPE_G1_SET_0_G1_TX_EMPH1_OFFSET;
+	} else {
+		mask = HPIPE_G1_SET_0_G1_TX_AMP_MASK;
+		data = 0x1c << HPIPE_G1_SET_0_G1_TX_AMP_OFFSET;
+		mask |= HPIPE_G1_SET_0_G1_TX_EMPH1_MASK;
+		data |= 0xe << HPIPE_G1_SET_0_G1_TX_EMPH1_OFFSET;
+	}
 	reg_set(hpipe_addr + HPIPE_G1_SET_0_REG, data, mask);
 	/* Genration 1 setting 2 (G1_Setting_2) */
 	mask = HPIPE_G1_SET_2_G1_TX_EMPH0_MASK;
@@ -622,6 +650,15 @@ static int mvebu_cp110_comphy_xfi_power_on(struct mvebu_comphy_priv *priv,
 	/* Genration 1 setting 3 (G1_Setting_3) */
 	mask = HPIPE_G1_SETTINGS_3_G1_FBCK_SEL_MASK;
 	data = 0x1 << HPIPE_G1_SETTINGS_3_G1_FBCK_SEL_OFFSET;
+	if (speed == COMPHY_SPEED_5_15625G) {
+		/* Force FFE (Feed Forward Equalization) to 5G */
+		mask |= HPIPE_G1_SETTINGS_3_G1_FFE_CAP_SEL_MASK;
+		data |= 0xf << HPIPE_G1_SETTINGS_3_G1_FFE_CAP_SEL_OFFSET;
+		mask |= HPIPE_G1_SETTINGS_3_G1_FFE_RES_SEL_MASK;
+		data |= 0x4 << HPIPE_G1_SETTINGS_3_G1_FFE_RES_SEL_OFFSET;
+		mask |= HPIPE_G1_SETTINGS_3_G1_FFE_SETTING_FORCE_MASK;
+		data |= 0x1 << HPIPE_G1_SETTINGS_3_G1_FFE_SETTING_FORCE_OFFSET;
+	}
 	reg_set(hpipe_addr + HPIPE_G1_SETTINGS_3_REG, data, mask);
 
 	dev_dbg(priv->dev, "stage: RFU configurations- Power Up PLL,Tx,Rx\n");
diff --git a/drivers/phy/phy-comphy-cp110.h b/drivers/phy/phy-comphy-cp110.h
index 46a9783..fa77d7c 100644
--- a/drivers/phy/phy-comphy-cp110.h
+++ b/drivers/phy/phy-comphy-cp110.h
@@ -181,6 +181,16 @@
 #define HPIPE_PWR_CTR_SFT_RST_OFFSET		10
 #define HPIPE_PWR_CTR_SFT_RST_MASK		(0x1 << HPIPE_PWR_CTR_SFT_RST_OFFSET)
 
+#define HPIPE_SPD_DIV_FORCE_REG				0x154
+#define HPIPE_SPD_DIV_FORCE_RX_SPD_DIV_OFFSET		8
+#define HPIPE_SPD_DIV_FORCE_RX_SPD_DIV_MASK		(0x3 << HPIPE_SPD_DIV_FORCE_RX_SPD_DIV_OFFSET)
+#define HPIPE_SPD_DIV_FORCE_RX_SPD_DIV_FORCE_OFFSET	10
+#define HPIPE_SPD_DIV_FORCE_RX_SPD_DIV_FORCE_MASK	(0x1 << HPIPE_SPD_DIV_FORCE_RX_SPD_DIV_FORCE_OFFSET)
+#define HPIPE_SPD_DIV_FORCE_TX_SPD_DIV_OFFSET		13
+#define HPIPE_SPD_DIV_FORCE_TX_SPD_DIV_MASK		(0x3 << HPIPE_SPD_DIV_FORCE_TX_SPD_DIV_OFFSET)
+#define HPIPE_SPD_DIV_FORCE_TX_SPD_DIV_FORCE_OFFSET	15
+#define HPIPE_SPD_DIV_FORCE_TX_SPD_DIV_FORCE_MASK	(0x1 << HPIPE_SPD_DIV_FORCE_TX_SPD_DIV_FORCE_OFFSET)
+
 #define HPIPE_TX_REG1_REG			0x174
 #define HPIPE_TX_REG1_TX_EMPH_RES_OFFSET	5
 #define HPIPE_TX_REG1_TX_EMPH_RES_MASK		(0x3 << HPIPE_TX_REG1_TX_EMPH_RES_OFFSET)
diff --git a/include/dt-bindings/phy/phy-comphy-mvebu.h b/include/dt-bindings/phy/phy-comphy-mvebu.h
index c373822..919132d 100644
--- a/include/dt-bindings/phy/phy-comphy-mvebu.h
+++ b/include/dt-bindings/phy/phy-comphy-mvebu.h
@@ -102,6 +102,8 @@
 /* COMPHY speed macro */
 #define COMPHY_SPEED_1_25G		0 /* SGMII 1G */
 #define COMPHY_SPEED_3_125G		1 /* SGMII 2.5G */
+#define COMPHY_SPEED_5_15625G		2 /* XFI 5G */
+#define COMPHY_SPEED_10_3125G		3 /* XFI 10G */
 #define COMPHY_SPEED_MAX		0x3F
 /* The  default speed for IO with fixed known speed */
 #define COMPHY_SPEED_DEFAULT		COMPHY_SPEED_MAX
-- 
1.7.9.5

