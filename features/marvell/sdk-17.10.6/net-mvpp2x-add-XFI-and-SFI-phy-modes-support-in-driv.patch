From 086c5e6986a91c3d5d97c46b93170e8149b20aaa Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Mon, 14 Nov 2016 18:30:46 +0200
Subject: [PATCH 0587/1345] net: mvpp2x: add XFI and SFI phy modes support in
 driver

commit  8f38f2368813d07eb2cf4e9744d6115ff288597e from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- XFI and SFI phy nodes could be set in device tree.

Change-Id: Ib02aa8f2ea008eba497179f7b530b04cd782e04d
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/33854
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yuval Caduri <cyuval@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c |   42 ++++++++++++++++++++
 .../net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c  |   18 ++++++++-
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |    8 +++-
 3 files changed, 66 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
index c3d85d8..a9ce20d 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
@@ -967,6 +967,8 @@ int mv_gop110_port_init(struct gop_hw *gop, struct mv_mac_data *mac)
 		mv_gop110_xlg_mac_reset(gop, mac_num, UNRESET);
 	break;
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 
 		num_of_act_lanes = 2;
 		mac_num = 0;
@@ -1040,6 +1042,8 @@ int mv_gop110_port_reset(struct gop_hw *gop, struct mv_mac_data *mac)
 	break;
 	/* Stefan: need to check KR case */
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		/* pcs unreset */
 		mv_gop110_xpcs_reset(gop, RESET);
 		/* mac unreset */
@@ -1071,6 +1075,8 @@ void mv_gop110_port_enable(struct gop_hw *gop, struct mv_mac_data *mac)
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		mv_gop110_xlg_mac_port_enable(gop, port_num);
 	break;
 	default:
@@ -1094,6 +1100,8 @@ void mv_gop110_port_disable(struct gop_hw *gop, struct mv_mac_data *mac)
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		mv_gop110_xlg_mac_port_disable(gop, port_num);
 	break;
 	default:
@@ -1116,6 +1124,8 @@ void mv_gop110_port_periodic_xon_set(struct gop_hw *gop,
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		mv_gop110_xlg_mac_port_periodic_xon_set(gop, port_num, enable);
 	break;
 	default:
@@ -1137,6 +1147,8 @@ bool mv_gop110_port_is_link_up(struct gop_hw *gop, struct mv_mac_data *mac)
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		udelay(1000);
 		return mv_gop110_xlg_mac_link_status_get(gop, port_num);
 	break;
@@ -1161,6 +1173,8 @@ int mv_gop110_port_link_status(struct gop_hw *gop, struct mv_mac_data *mac,
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		mv_gop110_xlg_mac_link_status(gop, port_num, pstatus);
 	break;
 	default:
@@ -1229,6 +1243,8 @@ int mv_gop110_port_regs(struct gop_hw *gop, struct mv_mac_data *mac)
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		pr_info("\n[gop XLG MAC #%d registers]\n", port_num);
 		mv_gop110_xlg_mac_regs_dump(gop, port_num);
 	break;
@@ -1252,6 +1268,8 @@ int mv_gop110_port_events_mask(struct gop_hw *gop, struct mv_mac_data *mac)
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		mv_gop110_xlg_port_link_event_mask(gop, port_num);
 	break;
 	default:
@@ -1278,6 +1296,8 @@ int mv_gop110_port_events_unmask(struct gop_hw *gop, struct mv_mac_data *mac)
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		mv_gop110_xlg_port_external_event_unmask(gop, port_num, 1);
 	break;
 	default:
@@ -1300,6 +1320,8 @@ int mv_gop110_port_events_clear(struct gop_hw *gop, struct mv_mac_data *mac)
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		mv_gop110_xlg_port_link_event_clear(gop, port_num);
 	break;
 	default:
@@ -1342,6 +1364,12 @@ int mv_gop110_status_show(struct gop_hw *gop, struct mv_pp2x *pp2, int port_num)
 	case PHY_INTERFACE_MODE_KR:
 		pr_info("Port mode               : KR");
 	break;
+	case PHY_INTERFACE_MODE_SFI:
+		pr_info("Port mode               : SFI");
+	break;
+	case PHY_INTERFACE_MODE_XFI:
+		pr_info("Port mode               : XFI");
+	break;
 	default:
 		pr_err("%s: Wrong port mode (%d)", __func__, mac->phy_mode);
 		return -1;
@@ -1419,6 +1447,8 @@ int mv_gop110_speed_duplex_get(struct gop_hw *gop, struct mv_mac_data *mac,
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		mv_gop110_xlg_mac_speed_duplex_get(gop, port_num, speed,
 						   duplex);
 	break;
@@ -1445,6 +1475,8 @@ int mv_gop110_speed_duplex_set(struct gop_hw *gop, struct mv_mac_data *mac,
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		mv_gop110_xlg_mac_speed_duplex_set(gop, port_num, speed,
 						   duplex);
 	break;
@@ -1469,6 +1501,8 @@ int mv_gop110_autoneg_restart(struct gop_hw *gop, struct mv_mac_data *mac)
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		pr_err("%s: on supported for port mode (%d)", __func__,
 		       mac->phy_mode);
 		return -1;
@@ -1502,6 +1536,8 @@ int mv_gop110_fl_cfg(struct gop_hw *gop, struct mv_mac_data *mac)
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		return 0;
 	default:
 		pr_err("%s: Wrong port mode (%d)", __func__, mac->phy_mode);
@@ -1529,6 +1565,8 @@ int mv_gop110_force_link_mode_set(struct gop_hw *gop, struct mv_mac_data *mac,
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		return 0;
 	default:
 		pr_err("%s: Wrong port mode (%d)", __func__, mac->phy_mode);
@@ -1555,6 +1593,8 @@ int mv_gop110_force_link_mode_get(struct gop_hw *gop, struct mv_mac_data *mac,
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		return 0;
 	default:
 		pr_err("%s: Wrong port mode (%d)", __func__, mac->phy_mode);
@@ -1585,6 +1625,8 @@ int mv_gop110_loopback_set(struct gop_hw *gop, struct mv_mac_data *mac,
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		return 0;
 	default:
 		pr_err("%s: Wrong port mode (%d)", __func__, mac->phy_mode);
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
index cf7dda1..cf56936 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
@@ -127,6 +127,8 @@ int mv_pp2x_autoneg_check_valid(struct mv_mac_data *mac, struct gop_hw *gop,
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		pr_err("XLG GOP %d doesn't support autonegotiation\n", port_num);
 		return -ENODEV;
 
@@ -279,6 +281,8 @@ int mv_pp2x_eth_tool_nway_reset(struct net_device *dev)
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		pr_err("XLG GOP %d doesn't support autonegotiation\n", mac->gop_index);
 		return -ENODEV;
 	break;
@@ -317,6 +321,8 @@ static void mv_pp2x_get_pauseparam(struct net_device *dev,
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		mv_gop110_port_link_status(gop,	mac, &status);
 		pause->autoneg = AUTONEG_DISABLE;
 	break;
@@ -401,6 +407,8 @@ static int mv_pp2x_set_pauseparam(struct net_device *dev,
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		if (pause->autoneg) {
 			pr_err("10G port doesn't support fc autoneg\n");
 			return -EINVAL;
@@ -477,7 +485,9 @@ static int mv_pp2x_ethtool_get_settings(struct net_device *dev,
 		phy_mode = port->mac_data.phy_mode;
 		if ((phy_mode == PHY_INTERFACE_MODE_XAUI) ||
 		    (phy_mode == PHY_INTERFACE_MODE_RXAUI) ||
-		    (phy_mode == PHY_INTERFACE_MODE_KR)) {
+		    (phy_mode == PHY_INTERFACE_MODE_KR)   ||
+		    (phy_mode == PHY_INTERFACE_MODE_SFI) ||
+		    (phy_mode == PHY_INTERFACE_MODE_XFI)) {
 			cmd->autoneg = AUTONEG_DISABLE;
 			cmd->supported = (SUPPORTED_10000baseT_Full |
 				SUPPORTED_FIBRE);
@@ -905,6 +915,8 @@ static int mv_pp2x_ethtool_get_regs_len(struct net_device *dev)
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		return MV_PP2_REGS_XLG_LEN * sizeof(u32);
 	default:
 		pr_err("%s: Wrong port mode (%d)", __func__, mac->phy_mode);
@@ -940,6 +952,8 @@ static void mv_pp2x_ethtool_get_regs(struct net_device *dev,
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		memset(p, 0, MV_PP2_REGS_XLG_LEN * sizeof(u32));
 		mv_gop110_xlg_registers_dump(port, p);
 	break;
@@ -1080,6 +1094,8 @@ static void mv_pp2x_eth_tool_diag_test(struct net_device *netdev,
 	case PHY_INTERFACE_MODE_XAUI:
 	case PHY_INTERFACE_MODE_RXAUI:
 	case PHY_INTERFACE_MODE_KR:
+	case PHY_INTERFACE_MODE_SFI:
+	case PHY_INTERFACE_MODE_XFI:
 		pr_err("10G Phy mode (%d) do not support test\n", mac->phy_mode);
 		return;
 	default:
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index eeeef6c..9e4be2c 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -3185,6 +3185,8 @@ void mv_pp2x_start_dev(struct mv_pp2x_port *port)
 		case PHY_INTERFACE_MODE_XAUI:
 		case PHY_INTERFACE_MODE_RXAUI:
 		case PHY_INTERFACE_MODE_KR:
+		case PHY_INTERFACE_MODE_SFI:
+		case PHY_INTERFACE_MODE_XFI:
 			mv_gop110_xlg_mac_max_rx_size_set(gop,
 					mac_num, port->pkt_size);
 		break;
@@ -4149,6 +4151,8 @@ static int mv_pp2_init_emac_data(struct mv_pp2x_port *port,
 		case PHY_INTERFACE_MODE_RGMII:
 			break;
 		case PHY_INTERFACE_MODE_KR:
+		case PHY_INTERFACE_MODE_SFI:
+		case PHY_INTERFACE_MODE_XFI:
 			break;
 
 		default:
@@ -5088,7 +5092,9 @@ static void mv_pp22_tx_fifo_init(struct mv_pp2x *priv)
 
 			if ((phy_mode == PHY_INTERFACE_MODE_XAUI) ||
 			    (phy_mode == PHY_INTERFACE_MODE_RXAUI) ||
-			    (phy_mode == PHY_INTERFACE_MODE_KR)) {
+			    (phy_mode == PHY_INTERFACE_MODE_KR) ||
+			    (phy_mode == PHY_INTERFACE_MODE_SFI) ||
+			    (phy_mode == PHY_INTERFACE_MODE_XFI)) {
 				/* Record l4_chksum_jumbo_port */
 				priv->l4_chksum_jumbo_port =
 							priv->port_list[i]->id;
-- 
1.7.9.5

