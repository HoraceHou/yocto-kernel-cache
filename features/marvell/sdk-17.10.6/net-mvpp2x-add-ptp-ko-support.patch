From f727e133d720daa99324e076be5ad0d6506e6ea0 Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Sun, 3 Jul 2016 18:59:46 +0300
Subject: [PATCH 0327/1345] net: mvpp2x: add ptp ko support

commit  b7053e6982ec1ec0976027ec919f13eca65a0b1f from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- remove unused ptp functions from gop
- add ptp ko support if mv_ptp flag set

Change-Id: Id4032bb96911828674a1b15e816920aa61e69108
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/30921
Reviewed-by: Yan Markman <ymarkman@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c |   26 --------------------
 drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h |   22 -----------------
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |   23 +++++++++++++++++
 3 files changed, 23 insertions(+), 48 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
index cc5bbb8..4848a51 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
@@ -2455,32 +2455,6 @@ void mv_gop110_mib_counters_show(struct gop_hw *gop, int port)
 }
 EXPORT_SYMBOL(mv_gop110_mib_counters_show);
 
-void mv_gop110_ptp_enable(struct gop_hw *gop, int port, bool state)
-{
-	u32 reg_data;
-
-	if (state) {
-		/* PTP enable */
-		reg_data = mv_gop110_ptp_read(gop, port,
-					      MV_PTP_GENERAL_CTRL_REG);
-		reg_data |= MV_PTP_GENERAL_CTRL_PTP_UNIT_ENABLE_MASK;
-		/* enable PTP */
-		mv_gop110_ptp_write(gop, port, MV_PTP_GENERAL_CTRL_REG,
-				    reg_data);
-		/* unreset unit */
-		reg_data |= MV_PTP_GENERAL_CTRL_PTP_RESET_MASK;
-		mv_gop110_ptp_write(gop, port, MV_PTP_GENERAL_CTRL_REG,
-				    reg_data);
-	} else {
-		reg_data = mv_gop110_ptp_read(gop, port,
-					      MV_PTP_GENERAL_CTRL_REG);
-		reg_data &= ~MV_PTP_GENERAL_CTRL_PTP_UNIT_ENABLE_MASK;
-		/* disable PTP */
-		mv_gop110_ptp_write(gop, port, MV_PTP_GENERAL_CTRL_REG,
-				    reg_data);
-	}
-}
-
 void mv_gop110_netc_active_port(struct gop_hw *gop, u32 port, u32 val)
 {
 	u32 reg;
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
index d5acacb..1b0be73 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
@@ -439,28 +439,6 @@ static inline void mv_gop110_rfu1_print(struct gop_hw *gop, char *reg_name,
 		mv_gop110_rfu1_read(gop, reg));
 }
 
-/* PTP Functions  */
-static inline u32 mv_gop110_ptp_read(struct gop_hw *gop, int mac_num,
-				     u32 offset)
-{
-	return mv_gop_gen_read(gop->gop_110.ptp.base,
-			       mac_num * gop->gop_110.ptp.obj_size + offset);
-}
-
-static inline void mv_gop110_ptp_write(struct gop_hw *gop, int mac_num,
-				       u32 offset, u32 data)
-{
-	mv_gop_gen_write(gop->gop_110.ptp.base,
-			 mac_num * gop->gop_110.ptp.obj_size + offset, data);
-}
-
-static inline void mv_gop110_ptp_print(struct gop_hw *gop, char *reg_name,
-				       int mac_num, u32 reg)
-{
-	pr_info("  %-32s: 0x%x = 0x%08x\n", reg_name, reg,
-		mv_gop110_ptp_read(gop, mac_num, reg));
-}
-
 int mv_gop110_smi_init(struct gop_hw *gop);
 int mv_gop110_smi_phy_addr_cfg(struct gop_hw *gop, int port, int addr);
 
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index 1ca9f0f..926290e 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -56,6 +56,15 @@
 #include <if_mv_pp2x_netmap.h>
 #endif
 
+#ifdef CONFIG_MV_PTP_SERVICE
+/* inline PTP procedures */
+#include <mv_pp2x_ptp_hook.c>
+/* non-inline init/config */
+#include <mv_ptp_if.h>
+#include <mv_ptp_service.h>
+#include <mv_pp2x_ptp_init.h>
+#endif
+
 #define MVPP2_SKB_TEST_SIZE 64
 #define MVPP2_ADDRESS 0xf2000000
 #define CPN110_ADDRESS_SPACE_SIZE (16*1024*1024)
@@ -2215,6 +2224,10 @@ static int mv_pp2x_rx(struct mv_pp2x_port *port, struct napi_struct *napi,
 		rcvd_pkts++;
 		rcvd_bytes += rx_bytes;
 		skb_reserve(skb, MVPP2_MH_SIZE+NET_SKB_PAD);
+#ifdef CONFIG_MV_PTP_SERVICE
+		/* If packet is PTP fetch timestamp info and built into packet data */
+		mv_pp2_is_pkt_ptp_rx_proc(port, rx_desc, rx_bytes, skb->data, rcvd_pkts);
+#endif
 		skb_put(skb, rx_bytes);
 		skb->protocol = eth_type_trans(skb, dev);
 		mv_pp2x_rx_csum(port, rx_status, skb);
@@ -2442,6 +2455,11 @@ static int mv_pp2x_tx(struct sk_buff *skb, struct net_device *dev)
 	aggr_txq->count += frags;
 	aggr_txq->xmit_bulk += frags;
 
+#ifdef CONFIG_MV_PTP_SERVICE
+	/* If packet is PTP add Time-Stamp request into the tx_desc */
+	mv_pp2_is_pkt_ptp_tx_proc(port, tx_desc, skb);
+#endif
+
 	/* Prevent shadow_q override, stop tx_queue until tx_done is called*/
 
 	if (mv_pp2x_txq_free_count(txq_pcpu) < (MAX_SKB_FRAGS + 2)) {
@@ -4534,6 +4552,11 @@ static int mv_pp2x_probe(struct platform_device *pdev)
 	/* Init PP22 rxfhindir table evenly in probe */
 	mv_pp2x_init_rxfhindir(priv);
 
+#ifdef CONFIG_MV_PTP_SERVICE
+	mv_pp2x_ptp_init(pdev, priv, port_count);
+	mv_pp2x_ptp_hook_init(priv, port_count);
+#endif
+
 	/* Initialize ports */
 	for_each_available_child_of_node(dn, port_node) {
 		err = mv_pp2x_port_probe(pdev, port_node, priv);
-- 
1.7.9.5

