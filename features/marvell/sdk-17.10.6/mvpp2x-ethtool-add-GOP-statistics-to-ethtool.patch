From aca5ff181f4c088c361fc83828c273c25579f890 Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Tue, 16 Aug 2016 14:03:41 +0300
Subject: [PATCH 0409/1345] mvpp2x: ethtool: add GOP statistics to ethtool

commit  575293fe12485f6d3e60a982e452cd490e314fc7 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- Add ethtool statistics from GOP MIB counters.

Change-Id: I488b514b8454d99ec07af13bf790eb556a86a1f5
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/31966
Reviewed-by: Yuval Caduri <cyuval@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c |   81 ++++++++++++++++++++
 drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h |    2 +
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h      |   27 +++++++
 .../net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c  |   52 +++++++++----
 4 files changed, 148 insertions(+), 14 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
index 9c2504c..75a9a34 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
@@ -2490,6 +2490,87 @@ void mv_gop110_mib_counters_show(struct gop_hw *gop, int port)
 }
 EXPORT_SYMBOL(mv_gop110_mib_counters_show);
 
+void mv_gop110_mib_counters_stat_update(struct gop_hw *gop, int port, struct gop_stat *gop_statistics)
+{
+
+	u64 val;
+
+	gop_statistics->rx_byte += mv_gop110_mib_read64(gop, port,
+							MV_MIB_GOOD_OCTETS_RECEIVED_LOW);
+
+	val = mv_gop110_mib_read64(gop, port, MV_MIB_UNICAST_FRAMES_RECEIVED);
+	gop_statistics->rx_unicast += val;
+	gop_statistics->rx_frames += val;
+
+	val = mv_gop110_mib_read64(gop, port, MV_MIB_BROADCAST_FRAMES_RECEIVED);
+	gop_statistics->rx_bcast += val;
+	gop_statistics->rx_frames += val;
+
+	val = mv_gop110_mib_read64(gop, port, MV_MIB_MULTICAST_FRAMES_RECEIVED);
+	gop_statistics->rx_mcast += val;
+	gop_statistics->rx_frames += val;
+
+	gop_statistics->tx_byte += mv_gop110_mib_read64(gop, port,
+							MV_MIB_GOOD_OCTETS_SENT_LOW);
+
+	val = mv_gop110_mib_read64(gop, port, MV_MIB_UNICAST_FRAMES_SENT);
+	gop_statistics->tx_unicast += val;
+	gop_statistics->tx_frames += val;
+
+	val = mv_gop110_mib_read64(gop, port, MV_MIB_MULTICAST_FRAMES_SENT);
+	gop_statistics->tx_mcast += val;
+	gop_statistics->tx_frames += val;
+
+	val = mv_gop110_mib_read64(gop, port, MV_MIB_BROADCAST_FRAMES_SENT);
+	gop_statistics->tx_bcast += val;
+	gop_statistics->tx_frames += val;
+
+	gop_statistics->tx_crc_sent += mv_gop110_mib_read64(gop, port,
+							MV_MIB_CRC_ERRORS_SENT);
+
+	gop_statistics->rx_pause += mv_gop110_mib_read64(gop, port,
+							MV_MIB_FC_RECEIVED);
+
+	gop_statistics->tx_pause += mv_gop110_mib_read64(gop, port,
+							MV_MIB_FC_SENT);
+
+	val = mv_gop110_mib_read64(gop, port, MV_MIB_RX_FIFO_OVERRUN);
+	gop_statistics->rx_overrun += val;
+	gop_statistics->rx_total_err += val;
+
+	val = mv_gop110_mib_read64(gop, port, MV_MIB_UNDERSIZE_RECEIVED);
+	gop_statistics->rx_runt += val;
+	gop_statistics->rx_total_err += val;
+
+	val = mv_gop110_mib_read64(gop, port, MV_MIB_FRAGMENTS_RECEIVED);
+	gop_statistics->rx_fragments_err += val;
+	gop_statistics->rx_total_err += val;
+
+	val = mv_gop110_mib_read64(gop, port, MV_MIB_OVERSIZE_RECEIVED);
+	gop_statistics->rx_giant += val;
+	gop_statistics->rx_total_err += val;
+
+	val = mv_gop110_mib_read64(gop, port, MV_MIB_JABBER_RECEIVED);
+	gop_statistics->rx_jabber += val;
+	gop_statistics->rx_total_err += val;
+
+	val = mv_gop110_mib_read64(gop, port, MV_MIB_MAC_RECEIVE_ERROR);
+	gop_statistics->rx_jabber += val;
+	gop_statistics->rx_total_err += val;
+
+	val = mv_gop110_mib_read64(gop, port, MV_MIB_BAD_CRC_EVENT);
+	gop_statistics->rx_crc += val;
+	gop_statistics->rx_total_err += val;
+
+	gop_statistics->collision += mv_gop110_mib_read64(gop, port,
+							MV_MIB_COLLISION);
+
+	/* This counter must be read last. Read it clear all the counters */
+	gop_statistics->late_collision += mv_gop110_mib_read64(gop, port,
+							MV_MIB_LATE_COLLISION);
+}
+
+
 void mv_gop110_netc_active_port(struct gop_hw *gop, u32 port, u32 val)
 {
 	u32 reg;
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
index 17cda1b..5549011 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
@@ -457,6 +457,8 @@ static inline void mv_gop110_rfu1_print(struct gop_hw *gop, char *reg_name,
 /* MIB Functions  */
 u64 mv_gop110_mib_read64(struct gop_hw *gop, int port, unsigned int offset);
 void mv_gop110_mib_counters_show(struct gop_hw *gop, int port);
+void mv_gop110_mib_counters_stat_update(struct gop_hw *gop, int port,
+					struct gop_stat *gop_statistics);
 
 /* PTP Functions */
 void mv_gop110_ptp_enable(struct gop_hw *gop, int port, bool state);
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
index 545fa57..727309a 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
@@ -207,8 +207,35 @@ enum mv_pp2x_rss_nf_udp_mode {
 				*/
 };
 
+struct gop_stat {
+	u64 rx_byte;
+	u64 rx_unicast;
+	u64 rx_mcast;
+	u64 rx_bcast;
+	u64 rx_frames;
+	u64 rx_pause;
+	u64 rx_overrun;
+	u64 rx_crc;
+	u64 rx_runt;
+	u64 rx_giant;
+	u64 rx_fragments_err;
+	u64 rx_mac_err;
+	u64 rx_jabber;
+	u64 rx_total_err;
+	u64 tx_byte;
+	u64 tx_unicast;
+	u64 tx_mcast;
+	u64 tx_bcast;
+	u64 tx_frames;
+	u64 tx_pause;
+	u64 tx_crc_sent;
+	u64 collision;
+	u64 late_collision;
+};
+
 struct mv_mac_data {
 	u8			gop_index;
+	struct gop_stat		gop_statistics;
 	u64			flags;
 	/* Whether a PHY is present, and if yes, at which address. */
 	int			phy_addr;
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
index b32721f..6190dfa 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
@@ -60,7 +60,11 @@
 
 static const char mv_pp2x_gstrings_stats[][ETH_GSTRING_LEN] = {
 	/* device-specific stats */
-	"rx_packets", "rx_bytes", "tx_packets", "tx_bytes",
+	"rx_bytes", "rx_frames", "rx_unicast", "rx_mcast", "rx_bcast",
+	"tx_bytes", "tx_frames", "tx_unicast", "tx_mcast", "tx_bcast",
+	"rx_pause", "tx_pause", "rx_overrun", "rx_crc", "rx_runt", "rx_giant",
+	"rx_fragments_err", "rx_mac_err", "rx_jabber", "rx_sw_drop", "rx_total_err",
+	"tx_drop", "tx_crc_sent", "collision", "late_collision",
 };
 
 int mv_pp2x_check_speed_duplex_valid(struct ethtool_cmd *cmd,
@@ -143,20 +147,40 @@ static void mv_pp2x_eth_tool_get_ethtool_stats(struct net_device *dev,
 {
 
 	struct mv_pp2x_port *port = netdev_priv(dev);
-	int cpu = 0;
-
-	data[0] = 0;
-
-	for_each_possible_cpu(cpu) {
-		struct mv_pp2x_pcpu_stats *stats = per_cpu_ptr(port->stats, cpu);
+	struct mv_mac_data *mac = &port->mac_data;
+	struct gop_hw *gop = &port->priv->hw.gop;
+	int gop_port = mac->gop_index;
+	struct gop_stat	*gop_statistics = &mac->gop_statistics;
+	int i = 0;
+
+	mv_gop110_mib_counters_stat_update(gop, gop_port, gop_statistics);
+
+	data[i++] = gop_statistics->rx_byte;
+	data[i++] = gop_statistics->rx_frames;
+	data[i++] = gop_statistics->rx_unicast;
+	data[i++] = gop_statistics->rx_mcast;
+	data[i++] = gop_statistics->rx_bcast;
+	data[i++] = gop_statistics->tx_byte;
+	data[i++] = gop_statistics->tx_frames;
+	data[i++] = gop_statistics->tx_unicast;
+	data[i++] = gop_statistics->tx_mcast;
+	data[i++] = gop_statistics->tx_bcast;
+	data[i++] = gop_statistics->rx_pause;
+	data[i++] = gop_statistics->tx_pause;
+	data[i++] = gop_statistics->rx_overrun;
+	data[i++] = gop_statistics->rx_crc;
+	data[i++] = gop_statistics->rx_runt;
+	data[i++] = gop_statistics->rx_giant;
+	data[i++] = gop_statistics->rx_fragments_err;
+	data[i++] = gop_statistics->rx_mac_err;
+	data[i++] = gop_statistics->rx_jabber;
+	data[i++] = dev->stats.rx_dropped;
+	data[i++] = gop_statistics->rx_total_err + dev->stats.rx_dropped;
+	data[i++] = dev->stats.tx_dropped;
+	data[i++] = gop_statistics->tx_crc_sent;
+	data[i++] = gop_statistics->collision;
+	data[i++] = gop_statistics->late_collision;
 
-		u64_stats_update_begin(&stats->syncp);
-		data[0] += stats->rx_packets;
-		data[1] += stats->rx_bytes;
-		data[2] += stats->tx_packets;
-		data[3] += stats->tx_bytes;
-		u64_stats_update_end(&stats->syncp);
-		}
 }
 
 static void mv_pp2x_eth_tool_get_strings(struct net_device *dev,
-- 
1.7.9.5

