From 06214e8b5d0b5ada9495c1b3caa34edd12f6a9e3 Mon Sep 17 00:00:00 2001
From: Omri Itach <omrii@marvell.com>
Date: Tue, 27 Dec 2016 18:11:33 +0200
Subject: [PATCH 0698/1345] ap806: add soc info driver for package revision

commit  8cc9a3e384ebd83b032b08e863501d543c0e0451 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Several drivers require differentiation between SoC revision A0 and A1.
SATA aHCI driver reads SoC revision directly from aHCI mvebu wrapper.

Other drivers also require this information to differentiate SoC revision,
So to avoid this code duplication across drivers, added a dedicated driver
to read SoC revision information.

Change-Id: I4bf53abf5bfa80332172e0937a67aefb7a72d471
Signed-off-by: Omri Itach <omrii@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/35109
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Igal Liberman <igall@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/misc/Kconfig        |    7 ++++
 drivers/misc/Makefile       |    1 +
 drivers/misc/mv_soc_info.c  |   81 +++++++++++++++++++++++++++++++++++++++++++
 include/linux/mv_soc_info.h |   22 ++++++++++++
 4 files changed, 111 insertions(+)
 create mode 100644 drivers/misc/mv_soc_info.c
 create mode 100644 include/linux/mv_soc_info.h

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 823a0de..da25e52 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -554,6 +554,13 @@ config MVEBU_A8K_DEBUGFS
 	  This drivers provide access (status and configuration) to some SoC
 	  status and configuration registers.
 
+config MVEBU_SOC_INFO
+	bool "Marvell Aramda-8K AP806 SoC information driver"
+	depends on ARCH_MVEBU
+	default y
+	help
+	  Marvell AP806 SoC information driver for AP806
+
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 5f0f556..248c3ed 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -60,6 +60,7 @@ obj-$(CONFIG_CXL_BASE)		+= cxl/
 obj-$(CONFIG_ASPEED_LPC_CTRL)	+= aspeed-lpc-ctrl.o
 obj-$(CONFIG_PCI_ENDPOINT_TEST)	+= pci_endpoint_test.o
 obj-$(CONFIG_MVEBU_A8K_DEBUGFS)	+= mvebu-a8k-debugfs.o
+obj-$(CONFIG_MVEBU_SOC_INFO)	+= mv_soc_info.o
 
 lkdtm-$(CONFIG_LKDTM)		+= lkdtm_core.o
 lkdtm-$(CONFIG_LKDTM)		+= lkdtm_bugs.o
diff --git a/drivers/misc/mv_soc_info.c b/drivers/misc/mv_soc_info.c
new file mode 100644
index 0000000..ec29594
--- /dev/null
+++ b/drivers/misc/mv_soc_info.c
@@ -0,0 +1,81 @@
+/*
+ * Copyright (C) 2015-2016 Marvell International Ltd.
+
+ * This program is free software: you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation, either version 2 of the
+ * License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+
+#include <linux/clk.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_irq.h>
+#include <linux/platform_device.h>
+#include <linux/mv_soc_info.h>
+#include <linux/of_address.h>
+
+int soc_revision_id = -1;
+
+/* Get SoC revision ID */
+int mv_soc_info_get_revision(void)
+{
+	void __iomem *ap806_rev_info_reg;
+	const unsigned int *reg;
+	struct device_node *node;
+	phys_addr_t paddr;
+
+	/* if soc_revision_id was already initialized, no need to read it again */
+	if (soc_revision_id != -1)
+		return soc_revision_id;
+
+	node = of_find_compatible_node(NULL, NULL, "marvell,ap806-rev-info");
+	if (!node) {
+		pr_err("Read soc-rev-info node failed\n");
+		goto free_node;
+	}
+
+	/* Read the offset of the register */
+	reg = of_get_property(node, "reg", NULL);
+	if (!reg) {
+		pr_err("Read reg property failed from soc-rev-info node\n");
+		goto free_node;
+	}
+
+	/* Translate the offset to physical address */
+	paddr = of_translate_address(node, reg);
+	if (paddr == OF_BAD_ADDR) {
+		pr_err("of_translate_address failed for soc-rev-info\n");
+		goto free_node;
+	}
+
+	ap806_rev_info_reg = ioremap(paddr, reg[1]);
+	if (!ap806_rev_info_reg) {
+		pr_err("ioremap() failed for soc-rev-info register\n");
+		goto free_node;
+	}
+
+	/* read gwd_iidr2 register and set the revision global*/
+	soc_revision_id = (readl(ap806_rev_info_reg) >> GWD_IIDR2_REV_ID_OFFSET) &
+			   GWD_IIDR2_REV_ID_MASK;
+
+	pr_debug("%s: Detected SoC revision A%d\n",
+		 __func__, soc_revision_id == APN806_REV_ID_A0 ? 0 : 1);
+
+	/* Release resources */
+	iounmap(ap806_rev_info_reg);
+	of_node_put(node);
+
+	return soc_revision_id;
+
+free_node:
+	of_node_put(node);
+	return -EINVAL;
+}
diff --git a/include/linux/mv_soc_info.h b/include/linux/mv_soc_info.h
new file mode 100644
index 0000000..f713f6b
--- /dev/null
+++ b/include/linux/mv_soc_info.h
@@ -0,0 +1,22 @@
+/*
+ * Marvell AP806 SoC info definitions.
+ *
+ * Copyright (C) 2008 Marvell Semiconductor
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#ifndef MV_SOC_INFO_H
+#define MV_SOC_INFO_H
+
+#define GWD_IIDR2_REV_ID_OFFSET	12
+#define GWD_IIDR2_REV_ID_MASK	0xF
+#define APN806_REV_ID_A0	0
+#define APN806_REV_ID_A1	1
+
+int mv_soc_info_get_revision(void);
+
+
+#endif /* MV_SOC_INFO_H */
-- 
1.7.9.5

