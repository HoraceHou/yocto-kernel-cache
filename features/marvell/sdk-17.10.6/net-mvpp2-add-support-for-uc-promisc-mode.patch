From dfb921e407d51e7391fa838cdaad88ff1e83272b Mon Sep 17 00:00:00 2001
From: Alan Winkowski <walan@marvell.com>
Date: Wed, 16 Aug 2017 20:53:43 +0300
Subject: [PATCH 1187/1345] net: mvpp2: add support for uc promisc mode

commit  f3f21957f06ca6a9ea58256a7d00c27c7dc3642f from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- this patch enables setting unicast promiscuous mode in
  parser.
- Before this patch, when unicast filtering table was full, the
  system turned on promiscuous mode (both unicast and multicast).
- This change allows to set only unicast promiscuous mode when the
  uncast filtering table is full
- Implementation details: before this patch, parser included an
  entry for promiscuous mode (including unicasts and multicasts)
  and an entry for multicast traffic only (there was no option
  to set unicast promisc only)
- implementation now allows to enable unicast promisc or
  multicast independently

Change-Id: I36c726327a56fed56b88026e812d59aeaf9fd4c6
Signed-off-by: Alan Winkowski <walan@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/43131
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Yuval Caduri <cyuval@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c   |   39 +++++++++-----------
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h   |    5 +--
 .../net/ethernet/marvell/mvpp2x/mv_pp2x_hw_type.h  |    7 +++-
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |   30 ++++++++++-----
 4 files changed, 45 insertions(+), 36 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
index 9aad5f4..bbe932a 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
@@ -920,22 +920,22 @@ static void mv_pp2x_prs_mac_drop_all_set(struct mv_pp2x_hw *hw,
 	mv_pp2x_prs_hw_write(hw, &pe);
 }
 
-/* Set port to promiscuous mode */
-void mv_pp2x_prs_mac_promisc_set(struct mv_pp2x_hw *hw, int port, bool add)
+/* Set port to unicast promiscuous mode */
+void mv_pp2x_prs_mac_uc_promisc_set(struct mv_pp2x_hw *hw, int port, bool add)
 {
 	struct mv_pp2x_prs_entry pe;
 
 	/* Promiscuous mode - Accept unknown packets */
 
-	if (hw->prs_shadow[MVPP2_PE_MAC_PROMISCUOUS].valid) {
+	if (hw->prs_shadow[MVPP2_PE_MAC_UC_PROMISCUOUS].valid) {
 		/* Entry exist - update port only */
-		pe.index = MVPP2_PE_MAC_PROMISCUOUS;
+		pe.index = MVPP2_PE_MAC_UC_PROMISCUOUS;
 		mv_pp2x_prs_hw_read(hw, &pe);
 	} else {
 		/* Entry doesn't exist - create new */
 		memset(&pe, 0, sizeof(struct mv_pp2x_prs_entry));
 		mv_pp2x_prs_tcam_lu_set(&pe, MVPP2_PRS_LU_MAC);
-		pe.index = MVPP2_PE_MAC_PROMISCUOUS;
+		pe.index = MVPP2_PE_MAC_UC_PROMISCUOUS;
 
 		/* Continue - set next lookup */
 		mv_pp2x_prs_sram_next_lu_set(&pe, MVPP2_PRS_LU_DSA);
@@ -944,6 +944,10 @@ void mv_pp2x_prs_mac_promisc_set(struct mv_pp2x_hw *hw, int port, bool add)
 		mv_pp2x_prs_sram_ri_update(&pe, MVPP2_PRS_RI_L2_UCAST,
 					   MVPP2_PRS_RI_L2_CAST_MASK);
 
+		/* Update tcam entry data first byte */
+		mv_pp2x_prs_tcam_data_byte_set(&pe, 0, MVPP2_PRS_UCAST_VAL,
+					       MVPP2_PRS_CAST_MASK);
+
 		/* Shift to ethertype */
 		mv_pp2x_prs_sram_shift_set(&pe, 2 * ETH_ALEN,
 					   MVPP2_PRS_SRAM_OP_SEL_SHIFT_ADD);
@@ -961,27 +965,20 @@ void mv_pp2x_prs_mac_promisc_set(struct mv_pp2x_hw *hw, int port, bool add)
 	mv_pp2x_prs_hw_write(hw, &pe);
 }
 
-/* Accept multicast */
-void mv_pp2x_prs_mac_multi_set(struct mv_pp2x_hw *hw, int port, int index,
-			       bool add)
+/* Set port to multicast promiscuous mode */
+void mv_pp2x_prs_mac_mc_promisc_set(struct mv_pp2x_hw *hw, int port, bool add)
 {
 	struct mv_pp2x_prs_entry pe;
-	unsigned char da_mc;
 
-	/* Ethernet multicast address first byte is
-	 * 0x01 for IPv4 and 0x33 for IPv6
-	 */
-	da_mc = (index == MVPP2_PE_MAC_MC_ALL) ? 0x01 : 0x33;
-
-	if (hw->prs_shadow[index].valid) {
+	if (hw->prs_shadow[MVPP2_PE_MAC_MC_PROMISCUOUS].valid) {
 		/* Entry exist - update port only */
-		pe.index = index;
+		pe.index = MVPP2_PE_MAC_MC_PROMISCUOUS;
 		mv_pp2x_prs_hw_read(hw, &pe);
 	} else {
 		/* Entry doesn't exist - create new */
 		memset(&pe, 0, sizeof(struct mv_pp2x_prs_entry));
 		mv_pp2x_prs_tcam_lu_set(&pe, MVPP2_PRS_LU_MAC);
-		pe.index = index;
+		pe.index = MVPP2_PE_MAC_MC_PROMISCUOUS;
 
 		/* Continue - set next lookup */
 		mv_pp2x_prs_sram_next_lu_set(&pe, MVPP2_PRS_LU_DSA);
@@ -991,7 +988,8 @@ void mv_pp2x_prs_mac_multi_set(struct mv_pp2x_hw *hw, int port, int index,
 					   MVPP2_PRS_RI_L2_CAST_MASK);
 
 		/* Update tcam entry data first byte */
-		mv_pp2x_prs_tcam_data_byte_set(&pe, 0, da_mc, da_mc);
+		mv_pp2x_prs_tcam_data_byte_set(&pe, 0, MVPP2_PRS_MCAST_VAL,
+					       MVPP2_PRS_CAST_MASK);
 
 		/* Shift to ethertype */
 		mv_pp2x_prs_sram_shift_set(&pe, 2 * ETH_ALEN,
@@ -1708,9 +1706,8 @@ static void mv_pp2x_prs_mac_init(struct mv_pp2x_hw *hw)
 
 	/* place holders only - no ports */
 	mv_pp2x_prs_mac_drop_all_set(hw, 0, false);
-	mv_pp2x_prs_mac_promisc_set(hw, 0, false);
-
-	mv_pp2x_prs_mac_multi_set(hw, 0, MVPP2_PE_MAC_MC_ALL, false);
+	mv_pp2x_prs_mac_uc_promisc_set(hw, 0, false);
+	mv_pp2x_prs_mac_mc_promisc_set(hw, 0, false);
 }
 
 /* Set default entries for various types of dsa packets */
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
index c4f78af..93a2391 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
@@ -531,9 +531,8 @@ static inline void mv_pp2x_txdesc_phys_addr_set(enum mvppv2_version pp2_ver,
 
 int mv_pp2x_prs_default_init(struct platform_device *pdev,
 			     struct mv_pp2x_hw *hw);
-void mv_pp2x_prs_mac_promisc_set(struct mv_pp2x_hw *hw, int port, bool add);
-void mv_pp2x_prs_mac_multi_set(struct mv_pp2x_hw *hw, int port, int index,
-			       bool add);
+void mv_pp2x_prs_mac_uc_promisc_set(struct mv_pp2x_hw *hw, int port, bool add);
+void mv_pp2x_prs_mac_mc_promisc_set(struct mv_pp2x_hw *hw, int port, bool add);
 int mv_pp2x_prs_mac_da_accept(struct mv_pp2x_port *port,
 			      const u8 *da, bool add);
 int mv_pp2x_prs_vid_entry_accept(struct net_device *dev, u16 proto, u16 vid, bool add);
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw_type.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw_type.h
index cb21ecb..f0c7495 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw_type.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw_type.h
@@ -1306,6 +1306,9 @@ enum mv_pp2x_tag_type {
 #define MVPP2_PRS_TCAM_PROTO_MASK	0xff
 #define MVPP2_PRS_TCAM_PROTO_MASK_L	0x3f
 #define MVPP2_PRS_DBL_VLANS_MAX		100
+#define MVPP2_PRS_CAST_MASK		0x1
+#define MVPP2_PRS_MCAST_VAL		0x1
+#define MVPP2_PRS_UCAST_VAL		0x0
 
 /* There is a TCAM range reserved for MAC entries, range size is 80
  * 1 BC MAC entry for all ports
@@ -1379,8 +1382,8 @@ enum mv_pp2x_tag_type {
 #define MVPP2_PE_VID_FLTR_DEFAULT	(MVPP2_PRS_TCAM_SRAM_SIZE - 6)
 #define MVPP2_PE_VLAN_DBL		(MVPP2_PRS_TCAM_SRAM_SIZE - 5)
 #define MVPP2_PE_VLAN_NONE		(MVPP2_PRS_TCAM_SRAM_SIZE - 4)
-#define MVPP2_PE_MAC_MC_ALL		(MVPP2_PRS_TCAM_SRAM_SIZE - 3)
-#define MVPP2_PE_MAC_PROMISCUOUS	(MVPP2_PRS_TCAM_SRAM_SIZE - 2)
+#define MVPP2_PE_MAC_MC_PROMISCUOUS	(MVPP2_PRS_TCAM_SRAM_SIZE - 3)
+#define MVPP2_PE_MAC_UC_PROMISCUOUS	(MVPP2_PRS_TCAM_SRAM_SIZE - 2)
 #define MVPP2_PE_MAC_NON_PROMISCUOUS	(MVPP2_PRS_TCAM_SRAM_SIZE - 1)
 
 /* Sram structure
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index 0b372c6..9da3ef4 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -4080,10 +4080,10 @@ static void mv_pp2x_set_rx_promisc(struct mv_pp2x_port *port)
 	struct mv_pp2x_hw *hw = &port->priv->hw;
 	int id = port->id;
 
-	/* Accept all: Multicast + Unicast */
-	mv_pp2x_prs_mac_multi_set(hw, id, MVPP2_PE_MAC_MC_ALL, true);
 	/* Enter promisc mode */
-	mv_pp2x_prs_mac_promisc_set(hw, id, true);
+	/* Accept all: Multicast + Unicast */
+	mv_pp2x_prs_mac_uc_promisc_set(hw, id, true);
+	mv_pp2x_prs_mac_mc_promisc_set(hw, id, true);
 	/* Remove all port->id's mcast enries */
 	mv_pp2x_prs_mac_entry_del(port, MVPP2_PRS_MAC_MC, MVPP2_DEL_MAC_ALL);
 	/* Remove all port->id's ucast enries except M2M entry */
@@ -4096,12 +4096,22 @@ static void mv_pp2x_set_rx_allmulti(struct mv_pp2x_port *port)
 	int id = port->id;
 
 	/* Accept all multicast */
-	mv_pp2x_prs_mac_multi_set(hw, id,
-				  MVPP2_PE_MAC_MC_ALL, true);
+	mv_pp2x_prs_mac_mc_promisc_set(hw, id, true);
 	/* Remove all multicast filter entries from parser */
 	mv_pp2x_prs_mac_entry_del(port, MVPP2_PRS_MAC_MC, MVPP2_DEL_MAC_ALL);
 }
 
+static void mv_pp2x_set_rx_uc_multi(struct mv_pp2x_port *port)
+{
+	struct mv_pp2x_hw *hw = &port->priv->hw;
+	int id = port->id;
+
+	/* Accept all unicast */
+	mv_pp2x_prs_mac_uc_promisc_set(hw, id, true);
+	/* Remove all unicast filter entries from parser */
+	mv_pp2x_prs_mac_entry_del(port, MVPP2_PRS_MAC_UC, MVPP2_DEL_MAC_ALL);
+}
+
 /* register unicast and multicast addresses */
 static void mv_pp2x_set_rx_mode(struct net_device *dev)
 {
@@ -4114,9 +4124,9 @@ static void mv_pp2x_set_rx_mode(struct net_device *dev)
 	if (dev->flags & IFF_PROMISC) {
 		mv_pp2x_set_rx_promisc(port);
 	} else {
-		/* Put dev into promisc if MAC num greater than uc filter max */
+		/* Put dev into UC promisc if MAC num greater than uc filter max */
 		if (netdev_uc_count(dev) > port->priv->pp2_cfg.uc_filter_max) {
-			mv_pp2x_set_rx_promisc(port);
+			mv_pp2x_set_rx_uc_multi(port);
 			return;
 		}
 		/* Remove old enries not in uc list except M2M entry */
@@ -4135,7 +4145,8 @@ static void mv_pp2x_set_rx_mode(struct net_device *dev)
 					   ha->addr[4], ha->addr[5]);
 		}
 		/* Leave promisc mode */
-		mv_pp2x_prs_mac_promisc_set(hw, id, false);
+		mv_pp2x_prs_mac_uc_promisc_set(hw, id, false);
+		mv_pp2x_prs_mac_mc_promisc_set(hw, id, false);
 
 		if (dev->flags & IFF_ALLMULTI) {
 			mv_pp2x_set_rx_allmulti(port);
@@ -4166,8 +4177,7 @@ static void mv_pp2x_set_rx_mode(struct net_device *dev)
 				}
 			}
 			/* Reject other MC mac entries */
-			mv_pp2x_prs_mac_multi_set(hw, id,
-						  MVPP2_PE_MAC_MC_ALL, false);
+			mv_pp2x_prs_mac_mc_promisc_set(hw, id, false);
 		}
 	}
 }
-- 
1.7.9.5

