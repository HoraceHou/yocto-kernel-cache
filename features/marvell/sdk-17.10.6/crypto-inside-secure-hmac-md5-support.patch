From 3c110246d2e6dc72be64240f1b2e602334db738d Mon Sep 17 00:00:00 2001
From: Ofer Heifetz <oferh@marvell.com>
Date: Thu, 8 Mar 2018 03:51:46 +0200
Subject: [PATCH 1306/1345] crypto: inside-secure - hmac(md5) support

commit  345b47383b2eea3175f9b2d484fd66b770045b45 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Change-Id: Ia17e44e26f8b59d63de4067269b57429855d6625
Signed-off-by: Ofer Heifetz <oferh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/51539
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/51687
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/inside-secure/hash.c     |   80 ++++++++++++++++++++-----------
 drivers/crypto/inside-secure/safexcel.c |    1 +
 drivers/crypto/inside-secure/safexcel.h |    2 +-
 3 files changed, 55 insertions(+), 28 deletions(-)

diff --git a/drivers/crypto/inside-secure/hash.c b/drivers/crypto/inside-secure/hash.c
index 5b11b39..7cf5545 100644
--- a/drivers/crypto/inside-secure/hash.c
+++ b/drivers/crypto/inside-secure/hash.c
@@ -1288,52 +1288,78 @@ static int safexcel_md5_digest(struct ahash_request *areq)
 	return safexcel_ahash_finup(areq);
 }
 
-static int safexcel_md5_export(struct ahash_request *areq, void *out)
-{
-	struct crypto_ahash *ahash = crypto_ahash_reqtfm(areq);
-	struct safexcel_ahash_req *req = ahash_request_ctx(areq);
-	struct md5_state *out_state = out;
-	int len = req->len;
-	int cache_len = do_div(len, crypto_ahash_blocksize(ahash));
+struct safexcel_alg_template safexcel_alg_md5 = {
+	.type = SAFEXCEL_ALG_TYPE_AHASH,
+	.alg.ahash = {
+		.init = safexcel_md5_init,
+		.update = safexcel_ahash_update,
+		.final = safexcel_ahash_final,
+		.finup = safexcel_ahash_finup,
+		.digest = safexcel_md5_digest,
+		.export = safexcel_ahash_export,
+		.import = safexcel_ahash_import,
+		.halg = {
+			.digestsize = MD5_DIGEST_SIZE,
+			.statesize = sizeof(struct md5_state),
+			.base = {
+				.cra_name = "md5",
+				.cra_driver_name = "safexcel-md5",
+				.cra_priority = 300,
+				.cra_flags = CRYPTO_ALG_ASYNC |
+					     CRYPTO_ALG_KERN_DRIVER_ONLY,
+				.cra_blocksize = MD5_HMAC_BLOCK_SIZE,
+				.cra_ctxsize = sizeof(struct safexcel_ahash_ctx),
+				.cra_init = safexcel_ahash_cra_init,
+				.cra_exit = safexcel_ahash_cra_exit,
+				.cra_module = THIS_MODULE,
+			},
+		},
+	},
+};
 
-	out_state->byte_count = req->len;
-	memcpy(out_state->hash, req->state, req->state_sz);
-	memset(out_state->block, 0, crypto_ahash_blocksize(ahash));
-	memcpy(out_state->block, req->cache, cache_len);
+static int safexcel_hmac_md5_init(struct ahash_request *areq)
+{
+	struct safexcel_ahash_ctx *ctx = crypto_ahash_ctx(crypto_ahash_reqtfm(areq));
 
+	safexcel_md5_init(areq);
+	ctx->digest = CONTEXT_CONTROL_DIGEST_HMAC;
 	return 0;
 }
 
-static int safexcel_md5_import(struct ahash_request *areq, const void *in)
+static int safexcel_hmac_md5_setkey(struct crypto_ahash *tfm, const u8 *key,
+				     unsigned int keylen)
 {
-	struct safexcel_ahash_req *req = ahash_request_ctx(areq);
-	const struct md5_state *in_state = in;
+	return safexcel_hmac_alg_setkey(tfm, key, keylen, "safexcel-md5",
+					MD5_DIGEST_SIZE);
+}
 
-	memset(req, 0, sizeof(*req));
+static int safexcel_hmac_md5_digest(struct ahash_request *areq)
+{
+	int ret = safexcel_hmac_md5_init(areq);
 
-	req->len = in_state->byte_count;
-	memcpy(req->cache, in_state->block, in_state->byte_count);
-	memcpy(req->state, in_state->hash, req->state_sz);
+	if (ret)
+		return ret;
 
-	return 0;
+	return safexcel_ahash_finup(areq);
 }
 
-struct safexcel_alg_template safexcel_alg_md5 = {
+struct safexcel_alg_template safexcel_alg_hmac_md5 = {
 	.type = SAFEXCEL_ALG_TYPE_AHASH,
 	.alg.ahash = {
-		.init = safexcel_md5_init,
+		.init = safexcel_hmac_md5_init,
 		.update = safexcel_ahash_update,
 		.final = safexcel_ahash_final,
 		.finup = safexcel_ahash_finup,
-		.digest = safexcel_md5_digest,
-		.export = safexcel_md5_export,
-		.import = safexcel_md5_import,
+		.digest = safexcel_hmac_md5_digest,
+		.setkey = safexcel_hmac_md5_setkey,
+		.export = safexcel_ahash_export,
+		.import = safexcel_ahash_import,
 		.halg = {
 			.digestsize = MD5_DIGEST_SIZE,
-			.statesize = sizeof(struct md5_state),
+			.statesize = sizeof(struct safexcel_ahash_export_state),
 			.base = {
-				.cra_name = "md5",
-				.cra_driver_name = "safexcel-md5",
+				.cra_name = "hmac(md5)",
+				.cra_driver_name = "safexcel-hmac-md5",
 				.cra_priority = 300,
 				.cra_flags = CRYPTO_ALG_ASYNC |
 					     CRYPTO_ALG_KERN_DRIVER_ONLY,
diff --git a/drivers/crypto/inside-secure/safexcel.c b/drivers/crypto/inside-secure/safexcel.c
index 7ef6d81..fabf07d 100644
--- a/drivers/crypto/inside-secure/safexcel.c
+++ b/drivers/crypto/inside-secure/safexcel.c
@@ -1066,6 +1066,7 @@ static int safexcel_request_ring_irq(struct platform_device *pdev, const char *n
 	&safexcel_alg_hmac_sha1,
 	&safexcel_alg_hmac_sha256,
 	&safexcel_alg_md5,
+	&safexcel_alg_hmac_md5,
 };
 
 /* Register the supported hash and cipher algorithms */
diff --git a/drivers/crypto/inside-secure/safexcel.h b/drivers/crypto/inside-secure/safexcel.h
index e2c02f7..6fde3c4 100644
--- a/drivers/crypto/inside-secure/safexcel.h
+++ b/drivers/crypto/inside-secure/safexcel.h
@@ -713,5 +713,5 @@ struct safexcel_result_desc *safexcel_add_rdesc(struct safexcel_crypto_priv *pri
 extern struct safexcel_alg_template safexcel_alg_hmac_sha1;
 extern struct safexcel_alg_template safexcel_alg_hmac_sha256;
 extern struct safexcel_alg_template safexcel_alg_md5;
-
+extern struct safexcel_alg_template safexcel_alg_hmac_md5;
 #endif
-- 
1.7.9.5

