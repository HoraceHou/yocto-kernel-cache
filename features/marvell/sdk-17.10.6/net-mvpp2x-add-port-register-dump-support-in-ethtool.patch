From d2cba265b1ea4a71e2a74fec797a241c06840413 Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Sun, 3 Jul 2016 11:21:03 +0300
Subject: [PATCH 0322/1345] net: mvpp2x: add port register dump support in
 ethtool

commit  a1cd7ee3f954c75d876aa214ef88860cf8d3ebcc from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Change-Id: Ib6c5422b4b24c5abcd54593dd278ec0447b30434
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/30895
Reviewed-by: Yuval Caduri <cyuval@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c |  208 +++++++++++++++++++-
 drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h |    4 +
 .../ethernet/marvell/mvpp2x/mv_gop110_hw_type.h    |    2 +-
 .../net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c  |   66 ++++++-
 4 files changed, 274 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
index 69ff770..cc5bbb8 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
@@ -2783,4 +2783,210 @@ int mv_gop110_netc_init(struct gop_hw *gop,
 	return 0;
 }
 
-
+/* Register dump for ethtool */
+void mv_gop110_gmac_registers_dump(struct mv_pp2x_port *port, u32 *regs_buff)
+{
+	int i;
+	int index = 0;
+
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_CTRL0_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_CTRL1_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_CTRL2_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_AUTO_NEG_CFG_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_STATUS0_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_SERIAL_PARAM_CFG_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_FIFO_CFG_0_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_FIFO_CFG_1_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					     port->mac_data.gop_index,
+					     MV_GMAC_INTERRUPT_CAUSE_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					     port->mac_data.gop_index,
+					     MV_GMAC_INTERRUPT_MASK_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_SERDES_CFG0_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_SERDES_CFG1_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_SERDES_CFG2_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_SERDES_CFG3_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_PRBS_STATUS_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_PRBS_ERR_CNTR_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_STATUS1_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_MIB_CNTRS_CTRL_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_PORT_CTRL3_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_QSGMII_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_QSGMII_STATUS_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					    port->mac_data.gop_index,
+					    MV_GMAC_QSGMII_PRBS_CNTR_REG);
+	for (i = 0; i < 8; i++) {
+		regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					port->mac_data.gop_index,
+					MV_GMAC_CCFC_PORT_SPEED_TIMER_REG(i));
+	}
+	for (i = 0; i < 4; i++) {
+		regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+						port->mac_data.gop_index,
+						MV_GMAC_FC_DSA_TAG_REG(i));
+	}
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+				port->mac_data.gop_index,
+				MV_GMAC_LINK_LEVEL_FLOW_CTRL_WINDOW_REG_0);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+				port->mac_data.gop_index,
+				MV_GMAC_LINK_LEVEL_FLOW_CTRL_WINDOW_REG_1);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					     port->mac_data.gop_index,
+					     MV_GMAC_PORT_CTRL4_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+				port->mac_data.gop_index,
+				MV_GMAC_PORT_SERIAL_PARAM_1_CFG_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					     port->mac_data.gop_index,
+					     MV_GMAC_INTERRUPT_SUM_CAUSE_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					     port->mac_data.gop_index,
+					     MV_GMAC_INTERRUPT_SUM_MASK_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					     port->mac_data.gop_index,
+					     MV_GMAC_LPI_CTRL_0_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					     port->mac_data.gop_index,
+					     MV_GMAC_LPI_CTRL_1_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					     port->mac_data.gop_index,
+					     MV_GMAC_LPI_CTRL_2_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					     port->mac_data.gop_index,
+					     MV_GMAC_LPI_STATUS_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					     port->mac_data.gop_index,
+					     MV_GMAC_LPI_CNTR_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					     port->mac_data.gop_index,
+					     MV_GMAC_PULSE_1_MS_LOW_REG);
+	regs_buff[index++] = mv_gop110_gmac_read(&port->priv->hw.gop,
+					     port->mac_data.gop_index,
+					     MV_GMAC_PULSE_1_MS_HIGH_REG);
+}
+
+void mv_gop110_xlg_registers_dump(struct mv_pp2x_port *port, u32 *regs_buff)
+{
+	int gop_port = port->mac_data.gop_index;
+	int index = 0;
+
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_PORT_MAC_CTRL0_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_PORT_MAC_CTRL1_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_PORT_MAC_CTRL2_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_PORT_MAC_CTRL2_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_MAC_PORT_STATUS_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_PORT_FIFOS_THRS_CFG_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_INTERRUPT_CAUSE_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_INTERRUPT_MASK_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_PORT_MAC_CTRL3_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_PORT_PER_PRIO_FLOW_CTRL_STATUS_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_DEBUG_BUS_STATUS_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_PORT_METAL_FIX_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_MIB_CNTRS_CTRL_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_CNCCFC_TIMERI_REG(gop_port));
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_EXTERNAL_INTERRUPT_CAUSE_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_EXTERNAL_INTERRUPT_MASK_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_MAC_FC_DSA_TAG_0_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_MAC_FC_DSA_TAG_1_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_MAC_FC_DSA_TAG_2_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_MAC_FC_DSA_TAG_3_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_MAC_DIC_BUDGET_COMPENSATION_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_PORT_MAC_CTRL4_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_PORT_MAC_CTRL5_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_MAC_EXT_CTRL_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_MAC_MACRO_CTRL_REG);
+	regs_buff[index++] = mv_gop110_xlg_mac_read(&port->priv->hw.gop,
+						    port->mac_data.gop_index,
+						    MV_XLG_MAC_DIC_PPM_IPG_REDUCE_REG);
+}
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
index df216c4..d5acacb 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
@@ -476,4 +476,8 @@ int mv_gop110_netc_init(struct gop_hw *gop,
 			u32 net_comp_config, enum mv_netc_phase phase);
 void mv_gop110_netc_active_port(struct gop_hw *gop, u32 port, u32 val);
 
+/*Ethtool Functions */
+void mv_gop110_gmac_registers_dump(struct mv_pp2x_port *port, u32 *regs_buff);
+void mv_gop110_xlg_registers_dump(struct mv_pp2x_port *port, u32 *regs_buff);
+
 #endif /* _MV_GOP_HW_H_ */
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw_type.h b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw_type.h
index 90b4a7a..f26695e 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw_type.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw_type.h
@@ -927,7 +927,7 @@
 		(0x00000001 << MV_XLG_MAC_PORT_STATUS_PFC_SYNC_FIFO_FULL_OFFS)
 
 /* Port Fifos Thresholds Configuration */
-#define MV_XLG_PORT_FIFOS_THRS_CFG_REG		(0x001)
+#define MV_XLG_PORT_FIFOS_THRS_CFG_REG		(0x0010)
 #define MV_XLG_MAC_PORT_FIFOS_THRS_CFG_RXFULLTHR_OFFS		0
 #define MV_XLG_MAC_PORT_FIFOS_THRS_CFG_RXFULLTHR_MASK    \
 		(0x0000001f << MV_XLG_MAC_PORT_FIFOS_THRS_CFG_RXFULLTHR_OFFS)
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
index d9bc6f3..e08d87a 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
@@ -42,8 +42,10 @@
 #include "mv_pp2x_hw.h"
 #include "mv_gop110_hw.h"
 
-#define MV_PP2X_STATS_LEN	ARRAY_SIZE(mv_pp2x_gstrings_stats)
-#define MV_PP2X_TEST_LEN	ARRAY_SIZE(mv_pp2x_gstrings_test)
+#define MV_PP2_STATS_LEN	ARRAY_SIZE(mv_pp2x_gstrings_stats)
+#define MV_PP2_TEST_LEN	ARRAY_SIZE(mv_pp2x_gstrings_test)
+#define MV_PP2_REGS_GMAC_LEN  54
+#define MV_PP2_REGS_XLG_LEN  25
 
 static const char mv_pp2x_gstrings_test[][ETH_GSTRING_LEN] = {
 	"Link test        (on/offline)",
@@ -175,9 +177,9 @@ static int mv_pp2x_eth_tool_get_sset_count(struct net_device *dev, int sset)
 
 	switch (sset) {
 	case ETH_SS_TEST:
-		return MV_PP2X_TEST_LEN;
+		return MV_PP2_TEST_LEN;
 	case ETH_SS_STATS:
-		return MV_PP2X_STATS_LEN;
+		return MV_PP2_STATS_LEN;
 	default:
 		return -EOPNOTSUPP;
 	}
@@ -531,6 +533,60 @@ static int mv_pp2x_ethtool_set_rxfh(struct net_device *dev, const u32 *indir,
 	return 0;
 }
 
+static int mv_pp2x_ethtool_get_regs_len(struct net_device *dev)
+{
+	struct mv_pp2x_port *port = netdev_priv(dev);
+	struct mv_mac_data *mac = &port->mac_data;
+
+	switch (mac->phy_mode) {
+	case PHY_INTERFACE_MODE_RGMII:
+	case PHY_INTERFACE_MODE_SGMII:
+	case PHY_INTERFACE_MODE_QSGMII:
+		return MV_PP2_REGS_GMAC_LEN * sizeof(u32);
+	case PHY_INTERFACE_MODE_XAUI:
+	case PHY_INTERFACE_MODE_RXAUI:
+	case PHY_INTERFACE_MODE_KR:
+		return MV_PP2_REGS_XLG_LEN * sizeof(u32);
+	default:
+		pr_err("%s: Wrong port mode (%d)", __func__, mac->phy_mode);
+		return -1;
+	}
+}
+
+/*ethtool get registers function */
+static void mv_pp2x_ethtool_get_regs(struct net_device *dev,
+				     struct ethtool_regs *regs, void *p)
+{
+	struct mv_pp2x_port *port = netdev_priv(dev);
+	struct mv_mac_data *mac = &port->mac_data;
+
+	if (!port) {
+		netdev_err(dev, "%s is not supported on %s\n",
+			   __func__, dev->name);
+		return;
+	}
+
+	regs->version = port->priv->pp2_version;
+
+	switch (mac->phy_mode) {
+	case PHY_INTERFACE_MODE_RGMII:
+	case PHY_INTERFACE_MODE_SGMII:
+	case PHY_INTERFACE_MODE_QSGMII:
+		memset(p, 0, MV_PP2_REGS_GMAC_LEN * sizeof(u32));
+		mv_gop110_gmac_registers_dump(port, p);
+	break;
+	case PHY_INTERFACE_MODE_XAUI:
+	case PHY_INTERFACE_MODE_RXAUI:
+	case PHY_INTERFACE_MODE_KR:
+		memset(p, 0, MV_PP2_REGS_XLG_LEN * sizeof(u32));
+		mv_gop110_xlg_registers_dump(port, p);
+	break;
+	default:
+		pr_err("%s: Wrong port mode (%d)", __func__, mac->phy_mode);
+		return;
+	}
+}
+
 static const struct ethtool_ops mv_pp2x_eth_tool_ops = {
 	.get_link		= ethtool_op_get_link,
 	.get_settings		= mv_pp2x_ethtool_get_settings,
@@ -548,6 +604,8 @@ static int mv_pp2x_ethtool_set_rxfh(struct net_device *dev, const u32 *indir,
 	.get_rxnfc		= mv_pp2x_ethtool_get_rxnfc,
 	.get_rxfh		= mv_pp2x_ethtool_get_rxfh,
 	.set_rxfh		= mv_pp2x_ethtool_set_rxfh,
+	.get_regs_len           = mv_pp2x_ethtool_get_regs_len,
+	.get_regs		= mv_pp2x_ethtool_get_regs,
 };
 
 void mv_pp2x_set_ethtool_ops(struct net_device *netdev)
-- 
1.7.9.5

