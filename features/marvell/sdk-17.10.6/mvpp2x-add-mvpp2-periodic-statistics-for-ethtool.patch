From a30a8be06e234001785a90019157197c3f1d4666 Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Tue, 28 Feb 2017 17:32:33 +0200
Subject: [PATCH 0930/1345] mvpp2x: add mvpp2 periodic statistics for ethtool

commit  762781c589c268a9092025fb7cd4230b548580fe from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

This patch add mvpp2 periodic statistics for ethtool.

Added statistics for:
- rx_ppv2_overrun, rx_fullq_drop, rx_early_drop,
  rx_bm_drop, rx_sw_drop, rx_hw_drop, frames_64, frames_65_to_127,
  frames_128_to_255, frames_256_to_511, frames_512_to_1023,
  frames_1024_to_max

Change-Id: I6f8793c99240b132c1aaf4482d7ca7baed7cf1aa
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/37980
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c |   32 +++++++++++-
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h      |   15 +++++-
 .../net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c  |   30 ++++++++---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c   |   55 ++++++++++++++++++++
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h   |    3 ++
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |    7 ++-
 6 files changed, 131 insertions(+), 11 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
index 0934a6e..062f339 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
@@ -2504,6 +2504,23 @@ void mv_gop110_mib_counters_stat_update(struct gop_hw *gop, int port, struct gop
 	gop_statistics->rx_mcast += val;
 	gop_statistics->rx_frames += val;
 
+	gop_statistics->frames_64 += mv_gop110_mib_read64(gop, port, MV_MIB_FRAMES_64_OCTETS);
+
+	gop_statistics->frames_65_to_127 += mv_gop110_mib_read64(gop, port,
+								 MV_MIB_FRAMES_65_TO_127_OCTETS);
+
+	gop_statistics->frames_128_to_255 += mv_gop110_mib_read64(gop, port,
+								  MV_MIB_FRAMES_128_TO_255_OCTETS);
+
+	gop_statistics->frames_256_to_511 += mv_gop110_mib_read64(gop, port,
+								  MV_MIB_FRAMES_256_TO_511_OCTETS);
+
+	gop_statistics->frames_512_to_1023 += mv_gop110_mib_read64(gop, port,
+								   MV_MIB_FRAMES_512_TO_1023_OCTETS);
+
+	gop_statistics->frames_1024_to_max += mv_gop110_mib_read64(gop, port,
+								   MV_MIB_FRAMES_1024_TO_MAX_OCTETS);
+
 	gop_statistics->tx_byte += mv_gop110_mib_read64(gop, port,
 							MV_MIB_GOOD_OCTETS_SENT_LOW);
 
@@ -2529,31 +2546,38 @@ void mv_gop110_mib_counters_stat_update(struct gop_hw *gop, int port, struct gop
 							MV_MIB_FC_SENT);
 
 	val = mv_gop110_mib_read64(gop, port, MV_MIB_RX_FIFO_OVERRUN);
-	gop_statistics->rx_overrun += val;
+	gop_statistics->rx_mac_overrun += val;
+	gop_statistics->rx_sw_drop += val;
 	gop_statistics->rx_total_err += val;
 
 	val = mv_gop110_mib_read64(gop, port, MV_MIB_UNDERSIZE_RECEIVED);
 	gop_statistics->rx_runt += val;
+	gop_statistics->rx_sw_drop += val;
 	gop_statistics->rx_total_err += val;
 
 	val = mv_gop110_mib_read64(gop, port, MV_MIB_FRAGMENTS_RECEIVED);
 	gop_statistics->rx_fragments_err += val;
+	gop_statistics->rx_sw_drop += val;
 	gop_statistics->rx_total_err += val;
 
 	val = mv_gop110_mib_read64(gop, port, MV_MIB_OVERSIZE_RECEIVED);
 	gop_statistics->rx_giant += val;
+	gop_statistics->rx_sw_drop += val;
 	gop_statistics->rx_total_err += val;
 
 	val = mv_gop110_mib_read64(gop, port, MV_MIB_JABBER_RECEIVED);
 	gop_statistics->rx_jabber += val;
+	gop_statistics->rx_sw_drop += val;
 	gop_statistics->rx_total_err += val;
 
 	val = mv_gop110_mib_read64(gop, port, MV_MIB_MAC_RECEIVE_ERROR);
 	gop_statistics->rx_jabber += val;
+	gop_statistics->rx_sw_drop += val;
 	gop_statistics->rx_total_err += val;
 
 	val = mv_gop110_mib_read64(gop, port, MV_MIB_BAD_CRC_EVENT);
 	gop_statistics->rx_crc += val;
+	gop_statistics->rx_sw_drop += val;
 	gop_statistics->rx_total_err += val;
 
 	gop_statistics->collision += mv_gop110_mib_read64(gop, port,
@@ -2570,6 +2594,12 @@ void mv_gop110_mib_counters_clear(struct gop_hw *gop, int port)
 	mv_gop110_mib_read64(gop, port, MV_MIB_UNICAST_FRAMES_RECEIVED);
 	mv_gop110_mib_read64(gop, port, MV_MIB_BROADCAST_FRAMES_RECEIVED);
 	mv_gop110_mib_read64(gop, port, MV_MIB_MULTICAST_FRAMES_RECEIVED);
+	mv_gop110_mib_read64(gop, port, MV_MIB_FRAMES_64_OCTETS);
+	mv_gop110_mib_read64(gop, port, MV_MIB_FRAMES_65_TO_127_OCTETS);
+	mv_gop110_mib_read64(gop, port, MV_MIB_FRAMES_128_TO_255_OCTETS);
+	mv_gop110_mib_read64(gop, port, MV_MIB_FRAMES_256_TO_511_OCTETS);
+	mv_gop110_mib_read64(gop, port, MV_MIB_FRAMES_512_TO_1023_OCTETS);
+	mv_gop110_mib_read64(gop, port, MV_MIB_FRAMES_1024_TO_MAX_OCTETS);
 	mv_gop110_mib_read64(gop, port, MV_MIB_GOOD_OCTETS_SENT_LOW);
 	mv_gop110_mib_read64(gop, port, MV_MIB_UNICAST_FRAMES_SENT);
 	mv_gop110_mib_read64(gop, port, MV_MIB_MULTICAST_FRAMES_SENT);
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
index 02fa534..259f11f 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
@@ -223,14 +223,21 @@ struct gop_stat {
 	u64 rx_bcast;
 	u64 rx_frames;
 	u64 rx_pause;
-	u64 rx_overrun;
+	u64 rx_mac_overrun;
 	u64 rx_crc;
 	u64 rx_runt;
 	u64 rx_giant;
 	u64 rx_fragments_err;
 	u64 rx_mac_err;
 	u64 rx_jabber;
+	u64 rx_ppv2_overrun;
+	u64 rx_cls_drop;
+	u64 rx_fullq_drop;
+	u64 rx_early_drop;
+	u64 rx_bm_drop;
 	u64 rx_total_err;
+	u64 rx_hw_drop;
+	u64 rx_sw_drop;
 	u64 tx_byte;
 	u64 tx_unicast;
 	u64 tx_mcast;
@@ -240,6 +247,12 @@ struct gop_stat {
 	u64 tx_crc_sent;
 	u64 collision;
 	u64 late_collision;
+	u64 frames_64;
+	u64 frames_65_to_127;
+	u64 frames_128_to_255;
+	u64 frames_256_to_511;
+	u64 frames_512_to_1023;
+	u64 frames_1024_to_max;
 };
 
 struct mv_mac_data {
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
index 9bd4b1e..2bde5be 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
@@ -64,9 +64,12 @@
 	/* device-specific stats */
 	"rx_bytes", "rx_frames", "rx_unicast", "rx_mcast", "rx_bcast",
 	"tx_bytes", "tx_frames", "tx_unicast", "tx_mcast", "tx_bcast",
-	"rx_pause", "tx_pause", "rx_overrun", "rx_crc", "rx_runt", "rx_giant",
-	"rx_fragments_err", "rx_mac_err", "rx_jabber", "rx_sw_drop", "rx_total_err",
-	"tx_drop", "tx_crc_sent", "collision", "late_collision",
+	"rx_pause", "tx_pause", "rx_mac_overrun", "rx_crc", "rx_runt",
+	"rx_giant", "rx_fragments_err", "rx_mac_err", "rx_jabber", "rx_ppv2_overrun",
+	"rx_cls_drop", "rx_fullq_drop", "rx_early_drop", "rx_bm_drop",
+	"rx_total_err",	"rx_sw_drop", "rx_hw_drop", "tx_crc_sent",
+	"tx_drop", "collision",	"late_collision", "frames_64", "frames_65_to_127",
+	"frames_128_to_255", "frames_256_to_511", "frames_512_to_1023", "frames_1024_to_max",
 };
 
 int mv_pp2x_check_speed_duplex_valid(struct ethtool_cmd *cmd,
@@ -195,6 +198,7 @@ static void mv_pp2x_eth_tool_get_ethtool_stats(struct net_device *dev,
 		return;
 
 	mv_gop110_mib_counters_stat_update(gop, gop_port, gop_statistics);
+	mv_pp2x_counters_stat_update(port, gop_statistics);
 
 	data[i++] = gop_statistics->rx_byte;
 	data[i++] = gop_statistics->rx_frames;
@@ -208,19 +212,31 @@ static void mv_pp2x_eth_tool_get_ethtool_stats(struct net_device *dev,
 	data[i++] = gop_statistics->tx_bcast;
 	data[i++] = gop_statistics->rx_pause;
 	data[i++] = gop_statistics->tx_pause;
-	data[i++] = gop_statistics->rx_overrun;
+	data[i++] = gop_statistics->rx_mac_overrun;
 	data[i++] = gop_statistics->rx_crc;
 	data[i++] = gop_statistics->rx_runt;
 	data[i++] = gop_statistics->rx_giant;
 	data[i++] = gop_statistics->rx_fragments_err;
 	data[i++] = gop_statistics->rx_mac_err;
 	data[i++] = gop_statistics->rx_jabber;
-	data[i++] = dev->stats.rx_dropped;
-	data[i++] = gop_statistics->rx_total_err + dev->stats.rx_dropped;
-	data[i++] = dev->stats.tx_dropped;
+	data[i++] = gop_statistics->rx_ppv2_overrun;
+	data[i++] = gop_statistics->rx_cls_drop;
+	data[i++] = gop_statistics->rx_fullq_drop;
+	data[i++] = gop_statistics->rx_early_drop;
+	data[i++] = gop_statistics->rx_bm_drop;
+	data[i++] = gop_statistics->rx_total_err;
+	data[i++] = gop_statistics->rx_sw_drop;
+	data[i++] = gop_statistics->rx_hw_drop;
 	data[i++] = gop_statistics->tx_crc_sent;
+	data[i++] = dev->stats.tx_dropped;
 	data[i++] = gop_statistics->collision;
 	data[i++] = gop_statistics->late_collision;
+	data[i++] = gop_statistics->frames_64;
+	data[i++] = gop_statistics->frames_65_to_127;
+	data[i++] = gop_statistics->frames_128_to_255;
+	data[i++] = gop_statistics->frames_256_to_511;
+	data[i++] = gop_statistics->frames_512_to_1023;
+	data[i++] = gop_statistics->frames_1024_to_max;
 }
 
 static void mv_pp2x_eth_tool_get_strings(struct net_device *dev,
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
index ffb2c0a..34a99df 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
@@ -6447,3 +6447,58 @@ int mv_pp2x_check_hw_buf_num(struct mv_pp2x *priv, struct mv_pp2x_bm_pool *bm_po
 	else
 		return 0;
 }
+
+/*  Update Mvpp2x counter statistic */
+void mv_pp2x_counters_stat_update(struct mv_pp2x_port *port,
+				  struct gop_stat *gop_statistics)
+{
+	struct mv_pp2x_hw *hw = &port->priv->hw;
+	int val, queue;
+
+	val = mv_pp2x_read(hw, MV_PP2_OVERRUN_DROP_REG(port->id));
+	gop_statistics->rx_ppv2_overrun += val;
+	gop_statistics->rx_total_err += val;
+	gop_statistics->rx_sw_drop += val;
+
+	val = mv_pp2x_read(hw, MV_PP2_CLS_DROP_REG(port->id));
+	gop_statistics->rx_cls_drop += val;
+	gop_statistics->rx_hw_drop += val;
+
+	preempt_disable();
+	for (queue = port->first_rxq; queue < (port->first_rxq +
+			port->num_rx_queues); queue++) {
+		mv_pp2x_write(hw, MVPP2_CNT_IDX_REG, queue);
+		val = mv_pp2x_read(hw, MVPP2_RX_PKT_FULLQ_DROP_REG);
+		gop_statistics->rx_fullq_drop += val;
+		gop_statistics->rx_hw_drop += val;
+
+		val = mv_pp2x_read(hw, MVPP2_RX_PKT_EARLY_DROP_REG);
+		gop_statistics->rx_early_drop += val;
+		gop_statistics->rx_hw_drop += val;
+
+		val = mv_pp2x_read(hw, MVPP2_RX_PKT_BM_DROP_REG);
+		gop_statistics->rx_bm_drop += val;
+		gop_statistics->rx_hw_drop += val;
+	}
+	preempt_enable();
+}
+
+/*  Clear Mvpp2x counter statistic */
+void mv_pp2x_counters_stat_clear(struct mv_pp2x_port *port)
+{
+	struct mv_pp2x_hw *hw = &port->priv->hw;
+	int queue;
+
+	mv_pp2x_read(hw, MV_PP2_OVERRUN_DROP_REG(port->id));
+	mv_pp2x_read(hw, MV_PP2_CLS_DROP_REG(port->id));
+
+	preempt_disable();
+	for (queue = port->first_rxq; queue < (port->first_rxq +
+			port->num_rx_queues); queue++) {
+		mv_pp2x_write(hw, MVPP2_CNT_IDX_REG, queue);
+		mv_pp2x_read(hw, MVPP2_RX_PKT_FULLQ_DROP_REG);
+		mv_pp2x_read(hw, MVPP2_RX_PKT_EARLY_DROP_REG);
+		mv_pp2x_read(hw, MVPP2_RX_PKT_BM_DROP_REG);
+	}
+	preempt_enable();
+}
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
index f8ccac9..c980adf 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
@@ -797,5 +797,8 @@ int mv_pp22_rss_tbl_entry_get(struct mv_pp2x_hw *hw,
 int mv_pp2x_check_hw_buf_num(struct mv_pp2x *priv, struct mv_pp2x_bm_pool *bm_pool);
 void mv_pp22_set_net_comp(struct mv_pp2x *priv);
 int mvcpn110_mac_hw_init(struct mv_pp2x_port *port);
+void mv_pp2x_counters_stat_update(struct mv_pp2x_port *port,
+				  struct gop_stat *gop_statistics);
+void mv_pp2x_counters_stat_clear(struct mv_pp2x_port *port);
 
 #endif /* _MVPP2_HW_H_ */
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index ef5c2b2..97897d0 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -4394,8 +4394,10 @@ static void mv_pp2x_get_port_stats(struct mv_pp2x_port *port)
 
 	link_is_up = mv_gop110_port_is_link_up(gop, &port->mac_data);
 
-	if (link_is_up)
+	if (link_is_up) {
 		mv_gop110_mib_counters_stat_update(gop, gop_port, gop_statistics);
+		mv_pp2x_counters_stat_update(port, gop_statistics);
+	}
 }
 
 static void mv_pp2x_get_device_stats(struct work_struct *work)
@@ -4764,8 +4766,9 @@ static int mv_pp2x_port_probe(struct platform_device *pdev,
 		goto err_free_port_pcpu;
 	}
 
-	/* Clear MIB counters statistic */
+	/* Clear MIB and mvpp2 counters statistic */
 	mv_gop110_mib_counters_clear(&port->priv->hw.gop, port->mac_data.gop_index);
+	mv_pp2x_counters_stat_clear(port);
 
 	mv_pp2x_port_irq_names_update(port);
 
-- 
1.7.9.5

