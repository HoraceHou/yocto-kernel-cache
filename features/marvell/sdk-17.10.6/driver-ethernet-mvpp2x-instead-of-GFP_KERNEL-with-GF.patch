From 24c92f9b9890cffa72dc2c4d2ed74ffd1a910001 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Fri, 10 Aug 2018 10:26:10 +0800
Subject: [PATCH 1/2] driver: ethernet:mvpp2x: instead of GFP_KERNEL with
 GFP_ATOMIC
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

There is below call trace when kernel boots up with kts test template.

BUG: sleeping function called from invalid context at
/kernel-source//mm/slab.h:432
in_atomic(): 1, irqs_disabled(): 0, pid: 202, name: rpcbind
INFO: lockdep is turned off.
Preemption disabled at:
[<ffffff80089e2b78>] igmp6_group_added+0x50/0xf8
CPU: 1 PID: 202 Comm: rpcbind Not tainted 4.12.26-yocto-standard #2
Hardware name: Marvell Armada 7040 DB board (DT) Call trace:
[<ffffff800808bef0>] dump_backtrace+0x0/0x230
[<ffffff800808c144>] show_stack+0x24/0x30
[<ffffff8008576000>] dump_stack+0xac/0xe4
[<ffffff80080d8bcc>] ___might_sleep+0x154/0x240
[<ffffff80080d8d10>] __might_sleep+0x58/0x90
[<ffffff8008259e68>] kmem_cache_alloc_trace+0x228/0x410
[<ffffff800860edd0>] mv_pp2x_prs_mac_da_accept+0x70/0x430
[<ffffff800860f354>] mv_pp2x_prs_mac_entry_del+0xfc/0x200
[<ffffff8008616ff0>] mv_pp2x_set_rx_mode+0x90/0x230
[<ffffff80088c86a4>] __dev_set_rx_mode+0x5c/0xb0
[<ffffff80088d0768>] __dev_mc_add+0x60/0x80
[<ffffff80088d07b4>] dev_mc_add+0x2c/0x38
[<ffffff80089e2bfc>] igmp6_group_added+0xd4/0xf8
[<ffffff80089e45a0>] ipv6_dev_mc_inc+0x280/0x428
[<ffffff80089e48fc>] ipv6_sock_mc_join+0x1b4/0x420
[<ffffff80089d215c>] do_ipv6_setsockopt.isra.4+0x1404/0x1728
[<ffffff80089d251c>] ipv6_setsockopt+0x9c/0x120
[<ffffff80089d9124>] udpv6_setsockopt+0x54/0xa0
[<ffffff800889f74c>] sock_common_setsockopt+0x54/0x68
[<ffffff800889e7ac>] SyS_setsockopt+0x74/0xd0
Exception stack(0xffffff800aaa3ec0 to 0xffffff800aaa4000)

Because allocate memory with flag GFP_KERNEL when system is
in irq and preemption disabled status. It might to cause system
enters sleep status. So, instead of GFP_KERNEL  with GFP_ATOMIC
to make sure system doesnâ€™t enter sleep status when allocate memory.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c |    4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
index 7eaf5c8..16b4a43 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.c
@@ -2505,7 +2505,7 @@ static bool mv_pp2x_prs_mac_range_equals(struct mv_pp2x_prs_entry *pe,
 	struct mv_pp2x_prs_entry *pe;
 	int tid;
 
-	pe = kzalloc(sizeof(*pe), GFP_KERNEL);
+	pe = kzalloc(sizeof(*pe), GFP_ATOMIC);
 	if (!pe)
 		return NULL;
 	mv_pp2x_prs_tcam_lu_set(pe, MVPP2_PRS_LU_MAC);
@@ -2556,7 +2556,7 @@ int mv_pp2x_prs_mac_da_accept(struct mv_pp2x_port *port, const u8 *da, bool add)
 		if (tid < 0)
 			return tid;
 
-		pe = kzalloc(sizeof(*pe), GFP_KERNEL);
+		pe = kzalloc(sizeof(*pe), GFP_ATOMIC);
 		if (!pe)
 			return -1;
 		mv_pp2x_prs_tcam_lu_set(pe, MVPP2_PRS_LU_MAC);
-- 
1.7.9.5

