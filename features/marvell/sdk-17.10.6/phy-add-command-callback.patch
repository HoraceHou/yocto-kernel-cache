From 4e7a64a0226e818facd9b08000fd20f1447e488f Mon Sep 17 00:00:00 2001
From: Igal Liberman <igall@marvell.com>
Date: Tue, 7 Feb 2017 17:55:19 +0200
Subject: [PATCH 0812/1345] phy: add command callback

commit  6384ae5c4946205c1dd1ed73fe9a2c339da6a2ff from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

This callback might be useful for complicated phy drivers which require
extra operations, in addition to the existing operations (on/off).

Each new operation requires a new call back, which might be
complicated in some cases. "send command" callback helps to
simplify this, be allowing using one callback for many operations.

The commands type is int, this gives the ability to the users
to define the commands for their use.

Change-Id: Id4470363a37a44c78d7a4e22c9e55254e751f70a
Signed-off-by: Igal Liberman <igall@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/37095
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Tested-by: Omri Itach <omrii@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/phy/phy-core.c  |   15 +++++++++++++++
 include/linux/phy/phy.h |   10 ++++++++++
 2 files changed, 25 insertions(+)

diff --git a/drivers/phy/phy-core.c b/drivers/phy/phy-core.c
index cde6691..74b9311 100644
--- a/drivers/phy/phy-core.c
+++ b/drivers/phy/phy-core.c
@@ -389,6 +389,21 @@ enum phy_mode phy_get_mode(struct phy *phy)
 }
 EXPORT_SYMBOL_GPL(phy_get_mode);
 
+int phy_send_command(struct phy *phy, u32 command)
+{
+	int ret;
+
+	if (!phy || !phy->ops->get_mode)
+		return 0;
+
+	mutex_lock(&phy->mutex);
+	ret = phy->ops->send_command(phy, command);
+	mutex_unlock(&phy->mutex);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(phy_send_command);
+
 int phy_is_pll_locked(struct phy *phy)
 {
 	int ret;
diff --git a/include/linux/phy/phy.h b/include/linux/phy/phy.h
index cc8b09a..3f94dc2 100644
--- a/include/linux/phy/phy.h
+++ b/include/linux/phy/phy.h
@@ -39,6 +39,7 @@ enum phy_mode {
  * @reset: resetting the phy
  * @get_mode: get the mode of the phy
  * @is_pll_locked: check phy's PLL status (locked/unlocked)
+ * @send_command: request specific operations from the phy
  * @owner: the module owner containing the ops
  */
 struct phy_ops {
@@ -49,6 +50,7 @@ struct phy_ops {
 	int	(*set_mode)(struct phy *phy, enum phy_mode mode);
 	int	(*reset)(struct phy *phy);
 	enum phy_mode	(*get_mode)(struct phy *phy);
+	int	(*send_command)(struct phy *phy, u32 command);
 	int	(*is_pll_locked)(struct phy *phy);
 	struct module *owner;
 };
@@ -144,6 +146,7 @@ static inline void *phy_get_drvdata(struct phy *phy)
 int phy_set_mode(struct phy *phy, enum phy_mode mode);
 int phy_reset(struct phy *phy);
 enum phy_mode phy_get_mode(struct phy *phy);
+int phy_send_command(struct phy *phy, u32 command);
 int phy_is_pll_locked(struct phy *phy);
 static inline int phy_get_bus_width(struct phy *phy)
 {
@@ -273,6 +276,13 @@ static inline enum phy_mode phy_get_mode(struct phy *phy)
 	return -ENOSYS;
 }
 
+static inline int phy_send_command(struct phy *phy, u32 command)
+{
+	if (!phy)
+		return 0;
+	return -ENOSYS;
+}
+
 static inline int phy_is_pll_locked(struct phy *phy)
 {
 	if (!phy)
-- 
1.7.9.5

