From 2b78cafb33409af70512c588fd87cce681561cbb Mon Sep 17 00:00:00 2001
From: Dmitri Epshtein <dima@marvell.com>
Date: Mon, 12 Sep 2016 22:20:02 +0300
Subject: [PATCH 0495/1345] pp3: fix: BM pools #0 and #1 initialization

commit  703ffdd30492992cc7cdf226a38bb03346c0ce3d from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- Fix mismatch between DRAM and registers for pool #0 and #1

Change-Id: I7dc503113e598c339be54a374f3cf18ee43538b3
Signed-off-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/32733
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yelena Krivosheev <yelena@marvell.com>
Reviewed-by: Neta Zur Hershkovits <neta@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/bm/mv_bm.c        |   13 ++++++-------
 drivers/net/ethernet/marvell/pp3/bm/mv_bm.h        |    4 ++--
 drivers/net/ethernet/marvell/pp3/platform/mv_pp3.c |    4 +++-
 3 files changed, 11 insertions(+), 10 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/bm/mv_bm.c b/drivers/net/ethernet/marvell/pp3/bm/mv_bm.c
index f910ea0..b62b1bc 100644
--- a/drivers/net/ethernet/marvell/pp3/bm/mv_bm.c
+++ b/drivers/net/ethernet/marvell/pp3/bm/mv_bm.c
@@ -479,6 +479,8 @@ static int bm_qm_pool_quick_enable(int pool, int buf_num, struct mv_a40 *base_ad
 	bm_pool_fill_level_set(pool, buf_num, MV_32_BITS);
 
 	bm_memory_fill(buf_num, base_address);
+	/* Memory barrier to enshure GPM indexes are written to DRAM before enable BM/QM */
+	wmb();
 
 	/* set quick int bit */
 	reg_val = bm_gl_reg_read(BM_B0_POOL_CFG_REG(pid_local));
@@ -785,7 +787,7 @@ static int bm_pool_quick_init_complete(int pool)
 }
 
 /* Quick init of QM pools */
-int bm_qm_gpm_pools_def_quick_init(int buf_num, struct mv_a40 *qece_base, struct mv_a40 *pl_base)
+int bm_qm_gpm_pools_def_quick_init(int buf_num, struct mv_a40 *p0_base, struct mv_a40 *p1_base)
 {
 	struct mv_a40 *base_address;
 	bool bm_enable;
@@ -808,7 +810,7 @@ int bm_qm_gpm_pools_def_quick_init(int buf_num, struct mv_a40 *qece_base, struct
 
 	for (pool = BM_QM_GPM_POOL_0; pool <= BM_QM_GPM_POOL_1; pool++) {
 
-		base_address = (pool == BM_QM_GPM_POOL_0) ? pl_base : qece_base;
+		base_address = (pool == BM_QM_GPM_POOL_0) ? p0_base : p1_base;
 
 		ret_val |= bm_pool_dram_set(pool, buf_num, MV_32_BITS, base_address,
 						BM_DRAM_AE(buf_num), BM_DRAM_AF(buf_num));
@@ -832,20 +834,18 @@ int bm_qm_gpm_pools_def_quick_init(int buf_num, struct mv_a40 *qece_base, struct
 	return 0;
 }
 
-int bm_qm_dram_pools_def_quick_init(struct device *dev, int buf_num, struct mv_a40 *qece_base, struct mv_a40 *pl_base)
+int bm_qm_dram_pools_def_quick_init(struct device *dev, int buf_num, struct mv_a40 *p0_base, struct mv_a40 *p1_base)
 {
-
 	struct mv_a40 *base_address;
 	struct mv_a40 address_allocate[BM_QM_DRAM_POOLS_NUM];
 	unsigned int pool, ret_val = 0;
 	int index;
 
-
 	memset(address_allocate, 0, BM_QM_DRAM_POOLS_NUM * sizeof(struct mv_a40));
 
 	for (pool = BM_QM_DRAM_POOL_0; pool <= BM_QM_DRAM_POOL_1; pool++) {
 
-		base_address = (pool == BM_QM_DRAM_POOL_0) ? pl_base : qece_base;
+		base_address = (pool == BM_QM_DRAM_POOL_0) ? p0_base : p1_base;
 		index = pool - BM_QM_DRAM_POOL_0;
 
 		ret_val |= bm_pool_dram_set(pool, buf_num, MV_32_BITS, base_address,
@@ -1052,7 +1052,6 @@ void bm_pool_status_dump(int pool)
 	entry_offset = BM_DPR_C_MNG_BANK_STAT_TBL_ENTRY(bid, pid_local);
 	bm_entry_read(entry_offset, BM_DPR_C_MNG_BANK_STAT_TBL_ENTRY_WORDS, dpr_c_mng_entry);
 
-
 	cache_vmid = mv_field_get(BM_DPR_C_MNG_BANK_STAT_CACHE_VMID_OFFS,
 					BM_DPR_C_MNG_BANK_STAT_CACHE_VMID_BITS, dpr_c_mng_entry);
 	cache_start = mv_field_get(BM_DPR_C_MNG_BANK_STAT_CACHE_START_OFFS,
diff --git a/drivers/net/ethernet/marvell/pp3/bm/mv_bm.h b/drivers/net/ethernet/marvell/pp3/bm/mv_bm.h
index ac47520..4822371 100644
--- a/drivers/net/ethernet/marvell/pp3/bm/mv_bm.h
+++ b/drivers/net/ethernet/marvell/pp3/bm/mv_bm.h
@@ -168,7 +168,7 @@ license alternatives that you have not elected to use and (iii) preserve the
  *  Return values:
  *		0 - success
  */
-int bm_qm_gpm_pools_def_quick_init(int buf_num, struct mv_a40 *qece_base, struct mv_a40 *pl_base);
+int bm_qm_gpm_pools_def_quick_init(int buf_num, struct mv_a40 *p0_base, struct mv_a40 *p1_base);
 
 /**
  *  Initiates of DRAM pools with default values
@@ -176,7 +176,7 @@ license alternatives that you have not elected to use and (iii) preserve the
  *  Return values:
  *		0 - success
  */
-int bm_qm_dram_pools_def_quick_init(struct device *dev, int buf_num, struct mv_a40 *qece_base, struct mv_a40 *pl_base);
+int bm_qm_dram_pools_def_quick_init(struct device *dev, int buf_num, struct mv_a40 *p0_base, struct mv_a40 *p1_base);
 
 /**
  *  Basic initialization of general purpose pools with default values
diff --git a/drivers/net/ethernet/marvell/pp3/platform/mv_pp3.c b/drivers/net/ethernet/marvell/pp3/platform/mv_pp3.c
index a430a8a..4785dd2 100644
--- a/drivers/net/ethernet/marvell/pp3/platform/mv_pp3.c
+++ b/drivers/net/ethernet/marvell/pp3/platform/mv_pp3.c
@@ -919,7 +919,9 @@ static int mv_pp3_shared_probe(struct platform_device *pdev)
 		if (!ppool)
 			return -ENOMEM;
 
-		pr_cont("%d bytes of coherent memory allocated\n", ppool->capacity * sizeof(unsigned int));
+		pr_cont("%d bytes of coherent memory allocated ", ppool->capacity * sizeof(unsigned int));
+		pr_cont("- paddr = 0x%x, vaddr = 0x%p\n", ppool->phys_base, ppool->virt_base);
+
 		mv_pp3_pool_set_id(ppool, pool);
 	}
 
-- 
1.7.9.5

