From d0dd2e83930ac6bc86b9b5fd37d37babd2aea50f Mon Sep 17 00:00:00 2001
From: Yan Markman <ymarkman@marvell.com>
Date: Thu, 11 Aug 2016 18:24:11 +0300
Subject: [PATCH 0400/1345] pp3: internal_debug action-on-error configuration

commit  b5a5491dccfbd0e90c8dbe0451e3f2c5d59d0a98 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

The final action of internal-debug checker should be configurable.

For in-lab debugging we need to STOP net-dev (for further
investigations) or even try to go ahead without special action.
In these cases, the device does not work properly but never
recovered over reboot.

If reboot recovery required, the net-dev should invite the reboot.
The reboot is initiated over panic() calling.

The DEFAULT drvr action depends upon Kernel-panic-configuration:
- if (panic_timeout > 0) => the reboot configured and
    drvr default action is also PANIC
- if (panic_timeout == 0) => no reboot but stall anyway, so
    drvr default action is STOP
The action may be configured over sysfs command
  dev/debug/internal_debug: 0|1|2 = warn|STOP|PANIC

Change-Id: Ief53b7215411d77dcb3b17c48ae958aac6f8f350
Signed-off-by: Yan Markman <ymarkman@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/31901
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../marvell/pp3/net_dev/mv_dev_debug_sysfs.c       |   47 +++++------
 .../net/ethernet/marvell/pp3/net_dev/mv_netdev.c   |   82 +++++++++++++++-----
 .../net/ethernet/marvell/pp3/net_dev/mv_netdev.h   |   11 ++-
 3 files changed, 96 insertions(+), 44 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/net_dev/mv_dev_debug_sysfs.c b/drivers/net/ethernet/marvell/pp3/net_dev/mv_dev_debug_sysfs.c
index f74c28f..d93f3e8 100644
--- a/drivers/net/ethernet/marvell/pp3/net_dev/mv_dev_debug_sysfs.c
+++ b/drivers/net/ethernet/marvell/pp3/net_dev/mv_dev_debug_sysfs.c
@@ -31,39 +31,42 @@
 #include "common/mv_hw_if.h"
 
 
+#define MV_HLP(STR) { o += scnprintf(b + o, PAGE_SIZE - o, STR); }
+
 static ssize_t pp3_dev_debug_help(char *b)
 {
 	int o = 0;
 
 #ifdef CONFIG_MV_PP3_DEBUG_CODE
-	o += scnprintf(b+o, PAGE_SIZE-o, "\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "cat                                     help           - show this help\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "echo [ifname]                         > mac_show       - show MAC addresses for network interface\n");
+MV_HLP("\n");
+MV_HLP("cat                       help           - show this help\n");
+MV_HLP("echo [ifname]           > mac_show       - show MAC addresses for network interface\n");
 #if 0
-	o += scnprintf(b+o, PAGE_SIZE-o, "echo [cpu]                            > txdone_history - show tx done history staistics\n");
+MV_HLP("echo [cpu]              > txdone_history - show tx done history staistics\n");
 #endif
-	o += scnprintf(b+o, PAGE_SIZE-o, "echo [0|1]                            > internal_debug - enable/disable internal debug checkers\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "echo [ifname] [mask]                  > debug          - enable/disable network interface debug messages\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "echo [ifname] [cir] [eir] [cbs] [ebs] > tx_shaper      - set shaping rates and burst sizes for egress emac port\n");
+MV_HLP("echo [0|1|2]            > internal_debug - action on error: warn|stop|panic\n");
+MV_HLP("echo [ifname] [mask]    > debug          - enable/disable network interface debug messages\n");
+MV_HLP("echo [ifname] [cir] [eir] [cbs] [ebs] > tx_shaper\n");
+MV_HLP("                                         - set shaping rates and burst sizes for egress emac port\n");
 #if 0
-	o += scnprintf(b+o, PAGE_SIZE-o, "echo [cpu] [mask]                     > cpu_debug      - enable/disable cpu debug messages\n");
+MV_HLP("echo [cpu] [mask]       > cpu_debug      - enable/disable cpu debug messages\n");
 #ifndef CONFIG_MV_PP3_FPGA
-	o += scnprintf(b+o, PAGE_SIZE-o, "echo [0|1]                            > rx_isr_mode    - set rx ISR mode for all network interfaces. 0-poll, 1-isr\n");
+MV_HLP("echo [0|1]              > rx_isr_mode    - set rx ISR mode for all network interfaces. 0-poll, 1-isr\n");
 #endif /* CONFIG_MV_PP3_FPGA */
 #endif
-	o += scnprintf(b+o, PAGE_SIZE-o, "echo [ifname] [rx] [tx]               > create         - create new virtual network device (no emac connectivity)\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "parameters:\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "      [ifname]    - network interface name e.g. nic0, nic1, etc\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "      [mode]      - 0 for 4 HWQ per SWQ, 1 for 1 HWQ per SWQ\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "      [mask]      - for debug command: b0-rx, b1-tx, b2-isr, b3-poll\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "                  - for cpu_devug command: b0-buff push, b1-buff pop\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "      [rx]        - number of rx virtual queueus\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "      [tx]        - number of tx virtual queueus\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "      [cir]       - committed information rate in [Mbps] units, granularity of [10 Mbps]\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "      [eir]       - excessive information rate in [Mbps] units, granularity of [10 Mbps]\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "      [cbs]       - committed burst size in [KBytes]\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "      [ebs]       - excessive burst size in [KBytes]\n");
+MV_HLP("echo [ifname] [rx] [tx] > create         - create new virtual network device (no emac connectivity)\n");
+MV_HLP("\n");
+MV_HLP("parameters:\n");
+MV_HLP("      [ifname]    - network interface name e.g. nic0, nic1, etc\n");
+MV_HLP("      [mode]      - 0 for 4 HWQ per SWQ, 1 for 1 HWQ per SWQ\n");
+MV_HLP("      [mask]      - for debug command: b0-rx, b1-tx, b2-isr, b3-poll\n");
+MV_HLP("                  - for cpu_devug command: b0-buff push, b1-buff pop\n");
+MV_HLP("      [rx]        - number of rx virtual queueus\n");
+MV_HLP("      [tx]        - number of tx virtual queueus\n");
+MV_HLP("      [cir]       - committed information rate in [Mbps] units, granularity of [10 Mbps]\n");
+MV_HLP("      [eir]       - excessive information rate in [Mbps] units, granularity of [10 Mbps]\n");
+MV_HLP("      [cbs]       - committed burst size in [KBytes]\n");
+MV_HLP("      [ebs]       - excessive burst size in [KBytes]\n");
 #endif
 	return o;
 }
diff --git a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c
index d842ec0..5f76bce 100644
--- a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c
+++ b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c
@@ -101,19 +101,58 @@ license alternatives that you have not elected to use and (iii) preserve the
 
 /* debug parameters */
 #ifdef PP3_INTERNAL_DEBUG
-static bool internal_debug_en;
-static bool debug_stop_rx;
+static enum mv_dbg_action internal_debug_action;
+static bool debug_stop_rx_tx;
 
-bool mv_pp3_is_internal_debug(void)
+const char *mv_pp3_get_internal_debug_str(void)
 {
-	return internal_debug_en;
+	switch (internal_debug_action) {
+	case MV_DBG_ACTION_WARNING:
+		return "print only";
+	case MV_DBG_ACTION_STOP:
+		return "STOP on error";
+	case MV_DBG_ACTION_PANIC:
+		return "PANIC on error";
+	default:
+		return "UNKNOWN"; /* never here, see "_set()" */
+	}
+	return NULL; /* never here */
 }
 
-int mv_pp3_ctrl_internal_debug_set(int en)
+int mv_pp3_ctrl_internal_debug_set(int action)
 {
-	internal_debug_en = (en != 0);
+	if (action >= MV_DBG_ACTION_MAX) /* ~invalid */
+		return -1;
+	internal_debug_action = action;
 	return 0;
 }
+
+static int mv_pp3_internal_debug_action_on_err(struct net_device *dev)
+{
+	/* Error detail is already printed */
+	if (internal_debug_action == MV_DBG_ACTION_STOP) {
+		debug_stop_rx_tx = true;
+		pr_err("%s: unrecoverable problem. Net-device <%s> STOPPED!!!\n",
+		       dev->name, dev->name);
+	} else if (internal_debug_action == MV_DBG_ACTION_PANIC) {
+		debug_stop_rx_tx = true;
+		/* PANIC rather then Oops/BUG */
+		panic("%s: unrecoverable problem. PANIC\n", dev->name);
+	} else {
+		/* Try continue ordinary */
+		/* Warn-info already printed by calling-context. */
+		return 0;
+	}
+	return -1;
+}
+
+static void mv_pp3_internal_debug_init(void)
+{
+	/* Default-action PANIC if Kernel-panic goes to reboot with _timeout
+	 * Otherwize no reboot but stall, so we could also use STOP
+	 */
+	internal_debug_action = (panic_timeout) ? MV_DBG_ACTION_PANIC : MV_DBG_ACTION_STOP;
+}
 #endif /* PP3_INTERNAL_DEBUG */
 
 /* global data */
@@ -378,7 +417,7 @@ void mv_pp3_config_show(void)
 #endif
 
 #ifdef PP3_INTERNAL_DEBUG
-	pr_info("  o Internal DEBUG mode (%s)\n",  mv_pp3_is_internal_debug() ? "Enabled" : "Disabled");
+	pr_info("  o Internal DEBUG mode (%s)\n",  mv_pp3_get_internal_debug_str());
 #endif
 
 #ifdef CONFIG_MV_PP3_SKB_RECYCLE
@@ -1183,7 +1222,7 @@ int mv_pp3_poll(struct napi_struct *napi, int budget)
 	/* start from high priority queue */
 	for (i = cpu_vp->port.cpu.napi_q_num - 1; i >= 0; i--) {
 #ifdef PP3_INTERNAL_DEBUG
-		if (debug_stop_rx) {
+		if (debug_stop_rx_tx) {
 			napi_complete(napi);
 			STAT_INFO(cpu_vp->port.cpu.stats.napi_complete++);
 			return rx_pkt_done;
@@ -1257,9 +1296,9 @@ static inline int pp3_pool_bufs_free_internal(int buf_num, struct net_device *de
 			pr_err("%s: hmac (%d:%d): timeout error on pool #%d, cpu #%d\n",
 				__func__, frame, queue, ppool->pool, smp_processor_id());
 			pr_err("\twaiting for %d buffers, received %d\n", buffs_req, occ);
-#ifdef PP3_INTERNAL_DEBUG
-			debug_stop_rx = true;
-#endif
+			/* Return error, so CALLER decides about mv_pp3_internal_debug_action_on_err();
+			 * permits also to see where from it has been called
+			*/
 			return -1;
 		}
 
@@ -1341,7 +1380,7 @@ static inline int mv_pp3_tx_done(struct net_device *dev, int tx_todo)
 		if (total_free < 0) {
 			pr_err("%s: Invalid state, try to release %d. Total_free (%d) cannot be < 0\n",
 				__func__, tx_todo, total_free);
-			debug_stop_rx = true;
+			mv_pp3_internal_debug_action_on_err(dev);
 			return -1;
 		}
 	}
@@ -1616,9 +1655,9 @@ static int mv_pp3_rx(struct net_device *dev, struct pp3_vport *cpu_vp, struct pp
 
 #ifdef PP3_INTERNAL_DEBUG
 	if (occ_dg > rx_swq->cur_size * MV_PP3_CFH_DG_MAX_NUM) {
-		debug_stop_rx = true;
 		pr_err("%s: bad occupied datagram counter %d received on frame %d, queue %d\n",
 				__func__, occ_dg, rx_swq->frame_num, rx_swq->swq);
+		mv_pp3_internal_debug_action_on_err(dev);
 		return 0;
 	}
 #endif
@@ -1644,7 +1683,7 @@ static int mv_pp3_rx(struct net_device *dev, struct pp3_vport *cpu_vp, struct pp
 		cfh = (struct mv_cfh_common *)mv_pp3_hmac_rxq_next_cfh(rx_swq->frame_num, rx_swq->swq, &num_dg);
 #ifdef PP3_INTERNAL_DEBUG
 		if (num_dg == 0) {
-			debug_stop_rx = true;
+			mv_pp3_internal_debug_action_on_err(dev);
 			break;
 		}
 
@@ -1654,9 +1693,7 @@ static int mv_pp3_rx(struct net_device *dev, struct pp3_vport *cpu_vp, struct pp
 			/* in next interrupt will processed full CFH */
 			pr_info("%s: only part of CFH is moved to DRAM (num_dg = %d, occ_dg = %d)\n",
 				dev->name, num_dg, occ_dg);
-
-			debug_stop_rx = true;
-
+			mv_pp3_internal_debug_action_on_err(dev);
 			break;
 		}
 #endif
@@ -1683,7 +1720,7 @@ static int mv_pp3_rx(struct net_device *dev, struct pp3_vport *cpu_vp, struct pp
 			/* BUG situation: can't handle bad packet,
 			 *  queue/buffer/skb are never released
 			 */
-			debug_stop_rx = true;
+			mv_pp3_internal_debug_action_on_err(dev);
 			break;
 		}
 #endif
@@ -1906,6 +1943,7 @@ int mv_pp3_pool_bufs_free(int buf_num, struct net_device *dev, struct pp3_pool *
 #ifdef CONFIG_MV_PP3_DEBUG_CODE
 			pr_err("%s: Error, function failed. Try to release %d buffers\n",
 				__func__, buf_num);
+			mv_pp3_internal_debug_action_on_err(dev);
 #endif
 			MV_LIGHT_UNLOCK(flags);
 			return -1;
@@ -2875,11 +2913,15 @@ int mv_pp3_dev_open(struct net_device *dev)
 
 	/* link interrupts and emac are closed */
 
-	if (!mv_pp3_shared_initialized(pp3_priv))
+	if (!mv_pp3_shared_initialized(pp3_priv)) {
 		if (mv_pp3_shared_start(pp3_priv)) {
 			pr_err("%s: mv_pp3_shared_start fail\n", __func__);
 			return -1;
 		}
+#ifdef PP3_INTERNAL_DEBUG
+		mv_pp3_internal_debug_init();
+#endif
+	}
 
 	if (!(dev_priv->flags & MV_PP3_F_INIT)) {
 		if (mv_pp3_dev_priv_alloc(dev_priv))
@@ -3179,7 +3221,7 @@ static int mv_pp3_tx(struct sk_buff *skb, struct net_device *dev)
 #endif
 
 #ifdef PP3_INTERNAL_DEBUG
-	if (debug_stop_rx)
+	if (debug_stop_rx_tx)
 		return NETDEV_TX_OK;
 #endif
 	MV_LIGHT_LOCK(flags);
diff --git a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h
index 626c1e0..cfa03f3 100644
--- a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h
+++ b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h
@@ -47,8 +47,15 @@ license alternatives that you have not elected to use and (iii) preserve the
 #define PP3_INTERNAL_DEBUG
 
 #ifdef PP3_INTERNAL_DEBUG
-int mv_pp3_ctrl_internal_debug_set(int en);
-bool mv_pp3_is_internal_debug(void);
+enum mv_dbg_action {
+	MV_DBG_ACTION_WARNING = 0,
+	MV_DBG_ACTION_STOP,
+	MV_DBG_ACTION_PANIC,
+	MV_DBG_ACTION_MAX
+};
+
+int mv_pp3_ctrl_internal_debug_set(int action);
+const char *mv_pp3_get_internal_debug_str(void);
 #endif
 
 #define TOS_TO_DSCP(tos)	((tos) >> 2)
-- 
1.7.9.5

