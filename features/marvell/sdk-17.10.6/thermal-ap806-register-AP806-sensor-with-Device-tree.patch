From 92812187194187890e95c0eb3c8f9b6d55d1d74c Mon Sep 17 00:00:00 2001
From: Omri Itach <omrii@marvell.com>
Date: Sun, 30 Apr 2017 18:20:56 +0300
Subject: [PATCH 0992/1345] thermal: ap806: register AP806 sensor with Device
 tree thermal zone

commit  5ba17ee9e2b4800d38347382952a16b423c850dc from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

This patch registers AP806 thermal sensor with Device Tree Thermal zones.
This is done to allow binding the thermal sensor to the CPUfreq framework
as a cooling device (reduce CPU frequency on high temperatures).

Additionally, added preliminary thermal-zones node in ap806 dtsi,
with association to AP806 thermal sensor and polling-delay definitions.

Change-Id: Id87d6b59baef6db75314e7742e962115b2009682
Signed-off-by: Omri Itach <omrii@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/39035
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm64/boot/dts/marvell/armada-ap806.dtsi |   11 +++++++++-
 drivers/thermal/armada_thermal.c              |   27 ++++++++++++++++++-------
 2 files changed, 30 insertions(+), 8 deletions(-)

diff --git a/arch/arm64/boot/dts/marvell/armada-ap806.dtsi b/arch/arm64/boot/dts/marvell/armada-ap806.dtsi
index 1631884..de3c83d 100644
--- a/arch/arm64/boot/dts/marvell/armada-ap806.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-ap806.dtsi
@@ -113,6 +113,14 @@
 		};
 	};
 
+	thermal-zones {
+		cpu_thermal: cpu {
+			polling-delay-passive = <100>;
+			polling-delay = <1000>;
+			thermal-sensors = <&thermal>;
+		};
+	};
+
 	ap806 {
 		#address-cells = <2>;
 		#size-cells = <2>;
@@ -329,7 +337,7 @@
 				status = "okay";
 			};
 
-			thermal@6f808c {
+			thermal: thermal@6f808c {
 				compatible = "marvell,armada-ap806-thermal";
 				reg = <0x6f808C 0x4>,
 				      <0x6f8084 0x4>,
@@ -338,6 +346,7 @@
 				threshold = <100>;
 				hysteresis = <2>;
 				status = "okay";
+				#thermal-sensor-cells = <0>;
 			};
 
 			spi0: spi@510600 {
diff --git a/drivers/thermal/armada_thermal.c b/drivers/thermal/armada_thermal.c
index 6d587cd..aefcb52 100644
--- a/drivers/thermal/armada_thermal.c
+++ b/drivers/thermal/armada_thermal.c
@@ -108,7 +108,11 @@ struct armada_thermal_data {
 	/* DFX interrupt support (optional) */
 	bool dfx_interrupt;
 
+	/* for handling non-DT based thermal zones */
 	struct thermal_zone_device_ops *ops;
+
+	/* for handling DT based thermal zones */
+	struct thermal_zone_of_device_ops *ops_of;
 };
 
 inline unsigned int tsen_thresh_val_calc(unsigned int celsius_temp,
@@ -455,15 +459,15 @@ static int armada_get_temp(struct thermal_zone_device *thermal,
 	return 0;
 }
 
-static int armada_ap806_get_temp(struct thermal_zone_device *thermal, int *temp)
+static int armada_ap806_get_temp(void *thermal_priv, int *temp)
 {
-	struct armada_thermal_priv *priv = thermal->devdata;
+	struct armada_thermal_priv *priv = (struct armada_thermal_priv *)thermal_priv;
 	unsigned long reg;
 	unsigned long m, b, div;
 
 	/* Valid check */
 	if (priv->data->is_valid && !priv->data->is_valid(priv)) {
-		dev_err(&thermal->device,
+		dev_err(&(priv->pdev->dev),
 			"Temperature sensor reading not valid\n");
 		return -EIO;
 	}
@@ -517,7 +521,7 @@ static int armada_cp110_get_temp(struct thermal_zone_device *thermal, int *temp)
 	.get_temp = armada_get_temp,
 };
 
-static struct thermal_zone_device_ops armada_ap806_ops = {
+static struct thermal_zone_of_device_ops armada_ap806_ops = {
 	.get_temp = armada_ap806_get_temp,
 };
 
@@ -662,7 +666,7 @@ irqreturn_t cp110_temp_irq_handler(int irq, void *data)
 	.coef_div = 1,
 	.inverted = true,
 	.dfx_interrupt = 1,
-	.ops = &armada_ap806_ops,
+	.ops_of = &armada_ap806_ops,
 };
 
 static const struct armada_thermal_data armada_cp110_data = {
@@ -751,8 +755,17 @@ static int armada_thermal_probe(struct platform_device *pdev)
 	/* Init sensor */
 	priv->data->init_sensor(pdev, priv);
 
-	thermal = thermal_zone_device_register("armada_thermal", 0, 0,
-					       priv, priv->data->ops, NULL, 0, 0);
+	/*
+	 * AP806 thermal sensor registers as a sensor of a Device Tree thermal zone,
+	 * so it's binded differently from rest of thermal sensors supported by this driver.
+	 */
+	if (of_device_is_compatible(pdev->dev.of_node,
+				    "marvell,armada-ap806-thermal"))
+		thermal = thermal_zone_of_sensor_register(&pdev->dev, 0, priv, &armada_ap806_ops);
+	else
+		thermal = thermal_zone_device_register("armada_thermal", 0, 0,
+						       priv, priv->data->ops, NULL, 0, 0);
+
 	if (IS_ERR(thermal)) {
 		dev_err(&pdev->dev,
 			"Failed to register thermal zone device\n");
-- 
1.7.9.5

