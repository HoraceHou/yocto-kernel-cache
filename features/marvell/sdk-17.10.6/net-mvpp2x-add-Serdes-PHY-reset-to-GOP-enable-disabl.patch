From 13dd6dafc4d80e73c4d63229c10e86083c225a09 Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Tue, 7 Feb 2017 18:18:44 +0200
Subject: [PATCH 0817/1345] net: mvpp2x: add Serdes PHY reset to GOP
 enable/disable procedure

commit  9cb2f305687d3de1be155f7278c9e96437bbe77a from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- Serdes PHY reset required during GOP enable/disable procedure

Change-Id: I3988f901d9358fa0dc3954855094790e284fe986
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/37127
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c |    8 ++++++--
 drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h |    4 ++--
 .../net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c  |    4 ++--
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |   12 ++++++------
 4 files changed, 16 insertions(+), 12 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
index 94488a2..c7bfdf2 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.c
@@ -22,6 +22,8 @@
 #include <linux/platform_device.h>
 #include <linux/inetdevice.h>
 #include <uapi/linux/ppp_defs.h>
+#include <dt-bindings/phy/phy-comphy-mvebu.h>
+#include <linux/phy/phy.h>
 
 #include <net/ip.h>
 #include <net/ipv6.h>
@@ -1059,7 +1061,7 @@ int mv_gop110_port_reset(struct gop_hw *gop, struct mv_mac_data *mac)
 }
 
 /*-------------------------------------------------------------------*/
-void mv_gop110_port_enable(struct gop_hw *gop, struct mv_mac_data *mac)
+void mv_gop110_port_enable(struct gop_hw *gop, struct mv_mac_data *mac, struct phy *comphy)
 {
 	int port_num = mac->gop_index;
 
@@ -1076,6 +1078,7 @@ void mv_gop110_port_enable(struct gop_hw *gop, struct mv_mac_data *mac)
 	case PHY_INTERFACE_MODE_KR:
 	case PHY_INTERFACE_MODE_SFI:
 	case PHY_INTERFACE_MODE_XFI:
+		phy_send_command(comphy, COMPHY_COMMAND_DIGITAL_PWR_ON);
 		mv_gop110_mpcs_clock_reset(gop,  UNRESET);
 		mv_gop110_xlg_mac_reset(gop, port_num, UNRESET);
 		mv_gop110_xlg_mac_port_enable(gop, port_num);
@@ -1086,7 +1089,7 @@ void mv_gop110_port_enable(struct gop_hw *gop, struct mv_mac_data *mac)
 	}
 }
 
-void mv_gop110_port_disable(struct gop_hw *gop, struct mv_mac_data *mac)
+void mv_gop110_port_disable(struct gop_hw *gop, struct mv_mac_data *mac, struct phy *comphy)
 {
 	int port_num = mac->gop_index;
 
@@ -1106,6 +1109,7 @@ void mv_gop110_port_disable(struct gop_hw *gop, struct mv_mac_data *mac)
 		mv_gop110_xlg_mac_port_disable(gop, port_num);
 		mv_gop110_xlg_mac_reset(gop, port_num, RESET);
 		mv_gop110_mpcs_clock_reset(gop,  RESET);
+		phy_send_command(comphy, COMPHY_COMMAND_DIGITAL_PWR_OFF);
 	break;
 	default:
 		pr_err("%s: Wrong port mode (%d)", __func__, mac->phy_mode);
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
index 985cbb2..4cceb13 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_gop110_hw.h
@@ -134,8 +134,8 @@ static inline void mv_gop_gen_write(void __iomem *base, u32 offset, u32 data)
 /* GOP port configuration functions */
 int mv_gop110_port_init(struct gop_hw *gop, struct mv_mac_data *mac);
 int mv_gop110_port_reset(struct gop_hw *gop, struct mv_mac_data *mac);
-void mv_gop110_port_enable(struct gop_hw *gop, struct mv_mac_data *mac);
-void mv_gop110_port_disable(struct gop_hw *gop, struct mv_mac_data *mac);
+void mv_gop110_port_enable(struct gop_hw *gop, struct mv_mac_data *mac, struct phy *comphy);
+void mv_gop110_port_disable(struct gop_hw *gop, struct mv_mac_data *mac, struct phy *comphy);
 void mv_gop110_port_periodic_xon_set(struct gop_hw *gop,
 				     struct mv_mac_data *mac,
 				     int enable);
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
index 71c0fcc..a29a6a9 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_ethtool.c
@@ -616,7 +616,7 @@ static int mv_pp2x_ethtool_set_settings(struct net_device *dev,
 			if (mac->flags & MV_EMAC_F_PORT_UP) {
 				netif_carrier_off(port->dev);
 				mv_gop110_port_events_mask(gop, mac);
-				mv_gop110_port_disable(gop, mac);
+				mv_gop110_port_disable(gop, mac, port->comphy);
 				phy_power_off(port->comphy);
 			}
 
@@ -634,7 +634,7 @@ static int mv_pp2x_ethtool_set_settings(struct net_device *dev,
 
 		if (mac->flags & MV_EMAC_F_PORT_UP) {
 			mv_gop110_port_events_unmask(gop, mac);
-			mv_gop110_port_enable(gop, mac);
+			mv_gop110_port_enable(gop, mac, port->comphy);
 			phy_power_on(port->comphy);
 		}
 	}
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index b04d9b6..fc2db18 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -1733,7 +1733,7 @@ static void mv_pp22_link_event(struct net_device *dev)
 			mv_gop110_port_events_mask(&port->priv->hw.gop,
 						   &port->mac_data);
 			mv_gop110_port_enable(&port->priv->hw.gop,
-					      &port->mac_data);
+					      &port->mac_data, port->comphy);
 			mv_pp2x_egress_enable(port);
 			mv_pp2x_ingress_enable(port);
 			netif_carrier_on(dev);
@@ -1748,7 +1748,7 @@ static void mv_pp22_link_event(struct net_device *dev)
 			mv_gop110_port_events_mask(&port->priv->hw.gop,
 						   &port->mac_data);
 			mv_gop110_port_disable(&port->priv->hw.gop,
-					       &port->mac_data);
+					       &port->mac_data, port->comphy);
 			netif_carrier_off(dev);
 			netif_tx_stop_all_queues(dev);
 			port->mac_data.flags &= ~MV_EMAC_F_LINK_UP;
@@ -3299,7 +3299,7 @@ void mv_pp2x_start_dev(struct mv_pp2x_port *port)
 	mv_pp2x_port_interrupts_enable(port);
 
 	if (port->comphy) {
-		mv_gop110_port_disable(gop, mac);
+		mv_gop110_port_disable(gop, mac, port->comphy);
 		phy_power_on(port->comphy);
 		}
 
@@ -3307,7 +3307,7 @@ void mv_pp2x_start_dev(struct mv_pp2x_port *port)
 		mv_pp21_port_enable(port);
 	} else {
 		mv_gop110_port_events_mask(gop, mac);
-		mv_gop110_port_enable(gop, mac);
+		mv_gop110_port_enable(gop, mac, port->comphy);
 	}
 
 	if (port->mac_data.phy_dev) {
@@ -3358,7 +3358,7 @@ void mv_pp2x_stop_dev(struct mv_pp2x_port *port)
 		mv_pp21_port_disable(port);
 	} else {
 		mv_gop110_port_events_mask(gop, mac);
-		mv_gop110_port_disable(gop, mac);
+		mv_gop110_port_disable(gop, mac, port->comphy);
 		port->mac_data.flags &= ~MV_EMAC_F_LINK_UP;
 		port->mac_data.flags &= ~MV_EMAC_F_PORT_UP;
 	}
@@ -4383,7 +4383,7 @@ static int mv_pp2x_port_init(struct mv_pp2x_port *port)
 	if (port->priv->pp2_version == PPV21)
 		mv_pp21_port_disable(port);
 	else
-		mv_gop110_port_disable(gop, mac);
+		mv_gop110_port_disable(gop, mac, port->comphy);
 
 	/* Allocate queues */
 	port->txqs = devm_kcalloc(dev, port->num_tx_queues, sizeof(*port->txqs),
-- 
1.7.9.5

