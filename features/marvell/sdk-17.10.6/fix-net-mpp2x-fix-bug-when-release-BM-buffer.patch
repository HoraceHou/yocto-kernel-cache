From 19738eac6f8e5ecb9c04f129f13bc89807ebf28b Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Wed, 29 Jun 2016 14:41:43 +0300
Subject: [PATCH 0311/1345] fix: net: mpp2x: fix bug when release BM buffer

commit  9cf5f7de89cec6045b5882e8f4dca92bdbeb3ffd from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- change BM buffer release condition

Change-Id: Ifd1cb25d44a2ef994132a353688aee69f1d395fb
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/30845
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yuval Caduri <cyuval@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h      |    4 ++--
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h   |    8 ++++---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c |   23 ++++++++------------
 3 files changed, 16 insertions(+), 19 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
index 2382f82..ad2fc21 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
@@ -717,13 +717,13 @@ struct mv_pp2x_pool_attributes {
 extern struct mv_pp2x_pool_attributes mv_pp2x_pools[];
 
 void mv_pp2x_bm_bufs_free(struct mv_pp2x *priv, struct mv_pp2x_bm_pool *bm_pool,
-			  int buf_num, bool is_skb);
+			  int buf_num);
 int mv_pp2x_bm_bufs_add(struct mv_pp2x_port *port,
 			struct mv_pp2x_bm_pool *bm_pool, int buf_num);
 int mv_pp2x_bm_pool_add(struct device *dev, struct mv_pp2x *priv,
 			u32 *pool_num, u32 pkt_size);
 int mv_pp2x_bm_pool_destroy(struct device *dev, struct mv_pp2x *priv,
-			   struct mv_pp2x_bm_pool *bm_pool, bool is_skb);
+			    struct mv_pp2x_bm_pool *bm_pool);
 int mv_pp2x_swf_bm_pool_assign(struct mv_pp2x_port *port, u32 rxq,
 			       u32 long_id, u32 short_id);
 int mv_pp2x_open(struct net_device *dev);
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
index e87a5ae..023d517 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
@@ -244,8 +244,7 @@ static inline struct mv_pp2x_tx_queue *mv_pp2x_get_tx_queue(
 	return port->txqs[tx_queue];
 }
 
-static inline struct sk_buff *mv_pp2x_bm_virt_addr_get(struct mv_pp2x_hw *hw,
-							      u32 pool)
+static inline u8 *mv_pp2x_bm_virt_addr_get(struct mv_pp2x_hw *hw, u32 pool)
 {
 	uintptr_t val = 0;
 
@@ -259,7 +258,10 @@ static inline struct sk_buff *mv_pp2x_bm_virt_addr_get(struct mv_pp2x_hw *hw,
 	val <<= (32 - MVPP22_BM_VIRT_HIGH_ALLOC_OFFSET);
 #endif
 	val |= mv_pp2x_read(hw, MVPP2_BM_VIRT_ALLOC_REG);
-	return((struct sk_buff *)val);
+	/* TODO: Remove it when 40-bit supported */
+	val &= 0xffffffff;
+
+	return((u8 *)val);
 }
 
 static inline void mv_pp2x_bm_hw_pool_create(struct mv_pp2x_hw *hw,
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index dfcd039..06609b0 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -352,7 +352,7 @@ static int mv_pp2x_bm_pool_create(struct device *dev,
 }
 
 void mv_pp2x_bm_bufs_free(struct mv_pp2x *priv, struct mv_pp2x_bm_pool *bm_pool,
-				int buf_num, bool is_skb)
+			  int buf_num)
 {
 	int i;
 
@@ -363,21 +363,17 @@ void mv_pp2x_bm_bufs_free(struct mv_pp2x *priv, struct mv_pp2x_bm_pool *bm_pool,
 
 	}
 	for (i = 0; i < buf_num; i++) {
-		struct sk_buff *vaddr;
+		u8 *vaddr;
 
 		/* Get buffer virtual address (indirect access) */
 		vaddr = mv_pp2x_bm_virt_addr_get(&priv->hw, bm_pool->id);
 		if (!vaddr)
 			break;
-		if (is_skb) {
 #ifdef CONFIG_64BIT
-			dev_kfree_skb_any((struct sk_buff *)
-				(priv->pp2xdata->skb_base_addr |
-				(uintptr_t)vaddr));
+		mv_pp2x_frag_free(bm_pool, (u8 *)(bm_pool->data_high | (uintptr_t)vaddr));
 #else
-			dev_kfree_skb_any(vaddr);
+		mv_pp2x_frag_free(bm_pool, vaddr);
 #endif
-		}
 	}
 
 	/* Update BM driver with number of buffers removed from pool */
@@ -386,12 +382,12 @@ void mv_pp2x_bm_bufs_free(struct mv_pp2x *priv, struct mv_pp2x_bm_pool *bm_pool,
 
 /* Cleanup pool */
 int mv_pp2x_bm_pool_destroy(struct device *dev, struct mv_pp2x *priv,
-			   struct mv_pp2x_bm_pool *bm_pool, bool is_skb)
+			    struct mv_pp2x_bm_pool *bm_pool)
 {
 	u32 val;
 	int size_bytes;
 
-	mv_pp2x_bm_bufs_free(priv, bm_pool, bm_pool->buf_num, is_skb);
+	mv_pp2x_bm_bufs_free(priv, bm_pool, bm_pool->buf_num);
 	if (bm_pool->buf_num) {
 		WARN(1, "cannot free all buffers in pool %d, buf_num left %d\n",
 		     bm_pool->id,
@@ -485,8 +481,7 @@ static int mv_pp2x_bm_pools_init(struct platform_device *pdev,
 err_unroll_pools:
 	dev_err(&pdev->dev, "failed to create BM pool %d, size %d\n", i, size);
 	for (i = i - 1; i >= 0; i--)
-		mv_pp2x_bm_pool_destroy(&pdev->dev, priv, &priv->bm_pools[i],
-					true);
+		mv_pp2x_bm_pool_destroy(&pdev->dev, priv, &priv->bm_pools[i]);
 		return err;
 }
 
@@ -606,7 +601,7 @@ static struct mv_pp2x_bm_pool *mv_pp2x_bm_pool_use_internal(
 			return NULL;
 		}
 	} else if (add_num < 0) {
-		mv_pp2x_bm_bufs_free(port->priv, pool, -add_num, true);
+		mv_pp2x_bm_bufs_free(port->priv, pool, -add_num);
 	}
 
 	return pool;
@@ -4680,7 +4675,7 @@ static int mv_pp2x_remove(struct platform_device *pdev)
 	for (i = 0; i < priv->num_pools; i++) {
 		struct mv_pp2x_bm_pool *bm_pool = &priv->bm_pools[i];
 
-		mv_pp2x_bm_pool_destroy(&pdev->dev, priv, bm_pool, true);
+		mv_pp2x_bm_pool_destroy(&pdev->dev, priv, bm_pool);
 	}
 
 	for_each_online_cpu(i) {
-- 
1.7.9.5

