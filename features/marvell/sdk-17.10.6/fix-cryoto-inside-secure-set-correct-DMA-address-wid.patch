From 7b331fc16eed333dd69d1e0c14ef208af9437e8c Mon Sep 17 00:00:00 2001
From: Igal Liberman <igall@marvell.com>
Date: Thu, 27 Apr 2017 16:02:46 +0300
Subject: [PATCH 0978/1345] fix: cryoto: inside-secure: set correct DMA
 address width

commit  7cb5c78c652dba8d9c27ad4f850a46bdd9c15f5c from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

Currently, there's a data corruption when working with A80x0
and DRAM size is bigger than 4GB. The data corruption happens
because the DMA bus width isn't configured properly.

The patch fixes the issue by implementing the following:
- Add new property to the device-tree: "dma-bus-width" to pass
  the correct DMA bus width to the driver.
- Call dma_set_mask_and_coherent() function: This function must
  be called before any DMA API calls, both to confirm DMA really
  is going to work, and also to describe the full inherent
  addressing capability which passed to the driver from the
  device-tree.

Calling dma_set_mask_and_coherent() with the correct bus width
solves the data corruption occurs when using EIP197 engine with DRAM
bigger than 4GB.

Change-Id: I6b0948f8904f4198d40d19d116e945d11230490d
Signed-off-by: Igal Liberman <igall@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/38991
Reviewed-by: Omri Itach <omrii@marvell.com>
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../bindings/crypto/inside_secure_eip.txt          |    2 ++
 arch/arm64/boot/dts/marvell/armada-cp110-1.dtsi    |    1 +
 arch/arm64/boot/dts/marvell/armada-cp110.dtsi      |    1 +
 drivers/crypto/inside-secure/safexcel.c            |   13 +++++++++++++
 4 files changed, 17 insertions(+)

diff --git a/Documentation/devicetree/bindings/crypto/inside_secure_eip.txt b/Documentation/devicetree/bindings/crypto/inside_secure_eip.txt
index f5a8114..65eb56c 100644
--- a/Documentation/devicetree/bindings/crypto/inside_secure_eip.txt
+++ b/Documentation/devicetree/bindings/crypto/inside_secure_eip.txt
@@ -14,6 +14,7 @@ Required properties:
 - interrupt-names : Names of the interrupts listed in interrupts property.
 - clocks	  : Reference to the crypto engine clocks.
 - dma-coherent	  : Present if dma operations are coherent.
+- dma-bus-width   : DMA address bus width.
 - cell-index	  : Should contain the EIP197 engine ID.
 		    For Example, in Marvell Armada 8040, there are 2 engines (one on each CP).
                     cell-index will be 0 for CP0 and  1 for CP1.
@@ -33,6 +34,7 @@ Examples:
 				  "ring2", "ring3", "eip_out";
 		clocks = <&cpm_syscon0 1 26>;
 		dma-coherent;
+		dma-bus-width = <40>;
 		cell-index = <0>;
 		status = "disabled";
 	};
diff --git a/arch/arm64/boot/dts/marvell/armada-cp110-1.dtsi b/arch/arm64/boot/dts/marvell/armada-cp110-1.dtsi
index 073fbf6..6578f60 100644
--- a/arch/arm64/boot/dts/marvell/armada-cp110-1.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-cp110-1.dtsi
@@ -355,6 +355,7 @@ cps_eip197: eip197@800000 {
 	compatible = "inside-secure,safexcel-eip197";
 	reg = <0x800000 0x200000>;
 	dma-coherent;
+	dma-bus-width = <40>;
 	interrupts = <ICU_GRP_REI 87 IRQ_TYPE_LEVEL_HIGH>,
 		     <ICU_GRP_NSR 88 IRQ_TYPE_LEVEL_HIGH>,
 		     <ICU_GRP_NSR 89 IRQ_TYPE_LEVEL_HIGH>,
diff --git a/arch/arm64/boot/dts/marvell/armada-cp110.dtsi b/arch/arm64/boot/dts/marvell/armada-cp110.dtsi
index 90cb897..b302027 100644
--- a/arch/arm64/boot/dts/marvell/armada-cp110.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-cp110.dtsi
@@ -453,6 +453,7 @@ cpm_eip197: eip197@800000 {
 	compatible = "inside-secure,safexcel-eip197";
 	reg = <0x800000 0x200000>;
 	dma-coherent;
+	dma-bus-width = <40>;
 	interrupts = <ICU_GRP_REI 87 IRQ_TYPE_LEVEL_HIGH>,
 		     <ICU_GRP_NSR 88 IRQ_TYPE_LEVEL_HIGH>,
 		     <ICU_GRP_NSR 89 IRQ_TYPE_LEVEL_HIGH>,
diff --git a/drivers/crypto/inside-secure/safexcel.c b/drivers/crypto/inside-secure/safexcel.c
index 1e549d8..5b45c8b 100644
--- a/drivers/crypto/inside-secure/safexcel.c
+++ b/drivers/crypto/inside-secure/safexcel.c
@@ -1100,6 +1100,7 @@ static int safexcel_probe(struct platform_device *pdev)
 	struct resource *res;
 	struct safexcel_crypto_priv *priv;
 	int i, ret;
+	u32 dma_bus_width;
 
 	priv = devm_kzalloc(dev, sizeof(struct safexcel_crypto_priv),
 			    GFP_KERNEL);
@@ -1137,6 +1138,18 @@ static int safexcel_probe(struct platform_device *pdev)
 			return -EPROBE_DEFER;
 	}
 
+	ret = of_property_read_u32(dev->of_node, "dma-bus-width",
+				   &dma_bus_width);
+	if (ret) {
+		dev_err(dev, "Failed to read dma-bus-width property\n");
+		goto err_clk;
+	}
+
+	ret = dma_set_mask_and_coherent(&pdev->dev,
+					DMA_BIT_MASK(dma_bus_width));
+	if (ret)
+		goto err_clk;
+
 	priv->context_pool = dmam_pool_create("safexcel-context", dev,
 					      sizeof(struct safexcel_context_record),
 					      1, 0);
-- 
1.7.9.5

