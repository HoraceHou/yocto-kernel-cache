From a27fe56d4875371421b401f8992b0d580003b1d6 Mon Sep 17 00:00:00 2001
From: Ofer Heifetz <oferh@marvell.com>
Date: Sun, 29 Oct 2017 09:10:29 +0200
Subject: [PATCH 1268/1345] crypto: inside-secure: remove unused enqueue
 return code

commit  3e1a4d572e0c0cf22cb8305b8bc9916dec8ea8f3 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

When invalidation result is handled, it enqueues the original
request which was the cause for the invalidation, so since
this invalidation result does not require completion, the
enqueue return code will not be used and thus can be dropped.

In any case the request is in the queue regardless to the
enqueue return code.

Change-Id: I2446f49d4aab97303220169bea74cc13f754b75d
Signed-off-by: Ofer Heifetz <oferh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/45613
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Igal Liberman <igall@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/51649
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/crypto/inside-secure/cipher.c |    7 ++-----
 drivers/crypto/inside-secure/hash.c   |    6 +-----
 2 files changed, 3 insertions(+), 10 deletions(-)

diff --git a/drivers/crypto/inside-secure/cipher.c b/drivers/crypto/inside-secure/cipher.c
index d43a1b5..7d9ff4d 100644
--- a/drivers/crypto/inside-secure/cipher.c
+++ b/drivers/crypto/inside-secure/cipher.c
@@ -307,7 +307,7 @@ static int safexcel_handle_inv_result(struct safexcel_crypto_priv *priv,
 	struct ablkcipher_request *req = ablkcipher_request_cast(async);
 	struct safexcel_cipher_ctx *ctx = crypto_tfm_ctx(req->base.tfm);
 	struct safexcel_result_desc *rdesc;
-	int ndesc = 0, enq_ret;
+	int ndesc = 0;
 
 	*ret = 0;
 
@@ -346,12 +346,9 @@ static int safexcel_handle_inv_result(struct safexcel_crypto_priv *priv,
 	ring = ctx->base.ring;
 
 	spin_lock_bh(&priv->ring[ring].queue_lock);
-	enq_ret = ablkcipher_enqueue_request(&priv->ring[ring].queue, req);
+	ablkcipher_enqueue_request(&priv->ring[ring].queue, req);
 	spin_unlock_bh(&priv->ring[ring].queue_lock);
 
-	if (enq_ret != -EINPROGRESS)
-		*ret = enq_ret;
-
 	queue_work(priv->ring[ring].workqueue,
 		   &priv->ring[ring].work_data.work);
 
diff --git a/drivers/crypto/inside-secure/hash.c b/drivers/crypto/inside-secure/hash.c
index b5bafa0..7fa00ef 100644
--- a/drivers/crypto/inside-secure/hash.c
+++ b/drivers/crypto/inside-secure/hash.c
@@ -337,7 +337,6 @@ static int safexcel_handle_inv_result(struct safexcel_crypto_priv *priv,
 	struct ahash_request *areq = ahash_request_cast(async);
 	struct crypto_ahash *ahash = crypto_ahash_reqtfm(areq);
 	struct safexcel_ahash_ctx *ctx = crypto_ahash_ctx(ahash);
-	int enq_ret;
 
 	*ret = 0;
 
@@ -370,12 +369,9 @@ static int safexcel_handle_inv_result(struct safexcel_crypto_priv *priv,
 	ring = ctx->base.ring;
 
 	spin_lock_bh(&priv->ring[ring].queue_lock);
-	enq_ret = ahash_enqueue_request(&priv->ring[ring].queue, areq);
+	ahash_enqueue_request(&priv->ring[ring].queue, areq);
 	spin_unlock_bh(&priv->ring[ring].queue_lock);
 
-	if (enq_ret != -EINPROGRESS)
-		*ret = enq_ret;
-
 	queue_work(priv->ring[ring].workqueue,
 		   &priv->ring[ring].work_data.work);
 
-- 
1.7.9.5

