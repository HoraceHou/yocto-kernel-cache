From 213e650ee9191db0aa0a082c34fcbd90167da257 Mon Sep 17 00:00:00 2001
From: Omri Itach <omrii@marvell.com>
Date: Thu, 4 May 2017 13:49:13 +0300
Subject: [PATCH 0993/1345] cpu_thermal: dts: ap806: set CPUfreq as cooling
 device to avoid critical temperature

commit  21c5218e26c37a08a0ee256d0e0bd46617864c9c from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

- define 3 Thermal-zone trip points at 90, 95, and 102 degrees
  (hysterisis = 2 degrees)
- define cooling-maps for thermal-zones, with CPUfreq for both CPU clusters
  as passive cooling device.

Thermal-zone trips and cooling devices definition:
1. 90 degrees : reduce temperature polling delay
2. 95 degrees : cut CPUfreq at half (use CPUfreq entry #1)
3. 102 degrees: set CPUfreq at 100Mhz

Change-Id: I31c907a611c97fa719eb5f98f8f7575276ebec5f
Signed-off-by: Omri Itach <omrii@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/39153
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm64/boot/dts/marvell/armada-ap806-dual.dtsi |   19 +++++++++++++
 arch/arm64/boot/dts/marvell/armada-ap806-quad.dtsi |   28 ++++++++++++++++++++
 arch/arm64/boot/dts/marvell/armada-ap806.dtsi      |   22 +++++++++++++++
 3 files changed, 69 insertions(+)

diff --git a/arch/arm64/boot/dts/marvell/armada-ap806-dual.dtsi b/arch/arm64/boot/dts/marvell/armada-ap806-dual.dtsi
index 37624f3..b7694b7 100644
--- a/arch/arm64/boot/dts/marvell/armada-ap806-dual.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-ap806-dual.dtsi
@@ -60,6 +60,7 @@
 			reg = <0x000>;
 			clocks = <&ap806_clock 0>;
 			operating-points-v2 = <&cluster0_opp>;
+			#cooling-cells = <2>; /* min followed by max */
 			enable-method = "psci";
 			cpu-idle-states;
 		};
@@ -73,4 +74,22 @@
 			cpu-idle-states;
 		};
 	};
+
+	thermal-zones {
+		cpu_thermal: cpu {
+			cooling-maps {
+				/* at hot alert, cut CPUfreq in half (CPUfreq OPP point #1) */
+				hot_cluster0 {
+					trip = <&cpu_hot>;
+					cooling-device = <&cpu0 1 1>;
+				};
+				/* at hot_critical alert, set CPUfreq at 100Mhz (last CPUfreq OPP point#3) */
+				hot_critical_cluster0 {
+					trip = <&cpu_hot_critical>;
+					cooling-device = <&cpu0 3 3>;
+				};
+			};
+
+		};
+	};
 };
diff --git a/arch/arm64/boot/dts/marvell/armada-ap806-quad.dtsi b/arch/arm64/boot/dts/marvell/armada-ap806-quad.dtsi
index ed2822e..c18cf3b 100644
--- a/arch/arm64/boot/dts/marvell/armada-ap806-quad.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-ap806-quad.dtsi
@@ -60,6 +60,7 @@
 			reg = <0x000>;
 			clocks = <&ap806_clock 0>;
 			operating-points-v2 = <&cluster0_opp>;
+			#cooling-cells = <2>; /* min followed by max */
 			enable-method = "psci";
 			cpu-idle-states;
 		};
@@ -78,6 +79,7 @@
 			reg = <0x100>;
 			clocks = <&ap806_clock 1>;
 			operating-points-v2 = <&cluster1_opp>;
+			#cooling-cells = <2>; /* min followed by max */
 			enable-method = "psci";
 			cpu-idle-states;
 		};
@@ -92,6 +94,32 @@
 		};
 	};
 
+	thermal-zones {
+		cpu_thermal: cpu {
+			cooling-maps {
+				/* at hot alert, cut CPUfreq in half (CPUfreq OPP point #1) */
+				hot_cluster0 {
+					trip = <&cpu_hot>;
+					cooling-device = <&cpu0 1 1>;
+				};
+				hot_cluster1 {
+					trip = <&cpu_hot>;
+					cooling-device = <&cpu2 1 1>;
+				};
+				/* at hot_critical alert, set CPUfreq at 100Mhz (last CPUfreq OPP point#3) */
+				hot_critical_cluster0 {
+					trip = <&cpu_hot_critical>;
+					cooling-device = <&cpu0 3 3>;
+				};
+				hot_critical_cluster1 {
+					trip = <&cpu_hot_critical>;
+					cooling-device = <&cpu2 3 3>;
+				};
+			};
+		};
+	};
+
+
 	ap806 {
 		config-space@f0000000 {
 			etm0@c40000 {
diff --git a/arch/arm64/boot/dts/marvell/armada-ap806.dtsi b/arch/arm64/boot/dts/marvell/armada-ap806.dtsi
index de3c83d..23f0d65 100644
--- a/arch/arm64/boot/dts/marvell/armada-ap806.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-ap806.dtsi
@@ -118,6 +118,28 @@
 			polling-delay-passive = <100>;
 			polling-delay = <1000>;
 			thermal-sensors = <&thermal>;
+
+			trips {
+				/*
+				 * 1st trip isn't binded to any cooling device, and used only
+				 * to reduce polling delay when reached it's alert temperature
+				 */
+				cpu_almost_warm_alert {
+					temperature = <90000>;
+					hysteresis = <2000>;
+					type = "passive";
+				};
+				cpu_hot: cpu_hot {
+					temperature = <95000>;
+					hysteresis = <2000>;
+					type = "passive";
+				};
+				cpu_hot_critical: cpu_hot_critical {
+					temperature = <102000>;
+					hysteresis = <2000>;
+					type = "passive";
+				};
+			};
 		};
 	};
 
-- 
1.7.9.5

