From 0d36ac24c75ec0d30fbf7e0df3703c59ba7a486a Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Thu, 15 Jun 2017 17:50:59 +0300
Subject: [PATCH 1061/1345] net: mvpp2x: move PHY connect/disconnect to port
 remove/probe procedure

commit  a0c5ce14d1ec6dbe439109869ade2750b82fce25 from
https://github.com/MarvellEmbeddedProcessors/linux-marvell.git

This patch move PHY connect/disconnect to port remove/probe procedure
to improve timing between calling .ndo_open and link become ready.
.ndo_open/.ndo_stop will resume/suspend PHY by phy_start/phy_stop.

Change-Id: I1f23f6d604da0e96d7a2b57ab6af24b561d5692e
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/40530
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2.c |   17 ++++++++---------
 1 file changed, 8 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2.c b/drivers/net/ethernet/marvell/mvpp2.c
index e343d58..6587808 100644
--- a/drivers/net/ethernet/marvell/mvpp2.c
+++ b/drivers/net/ethernet/marvell/mvpp2.c
@@ -6009,10 +6009,6 @@ static int mvpp2_open(struct net_device *dev)
 	/* In default link is down */
 	netif_carrier_off(port->dev);
 
-	err = mvpp2_phy_connect(port);
-	if (err < 0)
-		goto err_free_irq;
-
 	/* Unmask interrupts on all CPUs */
 	on_each_cpu(mvpp2_interrupts_unmask, port, 1);
 
@@ -6020,8 +6016,6 @@ static int mvpp2_open(struct net_device *dev)
 
 	return 0;
 
-err_free_irq:
-	free_irq(port->irq, port);
 err_cleanup_txqs:
 	mvpp2_cleanup_txqs(port);
 err_cleanup_rxqs:
@@ -6036,7 +6030,6 @@ static int mvpp2_stop(struct net_device *dev)
 	int cpu;
 
 	mvpp2_stop_dev(port);
-	mvpp2_phy_disconnect(port);
 
 	/* Mask interrupts on all CPUs */
 	on_each_cpu(mvpp2_interrupts_mask, port, 1);
@@ -6579,6 +6572,13 @@ static int mvpp2_port_probe(struct platform_device *pdev,
 		goto err_free_irq;
 	}
 
+	port->dev = dev;
+	SET_NETDEV_DEV(dev, &pdev->dev);
+
+	err = mvpp2_phy_connect(port);
+	if (err < 0)
+		goto err_free_stats;
+
 	dt_mac_addr = of_get_mac_address(port_node);
 	if (dt_mac_addr && is_valid_ether_addr(dt_mac_addr)) {
 		mac_from = "device tree";
@@ -6597,8 +6597,6 @@ static int mvpp2_port_probe(struct platform_device *pdev,
 
 	port->tx_ring_size = MVPP2_MAX_TXD;
 	port->rx_ring_size = MVPP2_MAX_RXD;
-	port->dev = dev;
-	SET_NETDEV_DEV(dev, &pdev->dev);
 
 	err = mvpp2_port_init(port);
 	if (err < 0) {
@@ -6673,6 +6671,7 @@ static void mvpp2_port_remove(struct mvpp2_port *port)
 {
 	int i;
 
+	mvpp2_phy_disconnect(port);
 	unregister_netdev(port->dev);
 	of_node_put(port->phy_node);
 	free_percpu(port->pcpu);
-- 
1.7.9.5

