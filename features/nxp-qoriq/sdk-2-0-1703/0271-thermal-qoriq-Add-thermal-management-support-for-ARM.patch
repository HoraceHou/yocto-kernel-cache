From b611a762c3e34a7b3e963ff5a4d476b2fc6d44ce Mon Sep 17 00:00:00 2001
From: Jia Hongtao <hongtao.jia@freescale.com>
Date: Tue, 2 Feb 2016 17:48:50 +0800
Subject: [PATCH 271/666] thermal: qoriq: Add thermal management support for
 ARMv8 platform

The endianness of TMU on ARMv8 platforms is vary. To be specific, TMU is
big-endian on LS1043 but little-endian on LS2080. Regmap interface is
used to deal with the endianness issue instead of direct read/write.

Signed-off-by: Jia Hongtao <hongtao.jia@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/thermal/Kconfig         |   1 +
 drivers/thermal/qoriq_thermal.c | 174 ++++++++++++++++++++++++----------------
 2 files changed, 105 insertions(+), 70 deletions(-)

diff --git a/drivers/thermal/Kconfig b/drivers/thermal/Kconfig
index b5b5fac..c232990 100644
--- a/drivers/thermal/Kconfig
+++ b/drivers/thermal/Kconfig
@@ -228,6 +228,7 @@ config QORIQ_THERMAL
 	tristate "QorIQ Thermal Monitoring Unit"
 	depends on THERMAL_OF
 	depends on HAS_IOMEM
+	select REGMAP_MMIO
 	help
 	  Support for Thermal Monitoring Unit (TMU) found on QorIQ platforms.
 	  It supports one critical trip point and one passive trip point. The
diff --git a/drivers/thermal/qoriq_thermal.c b/drivers/thermal/qoriq_thermal.c
index 4362a69..f085692 100644
--- a/drivers/thermal/qoriq_thermal.c
+++ b/drivers/thermal/qoriq_thermal.c
@@ -18,63 +18,46 @@
 #include <linux/io.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
+#include <linux/regmap.h>
 #include <linux/thermal.h>
 
 #include "thermal_core.h"
 
-#define SITES_MAX	16
+#define QORIQ_TMU_TMR		0x0	/* Mode Register */
+#define QORIQ_TMU_TMR_DISABLE	0x0
+#define QORIQ_TMU_TMR_ME	0x80000000
+#define QORIQ_TMU_TMR_ALPF	0x0c000000
+#define QORIQ_TMU_TSR		0x4	/* Status Register */
 
-/*
- * QorIQ TMU Registers
- */
-struct qoriq_tmu_site_regs {
-	u32 tritsr;		/* Immediate Temperature Site Register */
-	u32 tratsr;		/* Average Temperature Site Register */
-	u8 res0[0x8];
-};
+#define QORIQ_TMU_TMTMIR	0x8	/* Temp Measurement interval Register */
+#define QORIQ_TMU_TMTMIR_DFT	0x0000000f
 
-struct qoriq_tmu_regs {
-	u32 tmr;		/* Mode Register */
-#define TMR_DISABLE	0x0
-#define TMR_ME		0x80000000
-#define TMR_ALPF	0x0c000000
-	u32 tsr;		/* Status Register */
-	u32 tmtmir;		/* Temperature measurement interval Register */
-#define TMTMIR_DEFAULT	0x0000000f
-	u8 res0[0x14];
-	u32 tier;		/* Interrupt Enable Register */
-#define TIER_DISABLE	0x0
-	u32 tidr;		/* Interrupt Detect Register */
-	u32 tiscr;		/* Interrupt Site Capture Register */
-	u32 ticscr;		/* Interrupt Critical Site Capture Register */
-	u8 res1[0x10];
-	u32 tmhtcrh;		/* High Temperature Capture Register */
-	u32 tmhtcrl;		/* Low Temperature Capture Register */
-	u8 res2[0x8];
-	u32 tmhtitr;		/* High Temperature Immediate Threshold */
-	u32 tmhtatr;		/* High Temperature Average Threshold */
-	u32 tmhtactr;	/* High Temperature Average Crit Threshold */
-	u8 res3[0x24];
-	u32 ttcfgr;		/* Temperature Configuration Register */
-	u32 tscfgr;		/* Sensor Configuration Register */
-	u8 res4[0x78];
-	struct qoriq_tmu_site_regs site[SITES_MAX];
-	u8 res5[0x9f8];
-	u32 ipbrr0;		/* IP Block Revision Register 0 */
-	u32 ipbrr1;		/* IP Block Revision Register 1 */
-	u8 res6[0x310];
-	u32 ttr0cr;		/* Temperature Range 0 Control Register */
-	u32 ttr1cr;		/* Temperature Range 1 Control Register */
-	u32 ttr2cr;		/* Temperature Range 2 Control Register */
-	u32 ttr3cr;		/* Temperature Range 3 Control Register */
-};
+#define QORIQ_TMU_TIER		0x20	/* Interrupt Enable Register */
+#define QORIQ_TMU_TIER_DISABLE	0x0
+
+#define QORIQ_TMU_TTCFGR	0x80	/* Temp Configuration Register */
+#define QORIQ_TMU_TSCFGR	0x84	/* Sensor Configuration Register */
+
+#define QORIQ_TMU_TRITSR_BASE	0x100	/* Report Immediate Temp Register */
+#define QORIQ_TMU_TRITSR_STEP	0x10
+
+#define QORIQ_TMU_IPBRR0	0xbf8	/* IP Block Revision Register 0 */
+#define QORIQ_TMU_IPBRR1	0xbfc	/* IP Block Revision Register 1 */
+
+#define QORIQ_TMU_TTR0CR	0xf10	/* Temp Range 0 Control Register */
+#define QORIQ_TMU_TTR1CR	0xf14	/* Temp Range 1 Control Register */
+#define QORIQ_TMU_TTR2CR	0xf18	/* Temp Range 2 Control Register */
+#define QORIQ_TMU_TTR3CR	0xf1c	/* Temp Range 3 Control Register */
 
 /*
  * Thermal zone data
  */
 struct qoriq_tmu_data {
+	void __iomem *base;
+	struct regmap *regmap;
+	struct mutex lock;
+	int sensor_id;
 	struct thermal_zone_device *tz;
-	struct qoriq_tmu_regs __iomem *regs;
 	int sensor_id;
 	bool little_endian;
 };
@@ -100,8 +83,12 @@ static int tmu_get_temp(void *p, int *temp)
 	u32 val;
 	struct qoriq_tmu_data *data = p;
 
-	val = tmu_read(data, &data->regs->site[data->sensor_id].tritsr);
+	mutex_lock(&data->lock);
+	regmap_read(data->regmap, QORIQ_TMU_TRITSR_BASE +
+			QORIQ_TMU_TRITSR_STEP * data->sensor_id, &val);
+
 	*temp = (val & 0xff) * 1000;
+	mutex_unlock(&data->lock);
 
 	return 0;
 }
@@ -149,16 +136,18 @@ static int qoriq_tmu_calibration(struct platform_device *pdev)
 	struct device_node *np = pdev->dev.of_node;
 	struct qoriq_tmu_data *data = platform_get_drvdata(pdev);
 
+	regmap_write(data->regmap, QORIQ_TMU_TMR, QORIQ_TMU_TMR_DISABLE);
+
 	if (of_property_read_u32_array(np, "fsl,tmu-range", range, 4)) {
 		dev_err(&pdev->dev, "missing calibration range.\n");
 		return -ENODEV;
 	}
 
 	/* Init temperature range registers */
-	tmu_write(data, range[0], &data->regs->ttr0cr);
-	tmu_write(data, range[1], &data->regs->ttr1cr);
-	tmu_write(data, range[2], &data->regs->ttr2cr);
-	tmu_write(data, range[3], &data->regs->ttr3cr);
+	regmap_write(data->regmap, QORIQ_TMU_TTR0CR, range[0]);
+	regmap_write(data->regmap, QORIQ_TMU_TTR1CR, range[1]);
+	regmap_write(data->regmap, QORIQ_TMU_TTR2CR, range[2]);
+	regmap_write(data->regmap, QORIQ_TMU_TTR3CR, range[3]);
 
 	calibration = of_get_property(np, "fsl,tmu-calibration", &len);
 	if (calibration == NULL || len % 8) {
@@ -168,9 +157,9 @@ static int qoriq_tmu_calibration(struct platform_device *pdev)
 
 	for (i = 0; i < len; i += 8, calibration += 2) {
 		val = of_read_number(calibration, 1);
-		tmu_write(data, val, &data->regs->ttcfgr);
+		regmap_write(data->regmap, QORIQ_TMU_TTCFGR, val);
 		val = of_read_number(calibration + 1, 1);
-		tmu_write(data, val, &data->regs->tscfgr);
+		regmap_write(data->regmap, QORIQ_TMU_TSCFGR, val);
 	}
 
 	return 0;
@@ -178,26 +167,55 @@ static int qoriq_tmu_calibration(struct platform_device *pdev)
 
 static void qoriq_tmu_init_device(struct qoriq_tmu_data *data)
 {
-	/* Disable interrupt, using polling instead */
-	tmu_write(data, TIER_DISABLE, &data->regs->tier);
+ 	/* Disable interrupt, using polling instead */
+	regmap_write(data->regmap, QORIQ_TMU_TIER, QORIQ_TMU_TIER_DISABLE);
 
 	/* Set update_interval */
-	tmu_write(data, TMTMIR_DEFAULT, &data->regs->tmtmir);
+	regmap_write(data->regmap, QORIQ_TMU_TMTMIR, QORIQ_TMU_TMTMIR_DFT);
 
 	/* Disable monitoring */
-	tmu_write(data, TMR_DISABLE, &data->regs->tmr);
+	regmap_write(data->regmap, QORIQ_TMU_TMR, QORIQ_TMU_TMR_DISABLE);
 }
 
+static int qoriq_of_get_sensor_id(struct platform_device *pdev)
+{
+	struct qoriq_tmu_data *data = platform_get_drvdata(pdev);
+	struct device_node *np = pdev->dev.of_node;
+
+	if (of_device_is_compatible(np, "fsl,t102x-tmu"))
+		data->sensor_id = 0;
+	else if (of_device_is_compatible(np, "fsl,t104x-tmu"))
+		data->sensor_id = 2;
+	else if (of_device_is_compatible(np, "fsl,ls1021a-tmu"))
+		data->sensor_id = 0;
+	else if (of_device_is_compatible(np, "fsl,ls1043a-tmu"))
+		data->sensor_id = 3;
+	else if (of_device_is_compatible(np, "fsl,ls2080a-tmu"))
+		data->sensor_id = 4;
+	else
+		return -EINVAL;
+
+	return 0;
+ }
+ 
 static struct thermal_zone_of_device_ops tmu_tz_ops = {
 	.get_temp = tmu_get_temp,
 };
 
+static const struct regmap_config qoriq_tmu_regmap_config = {
+	.reg_bits = 32,
+	.reg_stride = 4,
+	.val_bits = 32,
+};
+
 static int qoriq_tmu_probe(struct platform_device *pdev)
 {
 	int ret;
 	struct qoriq_tmu_data *data;
 	struct device_node *np = pdev->dev.of_node;
 	u32 site = 0;
+	void __iomem *base;
+	u32 tmr = 0;
 
 	if (!np) {
 		dev_err(&pdev->dev, "Device OF-Node is NULL");
@@ -209,6 +227,8 @@ static int qoriq_tmu_probe(struct platform_device *pdev)
 	if (!data)
 		return -ENOMEM;
 
+	mutex_init(&data->lock);
+
 	platform_set_drvdata(pdev, data);
 
 	data->little_endian = of_property_read_bool(np, "little-endian");
@@ -220,19 +240,32 @@ static int qoriq_tmu_probe(struct platform_device *pdev)
 		goto err_iomap;
 	}
 
-	data->regs = of_iomap(np, 0);
-	if (!data->regs) {
+	base = of_iomap(pdev->dev.of_node, 0);
+	if (!base) {
 		dev_err(&pdev->dev, "Failed to get memory region\n");
 		ret = -ENODEV;
 		goto err_iomap;
 	}
 
+	data->base = base;
+	data->regmap = devm_regmap_init_mmio(&pdev->dev, base,
+						 &qoriq_tmu_regmap_config);
+	if (IS_ERR(data->regmap)) {
+		dev_err(&pdev->dev, "Regmap init failed\n");
+		ret = PTR_ERR(data->regmap);
+		goto err_tmu;
+	}
+
 	qoriq_tmu_init_device(data);	/* TMU initialization */
 
 	ret = qoriq_tmu_calibration(pdev);	/* TMU calibration */
 	if (ret < 0)
 		goto err_tmu;
 
+	ret = qoriq_of_get_sensor_id(pdev);
+	if (ret < 0)
+		goto err_tmu;
+
 	data->tz = thermal_zone_of_sensor_register(&pdev->dev, data->sensor_id,
 				data, &tmu_tz_ops);
 	if (IS_ERR(data->tz)) {
@@ -243,13 +276,14 @@ static int qoriq_tmu_probe(struct platform_device *pdev)
 	}
 
 	/* Enable monitoring */
-	site |= 0x1 << (15 - data->sensor_id);
-	tmu_write(data, site | TMR_ME | TMR_ALPF, &data->regs->tmr);
+	tmr |= 0x1 << (15 - data->sensor_id);
+	regmap_write(data->regmap, QORIQ_TMU_TMR, tmr | QORIQ_TMU_TMR_ME |
+			QORIQ_TMU_TMR_ALPF);
 
 	return 0;
 
 err_tmu:
-	iounmap(data->regs);
+	iounmap(base);
 
 err_iomap:
 	platform_set_drvdata(pdev, NULL);
@@ -264,9 +298,9 @@ static int qoriq_tmu_remove(struct platform_device *pdev)
 	thermal_zone_of_sensor_unregister(&pdev->dev, data->tz);
 
 	/* Disable monitoring */
-	tmu_write(data, TMR_DISABLE, &data->regs->tmr);
+	regmap_write(data->regmap, QORIQ_TMU_TMR, QORIQ_TMU_TMR_DISABLE);
 
-	iounmap(data->regs);
+	iounmap(data->base);
 	platform_set_drvdata(pdev, NULL);
 
 	return 0;
@@ -279,9 +313,9 @@ static int qoriq_tmu_suspend(struct device *dev)
 	struct qoriq_tmu_data *data = dev_get_drvdata(dev);
 
 	/* Disable monitoring */
-	tmr = tmu_read(data, &data->regs->tmr);
-	tmr &= ~TMR_ME;
-	tmu_write(data, tmr, &data->regs->tmr);
+	regmap_read(data->regmap, QORIQ_TMU_TMR, &tmr);
+	tmr &= ~QORIQ_TMU_TMR_ME;
+	regmap_write(data->regmap, QORIQ_TMU_TMR, tmr);
 
 	return 0;
 }
@@ -292,16 +326,16 @@ static int qoriq_tmu_resume(struct device *dev)
 	struct qoriq_tmu_data *data = dev_get_drvdata(dev);
 
 	/* Enable monitoring */
-	tmr = tmu_read(data, &data->regs->tmr);
-	tmr |= TMR_ME;
-	tmu_write(data, tmr, &data->regs->tmr);
+	regmap_read(data->regmap, QORIQ_TMU_TMR, &tmr);
+	tmr |= QORIQ_TMU_TMR_ME;
+	regmap_write(data->regmap, QORIQ_TMU_TMR, tmr);
 
 	return 0;
 }
 #endif
 
 static SIMPLE_DEV_PM_OPS(qoriq_tmu_pm_ops,
-			 qoriq_tmu_suspend, qoriq_tmu_resume);
+			qoriq_tmu_suspend, qoriq_tmu_resume);
 
 static const struct of_device_id qoriq_tmu_match[] = {
 	{ .compatible = "fsl,qoriq-tmu", },
-- 
2.7.4

