From 55a80ac5815320838d386ba85c82fef38ddc9d3e Mon Sep 17 00:00:00 2001
From: Guanhua Gao <guanhua.gao@nxp.com>
Date: Fri, 2 Mar 2018 11:03:17 +0800
Subject: [PATCH 665/666] crypto: caam/qi2 - fix probing order dependencies
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

commit 63f536f4661f9a97aebd6e943ad645b1b3fa70ee from
https://github.com/qoriq-open-source/linux.git

1. If no DPIO devices are found during probe, it may be either because
there's none available or because they haven't been probed yet.
Request deferred probing in case it's the latter.

2. MC portals may not be available at probe time due to dependencies
on other modules.
Check the return value of the MC portal allocation function and
defer probing in case it's not available yet (-ENXIO).
For all other error cases the behaviour stays the same.

Integrated-by: Guanhua Gao <guanhua.gao@nxp.com>
Signed-off-by: Horia GeantÄƒ horia.geanta@nxp.com
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/crypto/caam/Kconfig       |  2 +-
 drivers/crypto/caam/caamalg_qi2.c | 15 +++++++++++++--
 drivers/crypto/caam/caampkc.c     |  2 +-
 3 files changed, 15 insertions(+), 4 deletions(-)
 mode change 100644 => 100755 drivers/crypto/caam/Kconfig
 mode change 100644 => 100755 drivers/crypto/caam/caampkc.c

diff --git a/drivers/crypto/caam/Kconfig b/drivers/crypto/caam/Kconfig
old mode 100644
new mode 100755
index 27093ec..168c39e
--- a/drivers/crypto/caam/Kconfig
+++ b/drivers/crypto/caam/Kconfig
@@ -100,7 +100,7 @@ config CRYPTO_DEV_FSL_CAAM_CRYPTO_API
 
 config CRYPTO_DEV_FSL_CAAM_CRYPTO_API_QI
 	tristate "Queue Interface as Crypto API backend"
-	depends on FSL_SDK_DPA && NET
+	depends on FSL_QMAN && NET
 	default y
 	select CRYPTO_AUTHENC
 	select CRYPTO_BLKCIPHER
diff --git a/drivers/crypto/caam/caamalg_qi2.c b/drivers/crypto/caam/caamalg_qi2.c
index e9174cf..67d71e3 100644
--- a/drivers/crypto/caam/caamalg_qi2.c
+++ b/drivers/crypto/caam/caamalg_qi2.c
@@ -5120,8 +5120,15 @@ static int __cold dpaa2_dpseci_dpio_setup(struct dpaa2_caam_priv *priv)
 		/* Register notification callbacks */
 		err = dpaa2_io_service_register(NULL, nctx);
 		if (unlikely(err)) {
-			dev_err(dev, "notification register failed\n");
+			dev_dbg(dev, "No affine DPIO for cpu %d\n", cpu);
 			nctx->cb = NULL;
+			/*
+			 * If no affine DPIO for this core, there's probably
+			 * none available for next cores either. Signal we want
+			 * to retry later, in case the DPIO devices weren't
+			 * probed yet.
+			 */
+			err = -EPROBE_DEFER;
 			goto err;
 		}
 
@@ -5599,7 +5606,11 @@ static int dpaa2_caam_probe(struct fsl_mc_device *dpseci_dev)
 	/* Obtain a MC portal */
 	err = fsl_mc_portal_allocate(dpseci_dev, 0, &priv->mc_io);
 	if (err) {
-		dev_err(dev, "MC portal allocation failed\n");
+		if (err == -ENXIO)
+			err = -EPROBE_DEFER;
+		else
+			dev_err(dev, "MC portal allocation failed\n");
+
 		goto err_dma_mask;
 	}
 
diff --git a/drivers/crypto/caam/caampkc.c b/drivers/crypto/caam/caampkc.c
old mode 100644
new mode 100755
index 7a897209..d58f8ea
--- a/drivers/crypto/caam/caampkc.c
+++ b/drivers/crypto/caam/caampkc.c
@@ -911,7 +911,7 @@ static int caam_rsa_set_priv_key(struct crypto_akcipher *tfm, const void *key,
 	return -ENOMEM;
 }
 
-static unsigned int caam_rsa_max_size(struct crypto_akcipher *tfm)
+static int caam_rsa_max_size(struct crypto_akcipher *tfm)
 {
 	struct caam_rsa_ctx *ctx = akcipher_tfm_ctx(tfm);
 
-- 
2.7.4

