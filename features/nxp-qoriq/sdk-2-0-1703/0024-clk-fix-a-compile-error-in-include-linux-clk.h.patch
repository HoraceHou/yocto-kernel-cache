From d74f23e3d3f8a7129badb634f3080fd0d40ba20c Mon Sep 17 00:00:00 2001
From: Chenhui Zhao <chenhui.zhao@nxp.com>
Date: Fri, 22 Jan 2016 17:12:40 +0800
Subject: [PATCH 024/666] clk: fix a compile error in include/linux/clk.h

When compiling with mpc85xx_smp_defconfig, got an error:

drivers/ata/libahci.o: In function `clk_get_num_parents':
/home/zch/gitrepo/linux-sdk/include/linux/clk.h:462: multiple definition
of `clk_get_num_parents'
drivers/ata/ahci.o:/home/zch/gitrepo/linux-sdk/include/linux/clk.h:462:
first defined here

Signed-off-by: Chenhui Zhao <chenhui.zhao@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 include/linux/clk.h     |  2 +-
 include/linux/uaccess.h | 10 ++++------
 2 files changed, 5 insertions(+), 7 deletions(-)
 mode change 100644 => 100755 include/linux/uaccess.h

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 49b6691..9c7d80e 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -506,7 +506,7 @@ static inline struct clk *clk_get_parent(struct clk *clk)
 	return NULL;
 }
 
-unsigned int clk_get_num_parents(struct clk *clk)
+static inline unsigned int clk_get_num_parents(struct clk *clk)
 {
 	return 0;
 }
diff --git a/include/linux/uaccess.h b/include/linux/uaccess.h
old mode 100644
new mode 100755
index d315913..8a48342
--- a/include/linux/uaccess.h
+++ b/include/linux/uaccess.h
@@ -133,8 +133,6 @@ extern unsigned long
 _copy_to_user(void __user *, const void *, unsigned long);
 #endif
 
-extern void __compiletime_error("usercopy buffer size is too small")
-__bad_copy_user(void);
 
 static inline void copy_user_overflow(int size, unsigned long count)
 {
@@ -154,8 +152,8 @@ copy_from_user(void *to, const void __user *from, unsigned long n)
 		n = _copy_from_user(to, from, n);
 	} else if (!__builtin_constant_p(n))
 		copy_user_overflow(sz, n);
-	else
-		__bad_copy_user();
+	else {
+	}
 
 	return n;
 }
@@ -173,8 +171,8 @@ copy_to_user(void __user *to, const void *from, unsigned long n)
 		n = _copy_to_user(to, from, n);
 	} else if (!__builtin_constant_p(n))
 		copy_user_overflow(sz, n);
-	else
-		__bad_copy_user();
+	else {
+	}
 
 	return n;
 }
-- 
2.7.4

