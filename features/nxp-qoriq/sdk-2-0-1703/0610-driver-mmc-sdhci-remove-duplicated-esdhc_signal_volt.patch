From 74ac27b2f9268856e4b81f0816edabf6c4d475c7 Mon Sep 17 00:00:00 2001
From: Xulin Sun <xulin.sun@windriver.com>
Date: Mon, 28 May 2018 16:14:08 +0800
Subject: [PATCH 610/666] driver: mmc: sdhci: remove duplicated
 esdhc_signal_voltage_switch

Removed duplicated esdhc_signal_voltage_switch() definition.

Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/mmc/host/sdhci-esdhc.h    | 23 ++++++-----
 drivers/mmc/host/sdhci-of-esdhc.c | 82 +++++++++------------------------------
 2 files changed, 33 insertions(+), 72 deletions(-)
 mode change 100644 => 100755 drivers/mmc/host/sdhci-esdhc.h
 mode change 100644 => 100755 drivers/mmc/host/sdhci-of-esdhc.c

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
old mode 100644
new mode 100755
index c319281..f4735f8
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -24,16 +24,20 @@
 				SDHCI_QUIRK_PIO_NEEDS_DELAY | \
 				SDHCI_QUIRK_NO_HISPD_BIT)
 
-/* pltfm-specific */
-#define ESDHC_HOST_CONTROL_LE	0x20
+#define ESDHC_PROCTL		0x28
+#define ESDHC_VOLT_SEL		0x00000400
 
-/*
- * eSDHC register definition
- */
+#define ESDHC_SYSTEM_CONTROL	0x2c
+#define ESDHC_CLOCK_MASK	0x0000fff0
+#define ESDHC_PREDIV_SHIFT	8
+#define ESDHC_DIVIDER_SHIFT	4
+#define ESDHC_CLOCK_CRDEN	0x00000008
+#define ESDHC_CLOCK_PEREN	0x00000004
+#define ESDHC_CLOCK_HCKEN	0x00000002
+#define ESDHC_CLOCK_IPGEN	0x00000001
 
-/* Present State Register */
-#define ESDHC_PRSSTAT			0x24
-#define ESDHC_CLOCK_STABLE		0x00000008
+#define ESDHC_PRESENT_STATE	0x24
+#define ESDHC_CLOCK_STABLE	0x00000008
 #define ESDHC_DLSL_MASK		0x0f000000
 #define ESDHC_CLSL_MASK		0x00800000
 
@@ -49,7 +53,8 @@
 #define ESDHC_CLOCK_CONTROL	0x144
 #define ESDHC_LPBK_CLK_SEL	0x80000000
 #define ESDHC_CMD_CLK_CTL	0x00008000
-
+/* pltfm-specific */
+#define ESDHC_HOST_CONTROL_LE	0x20
 /* Protocol Control Register */
 #define ESDHC_PROCTL			0x28
 #define ESDHC_VOLT_SEL			0x00000400
diff --git a/drivers/mmc/host/sdhci-of-esdhc.c b/drivers/mmc/host/sdhci-of-esdhc.c
old mode 100644
new mode 100755
index 3590aa3..1fd9b52
--- a/drivers/mmc/host/sdhci-of-esdhc.c
+++ b/drivers/mmc/host/sdhci-of-esdhc.c
@@ -656,7 +656,7 @@ static void esdhc_of_set_clock(struct sdhci_host *host, unsigned int clock)
 
 	/* Wait max 20 ms */
 	timeout = ktime_add_ms(ktime_get(), 20);
-	while (!(sdhci_readl(host, ESDHC_PRSSTAT) & ESDHC_CLOCK_STABLE)) {
+	while (!(sdhci_readl(host, ESDHC_PRESENT_STATE) & ESDHC_CLOCK_STABLE)) {
 		if (ktime_after(ktime_get(), timeout)) {
 			pr_err("%s: Internal clock never stabilised.\n",
 				mmc_hostname(host->mmc));
@@ -708,7 +708,7 @@ static void esdhc_clock_enable(struct sdhci_host *host, bool enable)
 	/* Wait max 20 ms */
 	timeout = ktime_add_ms(ktime_get(), 20);
 	val = ESDHC_CLOCK_STABLE;
-	while (!(sdhci_readl(host, ESDHC_PRSSTAT) & val)) {
+	while (!(sdhci_readl(host, ESDHC_PRESENT_STATE) & val)) {
 		if (ktime_after(ktime_get(), timeout)) {
 			pr_err("%s: Internal clock never stabilised.\n",
 				mmc_hostname(host->mmc));
@@ -744,57 +744,7 @@ static const struct of_device_id scfg_device_ids[] = {
 #define SDHCIOVSELCR_VSELVAL	0x60000000
 #define SDHCIOVSELCR_SDHC_VS	0x00000001
 
-static int esdhc_signal_voltage_switch(struct mmc_host *mmc,
-				       struct mmc_ios *ios)
-{
-	struct sdhci_host *host = mmc_priv(mmc);
-	struct device_node *scfg_node;
-	void __iomem *scfg_base = NULL;
-	u32 sdhciovselcr;
-	u32 val;
 
-	/*
-	 * Signal Voltage Switching is only applicable for Host Controllers
-	 * v3.00 and above.
-	 */
-	if (host->version < SDHCI_SPEC_300)
-		return 0;
-
-	val = sdhci_readl(host, ESDHC_PROCTL);
-
-	switch (ios->signal_voltage) {
-	case MMC_SIGNAL_VOLTAGE_330:
-		val &= ~ESDHC_VOLT_SEL;
-		sdhci_writel(host, val, ESDHC_PROCTL);
-		return 0;
-	case MMC_SIGNAL_VOLTAGE_180:
-		scfg_node = of_find_matching_node(NULL, scfg_device_ids);
-		if (scfg_node)
-			scfg_base = of_iomap(scfg_node, 0);
-		if (scfg_base) {
-			sdhciovselcr = SDHCIOVSELCR_TGLEN |
-				       SDHCIOVSELCR_VSELVAL;
-			iowrite32be(sdhciovselcr,
-				scfg_base + SCFG_SDHCIOVSELCR);
-
-			val |= ESDHC_VOLT_SEL;
-			sdhci_writel(host, val, ESDHC_PROCTL);
-			mdelay(5);
-
-			sdhciovselcr = SDHCIOVSELCR_TGLEN |
-				       SDHCIOVSELCR_SDHC_VS;
-			iowrite32be(sdhciovselcr,
-				scfg_base + SCFG_SDHCIOVSELCR);
-			iounmap(scfg_base);
-		} else {
-			val |= ESDHC_VOLT_SEL;
-			sdhci_writel(host, val, ESDHC_PROCTL);
-		}
-		return 0;
-	default:
-		return 0;
-	}
-}
 
 static int esdhc_execute_tuning(struct mmc_host *mmc, u32 opcode)
 {
@@ -927,10 +877,7 @@ static void esdhc_set_uhs_signaling(struct sdhci_host *host, unsigned int uhs)
 		sdhci_writew(host, ctrl_2, SDHCI_HOST_CONTROL2);
 }
 
-static const struct of_device_id scfg_device_ids[] = {
-	{ .compatible = "fsl,t1040-scfg", },
-	{}
-};
+
 #define SCFG_SDHCIOVSELCR	0x408
 #define SDHCIOVSELCR_TGLEN	0x80000000
 #define SDHCIOVSELCR_SDHC_VS	0x00000001
@@ -958,10 +905,20 @@ void esdhc_signal_voltage_switch(struct sdhci_host *host,
 		}
 		if (scfg_base) {
 			scfg_sdhciovselcr = SDHCIOVSELCR_TGLEN |
+					    SDHCIOVSELCR_VSELVAL;
+			iowrite32be(scfg_sdhciovselcr,
+				scfg_base + SCFG_SDHCIOVSELCR);
+
+			val |= ESDHC_VOLT_SEL;
+			sdhci_writel(host, val, ESDHC_PROCTL);
+			mdelay(5);
+
+			scfg_sdhciovselcr = SDHCIOVSELCR_TGLEN |
 					    SDHCIOVSELCR_SDHC_VS;
 			iowrite32be(scfg_sdhciovselcr,
 				scfg_base + SCFG_SDHCIOVSELCR);
 			iounmap(scfg_base);
+			break;
 		}
 		val |= ESDHC_VOLT_SEL;
 		sdhci_writel(host, val, ESDHC_PROCTL);
@@ -1055,14 +1012,14 @@ static void esdhc_init(struct platform_device *pdev, struct sdhci_host *host)
 	const __be32 *val;
 	int size;
 	struct clk *clk;
-	u32 val;
 	u16 host_ver;
 	u32 svr;
+	u32 val1;
 
 	pltfm_host = sdhci_priv(host);
 	esdhc = sdhci_pltfm_priv(pltfm_host);
 
-	svr = guts_get_svr();
+	svr = fsl_guts_get_svr();
 	esdhc->soc_ver = SVR_SOC_VER(svr);
 	esdhc->soc_rev = SVR_REV(svr);
 
@@ -1104,9 +1061,9 @@ static void esdhc_init(struct platform_device *pdev, struct sdhci_host *host)
 
 	if (esdhc->peripheral_clock) {
 		esdhc_clock_enable(host, false);
-		val = sdhci_readl(host, ESDHC_DMA_SYSCTL);
-		val |= ESDHC_PERIPHERAL_CLK_SEL;
-		sdhci_writel(host, val, ESDHC_DMA_SYSCTL);
+		val1 = sdhci_readl(host, ESDHC_DMA_SYSCTL);
+		val1 |= ESDHC_PERIPHERAL_CLK_SEL;
+		sdhci_writel(host, val1, ESDHC_DMA_SYSCTL);
 		esdhc_clock_enable(host, true);
 	}
 }
@@ -1132,8 +1089,7 @@ static int sdhci_esdhc_probe(struct platform_device *pdev)
 	if (IS_ERR(host))
 		return PTR_ERR(host);
 
-	host->mmc_host_ops.start_signal_voltage_switch =
-		esdhc_signal_voltage_switch;
+
 	host->mmc_host_ops.execute_tuning = esdhc_execute_tuning;
 	host->tuning_delay = 1;
 
-- 
2.7.4

