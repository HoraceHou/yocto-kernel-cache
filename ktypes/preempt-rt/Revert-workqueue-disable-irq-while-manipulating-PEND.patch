From be8c854bd7d2f45027b5c0a52bb4202b98a0437a Mon Sep 17 00:00:00 2001
From: Rui Wang <rui.wang@windriver.com>
Date: Tue, 18 Dec 2018 02:43:22 +0000
Subject: [PATCH 1/2] Revert "workqueue: disable irq while manipulating
 PENDING"

This reverts commit de9a32dfd97438d93b0b362297886e5318af30c2.

That patch disables irq while queuing tasks in workqueue, which will
cause "sleeping function called from invalid context" bug, becuase
some might-sleep function is called in the atomic section, such as
rt_spin_lock.

Signed-off-by: Rui Wang <rui.wang@windriver.com>
---
 kernel/workqueue.c |   12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/kernel/workqueue.c b/kernel/workqueue.c
index 4790ff0..b8cc3a2 100644
--- a/kernel/workqueue.c
+++ b/kernel/workqueue.c
@@ -1513,14 +1513,14 @@ bool queue_work_on(int cpu, struct workqueue_struct *wq,
 	bool ret = false;
 	unsigned long flags;
 
-	local_irq_save(flags);
+	local_lock_irqsave(pendingb_lock,flags);
 
 	if (!test_and_set_bit(WORK_STRUCT_PENDING_BIT, work_data_bits(work))) {
 		__queue_work(cpu, wq, work);
 		ret = true;
 	}
 
-	local_irq_restore(flags);
+	local_unlock_irqrestore(pendingb_lock, flags);
 	return ret;
 }
 EXPORT_SYMBOL(queue_work_on);
@@ -1589,14 +1589,14 @@ bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
 	unsigned long flags;
 
 	/* read the comment in __queue_work() */
-	local_irq_save(flags);
+	local_lock_irqsave(pendingb_lock, flags);
 
 	if (!test_and_set_bit(WORK_STRUCT_PENDING_BIT, work_data_bits(work))) {
 		__queue_delayed_work(cpu, wq, dwork, delay);
 		ret = true;
 	}
 
-	local_irq_restore(flags);
+	local_unlock_irqrestore(pendingb_lock, flags);
 	return ret;
 }
 EXPORT_SYMBOL(queue_delayed_work_on);
@@ -3015,10 +3015,10 @@ bool cancel_work_sync(struct work_struct *work)
  */
 bool flush_delayed_work(struct delayed_work *dwork)
 {
-	local_irq_disable();
+	local_lock_irq(pendingb_lock);
 	if (del_timer_sync(&dwork->timer))
 		__queue_work(dwork->cpu, dwork->wq, &dwork->work);
-	local_irq_enable();
+	local_unlock_irq(pendingb_lock);
 	return flush_work(&dwork->work);
 }
 EXPORT_SYMBOL(flush_delayed_work);
-- 
1.7.9.5

